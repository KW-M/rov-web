var R=Object.defineProperty;var L=(o,e,t)=>e in o?R(o,e,{enumerable:!0,configurable:!0,writable:!0,value:t}):o[e]=t;var r=(o,e,t)=>(L(o,typeof e!="symbol"?e+"":e,t),t);import{L as h,D as f,a as b,b as D}from"./consts-87a546d8.js";import{S,R as T,D as k,V as v,a as i,b as s,P as m,M as C,g as w,c as E}from"./simplepeer-599b44cc.js";const g=globalThis.livekitServerSDK.AccessToken;function I(o,e,t){const c=new g(o,e,{identity:t,ttl:86400});return c.addGrant({room:t,roomJoin:!0,roomCreate:!0,roomAdmin:!0,roomList:!0,canPublish:!0,canSubscribe:!1,canPublishData:!0}),c.toJwt()}function A(o,e,t,c){const n=new g(o,e,{identity:c,name:c,ttl:21600});return n.addGrant({room:t,roomList:!0,roomJoin:!0,canPublish:!0,canSubscribe:!0,canPublishData:!0}),n.toJwt()}let l=null;const N=o=>(l=new S(y,e=>console.log("SIMPLEPEER new conn state:",e),e=>{V(new Uint8Array(e))}),l.start({initiator:!1,trickle:!1,streams:[o]}),l),K=o=>{l&&l.handleSignalingMsg(o)};function y(o){let e=new Uint8Array(o);!e||e.length===0||(console.log("GOT DC DATA:",e),K(e))}const M=globalThis.livekitServerSDK.RoomServiceClient;async function U(o,e){return await o.createRoom({name:e,maxParticipants:12,emptyTimeout:30})}async function _(o,e,t){return await o.updateRoomMetadata(e,t)}async function O(o){return(await o.listRooms()).map(t=>t.name)}async function H(o,e){const t=A(e.CloudAPIKey,e.CloudSecretKey,e.RovRoomName,"PERSON"+Date.now().toString());await _(o,e.RovRoomName,JSON.stringify({accessToken:t}))}class F{constructor(e,t,c){r(this,"roomId");r(this,"hostUrl");r(this,"accessToken");r(this,"roomConn");r(this,"videoElem");r(this,"onMesssageRecived");r(this,"onConnStateChange");this.hostUrl=e,this.onMesssageRecived=n=>t(n,this.roomId,this.hostUrl),this.onConnStateChange=n=>c(n,this.roomId,this.hostUrl),this.roomConn=new T({reconnectPolicy:new k,dynacast:!0,videoCaptureDefaults:{resolution:v.h1080.resolution},publishDefaults:{videoCodec:"h264"}})}async start(e,t){console.log(`Starting conn with ${e} via ${this.hostUrl} token = ${t}`);const c=Date.now();return this.roomId=e,this.roomConn.on(i.SignalConnected,async()=>{const n=Date.now()-c;s(`signal connection established in ${n}ms`);let a=await this.roomConn.localParticipant.setCameraEnabled(!0);console.log("camResult:",a)}).on(i.Connected,async()=>{s(`Connected to room: ${this.roomConn.name}`)}).on(i.Disconnected,n=>{this.roomConn&&(s("disconnected from room",{reason:n},this.roomConn.localParticipant),this.roomConn.participants.forEach(a=>{}))}).on(i.Reconnecting,()=>{s("Reconnecting to room")}).on(i.Reconnected,async()=>{s("Successfully reconnected. server",await this.roomConn.engine.getConnectedServerAddress())}).on(i.ParticipantConnected,async n=>{s("participant",n.identity,"connected",n.metadata),n.on(m.TrackMuted,a=>{s("track was muted",a.trackSid,n.identity)}).on(m.TrackUnmuted,a=>{s("track was unmuted",a.trackSid,n.identity)}).on(m.IsSpeakingChanged,()=>{s("ParticipantEvent.IsSpeakingChanged",n.isSpeaking)}).on(m.ConnectionQualityChanged,()=>{s("ParticipantEvent.ConnectionQualityChanged",n.connectionQuality)})}).on(i.ParticipantDisconnected,n=>{s("participant",n.sid,"disconnected")}).on(i.MediaDevicesError,n=>{const a=C.getFailure(n);s("media device failure",a)}).on(i.ConnectionQualityChanged,(n,a)=>{s("connection quality changed",a==null?void 0:a.identity,n)}).on(i.DataReceived,async(n,a)=>{const u=a?a.identity:"SERVER";s(`Got dataReceived from ${u} via ${this.hostUrl}|${this.roomId}`,f(n)),this.onMesssageRecived(n,this.roomId,this.hostUrl)}).on(i.RoomMetadataChanged,n=>{s("new metadata for room",n)}).on(i.MediaDevicesChanged,()=>{s("MediaDevicesChanged")}).on(i.LocalTrackUnpublished,(n,a)=>{s("LocalTrackUnpublished!!!?",n,a)}).on(i.LocalTrackPublished,(n,a)=>{s("LocalVideoTrackPublished ",n,a)}).on(i.MediaDevicesError,n=>{const a=C.getFailure(n);s("media device failure",a)}).on(i.ConnectionQualityChanged,(n,a)=>{s("connection quality changed",a==null?void 0:a.identity,n)}).on(i.TrackSubscribed,(n,a,u)=>{s("subscribed to track _THIS SHOULDN'T HAPPEN on BACKEND??_",a.trackSid,u.identity)}).on(i.TrackUnsubscribed,(n,a,u)=>{s("unsubscribed from track _THIS SHOULDN'T HAPPEN on BACKEND??_",a.trackSid)}).on(i.AudioPlaybackStatusChanged,()=>{s("AudioPlaybackStatusChanged _THIS SHOULDN'T HAPPEN on BACKEND??_",this.roomConn.canPlaybackAudio)}),await this.roomConn.connect(w(this.hostUrl),t,b),console.info("connected to room",this.roomConn.name,this.roomConn),!0}sendMessage(e,t,c=!1){console.log("sendMessage() to driver/spectator ",e),this.roomConn.localParticipant.publishData(e,E.RELIABLE)}close(){console.info("Closing Livekit Connection: ",this.roomId,this.hostUrl),this.roomConn&&this.roomConn.disconnect(!0)}}const P=new F(h,(o,e,t)=>{y(o)},(o,e,t)=>{console.log("Cloud Conn State Changed: "+o,e,t)});async function $(o){if(!o.CloudAPIKey||!o.CloudSecretKey||!o.RovRoomName)throw new Error("Missing some required livekit setup url query params.");o.ForceLocal?D:h;{const e=I(o.CloudAPIKey,o.CloudSecretKey,o.RovRoomName),t=new M(h,o.CloudAPIKey,o.CloudSecretKey);await U(t,o.RovRoomName),await H(t,o),await P.start(o.RovRoomName,e);let c=await O(t);console.log("cloud roomList",c)}return!0}function V(o){P.sendMessage(o)}const d=new URLSearchParams(location.search);$({ForceLocal:(d.get("ForceLocal")||"").toLowerCase()==="true",RovRoomName:d.get("RovRoomName"),CloudAPIKey:d.get("CloudAPIKey"),CloudSecretKey:d.get("CloudSecretKey"),LocalAPIKey:d.get("LocalAPIKey"),LocalSecretKey:d.get("LocalSecretKey")}).then(async()=>{console.log("connected?");const o=await navigator.mediaDevices.getUserMedia({video:!0,audio:!1});N(o)});
//# sourceMappingURL=backend-765ddea5.js.map
