// @generated by protobuf-ts 2.9.4 with parameter long_type_number
// @generated from protobuf file "protobufs/rov_actions.proto" (package "rov_actions_proto", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
// enum string {
//     // H264 is a widely supported codec that is hardware accelerated on most devices. Has the lowest quality per bitrate
//     H264 = 0;
//     // VP8 is a codec that is supported by most browsers but is not hardware accelerated on most devices. Has better quality per bitrate than H264
//     VP8 = 1;
//     // VP9 is a codec that is supported by most browsers but is not hardware accelerated on most devices. Uses scalable encoding and very high quality per bitrate
//     VP9 = 2;
//     // AV1 is a codec that is supported by FEW browsers and is not hardware accelerated on most devices. Uses scalable encoding and highest quality per bitrate
//     AV1 = 3;
// }

/**
 * @generated from protobuf message rov_actions_proto.VideoSenderStats
 */
export interface VideoSenderStats {
    /**
     * @generated from protobuf field: optional string encoderImplementation = 1;
     */
    encoderImplementation?: string;
    /**
     * @generated from protobuf field: optional bool powerEfficientEncoder = 2;
     */
    powerEfficientEncoder?: boolean;
    /**
     * @generated from protobuf field: optional string qualityLimitationReason = 3;
     */
    qualityLimitationReason?: string;
    /**
     * @generated from protobuf field: optional float cpuLimitedQualityDurration = 4;
     */
    cpuLimitedQualityDurration?: number;
    /**
     * @generated from protobuf field: optional float bandwidthLimitedQualityDurration = 5;
     */
    bandwidthLimitedQualityDurration?: number;
    /**
     * @generated from protobuf field: optional float otherLimitedQualityDurration = 6;
     */
    otherLimitedQualityDurration?: number;
    /**
     * @generated from protobuf field: optional float noLimitedQualityDurration = 7;
     */
    noLimitedQualityDurration?: number;
    /**
     * @generated from protobuf field: optional float totalPacketSendDelay = 8;
     */
    totalPacketSendDelay?: number;
    /**
     * @generated from protobuf field: optional float retransmittedBytesSent = 9;
     */
    retransmittedBytesSent?: number;
    /**
     * @generated from protobuf field: optional string scalabilityMode = 10;
     */
    scalabilityMode?: string;
    /**
     * @generated from protobuf field: optional uint32 qualityLimitationResolutionChanges = 11;
     */
    qualityLimitationResolutionChanges?: number;
    /**
     * @generated from protobuf field: optional uint32 frameWidth = 12;
     */
    frameWidth?: number;
    /**
     * @generated from protobuf field: optional uint32 frameHeight = 13;
     */
    frameHeight?: number;
    /**
     * @generated from protobuf field: optional uint32 framesPerSecond = 14;
     */
    framesPerSecond?: number;
    /**
     * @generated from protobuf field: optional string videoCodec = 16;
     */
    videoCodec?: string;
    /**
     * @generated from protobuf field: optional string videoSdpFmtpLine = 15;
     */
    videoSdpFmtpLine?: string;
}
/**
 * @generated from protobuf message rov_actions_proto.VideoRecieverStats
 */
export interface VideoRecieverStats {
    /**
     * @generated from protobuf field: optional bool hung = 1;
     */
    hung?: boolean;
    /**
     * @generated from protobuf field: optional uint32 frameWidth = 2;
     */
    frameWidth?: number;
    /**
     * @generated from protobuf field: optional uint32 frameHeight = 3;
     */
    frameHeight?: number;
    /**
     * @generated from protobuf field: optional uint32 framesPerSecond = 4;
     */
    framesPerSecond?: number;
    /**
     * @generated from protobuf field: optional float currentRoundTripTime = 5;
     */
    currentRoundTripTime?: number;
    /**
     * @generated from protobuf field: optional float jitterBufferDelay = 6;
     */
    jitterBufferDelay?: number;
    /**
     * @generated from protobuf field: optional float jitter = 7;
     */
    jitter?: number;
    /**
     * @generated from protobuf field: optional uint32 nackCount = 8;
     */
    nackCount?: number;
    /**
     * @generated from protobuf field: optional uint32 pliCount = 9;
     */
    pliCount?: number;
    /**
     * @generated from protobuf field: optional uint32 freezeCount = 10;
     */
    freezeCount?: number;
    /**
     * @generated from protobuf field: optional float totalFreezeTime = 11;
     */
    totalFreezeTime?: number;
    /**
     * @generated from protobuf field: optional float estimatedPlayoutDelay = 12;
     */
    estimatedPlayoutDelay?: number;
    /**
     * @generated from protobuf field: optional string videoCodec = 13;
     */
    videoCodec?: string;
    /**
     * @generated from protobuf field: optional string videoSdpFmtpLine = 14;
     */
    videoSdpFmtpLine?: string;
}
/**
 * @generated from protobuf message rov_actions_proto.VideoBaseStats
 */
export interface VideoBaseStats {
    /**
     * @generated from protobuf field: uint32 bitrateReceive = 7;
     */
    bitrateReceive: number;
    /**
     * @generated from protobuf field: uint32 bitrateSend = 8;
     */
    bitrateSend: number;
    /**
     * @generated from protobuf field: uint32 availableIncomingBitrate = 9;
     */
    availableIncomingBitrate: number;
    /**
     * @generated from protobuf field: uint32 availableOutgoingBitrate = 10;
     */
    availableOutgoingBitrate: number;
    /**
     * @generated from protobuf field: repeated rov_actions_proto.VideoSenderStats senderLayerStats = 11;
     */
    senderLayerStats: VideoSenderStats[]; // optional
    /**
     * @generated from protobuf field: rov_actions_proto.VideoRecieverStats recieverStats = 12;
     */
    recieverStats?: VideoRecieverStats; // optional
    /**
     * @generated from protobuf field: string rtcStatsJson = 13;
     */
    rtcStatsJson: string; // optional json string of the full webrtc stats object
}
/**
 * @generated from protobuf message rov_actions_proto.VideoStreamOptions
 */
export interface VideoStreamOptions {
    /**
     * Desired height of the base video stream in pixels
     *
     * @generated from protobuf field: uint32 Height = 1 [json_name = "Height"];
     */
    height: number;
    /**
     * not used yet as the video stream width is always set by it's intrinsic aspect ratio
     *
     * @generated from protobuf field: uint32 Width = 2 [json_name = "Width"];
     */
    width: number;
    /**
     * Desired frames per second of the video stream
     *
     * @generated from protobuf field: uint32 Fps = 3 [json_name = "Fps"];
     */
    fps: number;
    /**
     * Desired max average bitrate of the video stream in bits per second
     *
     * @generated from protobuf field: uint32 MaxBitrate = 4 [json_name = "MaxBitrate"];
     */
    maxBitrate: number;
}
/**
 * @generated from protobuf message rov_actions_proto.SetLivekitVideoOptionsAction
 */
export interface SetLivekitVideoOptionsAction {
    /**
     * Enable / disable publishing of the livekit video stream(s)
     *
     * @generated from protobuf field: bool Enabled = 1 [json_name = "Enabled"];
     */
    enabled: boolean;
    /**
     * The codec to use for the video stream
     *
     * @generated from protobuf field: string Codec = 2 [json_name = "Codec"];
     */
    codec: string;
    /**
     * allow livekit to publish a second video stream if needed with a more widely supported codec like H264 or VP8
     *
     * @generated from protobuf field: bool AllowBackupCodec = 3 [json_name = "AllowBackupCodec"];
     */
    allowBackupCodec: boolean;
    /**
     * The base options for the livekit video stream
     *
     * @generated from protobuf field: rov_actions_proto.VideoStreamOptions BaseStream = 4 [json_name = "BaseStream"];
     */
    baseStream?: VideoStreamOptions;
    /**
     * additonal layers to add to the livekit video stream for simulcast (leave empty for no simulcast)
     *
     * @generated from protobuf field: repeated rov_actions_proto.VideoStreamOptions SimulcastLayers = 5 [json_name = "SimulcastLayers"];
     */
    simulcastLayers: VideoStreamOptions[];
}
/**
 * @generated from protobuf message rov_actions_proto.SetSimplePeerVideoOptionsAction
 */
export interface SetSimplePeerVideoOptionsAction {
    /**
     * Enable / disable publishing of the simplePeer video stream(s)
     *
     * @generated from protobuf field: bool Enabled = 1 [json_name = "Enabled"];
     */
    enabled: boolean;
    /**
     * Desired bitrate of the video stream in bits per second
     *
     * @generated from protobuf field: uint32 Bitrate = 2 [json_name = "Bitrate"];
     */
    bitrate: number;
    /**
     * The codec to use for the video stream
     *
     * @generated from protobuf field: string Codec = 3 [json_name = "Codec"];
     */
    codec: string;
    /**
     * The base options for the livekit video stream
     *
     * @generated from protobuf field: rov_actions_proto.VideoStreamOptions BaseStream = 4 [json_name = "BaseStream"];
     */
    baseStream?: VideoStreamOptions;
}
/**
 * @generated from protobuf message rov_actions_proto.PingAction
 */
export interface PingAction {
    /**
     * The time the ping was sent
     *
     * @generated from protobuf field: int64 Time = 1 [json_name = "Time"];
     */
    time: number;
}
/**
 * @generated from protobuf message rov_actions_proto.PasswordAttemptAction
 */
export interface PasswordAttemptAction {
    /**
     * The password to attempt
     *
     * @generated from protobuf field: string Password = 1 [json_name = "Password"];
     */
    password: string;
}
/**
 * @generated from protobuf message rov_actions_proto.AuthTokenAttemptAction
 */
export interface AuthTokenAttemptAction {
    /**
     * The token to attempt
     *
     * @generated from protobuf field: string Token = 1 [json_name = "Token"];
     */
    token: string;
}
/**
 * No data needed
 *
 * @generated from protobuf message rov_actions_proto.TakeControlAction
 */
export interface TakeControlAction {
}
/**
 * @generated from protobuf message rov_actions_proto.MoveAction
 */
export interface MoveAction {
    /**
     * How to move the rov (X is left/right, Y is forward/backward, Z is up/down, Yaw is rotation))
     *
     * @generated from protobuf field: float velocityX = 1;
     */
    velocityX: number;
    /**
     * @generated from protobuf field: float velocityY = 2;
     */
    velocityY: number;
    /**
     * @generated from protobuf field: float velocityZ = 3;
     */
    velocityZ: number;
    /**
     * @generated from protobuf field: float angularVelocityYaw = 4;
     */
    angularVelocityYaw: number;
    /**
     * @generated from protobuf field: int32 ButtonBitmask = 5 [json_name = "ButtonBitmask"];
     */
    buttonBitmask: number; // optional
}
/**
 * No data needed
 *
 * @generated from protobuf message rov_actions_proto.TakePhotoAction
 */
export interface TakePhotoAction {
}
/**
 * No data needed
 *
 * @generated from protobuf message rov_actions_proto.StartVideoRecAction
 */
export interface StartVideoRecAction {
}
/**
 * No data needed
 *
 * @generated from protobuf message rov_actions_proto.StopVideoRecAction
 */
export interface StopVideoRecAction {
}
/**
 * No data needed
 *
 * @generated from protobuf message rov_actions_proto.ToggleLightsAction
 */
export interface ToggleLightsAction {
}
/**
 * No data needed
 *
 * @generated from protobuf message rov_actions_proto.ShutdownRovAction
 */
export interface ShutdownRovAction {
}
/**
 * No data needed
 *
 * @generated from protobuf message rov_actions_proto.RebootRovAction
 */
export interface RebootRovAction {
}
/**
 * No data needed
 *
 * @generated from protobuf message rov_actions_proto.EnableWifiAction
 */
export interface EnableWifiAction {
}
/**
 * No data needed
 *
 * @generated from protobuf message rov_actions_proto.DisableWifiAction
 */
export interface DisableWifiAction {
}
/**
 * No data needed
 *
 * @generated from protobuf message rov_actions_proto.RovStatusReportAction
 */
export interface RovStatusReportAction {
}
/**
 * No data needed
 *
 * @generated from protobuf message rov_actions_proto.RestartRovServicesAction
 */
export interface RestartRovServicesAction {
}
/**
 * No data needed
 *
 * @generated from protobuf message rov_actions_proto.SendRovLogsAction
 */
export interface SendRovLogsAction {
}
/**
 * No data needed
 *
 * @generated from protobuf message rov_actions_proto.RefreshAllSensorsAction
 */
export interface RefreshAllSensorsAction {
}
/**
 * @generated from protobuf message rov_actions_proto.MoveClawAction
 */
export interface MoveClawAction {
    /**
     * The amount to move the claw by (-1 to +1)
     *
     * @generated from protobuf field: float Value = 1 [json_name = "Value"];
     */
    value: number;
}
/**
 * @generated from protobuf message rov_actions_proto.SimplePeerSignalAction
 */
export interface SimplePeerSignalAction {
    /**
     * @generated from protobuf field: string Message = 1 [json_name = "Message"];
     */
    message: string;
}
/**
 * No data needed
 *
 * @generated from protobuf message rov_actions_proto.DisarmAction
 */
export interface DisarmAction {
}
/**
 * @generated from protobuf message rov_actions_proto.SetAutopilotModeAction
 */
export interface SetAutopilotModeAction {
    /**
     * @generated from protobuf field: int32 mode = 1;
     */
    mode: number;
}
/**
 * @generated from protobuf message rov_actions_proto.SetLivestreamingEnabledAction
 */
export interface SetLivestreamingEnabledAction {
    /**
     * @generated from protobuf field: bool Enabled = 1 [json_name = "Enabled"];
     */
    enabled: boolean;
}
/**
 * @generated from protobuf message rov_actions_proto.ActionBackendMetadata
 */
export interface ActionBackendMetadata {
    /**
     * The identity of the livekit user/client that sent the message or the message relates to.
     * !!!! This MUST get overwritten by the backend with the true origin user
     * before being sent to the python code for security.
     *
     * @generated from protobuf field: string FromUserId = 1 [json_name = "FromUserId"];
     */
    fromUserId: string; // optional
    /**
     * If an event happens such as a user connection or disconnection this will be set:
     *
     * @generated from protobuf field: rov_actions_proto.InternalWebpageEvent InternalWebpageEvt = 2 [json_name = "InternalWebpageEvt"];
     */
    internalWebpageEvt: InternalWebpageEvent; // optional
}
/**
 * wrapper message for anything sent by a pilot/spectator to the rov (aka an "action").
 *
 * @generated from protobuf message rov_actions_proto.RovAction
 */
export interface RovAction {
    /**
     * Metadata set by backend webpage before the message is forwarded to the python code.
     * optional ActionBackendMetadata BackendMetadata = 1;
     * int32 SequenceNum = 1;
     * IF Present, it MUST BE UNIQUE! Message exchange id (used to match up action requests and responses and prevent duplicate messages from being processed)
     *
     * @generated from protobuf field: int32 ExchangeId = 2 [json_name = "ExchangeId"];
     */
    exchangeId: number;
    /**
     * @generated from protobuf oneof: Body
     */
    body: {
        oneofKind: "ping";
        /**
         * ping
         *
         * @generated from protobuf field: rov_actions_proto.PingAction Ping = 3 [json_name = "Ping"];
         */
        ping: PingAction;
    } | {
        oneofKind: "passwordAttempt";
        /**
         * password_attempt
         *
         * @generated from protobuf field: rov_actions_proto.PasswordAttemptAction PasswordAttempt = 4 [json_name = "PasswordAttempt"];
         */
        passwordAttempt: PasswordAttemptAction;
    } | {
        oneofKind: "authTokenAttempt";
        /**
         * authtoken_attempt
         *
         * @generated from protobuf field: rov_actions_proto.AuthTokenAttemptAction AuthTokenAttempt = 5 [json_name = "AuthTokenAttempt"];
         */
        authTokenAttempt: AuthTokenAttemptAction;
    } | {
        oneofKind: "takeControl";
        /**
         * take_control
         *
         * @generated from protobuf field: rov_actions_proto.TakeControlAction TakeControl = 6 [json_name = "TakeControl"];
         */
        takeControl: TakeControlAction;
    } | {
        oneofKind: "move";
        /**
         * move
         *
         * @generated from protobuf field: rov_actions_proto.MoveAction Move = 7 [json_name = "Move"];
         */
        move: MoveAction;
    } | {
        oneofKind: "takePhoto";
        /**
         * take_photo
         *
         * @generated from protobuf field: rov_actions_proto.TakePhotoAction TakePhoto = 9 [json_name = "TakePhoto"];
         */
        takePhoto: TakePhotoAction;
    } | {
        oneofKind: "startVideoRec";
        /**
         * start_video_rec
         *
         * @generated from protobuf field: rov_actions_proto.StartVideoRecAction StartVideoRec = 10 [json_name = "StartVideoRec"];
         */
        startVideoRec: StartVideoRecAction;
    } | {
        oneofKind: "stopVideoRec";
        /**
         * stop_video_rec
         *
         * @generated from protobuf field: rov_actions_proto.StopVideoRecAction StopVideoRec = 11 [json_name = "StopVideoRec"];
         */
        stopVideoRec: StopVideoRecAction;
    } | {
        oneofKind: "toggleLights";
        /**
         * toogle_lights
         *
         * @generated from protobuf field: rov_actions_proto.ToggleLightsAction ToggleLights = 12 [json_name = "ToggleLights"];
         */
        toggleLights: ToggleLightsAction;
    } | {
        oneofKind: "shutdownRov";
        /**
         * shutdown_rov
         *
         * @generated from protobuf field: rov_actions_proto.ShutdownRovAction ShutdownRov = 13 [json_name = "ShutdownRov"];
         */
        shutdownRov: ShutdownRovAction;
    } | {
        oneofKind: "rebootRov";
        /**
         * reboot_rov
         *
         * @generated from protobuf field: rov_actions_proto.RebootRovAction RebootRov = 14 [json_name = "RebootRov"];
         */
        rebootRov: RebootRovAction;
    } | {
        oneofKind: "enableWifi";
        /**
         * enable_wifi
         *
         * @generated from protobuf field: rov_actions_proto.EnableWifiAction EnableWifi = 15 [json_name = "EnableWifi"];
         */
        enableWifi: EnableWifiAction;
    } | {
        oneofKind: "disableWifi";
        /**
         * disable_wifi
         *
         * @generated from protobuf field: rov_actions_proto.DisableWifiAction DisableWifi = 16 [json_name = "DisableWifi"];
         */
        disableWifi: DisableWifiAction;
    } | {
        oneofKind: "rovStatusReport";
        /**
         * rov_status_report
         *
         * @generated from protobuf field: rov_actions_proto.RovStatusReportAction RovStatusReport = 17 [json_name = "RovStatusReport"];
         */
        rovStatusReport: RovStatusReportAction;
    } | {
        oneofKind: "restartRovServices";
        /**
         * restart_rov_services
         *
         * @generated from protobuf field: rov_actions_proto.RestartRovServicesAction RestartRovServices = 18 [json_name = "RestartRovServices"];
         */
        restartRovServices: RestartRovServicesAction;
    } | {
        oneofKind: "sendRovLogs";
        /**
         * send_rov_logs
         *
         * @generated from protobuf field: rov_actions_proto.SendRovLogsAction SendRovLogs = 19 [json_name = "SendRovLogs"];
         */
        sendRovLogs: SendRovLogsAction;
    } | {
        oneofKind: "refreshAllSensors";
        /**
         * refresh_all_sensors
         *
         * @generated from protobuf field: rov_actions_proto.RefreshAllSensorsAction RefreshAllSensors = 20 [json_name = "RefreshAllSensors"];
         */
        refreshAllSensors: RefreshAllSensorsAction;
    } | {
        oneofKind: "moveClaw";
        /**
         * claw_move
         *
         * @generated from protobuf field: rov_actions_proto.MoveClawAction MoveClaw = 21 [json_name = "MoveClaw"];
         */
        moveClaw: MoveClawAction;
    } | {
        oneofKind: "simplePeerSignal";
        /**
         * simplePeer_signal
         *
         * @generated from protobuf field: rov_actions_proto.SimplePeerSignalAction SimplePeerSignal = 22 [json_name = "SimplePeerSignal"];
         */
        simplePeerSignal: SimplePeerSignalAction;
    } | {
        oneofKind: "disarm";
        /**
         * disarm
         *
         * @generated from protobuf field: rov_actions_proto.DisarmAction Disarm = 23 [json_name = "Disarm"];
         */
        disarm: DisarmAction;
    } | {
        oneofKind: "setAutopilotMode";
        /**
         * set_autopilot_mode
         *
         * @generated from protobuf field: rov_actions_proto.SetAutopilotModeAction SetAutopilotMode = 24 [json_name = "SetAutopilotMode"];
         */
        setAutopilotMode: SetAutopilotModeAction;
    } | {
        oneofKind: "setLivekitVideoOptions";
        /**
         * set_livekit_video_options
         *
         * @generated from protobuf field: rov_actions_proto.SetLivekitVideoOptionsAction SetLivekitVideoOptions = 25 [json_name = "SetLivekitVideoOptions"];
         */
        setLivekitVideoOptions: SetLivekitVideoOptionsAction;
    } | {
        oneofKind: "setSimplePeerVideoOptions";
        /**
         * set_simplePeer_video_options
         *
         * @generated from protobuf field: rov_actions_proto.SetSimplePeerVideoOptionsAction SetSimplePeerVideoOptions = 26 [json_name = "SetSimplePeerVideoOptions"];
         */
        setSimplePeerVideoOptions: SetSimplePeerVideoOptionsAction;
    } | {
        oneofKind: "setLivestreamingEnabled";
        /**
         * set_livestreaming_enabled
         *
         * @generated from protobuf field: rov_actions_proto.SetLivestreamingEnabledAction SetLivestreamingEnabled = 27 [json_name = "SetLivestreamingEnabled"];
         */
        setLivestreamingEnabled: SetLivestreamingEnabledAction;
    } | {
        oneofKind: undefined;
    };
}
/**
 * sent to a specific client when an action is received by the rov and COMPLETES successfully.
 *
 * @generated from protobuf message rov_actions_proto.DoneResponse
 */
export interface DoneResponse {
    /**
     * An optional informational status message to send back
     *
     * @generated from protobuf field: string Message = 1 [json_name = "Message"];
     */
    message: string; // optional
}
/**
 * sent to a specific client when an action is received by the rov and DOES NOT complete successfully.
 *
 * @generated from protobuf message rov_actions_proto.ErrorResponse
 */
export interface ErrorResponse {
    /**
     * The error message
     *
     * @generated from protobuf field: string Message = 1 [json_name = "Message"];
     */
    message: string;
}
/**
 * sent to a specific client in response to a ping request
 *
 * @generated from protobuf message rov_actions_proto.PongResponse
 */
export interface PongResponse {
    /**
     * The time the ping was sent
     *
     * @generated from protobuf field: int64 Time = 1 [json_name = "Time"];
     */
    time: number;
}
/**
 * Stores a single sensor measurement/value
 *
 * @generated from protobuf message rov_actions_proto.Measurement
 */
export interface Measurement {
    /**
     * The sensor type (see RovSensorTypes)
     *
     * @generated from protobuf field: rov_actions_proto.SensorMeasurmentTypes MeasurementType = 1 [json_name = "MeasurementType"];
     */
    measurementType: SensorMeasurmentTypes;
    /**
     * The sensor value
     *
     * @generated from protobuf field: float Value = 2 [json_name = "Value"];
     */
    value: number;
}
/**
 * sent to all clients whenever a sensor measurement changes or after a refresh_all_sensors action is sent.
 *
 * @generated from protobuf message rov_actions_proto.SensorUpdatesResponse
 */
export interface SensorUpdatesResponse {
    /**
     * All the changed mesurements from the sensors: (see Measurement type)
     *
     * @generated from protobuf field: repeated rov_actions_proto.Measurement MeasurementUpdates = 1 [json_name = "MeasurementUpdates"];
     */
    measurementUpdates: Measurement[];
}
/**
 * sent to a specific client when the proceding action sent by the client to the rov requires a password to show the rov that the client has privilages.
 *
 * @generated from protobuf message rov_actions_proto.PasswordRequiredResponse
 */
export interface PasswordRequiredResponse {
    /**
     * the id of the rov that is requesting a password (to be used to match tokens to rov's when using token based auth)
     *
     * @generated from protobuf field: string RovId = 1 [json_name = "RovId"];
     */
    rovId: string;
}
/**
 * sent when a password or token attempt is accepted by the rov.
 * The rov will additionally do whatever action required the password or token in the first place.
 *
 * @generated from protobuf message rov_actions_proto.PasswordAcceptedResponse
 */
export interface PasswordAcceptedResponse {
    /**
     * Authtoken to use for future requests in place of the password
     *
     * @generated from protobuf field: string AuthToken = 1 [json_name = "AuthToken"];
     */
    authToken: string;
}
/**
 * sent when a password or token attempt is not accepted by the rov.
 *
 * No data needed
 *
 * @generated from protobuf message rov_actions_proto.PasswordInvalidResponse
 */
export interface PasswordInvalidResponse {
}
/**
 * sent to all clients (including the new driver) whenever the designated driver client changes.
 *
 * @generated from protobuf message rov_actions_proto.PilotChangedResponse
 */
export interface PilotChangedResponse {
    /**
     * The new driver's livekit user identity
     *
     * @generated from protobuf field: string PilotIdentity = 1 [json_name = "PilotIdentity"];
     */
    pilotIdentity: string;
}
/**
 * sent to all clients (including the new client) whenever a new client connects to the rov.
 *
 * @generated from protobuf message rov_actions_proto.ClientConnectedResponse
 */
export interface ClientConnectedResponse {
    /**
     * The new client's peer id
     *
     * @generated from protobuf field: string ClientPeerId = 1 [json_name = "ClientPeerId"];
     */
    clientPeerId: string;
}
/**
 * sent to all clients whenever a client becomes disconnected from the rov (either due to leaving or a network timeout).
 *
 * @generated from protobuf message rov_actions_proto.ClientDisconnectedResponse
 */
export interface ClientDisconnectedResponse {
    /**
     * The disconnected client's peer id
     *
     * @generated from protobuf field: string ClientPeerId = 1 [json_name = "ClientPeerId"];
     */
    clientPeerId: string;
}
/**
 * sent to all clients as soon as the an arm or disarm command is recived but before the arming is actually confirmed by the ardupilot.
 *
 * @generated from protobuf message rov_actions_proto.ArmingResponse
 */
export interface ArmingResponse {
    /**
     * If the rov is going to be armed or not
     *
     * @generated from protobuf field: bool armed = 1;
     */
    armed: boolean;
}
/**
 * sent to a specific client for responses that have multiple parts such as logs or shell command output that output in an async manner.
 *
 * @generated from protobuf message rov_actions_proto.ContinuedOutputResponse
 */
export interface ContinuedOutputResponse {
    /**
     * @generated from protobuf field: string Message = 1 [json_name = "Message"];
     */
    message: string;
}
/**
 * reserved for future use by the mavlink protocol if we ever need it.
 *
 * @generated from protobuf message rov_actions_proto.MavlinkResponse
 */
export interface MavlinkResponse {
    /**
     * @generated from protobuf field: bytes Message = 1 [json_name = "Message"];
     */
    message: Uint8Array;
}
/**
 * used by the simplePeer signalling protocol to establish a direct webrtc connection between the rov and driver client (bypassing livekit).
 *
 * @generated from protobuf message rov_actions_proto.SimplePeerSignalResponse
 */
export interface SimplePeerSignalResponse {
    /**
     * @generated from protobuf field: string Message = 1 [json_name = "Message"];
     */
    message: string;
}
/**
 * @generated from protobuf message rov_actions_proto.SystemMonitorResponse
 */
export interface SystemMonitorResponse {
    /**
     * The cpu temperature in celsius
     *
     * @generated from protobuf field: float CpuTemp = 1 [json_name = "CpuTemp"];
     */
    cpuTemp: number;
    /**
     * The cpu usage as a percentage
     *
     * @generated from protobuf field: float CpuUsage = 2 [json_name = "CpuUsage"];
     */
    cpuUsage: number;
    /**
     * The memory usage as a percentage
     *
     * @generated from protobuf field: float MemoryUsage = 3 [json_name = "MemoryUsage"];
     */
    memoryUsage: number;
    /**
     * The disk usage as a percentage
     *
     * @generated from protobuf field: float DiskUsage = 4 [json_name = "DiskUsage"];
     */
    diskUsage: number;
    /**
     * warnings are strings that are displayed to the user about thresholds being exceeded
     *
     * @generated from protobuf field: repeated string Warnings = 5 [json_name = "Warnings"];
     */
    warnings: string[];
}
/**
 * @generated from protobuf message rov_actions_proto.LogMessageResponse
 */
export interface LogMessageResponse {
    /**
     * The log message
     *
     * @generated from protobuf field: string Message = 1 [json_name = "Message"];
     */
    message: string;
    /**
     * The level at which the log message was logged
     *
     * @generated from protobuf field: rov_actions_proto.LogLevel Level = 2 [json_name = "Level"];
     */
    level: LogLevel;
}
/**
 * @generated from protobuf message rov_actions_proto.LivekitVideoStatsResponse
 */
export interface LivekitVideoStatsResponse {
    /**
     * @generated from protobuf field: bool enabled = 1;
     */
    enabled: boolean;
    /**
     * The base codec used for the livekit video stream
     *
     * @generated from protobuf field: string codec = 2;
     */
    codec: string;
    /**
     * if livekit is allowed to publish a second video stream if needed with a more widely supported codec like H264 or VP8
     *
     * @generated from protobuf field: bool allowBackupCodec = 3;
     */
    allowBackupCodec: boolean;
    /**
     * The base options used for the livekit video stream and capture device
     *
     * @generated from protobuf field: rov_actions_proto.VideoStreamOptions baseStream = 4;
     */
    baseStream?: VideoStreamOptions;
    /**
     * additonal layers added to the livekit video stream for simulcast (empty = no simulcast)
     *
     * @generated from protobuf field: repeated rov_actions_proto.VideoStreamOptions simulcastLayers = 5;
     */
    simulcastLayers: VideoStreamOptions[];
    /**
     * The stats of the livekit video sender rtp stream
     *
     * @generated from protobuf field: rov_actions_proto.VideoBaseStats stats = 6;
     */
    stats?: VideoBaseStats;
}
/**
 * @generated from protobuf message rov_actions_proto.SimplePeerVideoStatsResponse
 */
export interface SimplePeerVideoStatsResponse {
    /**
     * @generated from protobuf field: bool enabled = 1;
     */
    enabled: boolean;
    /**
     * @generated from protobuf field: string codec = 2;
     */
    codec: string;
    /**
     * @generated from protobuf field: rov_actions_proto.VideoStreamOptions baseStream = 3;
     */
    baseStream?: VideoStreamOptions;
    /**
     * @generated from protobuf field: rov_actions_proto.VideoBaseStats stats = 4;
     */
    stats?: VideoBaseStats;
}
/**
 * No data needed
 *
 * @generated from protobuf message rov_actions_proto.HearbeatResponse
 */
export interface HearbeatResponse {
}
/**
 * @generated from protobuf message rov_actions_proto.ResponseBackendMetadata
 */
export interface ResponseBackendMetadata {
    /**
     * The identiies of the livekit user/clients to sent this response to.
     * !!!! If empty, the message will be sent to ALL clients.
     *
     * @generated from protobuf field: repeated string TargetUserIds = 1 [json_name = "TargetUserIds"];
     */
    targetUserIds: string[];
    /**
     * How to send this response (reliable/unreliable):
     *
     * @generated from protobuf field: rov_actions_proto.DataTransportMethod TransportMethod = 2 [json_name = "TransportMethod"];
     */
    transportMethod: DataTransportMethod;
}
/**
 * wrapper message for any message sent by the rov to a pilot/spectator (aka a response).
 *
 * @generated from protobuf message rov_actions_proto.RovResponse
 */
export interface RovResponse {
    /**
     * Metadata sent by the python code to the backend webpage to tell it how to send the message.
     * !!!! This field WILL be erased before the message is forwarded from the backend website to the livekit users.
     * optional ResponseBackendMetadata BackendMetadata = 1; // optional
     * int32 SequenceNum = 1;
     * Response exchange id (used to match up action requests and responses)
     *
     * @generated from protobuf field: optional int32 ExchangeId = 2 [json_name = "ExchangeId"];
     */
    exchangeId?: number;
    /**
     * @generated from protobuf oneof: Body
     */
    body: {
        oneofKind: "done";
        /**
         * done (action was completed successfully)
         *
         * @generated from protobuf field: rov_actions_proto.DoneResponse Done = 3 [json_name = "Done"];
         */
        done: DoneResponse;
    } | {
        oneofKind: "error";
        /**
         * error (action failed)
         *
         * @generated from protobuf field: rov_actions_proto.ErrorResponse Error = 4 [json_name = "Error"];
         */
        error: ErrorResponse;
    } | {
        oneofKind: "pong";
        /**
         * pong (response to a ping action)
         *
         * @generated from protobuf field: rov_actions_proto.PongResponse Pong = 5 [json_name = "Pong"];
         */
        pong: PongResponse;
    } | {
        oneofKind: "continuedOutput";
        /**
         * continued_output (for string responses that arrive in multiple parts such as logs or shell command output)
         *
         * @generated from protobuf field: rov_actions_proto.ContinuedOutputResponse ContinuedOutput = 6 [json_name = "ContinuedOutput"];
         */
        continuedOutput: ContinuedOutputResponse;
    } | {
        oneofKind: "sensorUpdates";
        /**
         * sensor_updates (gives a list of sensor updates containing only new/changed sensors and their current values)
         *
         * @generated from protobuf field: rov_actions_proto.SensorUpdatesResponse SensorUpdates = 7 [json_name = "SensorUpdates"];
         */
        sensorUpdates: SensorUpdatesResponse;
    } | {
        oneofKind: "passwordRequired";
        /**
         * password_required (sent when a password is required before an action is performed)
         *
         * @generated from protobuf field: rov_actions_proto.PasswordRequiredResponse PasswordRequired = 8 [json_name = "PasswordRequired"];
         */
        passwordRequired: PasswordRequiredResponse;
    } | {
        oneofKind: "passwordAccepted";
        /**
         * password_accepted (sent when a password request is accepted)
         *
         * @generated from protobuf field: rov_actions_proto.PasswordAcceptedResponse PasswordAccepted = 9 [json_name = "PasswordAccepted"];
         */
        passwordAccepted: PasswordAcceptedResponse;
    } | {
        oneofKind: "passwordInvalid";
        /**
         * password_invalid (sent when a password or token challenge action has an incorrect password or token)
         *
         * @generated from protobuf field: rov_actions_proto.PasswordInvalidResponse PasswordInvalid = 10 [json_name = "PasswordInvalid"];
         */
        passwordInvalid: PasswordInvalidResponse;
    } | {
        oneofKind: "pilotChanged";
        /**
         * driver_changed (sent when the designated pilot
         *
         * @generated from protobuf field: rov_actions_proto.PilotChangedResponse PilotChanged = 13 [json_name = "PilotChanged"];
         */
        pilotChanged: PilotChangedResponse;
    } | {
        oneofKind: "clientConnected";
        /**
         * client_connected
         *
         * @generated from protobuf field: rov_actions_proto.ClientConnectedResponse ClientConnected = 14 [json_name = "ClientConnected"];
         */
        clientConnected: ClientConnectedResponse;
    } | {
        oneofKind: "clientDisconnected";
        /**
         * client_disconnected
         *
         * @generated from protobuf field: rov_actions_proto.ClientDisconnectedResponse ClientDisconnected = 15 [json_name = "ClientDisconnected"];
         */
        clientDisconnected: ClientDisconnectedResponse;
    } | {
        oneofKind: "arming";
        /**
         * heartbeat
         *
         * @generated from protobuf field: rov_actions_proto.ArmingResponse arming = 16;
         */
        arming: ArmingResponse;
    } | {
        oneofKind: "mavlink";
        /**
         * mavlink
         *
         * @generated from protobuf field: rov_actions_proto.MavlinkResponse Mavlink = 17 [json_name = "Mavlink"];
         */
        mavlink: MavlinkResponse;
    } | {
        oneofKind: "simplePeerSignal";
        /**
         * simplePeer_signal
         *
         * @generated from protobuf field: rov_actions_proto.SimplePeerSignalResponse SimplePeerSignal = 18 [json_name = "SimplePeerSignal"];
         */
        simplePeerSignal: SimplePeerSignalResponse;
    } | {
        oneofKind: "systemMonitor";
        /**
         * system_monitor
         *
         * @generated from protobuf field: rov_actions_proto.SystemMonitorResponse SystemMonitor = 19 [json_name = "SystemMonitor"];
         */
        systemMonitor: SystemMonitorResponse;
    } | {
        oneofKind: "logMessage";
        /**
         * log_message
         *
         * @generated from protobuf field: rov_actions_proto.LogMessageResponse LogMessage = 20 [json_name = "LogMessage"];
         */
        logMessage: LogMessageResponse;
    } | {
        oneofKind: "livekitVideoStats";
        /**
         * @generated from protobuf field: rov_actions_proto.LivekitVideoStatsResponse LivekitVideoStats = 21 [json_name = "LivekitVideoStats"];
         */
        livekitVideoStats: LivekitVideoStatsResponse;
    } | {
        oneofKind: "simplePeerVideoStats";
        /**
         * @generated from protobuf field: rov_actions_proto.SimplePeerVideoStatsResponse SimplePeerVideoStats = 22 [json_name = "SimplePeerVideoStats"];
         */
        simplePeerVideoStats: SimplePeerVideoStatsResponse;
    } | {
        oneofKind: "heartbeat";
        /**
         * @generated from protobuf field: rov_actions_proto.HearbeatResponse Heartbeat = 23 [json_name = "Heartbeat"];
         */
        heartbeat: HearbeatResponse;
    } | {
        oneofKind: undefined;
    };
}
/**
 * @generated from protobuf enum rov_actions_proto.LogLevel
 */
export enum LogLevel {
    /**
     * @generated from protobuf enum value: Debug = 0;
     */
    Debug = 0,
    /**
     * @generated from protobuf enum value: Info = 1;
     */
    Info = 1,
    /**
     * @generated from protobuf enum value: Warning = 2;
     */
    Warning = 2,
    /**
     * @generated from protobuf enum value: Error = 3;
     */
    Error = 3,
    /**
     * @generated from protobuf enum value: Critical = 4;
     */
    Critical = 4,
    /**
     * @generated from protobuf enum value: Console = 5;
     */
    Console = 5
}
/**
 * @generated from protobuf enum rov_actions_proto.SensorMeasurmentTypes
 */
export enum SensorMeasurmentTypes {
    /**
     * @generated from protobuf enum value: depth_meters = 0;
     */
    depth_meters = 0,
    /**
     * @generated from protobuf enum value: water_temp_celsius = 1;
     */
    water_temp_celsius = 1,
    /**
     * @generated from protobuf enum value: pressure_mbar = 2;
     */
    pressure_mbar = 2,
    /**
     * @generated from protobuf enum value: yaw_degrees = 3;
     */
    yaw_degrees = 3,
    /**
     * @generated from protobuf enum value: pitch_degrees = 4;
     */
    pitch_degrees = 4,
    /**
     * @generated from protobuf enum value: roll_degrees = 5;
     */
    roll_degrees = 5,
    /**
     * Not implemented
     *
     * @generated from protobuf enum value: x_acceleration_m_s2 = 6;
     */
    x_acceleration_m_s2 = 6,
    /**
     * Not implemented
     *
     * @generated from protobuf enum value: y_acceleration_m_s2 = 7;
     */
    y_acceleration_m_s2 = 7,
    /**
     * Not implemented
     *
     * @generated from protobuf enum value: z_acceleration_m_s2 = 8;
     */
    z_acceleration_m_s2 = 8,
    /**
     * Not implemented
     *
     * @generated from protobuf enum value: battery_voltage = 9;
     */
    battery_voltage = 9,
    /**
     * Not implemented
     *
     * @generated from protobuf enum value: battery_current_amps = 10;
     */
    battery_current_amps = 10,
    /**
     * from the compass/imu
     *
     * @generated from protobuf enum value: internal_temp_celsius = 11;
     */
    internal_temp_celsius = 11
}
/**
 * @generated from protobuf enum rov_actions_proto.DataTransportMethod
 */
export enum DataTransportMethod {
    /**
     * Livekit reliable messages are sent / received through the livekit server via TCP.
     *
     * @generated from protobuf enum value: LivekitReliable = 0;
     */
    LivekitReliable = 0,
    /**
     * Livekit unreliable messages are sent / received through the livekit server via UDP (messages may get lost in transit).
     *
     * @generated from protobuf enum value: LivekitUnreliable = 1;
     */
    LivekitUnreliable = 1,
    /**
     * !!DO NOT USE - NOT IMPLEMENTED!! Direct reliable messages are sent/recived over the simplePeer webrtc connection via TCP
     *
     * @generated from protobuf enum value: DirectReliable = 2;
     */
    DirectReliable = 2,
    /**
     * Direct unreliable messages are sent/recived over the simplePeer webrtc connection via UDP (messages may get lost in transit)
     *
     * @generated from protobuf enum value: DirectUnreliable = 3;
     */
    DirectUnreliable = 3
}
/**
 * @generated from protobuf enum rov_actions_proto.InternalWebpageEvent
 */
export enum InternalWebpageEvent {
    /**
     * @generated from protobuf enum value: Nothing = 0;
     */
    Nothing = 0,
    /**
     * The rov has connected to at least one livekit server
     *
     * @generated from protobuf enum value: RovConnected = 1;
     */
    RovConnected = 1,
    /**
     * The rov is disconnected from all livekit servers
     *
     * @generated from protobuf enum value: RovDisconnected = 2;
     */
    RovDisconnected = 2,
    /**
     * A livekit user has connected to the rov
     *
     * @generated from protobuf enum value: UserConnected = 3;
     */
    UserConnected = 3,
    /**
     * A livekit user has disconnected from the rov
     *
     * @generated from protobuf enum value: UserDisconnected = 4;
     */
    UserDisconnected = 4
}
// @generated message type with reflection information, may provide speed optimized methods
class VideoSenderStats$Type extends MessageType<VideoSenderStats> {
    constructor() {
        super("rov_actions_proto.VideoSenderStats", [
            { no: 1, name: "encoderImplementation", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "powerEfficientEncoder", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 3, name: "qualityLimitationReason", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "cpuLimitedQualityDurration", kind: "scalar", opt: true, T: 2 /*ScalarType.FLOAT*/ },
            { no: 5, name: "bandwidthLimitedQualityDurration", kind: "scalar", opt: true, T: 2 /*ScalarType.FLOAT*/ },
            { no: 6, name: "otherLimitedQualityDurration", kind: "scalar", opt: true, T: 2 /*ScalarType.FLOAT*/ },
            { no: 7, name: "noLimitedQualityDurration", kind: "scalar", opt: true, T: 2 /*ScalarType.FLOAT*/ },
            { no: 8, name: "totalPacketSendDelay", kind: "scalar", opt: true, T: 2 /*ScalarType.FLOAT*/ },
            { no: 9, name: "retransmittedBytesSent", kind: "scalar", opt: true, T: 2 /*ScalarType.FLOAT*/ },
            { no: 10, name: "scalabilityMode", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 11, name: "qualityLimitationResolutionChanges", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 12, name: "frameWidth", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 13, name: "frameHeight", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 14, name: "framesPerSecond", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 16, name: "videoCodec", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 15, name: "videoSdpFmtpLine", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<VideoSenderStats>): VideoSenderStats {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<VideoSenderStats>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: VideoSenderStats): VideoSenderStats {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional string encoderImplementation */ 1:
                    message.encoderImplementation = reader.string();
                    break;
                case /* optional bool powerEfficientEncoder */ 2:
                    message.powerEfficientEncoder = reader.bool();
                    break;
                case /* optional string qualityLimitationReason */ 3:
                    message.qualityLimitationReason = reader.string();
                    break;
                case /* optional float cpuLimitedQualityDurration */ 4:
                    message.cpuLimitedQualityDurration = reader.float();
                    break;
                case /* optional float bandwidthLimitedQualityDurration */ 5:
                    message.bandwidthLimitedQualityDurration = reader.float();
                    break;
                case /* optional float otherLimitedQualityDurration */ 6:
                    message.otherLimitedQualityDurration = reader.float();
                    break;
                case /* optional float noLimitedQualityDurration */ 7:
                    message.noLimitedQualityDurration = reader.float();
                    break;
                case /* optional float totalPacketSendDelay */ 8:
                    message.totalPacketSendDelay = reader.float();
                    break;
                case /* optional float retransmittedBytesSent */ 9:
                    message.retransmittedBytesSent = reader.float();
                    break;
                case /* optional string scalabilityMode */ 10:
                    message.scalabilityMode = reader.string();
                    break;
                case /* optional uint32 qualityLimitationResolutionChanges */ 11:
                    message.qualityLimitationResolutionChanges = reader.uint32();
                    break;
                case /* optional uint32 frameWidth */ 12:
                    message.frameWidth = reader.uint32();
                    break;
                case /* optional uint32 frameHeight */ 13:
                    message.frameHeight = reader.uint32();
                    break;
                case /* optional uint32 framesPerSecond */ 14:
                    message.framesPerSecond = reader.uint32();
                    break;
                case /* optional string videoCodec */ 16:
                    message.videoCodec = reader.string();
                    break;
                case /* optional string videoSdpFmtpLine */ 15:
                    message.videoSdpFmtpLine = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: VideoSenderStats, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional string encoderImplementation = 1; */
        if (message.encoderImplementation !== undefined)
            writer.tag(1, WireType.LengthDelimited).string(message.encoderImplementation);
        /* optional bool powerEfficientEncoder = 2; */
        if (message.powerEfficientEncoder !== undefined)
            writer.tag(2, WireType.Varint).bool(message.powerEfficientEncoder);
        /* optional string qualityLimitationReason = 3; */
        if (message.qualityLimitationReason !== undefined)
            writer.tag(3, WireType.LengthDelimited).string(message.qualityLimitationReason);
        /* optional float cpuLimitedQualityDurration = 4; */
        if (message.cpuLimitedQualityDurration !== undefined)
            writer.tag(4, WireType.Bit32).float(message.cpuLimitedQualityDurration);
        /* optional float bandwidthLimitedQualityDurration = 5; */
        if (message.bandwidthLimitedQualityDurration !== undefined)
            writer.tag(5, WireType.Bit32).float(message.bandwidthLimitedQualityDurration);
        /* optional float otherLimitedQualityDurration = 6; */
        if (message.otherLimitedQualityDurration !== undefined)
            writer.tag(6, WireType.Bit32).float(message.otherLimitedQualityDurration);
        /* optional float noLimitedQualityDurration = 7; */
        if (message.noLimitedQualityDurration !== undefined)
            writer.tag(7, WireType.Bit32).float(message.noLimitedQualityDurration);
        /* optional float totalPacketSendDelay = 8; */
        if (message.totalPacketSendDelay !== undefined)
            writer.tag(8, WireType.Bit32).float(message.totalPacketSendDelay);
        /* optional float retransmittedBytesSent = 9; */
        if (message.retransmittedBytesSent !== undefined)
            writer.tag(9, WireType.Bit32).float(message.retransmittedBytesSent);
        /* optional string scalabilityMode = 10; */
        if (message.scalabilityMode !== undefined)
            writer.tag(10, WireType.LengthDelimited).string(message.scalabilityMode);
        /* optional uint32 qualityLimitationResolutionChanges = 11; */
        if (message.qualityLimitationResolutionChanges !== undefined)
            writer.tag(11, WireType.Varint).uint32(message.qualityLimitationResolutionChanges);
        /* optional uint32 frameWidth = 12; */
        if (message.frameWidth !== undefined)
            writer.tag(12, WireType.Varint).uint32(message.frameWidth);
        /* optional uint32 frameHeight = 13; */
        if (message.frameHeight !== undefined)
            writer.tag(13, WireType.Varint).uint32(message.frameHeight);
        /* optional uint32 framesPerSecond = 14; */
        if (message.framesPerSecond !== undefined)
            writer.tag(14, WireType.Varint).uint32(message.framesPerSecond);
        /* optional string videoCodec = 16; */
        if (message.videoCodec !== undefined)
            writer.tag(16, WireType.LengthDelimited).string(message.videoCodec);
        /* optional string videoSdpFmtpLine = 15; */
        if (message.videoSdpFmtpLine !== undefined)
            writer.tag(15, WireType.LengthDelimited).string(message.videoSdpFmtpLine);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message rov_actions_proto.VideoSenderStats
 */
export const VideoSenderStats = new VideoSenderStats$Type();
// @generated message type with reflection information, may provide speed optimized methods
class VideoRecieverStats$Type extends MessageType<VideoRecieverStats> {
    constructor() {
        super("rov_actions_proto.VideoRecieverStats", [
            { no: 1, name: "hung", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 2, name: "frameWidth", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "frameHeight", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 4, name: "framesPerSecond", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 5, name: "currentRoundTripTime", kind: "scalar", opt: true, T: 2 /*ScalarType.FLOAT*/ },
            { no: 6, name: "jitterBufferDelay", kind: "scalar", opt: true, T: 2 /*ScalarType.FLOAT*/ },
            { no: 7, name: "jitter", kind: "scalar", opt: true, T: 2 /*ScalarType.FLOAT*/ },
            { no: 8, name: "nackCount", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 9, name: "pliCount", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 10, name: "freezeCount", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 11, name: "totalFreezeTime", kind: "scalar", opt: true, T: 2 /*ScalarType.FLOAT*/ },
            { no: 12, name: "estimatedPlayoutDelay", kind: "scalar", opt: true, T: 2 /*ScalarType.FLOAT*/ },
            { no: 13, name: "videoCodec", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 14, name: "videoSdpFmtpLine", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<VideoRecieverStats>): VideoRecieverStats {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<VideoRecieverStats>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: VideoRecieverStats): VideoRecieverStats {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional bool hung */ 1:
                    message.hung = reader.bool();
                    break;
                case /* optional uint32 frameWidth */ 2:
                    message.frameWidth = reader.uint32();
                    break;
                case /* optional uint32 frameHeight */ 3:
                    message.frameHeight = reader.uint32();
                    break;
                case /* optional uint32 framesPerSecond */ 4:
                    message.framesPerSecond = reader.uint32();
                    break;
                case /* optional float currentRoundTripTime */ 5:
                    message.currentRoundTripTime = reader.float();
                    break;
                case /* optional float jitterBufferDelay */ 6:
                    message.jitterBufferDelay = reader.float();
                    break;
                case /* optional float jitter */ 7:
                    message.jitter = reader.float();
                    break;
                case /* optional uint32 nackCount */ 8:
                    message.nackCount = reader.uint32();
                    break;
                case /* optional uint32 pliCount */ 9:
                    message.pliCount = reader.uint32();
                    break;
                case /* optional uint32 freezeCount */ 10:
                    message.freezeCount = reader.uint32();
                    break;
                case /* optional float totalFreezeTime */ 11:
                    message.totalFreezeTime = reader.float();
                    break;
                case /* optional float estimatedPlayoutDelay */ 12:
                    message.estimatedPlayoutDelay = reader.float();
                    break;
                case /* optional string videoCodec */ 13:
                    message.videoCodec = reader.string();
                    break;
                case /* optional string videoSdpFmtpLine */ 14:
                    message.videoSdpFmtpLine = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: VideoRecieverStats, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional bool hung = 1; */
        if (message.hung !== undefined)
            writer.tag(1, WireType.Varint).bool(message.hung);
        /* optional uint32 frameWidth = 2; */
        if (message.frameWidth !== undefined)
            writer.tag(2, WireType.Varint).uint32(message.frameWidth);
        /* optional uint32 frameHeight = 3; */
        if (message.frameHeight !== undefined)
            writer.tag(3, WireType.Varint).uint32(message.frameHeight);
        /* optional uint32 framesPerSecond = 4; */
        if (message.framesPerSecond !== undefined)
            writer.tag(4, WireType.Varint).uint32(message.framesPerSecond);
        /* optional float currentRoundTripTime = 5; */
        if (message.currentRoundTripTime !== undefined)
            writer.tag(5, WireType.Bit32).float(message.currentRoundTripTime);
        /* optional float jitterBufferDelay = 6; */
        if (message.jitterBufferDelay !== undefined)
            writer.tag(6, WireType.Bit32).float(message.jitterBufferDelay);
        /* optional float jitter = 7; */
        if (message.jitter !== undefined)
            writer.tag(7, WireType.Bit32).float(message.jitter);
        /* optional uint32 nackCount = 8; */
        if (message.nackCount !== undefined)
            writer.tag(8, WireType.Varint).uint32(message.nackCount);
        /* optional uint32 pliCount = 9; */
        if (message.pliCount !== undefined)
            writer.tag(9, WireType.Varint).uint32(message.pliCount);
        /* optional uint32 freezeCount = 10; */
        if (message.freezeCount !== undefined)
            writer.tag(10, WireType.Varint).uint32(message.freezeCount);
        /* optional float totalFreezeTime = 11; */
        if (message.totalFreezeTime !== undefined)
            writer.tag(11, WireType.Bit32).float(message.totalFreezeTime);
        /* optional float estimatedPlayoutDelay = 12; */
        if (message.estimatedPlayoutDelay !== undefined)
            writer.tag(12, WireType.Bit32).float(message.estimatedPlayoutDelay);
        /* optional string videoCodec = 13; */
        if (message.videoCodec !== undefined)
            writer.tag(13, WireType.LengthDelimited).string(message.videoCodec);
        /* optional string videoSdpFmtpLine = 14; */
        if (message.videoSdpFmtpLine !== undefined)
            writer.tag(14, WireType.LengthDelimited).string(message.videoSdpFmtpLine);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message rov_actions_proto.VideoRecieverStats
 */
export const VideoRecieverStats = new VideoRecieverStats$Type();
// @generated message type with reflection information, may provide speed optimized methods
class VideoBaseStats$Type extends MessageType<VideoBaseStats> {
    constructor() {
        super("rov_actions_proto.VideoBaseStats", [
            { no: 7, name: "bitrateReceive", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 8, name: "bitrateSend", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 9, name: "availableIncomingBitrate", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 10, name: "availableOutgoingBitrate", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 11, name: "senderLayerStats", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => VideoSenderStats },
            { no: 12, name: "recieverStats", kind: "message", T: () => VideoRecieverStats },
            { no: 13, name: "rtcStatsJson", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<VideoBaseStats>): VideoBaseStats {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.bitrateReceive = 0;
        message.bitrateSend = 0;
        message.availableIncomingBitrate = 0;
        message.availableOutgoingBitrate = 0;
        message.senderLayerStats = [];
        message.rtcStatsJson = "";
        if (value !== undefined)
            reflectionMergePartial<VideoBaseStats>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: VideoBaseStats): VideoBaseStats {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint32 bitrateReceive */ 7:
                    message.bitrateReceive = reader.uint32();
                    break;
                case /* uint32 bitrateSend */ 8:
                    message.bitrateSend = reader.uint32();
                    break;
                case /* uint32 availableIncomingBitrate */ 9:
                    message.availableIncomingBitrate = reader.uint32();
                    break;
                case /* uint32 availableOutgoingBitrate */ 10:
                    message.availableOutgoingBitrate = reader.uint32();
                    break;
                case /* repeated rov_actions_proto.VideoSenderStats senderLayerStats */ 11:
                    message.senderLayerStats.push(VideoSenderStats.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* rov_actions_proto.VideoRecieverStats recieverStats */ 12:
                    message.recieverStats = VideoRecieverStats.internalBinaryRead(reader, reader.uint32(), options, message.recieverStats);
                    break;
                case /* string rtcStatsJson */ 13:
                    message.rtcStatsJson = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: VideoBaseStats, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint32 bitrateReceive = 7; */
        if (message.bitrateReceive !== 0)
            writer.tag(7, WireType.Varint).uint32(message.bitrateReceive);
        /* uint32 bitrateSend = 8; */
        if (message.bitrateSend !== 0)
            writer.tag(8, WireType.Varint).uint32(message.bitrateSend);
        /* uint32 availableIncomingBitrate = 9; */
        if (message.availableIncomingBitrate !== 0)
            writer.tag(9, WireType.Varint).uint32(message.availableIncomingBitrate);
        /* uint32 availableOutgoingBitrate = 10; */
        if (message.availableOutgoingBitrate !== 0)
            writer.tag(10, WireType.Varint).uint32(message.availableOutgoingBitrate);
        /* repeated rov_actions_proto.VideoSenderStats senderLayerStats = 11; */
        for (let i = 0; i < message.senderLayerStats.length; i++)
            VideoSenderStats.internalBinaryWrite(message.senderLayerStats[i], writer.tag(11, WireType.LengthDelimited).fork(), options).join();
        /* rov_actions_proto.VideoRecieverStats recieverStats = 12; */
        if (message.recieverStats)
            VideoRecieverStats.internalBinaryWrite(message.recieverStats, writer.tag(12, WireType.LengthDelimited).fork(), options).join();
        /* string rtcStatsJson = 13; */
        if (message.rtcStatsJson !== "")
            writer.tag(13, WireType.LengthDelimited).string(message.rtcStatsJson);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message rov_actions_proto.VideoBaseStats
 */
export const VideoBaseStats = new VideoBaseStats$Type();
// @generated message type with reflection information, may provide speed optimized methods
class VideoStreamOptions$Type extends MessageType<VideoStreamOptions> {
    constructor() {
        super("rov_actions_proto.VideoStreamOptions", [
            { no: 1, name: "Height", kind: "scalar", jsonName: "Height", T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "Width", kind: "scalar", jsonName: "Width", T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "Fps", kind: "scalar", jsonName: "Fps", T: 13 /*ScalarType.UINT32*/ },
            { no: 4, name: "MaxBitrate", kind: "scalar", jsonName: "MaxBitrate", T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<VideoStreamOptions>): VideoStreamOptions {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.height = 0;
        message.width = 0;
        message.fps = 0;
        message.maxBitrate = 0;
        if (value !== undefined)
            reflectionMergePartial<VideoStreamOptions>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: VideoStreamOptions): VideoStreamOptions {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint32 Height = 1 [json_name = "Height"];*/ 1:
                    message.height = reader.uint32();
                    break;
                case /* uint32 Width = 2 [json_name = "Width"];*/ 2:
                    message.width = reader.uint32();
                    break;
                case /* uint32 Fps = 3 [json_name = "Fps"];*/ 3:
                    message.fps = reader.uint32();
                    break;
                case /* uint32 MaxBitrate = 4 [json_name = "MaxBitrate"];*/ 4:
                    message.maxBitrate = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: VideoStreamOptions, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint32 Height = 1 [json_name = "Height"]; */
        if (message.height !== 0)
            writer.tag(1, WireType.Varint).uint32(message.height);
        /* uint32 Width = 2 [json_name = "Width"]; */
        if (message.width !== 0)
            writer.tag(2, WireType.Varint).uint32(message.width);
        /* uint32 Fps = 3 [json_name = "Fps"]; */
        if (message.fps !== 0)
            writer.tag(3, WireType.Varint).uint32(message.fps);
        /* uint32 MaxBitrate = 4 [json_name = "MaxBitrate"]; */
        if (message.maxBitrate !== 0)
            writer.tag(4, WireType.Varint).uint32(message.maxBitrate);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message rov_actions_proto.VideoStreamOptions
 */
export const VideoStreamOptions = new VideoStreamOptions$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SetLivekitVideoOptionsAction$Type extends MessageType<SetLivekitVideoOptionsAction> {
    constructor() {
        super("rov_actions_proto.SetLivekitVideoOptionsAction", [
            { no: 1, name: "Enabled", kind: "scalar", jsonName: "Enabled", T: 8 /*ScalarType.BOOL*/ },
            { no: 2, name: "Codec", kind: "scalar", jsonName: "Codec", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "AllowBackupCodec", kind: "scalar", jsonName: "AllowBackupCodec", T: 8 /*ScalarType.BOOL*/ },
            { no: 4, name: "BaseStream", kind: "message", jsonName: "BaseStream", T: () => VideoStreamOptions },
            { no: 5, name: "SimulcastLayers", kind: "message", jsonName: "SimulcastLayers", repeat: 1 /*RepeatType.PACKED*/, T: () => VideoStreamOptions }
        ]);
    }
    create(value?: PartialMessage<SetLivekitVideoOptionsAction>): SetLivekitVideoOptionsAction {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.enabled = false;
        message.codec = "";
        message.allowBackupCodec = false;
        message.simulcastLayers = [];
        if (value !== undefined)
            reflectionMergePartial<SetLivekitVideoOptionsAction>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SetLivekitVideoOptionsAction): SetLivekitVideoOptionsAction {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool Enabled = 1 [json_name = "Enabled"];*/ 1:
                    message.enabled = reader.bool();
                    break;
                case /* string Codec = 2 [json_name = "Codec"];*/ 2:
                    message.codec = reader.string();
                    break;
                case /* bool AllowBackupCodec = 3 [json_name = "AllowBackupCodec"];*/ 3:
                    message.allowBackupCodec = reader.bool();
                    break;
                case /* rov_actions_proto.VideoStreamOptions BaseStream = 4 [json_name = "BaseStream"];*/ 4:
                    message.baseStream = VideoStreamOptions.internalBinaryRead(reader, reader.uint32(), options, message.baseStream);
                    break;
                case /* repeated rov_actions_proto.VideoStreamOptions SimulcastLayers = 5 [json_name = "SimulcastLayers"];*/ 5:
                    message.simulcastLayers.push(VideoStreamOptions.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SetLivekitVideoOptionsAction, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool Enabled = 1 [json_name = "Enabled"]; */
        if (message.enabled !== false)
            writer.tag(1, WireType.Varint).bool(message.enabled);
        /* string Codec = 2 [json_name = "Codec"]; */
        if (message.codec !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.codec);
        /* bool AllowBackupCodec = 3 [json_name = "AllowBackupCodec"]; */
        if (message.allowBackupCodec !== false)
            writer.tag(3, WireType.Varint).bool(message.allowBackupCodec);
        /* rov_actions_proto.VideoStreamOptions BaseStream = 4 [json_name = "BaseStream"]; */
        if (message.baseStream)
            VideoStreamOptions.internalBinaryWrite(message.baseStream, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* repeated rov_actions_proto.VideoStreamOptions SimulcastLayers = 5 [json_name = "SimulcastLayers"]; */
        for (let i = 0; i < message.simulcastLayers.length; i++)
            VideoStreamOptions.internalBinaryWrite(message.simulcastLayers[i], writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message rov_actions_proto.SetLivekitVideoOptionsAction
 */
export const SetLivekitVideoOptionsAction = new SetLivekitVideoOptionsAction$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SetSimplePeerVideoOptionsAction$Type extends MessageType<SetSimplePeerVideoOptionsAction> {
    constructor() {
        super("rov_actions_proto.SetSimplePeerVideoOptionsAction", [
            { no: 1, name: "Enabled", kind: "scalar", jsonName: "Enabled", T: 8 /*ScalarType.BOOL*/ },
            { no: 2, name: "Bitrate", kind: "scalar", jsonName: "Bitrate", T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "Codec", kind: "scalar", jsonName: "Codec", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "BaseStream", kind: "message", jsonName: "BaseStream", T: () => VideoStreamOptions }
        ]);
    }
    create(value?: PartialMessage<SetSimplePeerVideoOptionsAction>): SetSimplePeerVideoOptionsAction {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.enabled = false;
        message.bitrate = 0;
        message.codec = "";
        if (value !== undefined)
            reflectionMergePartial<SetSimplePeerVideoOptionsAction>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SetSimplePeerVideoOptionsAction): SetSimplePeerVideoOptionsAction {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool Enabled = 1 [json_name = "Enabled"];*/ 1:
                    message.enabled = reader.bool();
                    break;
                case /* uint32 Bitrate = 2 [json_name = "Bitrate"];*/ 2:
                    message.bitrate = reader.uint32();
                    break;
                case /* string Codec = 3 [json_name = "Codec"];*/ 3:
                    message.codec = reader.string();
                    break;
                case /* rov_actions_proto.VideoStreamOptions BaseStream = 4 [json_name = "BaseStream"];*/ 4:
                    message.baseStream = VideoStreamOptions.internalBinaryRead(reader, reader.uint32(), options, message.baseStream);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SetSimplePeerVideoOptionsAction, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool Enabled = 1 [json_name = "Enabled"]; */
        if (message.enabled !== false)
            writer.tag(1, WireType.Varint).bool(message.enabled);
        /* uint32 Bitrate = 2 [json_name = "Bitrate"]; */
        if (message.bitrate !== 0)
            writer.tag(2, WireType.Varint).uint32(message.bitrate);
        /* string Codec = 3 [json_name = "Codec"]; */
        if (message.codec !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.codec);
        /* rov_actions_proto.VideoStreamOptions BaseStream = 4 [json_name = "BaseStream"]; */
        if (message.baseStream)
            VideoStreamOptions.internalBinaryWrite(message.baseStream, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message rov_actions_proto.SetSimplePeerVideoOptionsAction
 */
export const SetSimplePeerVideoOptionsAction = new SetSimplePeerVideoOptionsAction$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PingAction$Type extends MessageType<PingAction> {
    constructor() {
        super("rov_actions_proto.PingAction", [
            { no: 1, name: "Time", kind: "scalar", jsonName: "Time", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ }
        ]);
    }
    create(value?: PartialMessage<PingAction>): PingAction {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.time = 0;
        if (value !== undefined)
            reflectionMergePartial<PingAction>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PingAction): PingAction {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 Time = 1 [json_name = "Time"];*/ 1:
                    message.time = reader.int64().toNumber();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PingAction, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 Time = 1 [json_name = "Time"]; */
        if (message.time !== 0)
            writer.tag(1, WireType.Varint).int64(message.time);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message rov_actions_proto.PingAction
 */
export const PingAction = new PingAction$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PasswordAttemptAction$Type extends MessageType<PasswordAttemptAction> {
    constructor() {
        super("rov_actions_proto.PasswordAttemptAction", [
            { no: 1, name: "Password", kind: "scalar", jsonName: "Password", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<PasswordAttemptAction>): PasswordAttemptAction {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.password = "";
        if (value !== undefined)
            reflectionMergePartial<PasswordAttemptAction>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PasswordAttemptAction): PasswordAttemptAction {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string Password = 1 [json_name = "Password"];*/ 1:
                    message.password = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PasswordAttemptAction, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string Password = 1 [json_name = "Password"]; */
        if (message.password !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.password);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message rov_actions_proto.PasswordAttemptAction
 */
export const PasswordAttemptAction = new PasswordAttemptAction$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AuthTokenAttemptAction$Type extends MessageType<AuthTokenAttemptAction> {
    constructor() {
        super("rov_actions_proto.AuthTokenAttemptAction", [
            { no: 1, name: "Token", kind: "scalar", jsonName: "Token", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<AuthTokenAttemptAction>): AuthTokenAttemptAction {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.token = "";
        if (value !== undefined)
            reflectionMergePartial<AuthTokenAttemptAction>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AuthTokenAttemptAction): AuthTokenAttemptAction {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string Token = 1 [json_name = "Token"];*/ 1:
                    message.token = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AuthTokenAttemptAction, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string Token = 1 [json_name = "Token"]; */
        if (message.token !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.token);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message rov_actions_proto.AuthTokenAttemptAction
 */
export const AuthTokenAttemptAction = new AuthTokenAttemptAction$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TakeControlAction$Type extends MessageType<TakeControlAction> {
    constructor() {
        super("rov_actions_proto.TakeControlAction", []);
    }
    create(value?: PartialMessage<TakeControlAction>): TakeControlAction {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<TakeControlAction>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TakeControlAction): TakeControlAction {
        return target ?? this.create();
    }
    internalBinaryWrite(message: TakeControlAction, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message rov_actions_proto.TakeControlAction
 */
export const TakeControlAction = new TakeControlAction$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MoveAction$Type extends MessageType<MoveAction> {
    constructor() {
        super("rov_actions_proto.MoveAction", [
            { no: 1, name: "velocityX", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ },
            { no: 2, name: "velocityY", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ },
            { no: 3, name: "velocityZ", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ },
            { no: 4, name: "angularVelocityYaw", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ },
            { no: 5, name: "ButtonBitmask", kind: "scalar", jsonName: "ButtonBitmask", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<MoveAction>): MoveAction {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.velocityX = 0;
        message.velocityY = 0;
        message.velocityZ = 0;
        message.angularVelocityYaw = 0;
        message.buttonBitmask = 0;
        if (value !== undefined)
            reflectionMergePartial<MoveAction>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MoveAction): MoveAction {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* float velocityX */ 1:
                    message.velocityX = reader.float();
                    break;
                case /* float velocityY */ 2:
                    message.velocityY = reader.float();
                    break;
                case /* float velocityZ */ 3:
                    message.velocityZ = reader.float();
                    break;
                case /* float angularVelocityYaw */ 4:
                    message.angularVelocityYaw = reader.float();
                    break;
                case /* int32 ButtonBitmask = 5 [json_name = "ButtonBitmask"];*/ 5:
                    message.buttonBitmask = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MoveAction, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* float velocityX = 1; */
        if (message.velocityX !== 0)
            writer.tag(1, WireType.Bit32).float(message.velocityX);
        /* float velocityY = 2; */
        if (message.velocityY !== 0)
            writer.tag(2, WireType.Bit32).float(message.velocityY);
        /* float velocityZ = 3; */
        if (message.velocityZ !== 0)
            writer.tag(3, WireType.Bit32).float(message.velocityZ);
        /* float angularVelocityYaw = 4; */
        if (message.angularVelocityYaw !== 0)
            writer.tag(4, WireType.Bit32).float(message.angularVelocityYaw);
        /* int32 ButtonBitmask = 5 [json_name = "ButtonBitmask"]; */
        if (message.buttonBitmask !== 0)
            writer.tag(5, WireType.Varint).int32(message.buttonBitmask);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message rov_actions_proto.MoveAction
 */
export const MoveAction = new MoveAction$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TakePhotoAction$Type extends MessageType<TakePhotoAction> {
    constructor() {
        super("rov_actions_proto.TakePhotoAction", []);
    }
    create(value?: PartialMessage<TakePhotoAction>): TakePhotoAction {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<TakePhotoAction>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TakePhotoAction): TakePhotoAction {
        return target ?? this.create();
    }
    internalBinaryWrite(message: TakePhotoAction, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message rov_actions_proto.TakePhotoAction
 */
export const TakePhotoAction = new TakePhotoAction$Type();
// @generated message type with reflection information, may provide speed optimized methods
class StartVideoRecAction$Type extends MessageType<StartVideoRecAction> {
    constructor() {
        super("rov_actions_proto.StartVideoRecAction", []);
    }
    create(value?: PartialMessage<StartVideoRecAction>): StartVideoRecAction {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<StartVideoRecAction>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: StartVideoRecAction): StartVideoRecAction {
        return target ?? this.create();
    }
    internalBinaryWrite(message: StartVideoRecAction, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message rov_actions_proto.StartVideoRecAction
 */
export const StartVideoRecAction = new StartVideoRecAction$Type();
// @generated message type with reflection information, may provide speed optimized methods
class StopVideoRecAction$Type extends MessageType<StopVideoRecAction> {
    constructor() {
        super("rov_actions_proto.StopVideoRecAction", []);
    }
    create(value?: PartialMessage<StopVideoRecAction>): StopVideoRecAction {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<StopVideoRecAction>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: StopVideoRecAction): StopVideoRecAction {
        return target ?? this.create();
    }
    internalBinaryWrite(message: StopVideoRecAction, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message rov_actions_proto.StopVideoRecAction
 */
export const StopVideoRecAction = new StopVideoRecAction$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ToggleLightsAction$Type extends MessageType<ToggleLightsAction> {
    constructor() {
        super("rov_actions_proto.ToggleLightsAction", []);
    }
    create(value?: PartialMessage<ToggleLightsAction>): ToggleLightsAction {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<ToggleLightsAction>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ToggleLightsAction): ToggleLightsAction {
        return target ?? this.create();
    }
    internalBinaryWrite(message: ToggleLightsAction, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message rov_actions_proto.ToggleLightsAction
 */
export const ToggleLightsAction = new ToggleLightsAction$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ShutdownRovAction$Type extends MessageType<ShutdownRovAction> {
    constructor() {
        super("rov_actions_proto.ShutdownRovAction", []);
    }
    create(value?: PartialMessage<ShutdownRovAction>): ShutdownRovAction {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<ShutdownRovAction>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ShutdownRovAction): ShutdownRovAction {
        return target ?? this.create();
    }
    internalBinaryWrite(message: ShutdownRovAction, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message rov_actions_proto.ShutdownRovAction
 */
export const ShutdownRovAction = new ShutdownRovAction$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RebootRovAction$Type extends MessageType<RebootRovAction> {
    constructor() {
        super("rov_actions_proto.RebootRovAction", []);
    }
    create(value?: PartialMessage<RebootRovAction>): RebootRovAction {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<RebootRovAction>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RebootRovAction): RebootRovAction {
        return target ?? this.create();
    }
    internalBinaryWrite(message: RebootRovAction, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message rov_actions_proto.RebootRovAction
 */
export const RebootRovAction = new RebootRovAction$Type();
// @generated message type with reflection information, may provide speed optimized methods
class EnableWifiAction$Type extends MessageType<EnableWifiAction> {
    constructor() {
        super("rov_actions_proto.EnableWifiAction", []);
    }
    create(value?: PartialMessage<EnableWifiAction>): EnableWifiAction {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<EnableWifiAction>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: EnableWifiAction): EnableWifiAction {
        return target ?? this.create();
    }
    internalBinaryWrite(message: EnableWifiAction, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message rov_actions_proto.EnableWifiAction
 */
export const EnableWifiAction = new EnableWifiAction$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DisableWifiAction$Type extends MessageType<DisableWifiAction> {
    constructor() {
        super("rov_actions_proto.DisableWifiAction", []);
    }
    create(value?: PartialMessage<DisableWifiAction>): DisableWifiAction {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<DisableWifiAction>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DisableWifiAction): DisableWifiAction {
        return target ?? this.create();
    }
    internalBinaryWrite(message: DisableWifiAction, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message rov_actions_proto.DisableWifiAction
 */
export const DisableWifiAction = new DisableWifiAction$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RovStatusReportAction$Type extends MessageType<RovStatusReportAction> {
    constructor() {
        super("rov_actions_proto.RovStatusReportAction", []);
    }
    create(value?: PartialMessage<RovStatusReportAction>): RovStatusReportAction {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<RovStatusReportAction>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RovStatusReportAction): RovStatusReportAction {
        return target ?? this.create();
    }
    internalBinaryWrite(message: RovStatusReportAction, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message rov_actions_proto.RovStatusReportAction
 */
export const RovStatusReportAction = new RovStatusReportAction$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RestartRovServicesAction$Type extends MessageType<RestartRovServicesAction> {
    constructor() {
        super("rov_actions_proto.RestartRovServicesAction", []);
    }
    create(value?: PartialMessage<RestartRovServicesAction>): RestartRovServicesAction {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<RestartRovServicesAction>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RestartRovServicesAction): RestartRovServicesAction {
        return target ?? this.create();
    }
    internalBinaryWrite(message: RestartRovServicesAction, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message rov_actions_proto.RestartRovServicesAction
 */
export const RestartRovServicesAction = new RestartRovServicesAction$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SendRovLogsAction$Type extends MessageType<SendRovLogsAction> {
    constructor() {
        super("rov_actions_proto.SendRovLogsAction", []);
    }
    create(value?: PartialMessage<SendRovLogsAction>): SendRovLogsAction {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<SendRovLogsAction>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SendRovLogsAction): SendRovLogsAction {
        return target ?? this.create();
    }
    internalBinaryWrite(message: SendRovLogsAction, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message rov_actions_proto.SendRovLogsAction
 */
export const SendRovLogsAction = new SendRovLogsAction$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RefreshAllSensorsAction$Type extends MessageType<RefreshAllSensorsAction> {
    constructor() {
        super("rov_actions_proto.RefreshAllSensorsAction", []);
    }
    create(value?: PartialMessage<RefreshAllSensorsAction>): RefreshAllSensorsAction {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<RefreshAllSensorsAction>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RefreshAllSensorsAction): RefreshAllSensorsAction {
        return target ?? this.create();
    }
    internalBinaryWrite(message: RefreshAllSensorsAction, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message rov_actions_proto.RefreshAllSensorsAction
 */
export const RefreshAllSensorsAction = new RefreshAllSensorsAction$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MoveClawAction$Type extends MessageType<MoveClawAction> {
    constructor() {
        super("rov_actions_proto.MoveClawAction", [
            { no: 1, name: "Value", kind: "scalar", jsonName: "Value", T: 2 /*ScalarType.FLOAT*/ }
        ]);
    }
    create(value?: PartialMessage<MoveClawAction>): MoveClawAction {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.value = 0;
        if (value !== undefined)
            reflectionMergePartial<MoveClawAction>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MoveClawAction): MoveClawAction {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* float Value = 1 [json_name = "Value"];*/ 1:
                    message.value = reader.float();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MoveClawAction, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* float Value = 1 [json_name = "Value"]; */
        if (message.value !== 0)
            writer.tag(1, WireType.Bit32).float(message.value);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message rov_actions_proto.MoveClawAction
 */
export const MoveClawAction = new MoveClawAction$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SimplePeerSignalAction$Type extends MessageType<SimplePeerSignalAction> {
    constructor() {
        super("rov_actions_proto.SimplePeerSignalAction", [
            { no: 1, name: "Message", kind: "scalar", jsonName: "Message", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<SimplePeerSignalAction>): SimplePeerSignalAction {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.message = "";
        if (value !== undefined)
            reflectionMergePartial<SimplePeerSignalAction>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SimplePeerSignalAction): SimplePeerSignalAction {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string Message = 1 [json_name = "Message"];*/ 1:
                    message.message = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SimplePeerSignalAction, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string Message = 1 [json_name = "Message"]; */
        if (message.message !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.message);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message rov_actions_proto.SimplePeerSignalAction
 */
export const SimplePeerSignalAction = new SimplePeerSignalAction$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DisarmAction$Type extends MessageType<DisarmAction> {
    constructor() {
        super("rov_actions_proto.DisarmAction", []);
    }
    create(value?: PartialMessage<DisarmAction>): DisarmAction {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<DisarmAction>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DisarmAction): DisarmAction {
        return target ?? this.create();
    }
    internalBinaryWrite(message: DisarmAction, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message rov_actions_proto.DisarmAction
 */
export const DisarmAction = new DisarmAction$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SetAutopilotModeAction$Type extends MessageType<SetAutopilotModeAction> {
    constructor() {
        super("rov_actions_proto.SetAutopilotModeAction", [
            { no: 1, name: "mode", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<SetAutopilotModeAction>): SetAutopilotModeAction {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.mode = 0;
        if (value !== undefined)
            reflectionMergePartial<SetAutopilotModeAction>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SetAutopilotModeAction): SetAutopilotModeAction {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 mode */ 1:
                    message.mode = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SetAutopilotModeAction, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 mode = 1; */
        if (message.mode !== 0)
            writer.tag(1, WireType.Varint).int32(message.mode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message rov_actions_proto.SetAutopilotModeAction
 */
export const SetAutopilotModeAction = new SetAutopilotModeAction$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SetLivestreamingEnabledAction$Type extends MessageType<SetLivestreamingEnabledAction> {
    constructor() {
        super("rov_actions_proto.SetLivestreamingEnabledAction", [
            { no: 1, name: "Enabled", kind: "scalar", jsonName: "Enabled", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<SetLivestreamingEnabledAction>): SetLivestreamingEnabledAction {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.enabled = false;
        if (value !== undefined)
            reflectionMergePartial<SetLivestreamingEnabledAction>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SetLivestreamingEnabledAction): SetLivestreamingEnabledAction {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool Enabled = 1 [json_name = "Enabled"];*/ 1:
                    message.enabled = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SetLivestreamingEnabledAction, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool Enabled = 1 [json_name = "Enabled"]; */
        if (message.enabled !== false)
            writer.tag(1, WireType.Varint).bool(message.enabled);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message rov_actions_proto.SetLivestreamingEnabledAction
 */
export const SetLivestreamingEnabledAction = new SetLivestreamingEnabledAction$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ActionBackendMetadata$Type extends MessageType<ActionBackendMetadata> {
    constructor() {
        super("rov_actions_proto.ActionBackendMetadata", [
            { no: 1, name: "FromUserId", kind: "scalar", jsonName: "FromUserId", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "InternalWebpageEvt", kind: "enum", jsonName: "InternalWebpageEvt", T: () => ["rov_actions_proto.InternalWebpageEvent", InternalWebpageEvent] }
        ]);
    }
    create(value?: PartialMessage<ActionBackendMetadata>): ActionBackendMetadata {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.fromUserId = "";
        message.internalWebpageEvt = 0;
        if (value !== undefined)
            reflectionMergePartial<ActionBackendMetadata>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ActionBackendMetadata): ActionBackendMetadata {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string FromUserId = 1 [json_name = "FromUserId"];*/ 1:
                    message.fromUserId = reader.string();
                    break;
                case /* rov_actions_proto.InternalWebpageEvent InternalWebpageEvt = 2 [json_name = "InternalWebpageEvt"];*/ 2:
                    message.internalWebpageEvt = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ActionBackendMetadata, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string FromUserId = 1 [json_name = "FromUserId"]; */
        if (message.fromUserId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.fromUserId);
        /* rov_actions_proto.InternalWebpageEvent InternalWebpageEvt = 2 [json_name = "InternalWebpageEvt"]; */
        if (message.internalWebpageEvt !== 0)
            writer.tag(2, WireType.Varint).int32(message.internalWebpageEvt);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message rov_actions_proto.ActionBackendMetadata
 */
export const ActionBackendMetadata = new ActionBackendMetadata$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RovAction$Type extends MessageType<RovAction> {
    constructor() {
        super("rov_actions_proto.RovAction", [
            { no: 2, name: "ExchangeId", kind: "scalar", jsonName: "ExchangeId", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "Ping", kind: "message", jsonName: "Ping", oneof: "body", T: () => PingAction },
            { no: 4, name: "PasswordAttempt", kind: "message", jsonName: "PasswordAttempt", oneof: "body", T: () => PasswordAttemptAction },
            { no: 5, name: "AuthTokenAttempt", kind: "message", jsonName: "AuthTokenAttempt", oneof: "body", T: () => AuthTokenAttemptAction },
            { no: 6, name: "TakeControl", kind: "message", jsonName: "TakeControl", oneof: "body", T: () => TakeControlAction },
            { no: 7, name: "Move", kind: "message", jsonName: "Move", oneof: "body", T: () => MoveAction },
            { no: 9, name: "TakePhoto", kind: "message", jsonName: "TakePhoto", oneof: "body", T: () => TakePhotoAction },
            { no: 10, name: "StartVideoRec", kind: "message", jsonName: "StartVideoRec", oneof: "body", T: () => StartVideoRecAction },
            { no: 11, name: "StopVideoRec", kind: "message", jsonName: "StopVideoRec", oneof: "body", T: () => StopVideoRecAction },
            { no: 12, name: "ToggleLights", kind: "message", jsonName: "ToggleLights", oneof: "body", T: () => ToggleLightsAction },
            { no: 13, name: "ShutdownRov", kind: "message", jsonName: "ShutdownRov", oneof: "body", T: () => ShutdownRovAction },
            { no: 14, name: "RebootRov", kind: "message", jsonName: "RebootRov", oneof: "body", T: () => RebootRovAction },
            { no: 15, name: "EnableWifi", kind: "message", jsonName: "EnableWifi", oneof: "body", T: () => EnableWifiAction },
            { no: 16, name: "DisableWifi", kind: "message", jsonName: "DisableWifi", oneof: "body", T: () => DisableWifiAction },
            { no: 17, name: "RovStatusReport", kind: "message", jsonName: "RovStatusReport", oneof: "body", T: () => RovStatusReportAction },
            { no: 18, name: "RestartRovServices", kind: "message", jsonName: "RestartRovServices", oneof: "body", T: () => RestartRovServicesAction },
            { no: 19, name: "SendRovLogs", kind: "message", jsonName: "SendRovLogs", oneof: "body", T: () => SendRovLogsAction },
            { no: 20, name: "RefreshAllSensors", kind: "message", jsonName: "RefreshAllSensors", oneof: "body", T: () => RefreshAllSensorsAction },
            { no: 21, name: "MoveClaw", kind: "message", jsonName: "MoveClaw", oneof: "body", T: () => MoveClawAction },
            { no: 22, name: "SimplePeerSignal", kind: "message", jsonName: "SimplePeerSignal", oneof: "body", T: () => SimplePeerSignalAction },
            { no: 23, name: "Disarm", kind: "message", jsonName: "Disarm", oneof: "body", T: () => DisarmAction },
            { no: 24, name: "SetAutopilotMode", kind: "message", jsonName: "SetAutopilotMode", oneof: "body", T: () => SetAutopilotModeAction },
            { no: 25, name: "SetLivekitVideoOptions", kind: "message", jsonName: "SetLivekitVideoOptions", oneof: "body", T: () => SetLivekitVideoOptionsAction },
            { no: 26, name: "SetSimplePeerVideoOptions", kind: "message", jsonName: "SetSimplePeerVideoOptions", oneof: "body", T: () => SetSimplePeerVideoOptionsAction },
            { no: 27, name: "SetLivestreamingEnabled", kind: "message", jsonName: "SetLivestreamingEnabled", oneof: "body", T: () => SetLivestreamingEnabledAction }
        ]);
    }
    create(value?: PartialMessage<RovAction>): RovAction {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.exchangeId = 0;
        message.body = { oneofKind: undefined };
        if (value !== undefined)
            reflectionMergePartial<RovAction>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RovAction): RovAction {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 ExchangeId = 2 [json_name = "ExchangeId"];*/ 2:
                    message.exchangeId = reader.int32();
                    break;
                case /* rov_actions_proto.PingAction Ping = 3 [json_name = "Ping"];*/ 3:
                    message.body = {
                        oneofKind: "ping",
                        ping: PingAction.internalBinaryRead(reader, reader.uint32(), options, (message.body as any).ping)
                    };
                    break;
                case /* rov_actions_proto.PasswordAttemptAction PasswordAttempt = 4 [json_name = "PasswordAttempt"];*/ 4:
                    message.body = {
                        oneofKind: "passwordAttempt",
                        passwordAttempt: PasswordAttemptAction.internalBinaryRead(reader, reader.uint32(), options, (message.body as any).passwordAttempt)
                    };
                    break;
                case /* rov_actions_proto.AuthTokenAttemptAction AuthTokenAttempt = 5 [json_name = "AuthTokenAttempt"];*/ 5:
                    message.body = {
                        oneofKind: "authTokenAttempt",
                        authTokenAttempt: AuthTokenAttemptAction.internalBinaryRead(reader, reader.uint32(), options, (message.body as any).authTokenAttempt)
                    };
                    break;
                case /* rov_actions_proto.TakeControlAction TakeControl = 6 [json_name = "TakeControl"];*/ 6:
                    message.body = {
                        oneofKind: "takeControl",
                        takeControl: TakeControlAction.internalBinaryRead(reader, reader.uint32(), options, (message.body as any).takeControl)
                    };
                    break;
                case /* rov_actions_proto.MoveAction Move = 7 [json_name = "Move"];*/ 7:
                    message.body = {
                        oneofKind: "move",
                        move: MoveAction.internalBinaryRead(reader, reader.uint32(), options, (message.body as any).move)
                    };
                    break;
                case /* rov_actions_proto.TakePhotoAction TakePhoto = 9 [json_name = "TakePhoto"];*/ 9:
                    message.body = {
                        oneofKind: "takePhoto",
                        takePhoto: TakePhotoAction.internalBinaryRead(reader, reader.uint32(), options, (message.body as any).takePhoto)
                    };
                    break;
                case /* rov_actions_proto.StartVideoRecAction StartVideoRec = 10 [json_name = "StartVideoRec"];*/ 10:
                    message.body = {
                        oneofKind: "startVideoRec",
                        startVideoRec: StartVideoRecAction.internalBinaryRead(reader, reader.uint32(), options, (message.body as any).startVideoRec)
                    };
                    break;
                case /* rov_actions_proto.StopVideoRecAction StopVideoRec = 11 [json_name = "StopVideoRec"];*/ 11:
                    message.body = {
                        oneofKind: "stopVideoRec",
                        stopVideoRec: StopVideoRecAction.internalBinaryRead(reader, reader.uint32(), options, (message.body as any).stopVideoRec)
                    };
                    break;
                case /* rov_actions_proto.ToggleLightsAction ToggleLights = 12 [json_name = "ToggleLights"];*/ 12:
                    message.body = {
                        oneofKind: "toggleLights",
                        toggleLights: ToggleLightsAction.internalBinaryRead(reader, reader.uint32(), options, (message.body as any).toggleLights)
                    };
                    break;
                case /* rov_actions_proto.ShutdownRovAction ShutdownRov = 13 [json_name = "ShutdownRov"];*/ 13:
                    message.body = {
                        oneofKind: "shutdownRov",
                        shutdownRov: ShutdownRovAction.internalBinaryRead(reader, reader.uint32(), options, (message.body as any).shutdownRov)
                    };
                    break;
                case /* rov_actions_proto.RebootRovAction RebootRov = 14 [json_name = "RebootRov"];*/ 14:
                    message.body = {
                        oneofKind: "rebootRov",
                        rebootRov: RebootRovAction.internalBinaryRead(reader, reader.uint32(), options, (message.body as any).rebootRov)
                    };
                    break;
                case /* rov_actions_proto.EnableWifiAction EnableWifi = 15 [json_name = "EnableWifi"];*/ 15:
                    message.body = {
                        oneofKind: "enableWifi",
                        enableWifi: EnableWifiAction.internalBinaryRead(reader, reader.uint32(), options, (message.body as any).enableWifi)
                    };
                    break;
                case /* rov_actions_proto.DisableWifiAction DisableWifi = 16 [json_name = "DisableWifi"];*/ 16:
                    message.body = {
                        oneofKind: "disableWifi",
                        disableWifi: DisableWifiAction.internalBinaryRead(reader, reader.uint32(), options, (message.body as any).disableWifi)
                    };
                    break;
                case /* rov_actions_proto.RovStatusReportAction RovStatusReport = 17 [json_name = "RovStatusReport"];*/ 17:
                    message.body = {
                        oneofKind: "rovStatusReport",
                        rovStatusReport: RovStatusReportAction.internalBinaryRead(reader, reader.uint32(), options, (message.body as any).rovStatusReport)
                    };
                    break;
                case /* rov_actions_proto.RestartRovServicesAction RestartRovServices = 18 [json_name = "RestartRovServices"];*/ 18:
                    message.body = {
                        oneofKind: "restartRovServices",
                        restartRovServices: RestartRovServicesAction.internalBinaryRead(reader, reader.uint32(), options, (message.body as any).restartRovServices)
                    };
                    break;
                case /* rov_actions_proto.SendRovLogsAction SendRovLogs = 19 [json_name = "SendRovLogs"];*/ 19:
                    message.body = {
                        oneofKind: "sendRovLogs",
                        sendRovLogs: SendRovLogsAction.internalBinaryRead(reader, reader.uint32(), options, (message.body as any).sendRovLogs)
                    };
                    break;
                case /* rov_actions_proto.RefreshAllSensorsAction RefreshAllSensors = 20 [json_name = "RefreshAllSensors"];*/ 20:
                    message.body = {
                        oneofKind: "refreshAllSensors",
                        refreshAllSensors: RefreshAllSensorsAction.internalBinaryRead(reader, reader.uint32(), options, (message.body as any).refreshAllSensors)
                    };
                    break;
                case /* rov_actions_proto.MoveClawAction MoveClaw = 21 [json_name = "MoveClaw"];*/ 21:
                    message.body = {
                        oneofKind: "moveClaw",
                        moveClaw: MoveClawAction.internalBinaryRead(reader, reader.uint32(), options, (message.body as any).moveClaw)
                    };
                    break;
                case /* rov_actions_proto.SimplePeerSignalAction SimplePeerSignal = 22 [json_name = "SimplePeerSignal"];*/ 22:
                    message.body = {
                        oneofKind: "simplePeerSignal",
                        simplePeerSignal: SimplePeerSignalAction.internalBinaryRead(reader, reader.uint32(), options, (message.body as any).simplePeerSignal)
                    };
                    break;
                case /* rov_actions_proto.DisarmAction Disarm = 23 [json_name = "Disarm"];*/ 23:
                    message.body = {
                        oneofKind: "disarm",
                        disarm: DisarmAction.internalBinaryRead(reader, reader.uint32(), options, (message.body as any).disarm)
                    };
                    break;
                case /* rov_actions_proto.SetAutopilotModeAction SetAutopilotMode = 24 [json_name = "SetAutopilotMode"];*/ 24:
                    message.body = {
                        oneofKind: "setAutopilotMode",
                        setAutopilotMode: SetAutopilotModeAction.internalBinaryRead(reader, reader.uint32(), options, (message.body as any).setAutopilotMode)
                    };
                    break;
                case /* rov_actions_proto.SetLivekitVideoOptionsAction SetLivekitVideoOptions = 25 [json_name = "SetLivekitVideoOptions"];*/ 25:
                    message.body = {
                        oneofKind: "setLivekitVideoOptions",
                        setLivekitVideoOptions: SetLivekitVideoOptionsAction.internalBinaryRead(reader, reader.uint32(), options, (message.body as any).setLivekitVideoOptions)
                    };
                    break;
                case /* rov_actions_proto.SetSimplePeerVideoOptionsAction SetSimplePeerVideoOptions = 26 [json_name = "SetSimplePeerVideoOptions"];*/ 26:
                    message.body = {
                        oneofKind: "setSimplePeerVideoOptions",
                        setSimplePeerVideoOptions: SetSimplePeerVideoOptionsAction.internalBinaryRead(reader, reader.uint32(), options, (message.body as any).setSimplePeerVideoOptions)
                    };
                    break;
                case /* rov_actions_proto.SetLivestreamingEnabledAction SetLivestreamingEnabled = 27 [json_name = "SetLivestreamingEnabled"];*/ 27:
                    message.body = {
                        oneofKind: "setLivestreamingEnabled",
                        setLivestreamingEnabled: SetLivestreamingEnabledAction.internalBinaryRead(reader, reader.uint32(), options, (message.body as any).setLivestreamingEnabled)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RovAction, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 ExchangeId = 2 [json_name = "ExchangeId"]; */
        if (message.exchangeId !== 0)
            writer.tag(2, WireType.Varint).int32(message.exchangeId);
        /* rov_actions_proto.PingAction Ping = 3 [json_name = "Ping"]; */
        if (message.body.oneofKind === "ping")
            PingAction.internalBinaryWrite(message.body.ping, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* rov_actions_proto.PasswordAttemptAction PasswordAttempt = 4 [json_name = "PasswordAttempt"]; */
        if (message.body.oneofKind === "passwordAttempt")
            PasswordAttemptAction.internalBinaryWrite(message.body.passwordAttempt, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* rov_actions_proto.AuthTokenAttemptAction AuthTokenAttempt = 5 [json_name = "AuthTokenAttempt"]; */
        if (message.body.oneofKind === "authTokenAttempt")
            AuthTokenAttemptAction.internalBinaryWrite(message.body.authTokenAttempt, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* rov_actions_proto.TakeControlAction TakeControl = 6 [json_name = "TakeControl"]; */
        if (message.body.oneofKind === "takeControl")
            TakeControlAction.internalBinaryWrite(message.body.takeControl, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* rov_actions_proto.MoveAction Move = 7 [json_name = "Move"]; */
        if (message.body.oneofKind === "move")
            MoveAction.internalBinaryWrite(message.body.move, writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        /* rov_actions_proto.TakePhotoAction TakePhoto = 9 [json_name = "TakePhoto"]; */
        if (message.body.oneofKind === "takePhoto")
            TakePhotoAction.internalBinaryWrite(message.body.takePhoto, writer.tag(9, WireType.LengthDelimited).fork(), options).join();
        /* rov_actions_proto.StartVideoRecAction StartVideoRec = 10 [json_name = "StartVideoRec"]; */
        if (message.body.oneofKind === "startVideoRec")
            StartVideoRecAction.internalBinaryWrite(message.body.startVideoRec, writer.tag(10, WireType.LengthDelimited).fork(), options).join();
        /* rov_actions_proto.StopVideoRecAction StopVideoRec = 11 [json_name = "StopVideoRec"]; */
        if (message.body.oneofKind === "stopVideoRec")
            StopVideoRecAction.internalBinaryWrite(message.body.stopVideoRec, writer.tag(11, WireType.LengthDelimited).fork(), options).join();
        /* rov_actions_proto.ToggleLightsAction ToggleLights = 12 [json_name = "ToggleLights"]; */
        if (message.body.oneofKind === "toggleLights")
            ToggleLightsAction.internalBinaryWrite(message.body.toggleLights, writer.tag(12, WireType.LengthDelimited).fork(), options).join();
        /* rov_actions_proto.ShutdownRovAction ShutdownRov = 13 [json_name = "ShutdownRov"]; */
        if (message.body.oneofKind === "shutdownRov")
            ShutdownRovAction.internalBinaryWrite(message.body.shutdownRov, writer.tag(13, WireType.LengthDelimited).fork(), options).join();
        /* rov_actions_proto.RebootRovAction RebootRov = 14 [json_name = "RebootRov"]; */
        if (message.body.oneofKind === "rebootRov")
            RebootRovAction.internalBinaryWrite(message.body.rebootRov, writer.tag(14, WireType.LengthDelimited).fork(), options).join();
        /* rov_actions_proto.EnableWifiAction EnableWifi = 15 [json_name = "EnableWifi"]; */
        if (message.body.oneofKind === "enableWifi")
            EnableWifiAction.internalBinaryWrite(message.body.enableWifi, writer.tag(15, WireType.LengthDelimited).fork(), options).join();
        /* rov_actions_proto.DisableWifiAction DisableWifi = 16 [json_name = "DisableWifi"]; */
        if (message.body.oneofKind === "disableWifi")
            DisableWifiAction.internalBinaryWrite(message.body.disableWifi, writer.tag(16, WireType.LengthDelimited).fork(), options).join();
        /* rov_actions_proto.RovStatusReportAction RovStatusReport = 17 [json_name = "RovStatusReport"]; */
        if (message.body.oneofKind === "rovStatusReport")
            RovStatusReportAction.internalBinaryWrite(message.body.rovStatusReport, writer.tag(17, WireType.LengthDelimited).fork(), options).join();
        /* rov_actions_proto.RestartRovServicesAction RestartRovServices = 18 [json_name = "RestartRovServices"]; */
        if (message.body.oneofKind === "restartRovServices")
            RestartRovServicesAction.internalBinaryWrite(message.body.restartRovServices, writer.tag(18, WireType.LengthDelimited).fork(), options).join();
        /* rov_actions_proto.SendRovLogsAction SendRovLogs = 19 [json_name = "SendRovLogs"]; */
        if (message.body.oneofKind === "sendRovLogs")
            SendRovLogsAction.internalBinaryWrite(message.body.sendRovLogs, writer.tag(19, WireType.LengthDelimited).fork(), options).join();
        /* rov_actions_proto.RefreshAllSensorsAction RefreshAllSensors = 20 [json_name = "RefreshAllSensors"]; */
        if (message.body.oneofKind === "refreshAllSensors")
            RefreshAllSensorsAction.internalBinaryWrite(message.body.refreshAllSensors, writer.tag(20, WireType.LengthDelimited).fork(), options).join();
        /* rov_actions_proto.MoveClawAction MoveClaw = 21 [json_name = "MoveClaw"]; */
        if (message.body.oneofKind === "moveClaw")
            MoveClawAction.internalBinaryWrite(message.body.moveClaw, writer.tag(21, WireType.LengthDelimited).fork(), options).join();
        /* rov_actions_proto.SimplePeerSignalAction SimplePeerSignal = 22 [json_name = "SimplePeerSignal"]; */
        if (message.body.oneofKind === "simplePeerSignal")
            SimplePeerSignalAction.internalBinaryWrite(message.body.simplePeerSignal, writer.tag(22, WireType.LengthDelimited).fork(), options).join();
        /* rov_actions_proto.DisarmAction Disarm = 23 [json_name = "Disarm"]; */
        if (message.body.oneofKind === "disarm")
            DisarmAction.internalBinaryWrite(message.body.disarm, writer.tag(23, WireType.LengthDelimited).fork(), options).join();
        /* rov_actions_proto.SetAutopilotModeAction SetAutopilotMode = 24 [json_name = "SetAutopilotMode"]; */
        if (message.body.oneofKind === "setAutopilotMode")
            SetAutopilotModeAction.internalBinaryWrite(message.body.setAutopilotMode, writer.tag(24, WireType.LengthDelimited).fork(), options).join();
        /* rov_actions_proto.SetLivekitVideoOptionsAction SetLivekitVideoOptions = 25 [json_name = "SetLivekitVideoOptions"]; */
        if (message.body.oneofKind === "setLivekitVideoOptions")
            SetLivekitVideoOptionsAction.internalBinaryWrite(message.body.setLivekitVideoOptions, writer.tag(25, WireType.LengthDelimited).fork(), options).join();
        /* rov_actions_proto.SetSimplePeerVideoOptionsAction SetSimplePeerVideoOptions = 26 [json_name = "SetSimplePeerVideoOptions"]; */
        if (message.body.oneofKind === "setSimplePeerVideoOptions")
            SetSimplePeerVideoOptionsAction.internalBinaryWrite(message.body.setSimplePeerVideoOptions, writer.tag(26, WireType.LengthDelimited).fork(), options).join();
        /* rov_actions_proto.SetLivestreamingEnabledAction SetLivestreamingEnabled = 27 [json_name = "SetLivestreamingEnabled"]; */
        if (message.body.oneofKind === "setLivestreamingEnabled")
            SetLivestreamingEnabledAction.internalBinaryWrite(message.body.setLivestreamingEnabled, writer.tag(27, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message rov_actions_proto.RovAction
 */
export const RovAction = new RovAction$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DoneResponse$Type extends MessageType<DoneResponse> {
    constructor() {
        super("rov_actions_proto.DoneResponse", [
            { no: 1, name: "Message", kind: "scalar", jsonName: "Message", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<DoneResponse>): DoneResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.message = "";
        if (value !== undefined)
            reflectionMergePartial<DoneResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DoneResponse): DoneResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string Message = 1 [json_name = "Message"];*/ 1:
                    message.message = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DoneResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string Message = 1 [json_name = "Message"]; */
        if (message.message !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.message);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message rov_actions_proto.DoneResponse
 */
export const DoneResponse = new DoneResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ErrorResponse$Type extends MessageType<ErrorResponse> {
    constructor() {
        super("rov_actions_proto.ErrorResponse", [
            { no: 1, name: "Message", kind: "scalar", jsonName: "Message", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ErrorResponse>): ErrorResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.message = "";
        if (value !== undefined)
            reflectionMergePartial<ErrorResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ErrorResponse): ErrorResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string Message = 1 [json_name = "Message"];*/ 1:
                    message.message = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ErrorResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string Message = 1 [json_name = "Message"]; */
        if (message.message !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.message);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message rov_actions_proto.ErrorResponse
 */
export const ErrorResponse = new ErrorResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PongResponse$Type extends MessageType<PongResponse> {
    constructor() {
        super("rov_actions_proto.PongResponse", [
            { no: 1, name: "Time", kind: "scalar", jsonName: "Time", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ }
        ]);
    }
    create(value?: PartialMessage<PongResponse>): PongResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.time = 0;
        if (value !== undefined)
            reflectionMergePartial<PongResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PongResponse): PongResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 Time = 1 [json_name = "Time"];*/ 1:
                    message.time = reader.int64().toNumber();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PongResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 Time = 1 [json_name = "Time"]; */
        if (message.time !== 0)
            writer.tag(1, WireType.Varint).int64(message.time);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message rov_actions_proto.PongResponse
 */
export const PongResponse = new PongResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Measurement$Type extends MessageType<Measurement> {
    constructor() {
        super("rov_actions_proto.Measurement", [
            { no: 1, name: "MeasurementType", kind: "enum", jsonName: "MeasurementType", T: () => ["rov_actions_proto.SensorMeasurmentTypes", SensorMeasurmentTypes] },
            { no: 2, name: "Value", kind: "scalar", jsonName: "Value", T: 2 /*ScalarType.FLOAT*/ }
        ]);
    }
    create(value?: PartialMessage<Measurement>): Measurement {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.measurementType = 0;
        message.value = 0;
        if (value !== undefined)
            reflectionMergePartial<Measurement>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Measurement): Measurement {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* rov_actions_proto.SensorMeasurmentTypes MeasurementType = 1 [json_name = "MeasurementType"];*/ 1:
                    message.measurementType = reader.int32();
                    break;
                case /* float Value = 2 [json_name = "Value"];*/ 2:
                    message.value = reader.float();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Measurement, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* rov_actions_proto.SensorMeasurmentTypes MeasurementType = 1 [json_name = "MeasurementType"]; */
        if (message.measurementType !== 0)
            writer.tag(1, WireType.Varint).int32(message.measurementType);
        /* float Value = 2 [json_name = "Value"]; */
        if (message.value !== 0)
            writer.tag(2, WireType.Bit32).float(message.value);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message rov_actions_proto.Measurement
 */
export const Measurement = new Measurement$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SensorUpdatesResponse$Type extends MessageType<SensorUpdatesResponse> {
    constructor() {
        super("rov_actions_proto.SensorUpdatesResponse", [
            { no: 1, name: "MeasurementUpdates", kind: "message", jsonName: "MeasurementUpdates", repeat: 1 /*RepeatType.PACKED*/, T: () => Measurement }
        ]);
    }
    create(value?: PartialMessage<SensorUpdatesResponse>): SensorUpdatesResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.measurementUpdates = [];
        if (value !== undefined)
            reflectionMergePartial<SensorUpdatesResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SensorUpdatesResponse): SensorUpdatesResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated rov_actions_proto.Measurement MeasurementUpdates = 1 [json_name = "MeasurementUpdates"];*/ 1:
                    message.measurementUpdates.push(Measurement.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SensorUpdatesResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated rov_actions_proto.Measurement MeasurementUpdates = 1 [json_name = "MeasurementUpdates"]; */
        for (let i = 0; i < message.measurementUpdates.length; i++)
            Measurement.internalBinaryWrite(message.measurementUpdates[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message rov_actions_proto.SensorUpdatesResponse
 */
export const SensorUpdatesResponse = new SensorUpdatesResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PasswordRequiredResponse$Type extends MessageType<PasswordRequiredResponse> {
    constructor() {
        super("rov_actions_proto.PasswordRequiredResponse", [
            { no: 1, name: "RovId", kind: "scalar", jsonName: "RovId", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<PasswordRequiredResponse>): PasswordRequiredResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.rovId = "";
        if (value !== undefined)
            reflectionMergePartial<PasswordRequiredResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PasswordRequiredResponse): PasswordRequiredResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string RovId = 1 [json_name = "RovId"];*/ 1:
                    message.rovId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PasswordRequiredResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string RovId = 1 [json_name = "RovId"]; */
        if (message.rovId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.rovId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message rov_actions_proto.PasswordRequiredResponse
 */
export const PasswordRequiredResponse = new PasswordRequiredResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PasswordAcceptedResponse$Type extends MessageType<PasswordAcceptedResponse> {
    constructor() {
        super("rov_actions_proto.PasswordAcceptedResponse", [
            { no: 1, name: "AuthToken", kind: "scalar", jsonName: "AuthToken", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<PasswordAcceptedResponse>): PasswordAcceptedResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.authToken = "";
        if (value !== undefined)
            reflectionMergePartial<PasswordAcceptedResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PasswordAcceptedResponse): PasswordAcceptedResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string AuthToken = 1 [json_name = "AuthToken"];*/ 1:
                    message.authToken = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PasswordAcceptedResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string AuthToken = 1 [json_name = "AuthToken"]; */
        if (message.authToken !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.authToken);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message rov_actions_proto.PasswordAcceptedResponse
 */
export const PasswordAcceptedResponse = new PasswordAcceptedResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PasswordInvalidResponse$Type extends MessageType<PasswordInvalidResponse> {
    constructor() {
        super("rov_actions_proto.PasswordInvalidResponse", []);
    }
    create(value?: PartialMessage<PasswordInvalidResponse>): PasswordInvalidResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<PasswordInvalidResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PasswordInvalidResponse): PasswordInvalidResponse {
        return target ?? this.create();
    }
    internalBinaryWrite(message: PasswordInvalidResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message rov_actions_proto.PasswordInvalidResponse
 */
export const PasswordInvalidResponse = new PasswordInvalidResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PilotChangedResponse$Type extends MessageType<PilotChangedResponse> {
    constructor() {
        super("rov_actions_proto.PilotChangedResponse", [
            { no: 1, name: "PilotIdentity", kind: "scalar", jsonName: "PilotIdentity", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<PilotChangedResponse>): PilotChangedResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.pilotIdentity = "";
        if (value !== undefined)
            reflectionMergePartial<PilotChangedResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PilotChangedResponse): PilotChangedResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string PilotIdentity = 1 [json_name = "PilotIdentity"];*/ 1:
                    message.pilotIdentity = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PilotChangedResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string PilotIdentity = 1 [json_name = "PilotIdentity"]; */
        if (message.pilotIdentity !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.pilotIdentity);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message rov_actions_proto.PilotChangedResponse
 */
export const PilotChangedResponse = new PilotChangedResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ClientConnectedResponse$Type extends MessageType<ClientConnectedResponse> {
    constructor() {
        super("rov_actions_proto.ClientConnectedResponse", [
            { no: 1, name: "ClientPeerId", kind: "scalar", jsonName: "ClientPeerId", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ClientConnectedResponse>): ClientConnectedResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.clientPeerId = "";
        if (value !== undefined)
            reflectionMergePartial<ClientConnectedResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ClientConnectedResponse): ClientConnectedResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string ClientPeerId = 1 [json_name = "ClientPeerId"];*/ 1:
                    message.clientPeerId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ClientConnectedResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string ClientPeerId = 1 [json_name = "ClientPeerId"]; */
        if (message.clientPeerId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.clientPeerId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message rov_actions_proto.ClientConnectedResponse
 */
export const ClientConnectedResponse = new ClientConnectedResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ClientDisconnectedResponse$Type extends MessageType<ClientDisconnectedResponse> {
    constructor() {
        super("rov_actions_proto.ClientDisconnectedResponse", [
            { no: 1, name: "ClientPeerId", kind: "scalar", jsonName: "ClientPeerId", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ClientDisconnectedResponse>): ClientDisconnectedResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.clientPeerId = "";
        if (value !== undefined)
            reflectionMergePartial<ClientDisconnectedResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ClientDisconnectedResponse): ClientDisconnectedResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string ClientPeerId = 1 [json_name = "ClientPeerId"];*/ 1:
                    message.clientPeerId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ClientDisconnectedResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string ClientPeerId = 1 [json_name = "ClientPeerId"]; */
        if (message.clientPeerId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.clientPeerId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message rov_actions_proto.ClientDisconnectedResponse
 */
export const ClientDisconnectedResponse = new ClientDisconnectedResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ArmingResponse$Type extends MessageType<ArmingResponse> {
    constructor() {
        super("rov_actions_proto.ArmingResponse", [
            { no: 1, name: "armed", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<ArmingResponse>): ArmingResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.armed = false;
        if (value !== undefined)
            reflectionMergePartial<ArmingResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ArmingResponse): ArmingResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool armed */ 1:
                    message.armed = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ArmingResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool armed = 1; */
        if (message.armed !== false)
            writer.tag(1, WireType.Varint).bool(message.armed);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message rov_actions_proto.ArmingResponse
 */
export const ArmingResponse = new ArmingResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ContinuedOutputResponse$Type extends MessageType<ContinuedOutputResponse> {
    constructor() {
        super("rov_actions_proto.ContinuedOutputResponse", [
            { no: 1, name: "Message", kind: "scalar", jsonName: "Message", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ContinuedOutputResponse>): ContinuedOutputResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.message = "";
        if (value !== undefined)
            reflectionMergePartial<ContinuedOutputResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ContinuedOutputResponse): ContinuedOutputResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string Message = 1 [json_name = "Message"];*/ 1:
                    message.message = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ContinuedOutputResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string Message = 1 [json_name = "Message"]; */
        if (message.message !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.message);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message rov_actions_proto.ContinuedOutputResponse
 */
export const ContinuedOutputResponse = new ContinuedOutputResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MavlinkResponse$Type extends MessageType<MavlinkResponse> {
    constructor() {
        super("rov_actions_proto.MavlinkResponse", [
            { no: 1, name: "Message", kind: "scalar", jsonName: "Message", T: 12 /*ScalarType.BYTES*/ }
        ]);
    }
    create(value?: PartialMessage<MavlinkResponse>): MavlinkResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.message = new Uint8Array(0);
        if (value !== undefined)
            reflectionMergePartial<MavlinkResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MavlinkResponse): MavlinkResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bytes Message = 1 [json_name = "Message"];*/ 1:
                    message.message = reader.bytes();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MavlinkResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bytes Message = 1 [json_name = "Message"]; */
        if (message.message.length)
            writer.tag(1, WireType.LengthDelimited).bytes(message.message);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message rov_actions_proto.MavlinkResponse
 */
export const MavlinkResponse = new MavlinkResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SimplePeerSignalResponse$Type extends MessageType<SimplePeerSignalResponse> {
    constructor() {
        super("rov_actions_proto.SimplePeerSignalResponse", [
            { no: 1, name: "Message", kind: "scalar", jsonName: "Message", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<SimplePeerSignalResponse>): SimplePeerSignalResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.message = "";
        if (value !== undefined)
            reflectionMergePartial<SimplePeerSignalResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SimplePeerSignalResponse): SimplePeerSignalResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string Message = 1 [json_name = "Message"];*/ 1:
                    message.message = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SimplePeerSignalResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string Message = 1 [json_name = "Message"]; */
        if (message.message !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.message);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message rov_actions_proto.SimplePeerSignalResponse
 */
export const SimplePeerSignalResponse = new SimplePeerSignalResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SystemMonitorResponse$Type extends MessageType<SystemMonitorResponse> {
    constructor() {
        super("rov_actions_proto.SystemMonitorResponse", [
            { no: 1, name: "CpuTemp", kind: "scalar", jsonName: "CpuTemp", T: 2 /*ScalarType.FLOAT*/ },
            { no: 2, name: "CpuUsage", kind: "scalar", jsonName: "CpuUsage", T: 2 /*ScalarType.FLOAT*/ },
            { no: 3, name: "MemoryUsage", kind: "scalar", jsonName: "MemoryUsage", T: 2 /*ScalarType.FLOAT*/ },
            { no: 4, name: "DiskUsage", kind: "scalar", jsonName: "DiskUsage", T: 2 /*ScalarType.FLOAT*/ },
            { no: 5, name: "Warnings", kind: "scalar", jsonName: "Warnings", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<SystemMonitorResponse>): SystemMonitorResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.cpuTemp = 0;
        message.cpuUsage = 0;
        message.memoryUsage = 0;
        message.diskUsage = 0;
        message.warnings = [];
        if (value !== undefined)
            reflectionMergePartial<SystemMonitorResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SystemMonitorResponse): SystemMonitorResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* float CpuTemp = 1 [json_name = "CpuTemp"];*/ 1:
                    message.cpuTemp = reader.float();
                    break;
                case /* float CpuUsage = 2 [json_name = "CpuUsage"];*/ 2:
                    message.cpuUsage = reader.float();
                    break;
                case /* float MemoryUsage = 3 [json_name = "MemoryUsage"];*/ 3:
                    message.memoryUsage = reader.float();
                    break;
                case /* float DiskUsage = 4 [json_name = "DiskUsage"];*/ 4:
                    message.diskUsage = reader.float();
                    break;
                case /* repeated string Warnings = 5 [json_name = "Warnings"];*/ 5:
                    message.warnings.push(reader.string());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SystemMonitorResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* float CpuTemp = 1 [json_name = "CpuTemp"]; */
        if (message.cpuTemp !== 0)
            writer.tag(1, WireType.Bit32).float(message.cpuTemp);
        /* float CpuUsage = 2 [json_name = "CpuUsage"]; */
        if (message.cpuUsage !== 0)
            writer.tag(2, WireType.Bit32).float(message.cpuUsage);
        /* float MemoryUsage = 3 [json_name = "MemoryUsage"]; */
        if (message.memoryUsage !== 0)
            writer.tag(3, WireType.Bit32).float(message.memoryUsage);
        /* float DiskUsage = 4 [json_name = "DiskUsage"]; */
        if (message.diskUsage !== 0)
            writer.tag(4, WireType.Bit32).float(message.diskUsage);
        /* repeated string Warnings = 5 [json_name = "Warnings"]; */
        for (let i = 0; i < message.warnings.length; i++)
            writer.tag(5, WireType.LengthDelimited).string(message.warnings[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message rov_actions_proto.SystemMonitorResponse
 */
export const SystemMonitorResponse = new SystemMonitorResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LogMessageResponse$Type extends MessageType<LogMessageResponse> {
    constructor() {
        super("rov_actions_proto.LogMessageResponse", [
            { no: 1, name: "Message", kind: "scalar", jsonName: "Message", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "Level", kind: "enum", jsonName: "Level", T: () => ["rov_actions_proto.LogLevel", LogLevel] }
        ]);
    }
    create(value?: PartialMessage<LogMessageResponse>): LogMessageResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.message = "";
        message.level = 0;
        if (value !== undefined)
            reflectionMergePartial<LogMessageResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LogMessageResponse): LogMessageResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string Message = 1 [json_name = "Message"];*/ 1:
                    message.message = reader.string();
                    break;
                case /* rov_actions_proto.LogLevel Level = 2 [json_name = "Level"];*/ 2:
                    message.level = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LogMessageResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string Message = 1 [json_name = "Message"]; */
        if (message.message !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.message);
        /* rov_actions_proto.LogLevel Level = 2 [json_name = "Level"]; */
        if (message.level !== 0)
            writer.tag(2, WireType.Varint).int32(message.level);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message rov_actions_proto.LogMessageResponse
 */
export const LogMessageResponse = new LogMessageResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LivekitVideoStatsResponse$Type extends MessageType<LivekitVideoStatsResponse> {
    constructor() {
        super("rov_actions_proto.LivekitVideoStatsResponse", [
            { no: 1, name: "enabled", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 2, name: "codec", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "allowBackupCodec", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 4, name: "baseStream", kind: "message", T: () => VideoStreamOptions },
            { no: 5, name: "simulcastLayers", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => VideoStreamOptions },
            { no: 6, name: "stats", kind: "message", T: () => VideoBaseStats }
        ]);
    }
    create(value?: PartialMessage<LivekitVideoStatsResponse>): LivekitVideoStatsResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.enabled = false;
        message.codec = "";
        message.allowBackupCodec = false;
        message.simulcastLayers = [];
        if (value !== undefined)
            reflectionMergePartial<LivekitVideoStatsResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LivekitVideoStatsResponse): LivekitVideoStatsResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool enabled */ 1:
                    message.enabled = reader.bool();
                    break;
                case /* string codec */ 2:
                    message.codec = reader.string();
                    break;
                case /* bool allowBackupCodec */ 3:
                    message.allowBackupCodec = reader.bool();
                    break;
                case /* rov_actions_proto.VideoStreamOptions baseStream */ 4:
                    message.baseStream = VideoStreamOptions.internalBinaryRead(reader, reader.uint32(), options, message.baseStream);
                    break;
                case /* repeated rov_actions_proto.VideoStreamOptions simulcastLayers */ 5:
                    message.simulcastLayers.push(VideoStreamOptions.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* rov_actions_proto.VideoBaseStats stats */ 6:
                    message.stats = VideoBaseStats.internalBinaryRead(reader, reader.uint32(), options, message.stats);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LivekitVideoStatsResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool enabled = 1; */
        if (message.enabled !== false)
            writer.tag(1, WireType.Varint).bool(message.enabled);
        /* string codec = 2; */
        if (message.codec !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.codec);
        /* bool allowBackupCodec = 3; */
        if (message.allowBackupCodec !== false)
            writer.tag(3, WireType.Varint).bool(message.allowBackupCodec);
        /* rov_actions_proto.VideoStreamOptions baseStream = 4; */
        if (message.baseStream)
            VideoStreamOptions.internalBinaryWrite(message.baseStream, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* repeated rov_actions_proto.VideoStreamOptions simulcastLayers = 5; */
        for (let i = 0; i < message.simulcastLayers.length; i++)
            VideoStreamOptions.internalBinaryWrite(message.simulcastLayers[i], writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* rov_actions_proto.VideoBaseStats stats = 6; */
        if (message.stats)
            VideoBaseStats.internalBinaryWrite(message.stats, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message rov_actions_proto.LivekitVideoStatsResponse
 */
export const LivekitVideoStatsResponse = new LivekitVideoStatsResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SimplePeerVideoStatsResponse$Type extends MessageType<SimplePeerVideoStatsResponse> {
    constructor() {
        super("rov_actions_proto.SimplePeerVideoStatsResponse", [
            { no: 1, name: "enabled", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 2, name: "codec", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "baseStream", kind: "message", T: () => VideoStreamOptions },
            { no: 4, name: "stats", kind: "message", T: () => VideoBaseStats }
        ]);
    }
    create(value?: PartialMessage<SimplePeerVideoStatsResponse>): SimplePeerVideoStatsResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.enabled = false;
        message.codec = "";
        if (value !== undefined)
            reflectionMergePartial<SimplePeerVideoStatsResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SimplePeerVideoStatsResponse): SimplePeerVideoStatsResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool enabled */ 1:
                    message.enabled = reader.bool();
                    break;
                case /* string codec */ 2:
                    message.codec = reader.string();
                    break;
                case /* rov_actions_proto.VideoStreamOptions baseStream */ 3:
                    message.baseStream = VideoStreamOptions.internalBinaryRead(reader, reader.uint32(), options, message.baseStream);
                    break;
                case /* rov_actions_proto.VideoBaseStats stats */ 4:
                    message.stats = VideoBaseStats.internalBinaryRead(reader, reader.uint32(), options, message.stats);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SimplePeerVideoStatsResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool enabled = 1; */
        if (message.enabled !== false)
            writer.tag(1, WireType.Varint).bool(message.enabled);
        /* string codec = 2; */
        if (message.codec !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.codec);
        /* rov_actions_proto.VideoStreamOptions baseStream = 3; */
        if (message.baseStream)
            VideoStreamOptions.internalBinaryWrite(message.baseStream, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* rov_actions_proto.VideoBaseStats stats = 4; */
        if (message.stats)
            VideoBaseStats.internalBinaryWrite(message.stats, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message rov_actions_proto.SimplePeerVideoStatsResponse
 */
export const SimplePeerVideoStatsResponse = new SimplePeerVideoStatsResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class HearbeatResponse$Type extends MessageType<HearbeatResponse> {
    constructor() {
        super("rov_actions_proto.HearbeatResponse", []);
    }
    create(value?: PartialMessage<HearbeatResponse>): HearbeatResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<HearbeatResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: HearbeatResponse): HearbeatResponse {
        return target ?? this.create();
    }
    internalBinaryWrite(message: HearbeatResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message rov_actions_proto.HearbeatResponse
 */
export const HearbeatResponse = new HearbeatResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ResponseBackendMetadata$Type extends MessageType<ResponseBackendMetadata> {
    constructor() {
        super("rov_actions_proto.ResponseBackendMetadata", [
            { no: 1, name: "TargetUserIds", kind: "scalar", jsonName: "TargetUserIds", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "TransportMethod", kind: "enum", jsonName: "TransportMethod", T: () => ["rov_actions_proto.DataTransportMethod", DataTransportMethod] }
        ]);
    }
    create(value?: PartialMessage<ResponseBackendMetadata>): ResponseBackendMetadata {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.targetUserIds = [];
        message.transportMethod = 0;
        if (value !== undefined)
            reflectionMergePartial<ResponseBackendMetadata>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ResponseBackendMetadata): ResponseBackendMetadata {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated string TargetUserIds = 1 [json_name = "TargetUserIds"];*/ 1:
                    message.targetUserIds.push(reader.string());
                    break;
                case /* rov_actions_proto.DataTransportMethod TransportMethod = 2 [json_name = "TransportMethod"];*/ 2:
                    message.transportMethod = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ResponseBackendMetadata, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated string TargetUserIds = 1 [json_name = "TargetUserIds"]; */
        for (let i = 0; i < message.targetUserIds.length; i++)
            writer.tag(1, WireType.LengthDelimited).string(message.targetUserIds[i]);
        /* rov_actions_proto.DataTransportMethod TransportMethod = 2 [json_name = "TransportMethod"]; */
        if (message.transportMethod !== 0)
            writer.tag(2, WireType.Varint).int32(message.transportMethod);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message rov_actions_proto.ResponseBackendMetadata
 */
export const ResponseBackendMetadata = new ResponseBackendMetadata$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RovResponse$Type extends MessageType<RovResponse> {
    constructor() {
        super("rov_actions_proto.RovResponse", [
            { no: 2, name: "ExchangeId", kind: "scalar", jsonName: "ExchangeId", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "Done", kind: "message", jsonName: "Done", oneof: "body", T: () => DoneResponse },
            { no: 4, name: "Error", kind: "message", jsonName: "Error", oneof: "body", T: () => ErrorResponse },
            { no: 5, name: "Pong", kind: "message", jsonName: "Pong", oneof: "body", T: () => PongResponse },
            { no: 6, name: "ContinuedOutput", kind: "message", jsonName: "ContinuedOutput", oneof: "body", T: () => ContinuedOutputResponse },
            { no: 7, name: "SensorUpdates", kind: "message", jsonName: "SensorUpdates", oneof: "body", T: () => SensorUpdatesResponse },
            { no: 8, name: "PasswordRequired", kind: "message", jsonName: "PasswordRequired", oneof: "body", T: () => PasswordRequiredResponse },
            { no: 9, name: "PasswordAccepted", kind: "message", jsonName: "PasswordAccepted", oneof: "body", T: () => PasswordAcceptedResponse },
            { no: 10, name: "PasswordInvalid", kind: "message", jsonName: "PasswordInvalid", oneof: "body", T: () => PasswordInvalidResponse },
            { no: 13, name: "PilotChanged", kind: "message", jsonName: "PilotChanged", oneof: "body", T: () => PilotChangedResponse },
            { no: 14, name: "ClientConnected", kind: "message", jsonName: "ClientConnected", oneof: "body", T: () => ClientConnectedResponse },
            { no: 15, name: "ClientDisconnected", kind: "message", jsonName: "ClientDisconnected", oneof: "body", T: () => ClientDisconnectedResponse },
            { no: 16, name: "arming", kind: "message", oneof: "body", T: () => ArmingResponse },
            { no: 17, name: "Mavlink", kind: "message", jsonName: "Mavlink", oneof: "body", T: () => MavlinkResponse },
            { no: 18, name: "SimplePeerSignal", kind: "message", jsonName: "SimplePeerSignal", oneof: "body", T: () => SimplePeerSignalResponse },
            { no: 19, name: "SystemMonitor", kind: "message", jsonName: "SystemMonitor", oneof: "body", T: () => SystemMonitorResponse },
            { no: 20, name: "LogMessage", kind: "message", jsonName: "LogMessage", oneof: "body", T: () => LogMessageResponse },
            { no: 21, name: "LivekitVideoStats", kind: "message", jsonName: "LivekitVideoStats", oneof: "body", T: () => LivekitVideoStatsResponse },
            { no: 22, name: "SimplePeerVideoStats", kind: "message", jsonName: "SimplePeerVideoStats", oneof: "body", T: () => SimplePeerVideoStatsResponse },
            { no: 23, name: "Heartbeat", kind: "message", jsonName: "Heartbeat", oneof: "body", T: () => HearbeatResponse }
        ]);
    }
    create(value?: PartialMessage<RovResponse>): RovResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.body = { oneofKind: undefined };
        if (value !== undefined)
            reflectionMergePartial<RovResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RovResponse): RovResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 ExchangeId = 2 [json_name = "ExchangeId"];*/ 2:
                    message.exchangeId = reader.int32();
                    break;
                case /* rov_actions_proto.DoneResponse Done = 3 [json_name = "Done"];*/ 3:
                    message.body = {
                        oneofKind: "done",
                        done: DoneResponse.internalBinaryRead(reader, reader.uint32(), options, (message.body as any).done)
                    };
                    break;
                case /* rov_actions_proto.ErrorResponse Error = 4 [json_name = "Error"];*/ 4:
                    message.body = {
                        oneofKind: "error",
                        error: ErrorResponse.internalBinaryRead(reader, reader.uint32(), options, (message.body as any).error)
                    };
                    break;
                case /* rov_actions_proto.PongResponse Pong = 5 [json_name = "Pong"];*/ 5:
                    message.body = {
                        oneofKind: "pong",
                        pong: PongResponse.internalBinaryRead(reader, reader.uint32(), options, (message.body as any).pong)
                    };
                    break;
                case /* rov_actions_proto.ContinuedOutputResponse ContinuedOutput = 6 [json_name = "ContinuedOutput"];*/ 6:
                    message.body = {
                        oneofKind: "continuedOutput",
                        continuedOutput: ContinuedOutputResponse.internalBinaryRead(reader, reader.uint32(), options, (message.body as any).continuedOutput)
                    };
                    break;
                case /* rov_actions_proto.SensorUpdatesResponse SensorUpdates = 7 [json_name = "SensorUpdates"];*/ 7:
                    message.body = {
                        oneofKind: "sensorUpdates",
                        sensorUpdates: SensorUpdatesResponse.internalBinaryRead(reader, reader.uint32(), options, (message.body as any).sensorUpdates)
                    };
                    break;
                case /* rov_actions_proto.PasswordRequiredResponse PasswordRequired = 8 [json_name = "PasswordRequired"];*/ 8:
                    message.body = {
                        oneofKind: "passwordRequired",
                        passwordRequired: PasswordRequiredResponse.internalBinaryRead(reader, reader.uint32(), options, (message.body as any).passwordRequired)
                    };
                    break;
                case /* rov_actions_proto.PasswordAcceptedResponse PasswordAccepted = 9 [json_name = "PasswordAccepted"];*/ 9:
                    message.body = {
                        oneofKind: "passwordAccepted",
                        passwordAccepted: PasswordAcceptedResponse.internalBinaryRead(reader, reader.uint32(), options, (message.body as any).passwordAccepted)
                    };
                    break;
                case /* rov_actions_proto.PasswordInvalidResponse PasswordInvalid = 10 [json_name = "PasswordInvalid"];*/ 10:
                    message.body = {
                        oneofKind: "passwordInvalid",
                        passwordInvalid: PasswordInvalidResponse.internalBinaryRead(reader, reader.uint32(), options, (message.body as any).passwordInvalid)
                    };
                    break;
                case /* rov_actions_proto.PilotChangedResponse PilotChanged = 13 [json_name = "PilotChanged"];*/ 13:
                    message.body = {
                        oneofKind: "pilotChanged",
                        pilotChanged: PilotChangedResponse.internalBinaryRead(reader, reader.uint32(), options, (message.body as any).pilotChanged)
                    };
                    break;
                case /* rov_actions_proto.ClientConnectedResponse ClientConnected = 14 [json_name = "ClientConnected"];*/ 14:
                    message.body = {
                        oneofKind: "clientConnected",
                        clientConnected: ClientConnectedResponse.internalBinaryRead(reader, reader.uint32(), options, (message.body as any).clientConnected)
                    };
                    break;
                case /* rov_actions_proto.ClientDisconnectedResponse ClientDisconnected = 15 [json_name = "ClientDisconnected"];*/ 15:
                    message.body = {
                        oneofKind: "clientDisconnected",
                        clientDisconnected: ClientDisconnectedResponse.internalBinaryRead(reader, reader.uint32(), options, (message.body as any).clientDisconnected)
                    };
                    break;
                case /* rov_actions_proto.ArmingResponse arming */ 16:
                    message.body = {
                        oneofKind: "arming",
                        arming: ArmingResponse.internalBinaryRead(reader, reader.uint32(), options, (message.body as any).arming)
                    };
                    break;
                case /* rov_actions_proto.MavlinkResponse Mavlink = 17 [json_name = "Mavlink"];*/ 17:
                    message.body = {
                        oneofKind: "mavlink",
                        mavlink: MavlinkResponse.internalBinaryRead(reader, reader.uint32(), options, (message.body as any).mavlink)
                    };
                    break;
                case /* rov_actions_proto.SimplePeerSignalResponse SimplePeerSignal = 18 [json_name = "SimplePeerSignal"];*/ 18:
                    message.body = {
                        oneofKind: "simplePeerSignal",
                        simplePeerSignal: SimplePeerSignalResponse.internalBinaryRead(reader, reader.uint32(), options, (message.body as any).simplePeerSignal)
                    };
                    break;
                case /* rov_actions_proto.SystemMonitorResponse SystemMonitor = 19 [json_name = "SystemMonitor"];*/ 19:
                    message.body = {
                        oneofKind: "systemMonitor",
                        systemMonitor: SystemMonitorResponse.internalBinaryRead(reader, reader.uint32(), options, (message.body as any).systemMonitor)
                    };
                    break;
                case /* rov_actions_proto.LogMessageResponse LogMessage = 20 [json_name = "LogMessage"];*/ 20:
                    message.body = {
                        oneofKind: "logMessage",
                        logMessage: LogMessageResponse.internalBinaryRead(reader, reader.uint32(), options, (message.body as any).logMessage)
                    };
                    break;
                case /* rov_actions_proto.LivekitVideoStatsResponse LivekitVideoStats = 21 [json_name = "LivekitVideoStats"];*/ 21:
                    message.body = {
                        oneofKind: "livekitVideoStats",
                        livekitVideoStats: LivekitVideoStatsResponse.internalBinaryRead(reader, reader.uint32(), options, (message.body as any).livekitVideoStats)
                    };
                    break;
                case /* rov_actions_proto.SimplePeerVideoStatsResponse SimplePeerVideoStats = 22 [json_name = "SimplePeerVideoStats"];*/ 22:
                    message.body = {
                        oneofKind: "simplePeerVideoStats",
                        simplePeerVideoStats: SimplePeerVideoStatsResponse.internalBinaryRead(reader, reader.uint32(), options, (message.body as any).simplePeerVideoStats)
                    };
                    break;
                case /* rov_actions_proto.HearbeatResponse Heartbeat = 23 [json_name = "Heartbeat"];*/ 23:
                    message.body = {
                        oneofKind: "heartbeat",
                        heartbeat: HearbeatResponse.internalBinaryRead(reader, reader.uint32(), options, (message.body as any).heartbeat)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RovResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 ExchangeId = 2 [json_name = "ExchangeId"]; */
        if (message.exchangeId !== undefined)
            writer.tag(2, WireType.Varint).int32(message.exchangeId);
        /* rov_actions_proto.DoneResponse Done = 3 [json_name = "Done"]; */
        if (message.body.oneofKind === "done")
            DoneResponse.internalBinaryWrite(message.body.done, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* rov_actions_proto.ErrorResponse Error = 4 [json_name = "Error"]; */
        if (message.body.oneofKind === "error")
            ErrorResponse.internalBinaryWrite(message.body.error, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* rov_actions_proto.PongResponse Pong = 5 [json_name = "Pong"]; */
        if (message.body.oneofKind === "pong")
            PongResponse.internalBinaryWrite(message.body.pong, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* rov_actions_proto.ContinuedOutputResponse ContinuedOutput = 6 [json_name = "ContinuedOutput"]; */
        if (message.body.oneofKind === "continuedOutput")
            ContinuedOutputResponse.internalBinaryWrite(message.body.continuedOutput, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* rov_actions_proto.SensorUpdatesResponse SensorUpdates = 7 [json_name = "SensorUpdates"]; */
        if (message.body.oneofKind === "sensorUpdates")
            SensorUpdatesResponse.internalBinaryWrite(message.body.sensorUpdates, writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        /* rov_actions_proto.PasswordRequiredResponse PasswordRequired = 8 [json_name = "PasswordRequired"]; */
        if (message.body.oneofKind === "passwordRequired")
            PasswordRequiredResponse.internalBinaryWrite(message.body.passwordRequired, writer.tag(8, WireType.LengthDelimited).fork(), options).join();
        /* rov_actions_proto.PasswordAcceptedResponse PasswordAccepted = 9 [json_name = "PasswordAccepted"]; */
        if (message.body.oneofKind === "passwordAccepted")
            PasswordAcceptedResponse.internalBinaryWrite(message.body.passwordAccepted, writer.tag(9, WireType.LengthDelimited).fork(), options).join();
        /* rov_actions_proto.PasswordInvalidResponse PasswordInvalid = 10 [json_name = "PasswordInvalid"]; */
        if (message.body.oneofKind === "passwordInvalid")
            PasswordInvalidResponse.internalBinaryWrite(message.body.passwordInvalid, writer.tag(10, WireType.LengthDelimited).fork(), options).join();
        /* rov_actions_proto.PilotChangedResponse PilotChanged = 13 [json_name = "PilotChanged"]; */
        if (message.body.oneofKind === "pilotChanged")
            PilotChangedResponse.internalBinaryWrite(message.body.pilotChanged, writer.tag(13, WireType.LengthDelimited).fork(), options).join();
        /* rov_actions_proto.ClientConnectedResponse ClientConnected = 14 [json_name = "ClientConnected"]; */
        if (message.body.oneofKind === "clientConnected")
            ClientConnectedResponse.internalBinaryWrite(message.body.clientConnected, writer.tag(14, WireType.LengthDelimited).fork(), options).join();
        /* rov_actions_proto.ClientDisconnectedResponse ClientDisconnected = 15 [json_name = "ClientDisconnected"]; */
        if (message.body.oneofKind === "clientDisconnected")
            ClientDisconnectedResponse.internalBinaryWrite(message.body.clientDisconnected, writer.tag(15, WireType.LengthDelimited).fork(), options).join();
        /* rov_actions_proto.ArmingResponse arming = 16; */
        if (message.body.oneofKind === "arming")
            ArmingResponse.internalBinaryWrite(message.body.arming, writer.tag(16, WireType.LengthDelimited).fork(), options).join();
        /* rov_actions_proto.MavlinkResponse Mavlink = 17 [json_name = "Mavlink"]; */
        if (message.body.oneofKind === "mavlink")
            MavlinkResponse.internalBinaryWrite(message.body.mavlink, writer.tag(17, WireType.LengthDelimited).fork(), options).join();
        /* rov_actions_proto.SimplePeerSignalResponse SimplePeerSignal = 18 [json_name = "SimplePeerSignal"]; */
        if (message.body.oneofKind === "simplePeerSignal")
            SimplePeerSignalResponse.internalBinaryWrite(message.body.simplePeerSignal, writer.tag(18, WireType.LengthDelimited).fork(), options).join();
        /* rov_actions_proto.SystemMonitorResponse SystemMonitor = 19 [json_name = "SystemMonitor"]; */
        if (message.body.oneofKind === "systemMonitor")
            SystemMonitorResponse.internalBinaryWrite(message.body.systemMonitor, writer.tag(19, WireType.LengthDelimited).fork(), options).join();
        /* rov_actions_proto.LogMessageResponse LogMessage = 20 [json_name = "LogMessage"]; */
        if (message.body.oneofKind === "logMessage")
            LogMessageResponse.internalBinaryWrite(message.body.logMessage, writer.tag(20, WireType.LengthDelimited).fork(), options).join();
        /* rov_actions_proto.LivekitVideoStatsResponse LivekitVideoStats = 21 [json_name = "LivekitVideoStats"]; */
        if (message.body.oneofKind === "livekitVideoStats")
            LivekitVideoStatsResponse.internalBinaryWrite(message.body.livekitVideoStats, writer.tag(21, WireType.LengthDelimited).fork(), options).join();
        /* rov_actions_proto.SimplePeerVideoStatsResponse SimplePeerVideoStats = 22 [json_name = "SimplePeerVideoStats"]; */
        if (message.body.oneofKind === "simplePeerVideoStats")
            SimplePeerVideoStatsResponse.internalBinaryWrite(message.body.simplePeerVideoStats, writer.tag(22, WireType.LengthDelimited).fork(), options).join();
        /* rov_actions_proto.HearbeatResponse Heartbeat = 23 [json_name = "Heartbeat"]; */
        if (message.body.oneofKind === "heartbeat")
            HearbeatResponse.internalBinaryWrite(message.body.heartbeat, writer.tag(23, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message rov_actions_proto.RovResponse
 */
export const RovResponse = new RovResponse$Type();
