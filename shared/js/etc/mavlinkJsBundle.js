(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
(function (Buffer){(function (){
/*
MAVLink protocol implementation for node.js (auto-generated by mavgen_javascript.py)

Generated from: ardupilotmega.xml,common.xml,uAvionix.xml,icarous.xml,loweheiser.xml,cubepilot.xml,csAirLink.xml,minimal.xml

Note: this file has been auto-generated. DO NOT EDIT
*/

jspack = require("jspack").jspack,
    _ = require("underscore"),
    events = require("events"), // for .emit(..), MAVLink20Processor inherits from events.EventEmitter
    util = require("util");

var Long = require('long');

// Add a convenience method to Buffer
Buffer.prototype.toByteArray = function () {
  return Array.prototype.slice.call(this, 0)
}

mavlink20 = function(){};

// Implement the CRC-16/MCRF4XX function (present in the Python version through the mavutil.py package)
mavlink20.x25Crc = function(buffer, crcIN) {

    var bytes = buffer;
    var crcOUT = crcIN || 0xffff;
    _.each(bytes, function(e) {
        var tmp = e ^ (crcOUT & 0xff);
        tmp = (tmp ^ (tmp << 4)) & 0xff;
        crcOUT = (crcOUT >> 8) ^ (tmp << 8) ^ (tmp << 3) ^ (tmp >> 4);
        crcOUT = crcOUT & 0xffff;
    });
    return crcOUT;

}

mavlink20.WIRE_PROTOCOL_VERSION = "2.0";
mavlink20.PROTOCOL_MARKER_V1 = 0xFE 
mavlink20.PROTOCOL_MARKER_V2 = 0xFD 
mavlink20.HEADER_LEN_V1 = 6 
mavlink20.HEADER_LEN_V2 = 10 
mavlink20.HEADER_LEN = 10;

mavlink20.MAVLINK_TYPE_CHAR     = 0
mavlink20.MAVLINK_TYPE_UINT8_T  = 1
mavlink20.MAVLINK_TYPE_INT8_T   = 2
mavlink20.MAVLINK_TYPE_UINT16_T = 3
mavlink20.MAVLINK_TYPE_INT16_T  = 4
mavlink20.MAVLINK_TYPE_UINT32_T = 5
mavlink20.MAVLINK_TYPE_INT32_T  = 6
mavlink20.MAVLINK_TYPE_UINT64_T = 7
mavlink20.MAVLINK_TYPE_INT64_T  = 8
mavlink20.MAVLINK_TYPE_FLOAT    = 9
mavlink20.MAVLINK_TYPE_DOUBLE   = 10

mavlink20.MAVLINK_IFLAG_SIGNED = 0x01
mavlink20.MAVLINK_SIGNATURE_BLOCK_LEN = 13

// Mavlink headers incorporate sequence, source system (platform) and source component. 
mavlink20.header = function(msgId, mlen, seq, srcSystem, srcComponent, incompat_flags=0, compat_flags=0,) {

    this.mlen = ( typeof mlen === 'undefined' ) ? 0 : mlen;
    this.seq = ( typeof seq === 'undefined' ) ? 0 : seq;
    this.srcSystem = ( typeof srcSystem === 'undefined' ) ? 0 : srcSystem;
    this.srcComponent = ( typeof srcComponent === 'undefined' ) ? 0 : srcComponent;
    this.msgId = msgId
    this.incompat_flags = incompat_flags
    this.compat_flags = compat_flags

}
mavlink20.header.prototype.pack = function() {
    return jspack.Pack('BBBBBBBHB', [253, this.mlen, this.incompat_flags, this.compat_flags, this.seq, this.srcSystem, this.srcComponent, ((this.msgId & 0xFF) << 8) | ((this.msgId >> 8) & 0xFF), this.msgId>>16]);
}
        
// Base class declaration: mavlink.message will be the parent class for each
// concrete implementation in mavlink.messages.
mavlink20.message = function() {};

// Convenience setter to facilitate turning the unpacked array of data into member properties
mavlink20.message.prototype.set = function(args,verbose) {
// inspect
    _.each(this.fieldnames, function(e, i) {
        var num = parseInt(i,10);
        if (this.hasOwnProperty(e) && isNaN(num)  ){ // asking for an attribute that's non-numeric is ok unless its already an attribute we have
            if ( verbose >= 1) { console.log("WARNING, overwriting an existing property is DANGEROUS:"+e+" ==>"+i+"==>"+args[i]+" -> "+JSON.stringify(this)); }
        }
    }, this);
                    //console.log(this.fieldnames);
// then modify
    _.each(this.fieldnames, function(e, i) {
        this[e] = args[i];
    }, this);
};

// trying to be the same-ish as the python function of the same name
mavlink20.message.prototype.sign_packet = function( mav) {
    var crypto= require('crypto');
    var h =  crypto.createHash('sha256');

    //mav.signing.timestamp is a 48bit number, or 6 bytes.

        // due to js not being able to shift numbers  more than 32, we'll use this instead.. 
        // js stores all its numbers as a 64bit float with 53 bits of mantissa, so have room for 48 ok. 
        // positive shifts left, negative shifts right
        function shift(number, shift) { 
            return number * Math.pow(2, shift); 
        } 

    var thigh = shift(mav.signing.timestamp,-32) // 2 bytes from the top, shifted right by 32 bits
    var tlow  = (mav.signing.timestamp & 0xfffffff )  // 4 bytes from the bottom

    // I means unsigned 4bytes, H means unsigned 2 bytes
    // first add the linkid(1 byte) and timestamp(6 bytes) that start the signature
    this._msgbuf = this._msgbuf.concat(jspack.Pack('<BIH', [mav.signing.link_id, tlow, thigh  ] ) );
 
    h.update(mav.signing.secret_key); // secret is already a Buffer
    h.update(new Buffer.from(this._msgbuf));
    var hashDigest = h.digest();
    sig = hashDigest.slice(0,6)
    this._msgbuf  = this._msgbuf.concat( ... sig ); 

    mav.signing.timestamp += 1
} 


// This pack function builds the header and produces a complete MAVLink message,
// including header and message CRC.
mavlink20.message.prototype.pack = function(mav, crc_extra, payload) {

    this._payload = payload;
    var plen = this._payload.length;
    //in MAVLink2 we can strip trailing zeros off payloads. This allows for simple
    // variable length arrays and smaller packets
    while ((plen > 1) && ( (this._payload[plen-1] == 0) || (this._payload[plen-1] == null) ) ) {
            plen = plen - 1;
    }
    this._payload = this._payload.slice(0, plen);
    // signing is our first incompat flag. 
    var incompat_flags = 0; 
    if (mav.signing.sign_outgoing){ 
            incompat_flags |= mavlink20.MAVLINK_IFLAG_SIGNED 
    } 
    // header 
    this._header = new mavlink20.header(this._id, this._payload.length, mav.seq, mav.srcSystem, mav.srcComponent, incompat_flags, 0,);
    // payload     
    this._msgbuf = this._header.pack().concat(this._payload);
    // crc -  for now, assume always using crc_extra = True.  TODO: check/fix this. 
    var crc = mavlink20.x25Crc(this._msgbuf.slice(1));
    crc = mavlink20.x25Crc([crc_extra], crc);
    this._msgbuf = this._msgbuf.concat(jspack.Pack('<H', [crc] ) );

    // signing 
    this._signed     = false 
    this._link_id    = undefined 

    //console.log(mav.signing); 
    //optionally add signing 
    if (mav.signing.sign_outgoing){ 
                this.sign_packet(mav) 
    } 
    return this._msgbuf;

}


// enums

// ACCELCAL_VEHICLE_POS
mavlink20.ACCELCAL_VEHICLE_POS_LEVEL = 1 // 
mavlink20.ACCELCAL_VEHICLE_POS_LEFT = 2 // 
mavlink20.ACCELCAL_VEHICLE_POS_RIGHT = 3 // 
mavlink20.ACCELCAL_VEHICLE_POS_NOSEDOWN = 4 // 
mavlink20.ACCELCAL_VEHICLE_POS_NOSEUP = 5 // 
mavlink20.ACCELCAL_VEHICLE_POS_BACK = 6 // 
mavlink20.ACCELCAL_VEHICLE_POS_SUCCESS = 16777215 // 
mavlink20.ACCELCAL_VEHICLE_POS_FAILED = 16777216 // 
mavlink20.ACCELCAL_VEHICLE_POS_ENUM_END = 16777217 // 

// HEADING_TYPE
mavlink20.HEADING_TYPE_COURSE_OVER_GROUND = 0 // 
mavlink20.HEADING_TYPE_HEADING = 1 // 
mavlink20.HEADING_TYPE_ENUM_END = 2 // 

// MAV_CMD
mavlink20.MAV_CMD_NAV_WAYPOINT = 16 // Navigate to waypoint.
mavlink20.MAV_CMD_NAV_LOITER_UNLIM = 17 // Loiter around this waypoint an unlimited amount of time
mavlink20.MAV_CMD_NAV_LOITER_TURNS = 18 // Loiter around this waypoint for X turns
mavlink20.MAV_CMD_NAV_LOITER_TIME = 19 // Loiter around this waypoint for X seconds
mavlink20.MAV_CMD_NAV_RETURN_TO_LAUNCH = 20 // Return to launch location
mavlink20.MAV_CMD_NAV_LAND = 21 // Land at location.
mavlink20.MAV_CMD_NAV_TAKEOFF = 22 // Takeoff from ground / hand. Vehicles that support multiple takeoff
                        // modes (e.g. VTOL quadplane) should take off
                        // using the currently configured mode.
mavlink20.MAV_CMD_NAV_LAND_LOCAL = 23 // Land at local position (local frame only)
mavlink20.MAV_CMD_NAV_TAKEOFF_LOCAL = 24 // Takeoff from local position (local frame only)
mavlink20.MAV_CMD_NAV_FOLLOW = 25 // Vehicle following, i.e. this waypoint represents the position of a
                        // moving vehicle
mavlink20.MAV_CMD_NAV_CONTINUE_AND_CHANGE_ALT = 30 // Continue on the current course and climb/descend to specified
                        // altitude.  When the altitude is reached
                        // continue to the next command (i.e., don't
                        // proceed to the next command until the
                        // desired altitude is reached.
mavlink20.MAV_CMD_NAV_LOITER_TO_ALT = 31 // Begin loiter at the specified Latitude and Longitude.  If Lat=Lon=0,
                        // then loiter at the current position.  Don't
                        // consider the navigation command complete
                        // (don't leave loiter) until the altitude has
                        // been reached. Additionally, if the Heading
                        // Required parameter is non-zero the aircraft
                        // will not leave the loiter until heading
                        // toward the next waypoint.
mavlink20.MAV_CMD_DO_FOLLOW = 32 // Begin following a target
mavlink20.MAV_CMD_DO_FOLLOW_REPOSITION = 33 // Reposition the MAV after a follow target command has been sent
mavlink20.MAV_CMD_NAV_ROI = 80 // Sets the region of interest (ROI) for a sensor set or the vehicle
                        // itself. This can then be used by the
                        // vehicle's control system to control the
                        // vehicle attitude and the attitude of
                        // various sensors such as cameras.
mavlink20.MAV_CMD_NAV_PATHPLANNING = 81 // Control autonomous path planning on the MAV.
mavlink20.MAV_CMD_NAV_SPLINE_WAYPOINT = 82 // Navigate to waypoint using a spline path.
mavlink20.MAV_CMD_NAV_ALTITUDE_WAIT = 83 // Mission command to wait for an altitude or downwards vertical speed.
                        // This is meant for high altitude balloon
                        // launches, allowing the aircraft to be idle
                        // until either an altitude is reached or a
                        // negative vertical speed is reached
                        // (indicating early balloon burst). The
                        // wiggle time is how often to wiggle the
                        // control surfaces to prevent them seizing
                        // up.
mavlink20.MAV_CMD_NAV_VTOL_TAKEOFF = 84 // Takeoff from ground using VTOL mode, and transition to forward flight
                        // with specified heading. The command should
                        // be ignored by vehicles that dont support
                        // both VTOL and fixed-wing flight
                        // (multicopters, boats,etc.).
mavlink20.MAV_CMD_NAV_VTOL_LAND = 85 // Land using VTOL mode
mavlink20.MAV_CMD_NAV_GUIDED_ENABLE = 92 // hand control over to an external controller
mavlink20.MAV_CMD_NAV_DELAY = 93 // Delay the next navigation command a number of seconds or until a
                        // specified time
mavlink20.MAV_CMD_NAV_PAYLOAD_PLACE = 94 // Descend and place payload. Vehicle moves to specified location,
                        // descends until it detects a hanging payload
                        // has reached the ground, and then releases
                        // the payload. If ground is not detected
                        // before the reaching the maximum descent
                        // value (param1), the command will complete
                        // without releasing the payload.
mavlink20.MAV_CMD_NAV_LAST = 95 // NOP - This command is only used to mark the upper limit of the
                        // NAV/ACTION commands in the enumeration
mavlink20.MAV_CMD_CONDITION_DELAY = 112 // Delay mission state machine.
mavlink20.MAV_CMD_CONDITION_CHANGE_ALT = 113 // Ascend/descend to target altitude at specified rate. Delay mission
                        // state machine until desired altitude
                        // reached.
mavlink20.MAV_CMD_CONDITION_DISTANCE = 114 // Delay mission state machine until within desired distance of next NAV
                        // point.
mavlink20.MAV_CMD_CONDITION_YAW = 115 // Reach a certain target angle.
mavlink20.MAV_CMD_CONDITION_LAST = 159 // NOP - This command is only used to mark the upper limit of the
                        // CONDITION commands in the enumeration
mavlink20.MAV_CMD_DO_SET_MODE = 176 // Set system mode.
mavlink20.MAV_CMD_DO_JUMP = 177 // Jump to the desired command in the mission list.  Repeat this action
                        // only the specified number of times
mavlink20.MAV_CMD_DO_CHANGE_SPEED = 178 // Change speed and/or throttle set points
mavlink20.MAV_CMD_DO_SET_HOME = 179 // Changes the home location either to the current location or a
                        // specified location.
mavlink20.MAV_CMD_DO_SET_PARAMETER = 180 // Set a system parameter.  Caution!  Use of this command requires
                        // knowledge of the numeric enumeration value
                        // of the parameter.
mavlink20.MAV_CMD_DO_SET_RELAY = 181 // Set a relay to a condition.
mavlink20.MAV_CMD_DO_REPEAT_RELAY = 182 // Cycle a relay on and off for a desired number of cycles with a desired
                        // period.
mavlink20.MAV_CMD_DO_SET_SERVO = 183 // Set a servo to a desired PWM value.
mavlink20.MAV_CMD_DO_REPEAT_SERVO = 184 // Cycle a between its nominal setting and a desired PWM for a desired
                        // number of cycles with a desired period.
mavlink20.MAV_CMD_DO_FLIGHTTERMINATION = 185 // Terminate flight immediately
mavlink20.MAV_CMD_DO_CHANGE_ALTITUDE = 186 // Change altitude set point.
mavlink20.MAV_CMD_DO_LAND_START = 189 // Mission command to perform a landing. This is used as a marker in a
                        // mission to tell the autopilot where a
                        // sequence of mission items that represents a
                        // landing starts.           It may also be
                        // sent via a COMMAND_LONG to trigger a
                        // landing, in which case the nearest
                        // (geographically) landing sequence in the
                        // mission will be used.           The
                        // Latitude/Longitude/Altitude is optional,
                        // and may be set to 0 if not needed. If
                        // specified then it will be used to help find
                        // the closest landing sequence.
mavlink20.MAV_CMD_DO_RALLY_LAND = 190 // Mission command to perform a landing from a rally point.
mavlink20.MAV_CMD_DO_GO_AROUND = 191 // Mission command to safely abort an autonomous landing.
mavlink20.MAV_CMD_DO_REPOSITION = 192 // Reposition the vehicle to a specific WGS84 global position.
mavlink20.MAV_CMD_DO_PAUSE_CONTINUE = 193 // If in a GPS controlled position mode, hold the current position or
                        // continue.
mavlink20.MAV_CMD_DO_SET_REVERSE = 194 // Set moving direction to forward or reverse.
mavlink20.MAV_CMD_DO_SET_ROI_LOCATION = 195 // Sets the region of interest (ROI) to a location. This can then be used
                        // by the vehicle's control system to control
                        // the vehicle attitude and the attitude of
                        // various sensors such as cameras.
mavlink20.MAV_CMD_DO_SET_ROI_WPNEXT_OFFSET = 196 // Sets the region of interest (ROI) to be toward next waypoint, with
                        // optional pitch/roll/yaw offset. This can
                        // then be used by the vehicle's control
                        // system to control the vehicle attitude and
                        // the attitude of various sensors such as
                        // cameras.
mavlink20.MAV_CMD_DO_SET_ROI_NONE = 197 // Cancels any previous ROI command returning the vehicle/sensors to
                        // default flight characteristics. This can
                        // then be used by the vehicle's control
                        // system to control the vehicle attitude and
                        // the attitude of various sensors such as
                        // cameras.
mavlink20.MAV_CMD_DO_SET_ROI_SYSID = 198 // Mount tracks system with specified system ID. Determination of target
                        // vehicle position may be done with
                        // GLOBAL_POSITION_INT or any other means.
mavlink20.MAV_CMD_DO_CONTROL_VIDEO = 200 // Control onboard camera system.
mavlink20.MAV_CMD_DO_SET_ROI = 201 // Sets the region of interest (ROI) for a sensor set or the vehicle
                        // itself. This can then be used by the
                        // vehicle's control system to control the
                        // vehicle attitude and the attitude of
                        // various sensors such as cameras.
mavlink20.MAV_CMD_DO_DIGICAM_CONFIGURE = 202 // Configure digital camera. This is a fallback message for systems that
                        // have not yet implemented PARAM_EXT_XXX
                        // messages and camera definition files (see h
                        // ttps://mavlink.io/en/services/camera_def.ht
                        // ml ).
mavlink20.MAV_CMD_DO_DIGICAM_CONTROL = 203 // Control digital camera. This is a fallback message for systems that
                        // have not yet implemented PARAM_EXT_XXX
                        // messages and camera definition files (see h
                        // ttps://mavlink.io/en/services/camera_def.ht
                        // ml ).
mavlink20.MAV_CMD_DO_MOUNT_CONFIGURE = 204 // Mission command to configure a camera or antenna mount
mavlink20.MAV_CMD_DO_MOUNT_CONTROL = 205 // Mission command to control a camera or antenna mount
mavlink20.MAV_CMD_DO_SET_CAM_TRIGG_DIST = 206 // Mission command to set camera trigger distance for this flight. The
                        // camera is triggered each time this distance
                        // is exceeded. This command can also be used
                        // to set the shutter integration time for the
                        // camera.
mavlink20.MAV_CMD_DO_FENCE_ENABLE = 207 // Mission command to enable the geofence
mavlink20.MAV_CMD_DO_PARACHUTE = 208 // Mission item/command to release a parachute or enable/disable auto
                        // release.
mavlink20.MAV_CMD_DO_MOTOR_TEST = 209 // Mission command to perform motor test.
mavlink20.MAV_CMD_DO_INVERTED_FLIGHT = 210 // Change to/from inverted flight.
mavlink20.MAV_CMD_DO_GRIPPER = 211 // Mission command to operate a gripper.
mavlink20.MAV_CMD_DO_AUTOTUNE_ENABLE = 212 // Enable/disable autotune.
mavlink20.MAV_CMD_NAV_SET_YAW_SPEED = 213 // Sets a desired vehicle turn angle and speed change.
mavlink20.MAV_CMD_DO_SET_CAM_TRIGG_INTERVAL = 214 // Mission command to set camera trigger interval for this flight. If
                        // triggering is enabled, the camera is
                        // triggered each time this interval expires.
                        // This command can also be used to set the
                        // shutter integration time for the camera.
mavlink20.MAV_CMD_DO_SET_RESUME_REPEAT_DIST = 215 // Set the distance to be repeated on mission resume
mavlink20.MAV_CMD_DO_SPRAYER = 216 // Control attached liquid sprayer
mavlink20.MAV_CMD_DO_SEND_SCRIPT_MESSAGE = 217 // Pass instructions onto scripting, a script should be checking for a
                        // new command
mavlink20.MAV_CMD_DO_AUX_FUNCTION = 218 // Execute auxiliary function
mavlink20.MAV_CMD_DO_MOUNT_CONTROL_QUAT = 220 // Mission command to control a camera or antenna mount, using a
                        // quaternion as reference.
mavlink20.MAV_CMD_DO_GUIDED_MASTER = 221 // set id of master controller
mavlink20.MAV_CMD_DO_GUIDED_LIMITS = 222 // Set limits for external control
mavlink20.MAV_CMD_DO_ENGINE_CONTROL = 223 // Control vehicle engine. This is interpreted by the vehicles engine
                        // controller to change the target engine
                        // state. It is intended for vehicles with
                        // internal combustion engines
mavlink20.MAV_CMD_DO_SET_MISSION_CURRENT = 224 // Set the mission item with sequence number seq as current item. This
                        // means that the MAV will continue to this
                        // mission item on the shortest path (not
                        // following the mission items in-between).
mavlink20.MAV_CMD_DO_LAST = 240 // NOP - This command is only used to mark the upper limit of the DO
                        // commands in the enumeration
mavlink20.MAV_CMD_PREFLIGHT_CALIBRATION = 241 // Trigger calibration. This command will be only accepted if in pre-
                        // flight mode. Except for Temperature
                        // Calibration, only one sensor should be set
                        // in a single message and all others should
                        // be zero.
mavlink20.MAV_CMD_PREFLIGHT_SET_SENSOR_OFFSETS = 242 // Set sensor offsets. This command will be only accepted if in pre-
                        // flight mode.
mavlink20.MAV_CMD_PREFLIGHT_UAVCAN = 243 // Trigger UAVCAN configuration (actuator ID assignment and direction
                        // mapping). Note that this maps to the legacy
                        // UAVCAN v0 function UAVCAN_ENUMERATE, which
                        // is intended to be executed just once during
                        // initial vehicle configuration (it is not a
                        // normal pre-flight command and has been
                        // poorly named).
mavlink20.MAV_CMD_PREFLIGHT_STORAGE = 245 // Request storage of different parameter values and logs. This command
                        // will be only accepted if in pre-flight
                        // mode.
mavlink20.MAV_CMD_PREFLIGHT_REBOOT_SHUTDOWN = 246 // Request the reboot or shutdown of system components.
mavlink20.MAV_CMD_OVERRIDE_GOTO = 252 // Override current mission with command to pause mission, pause mission
                        // and move to position, continue/resume
                        // mission. When param 1 indicates that the
                        // mission is paused (MAV_GOTO_DO_HOLD), param
                        // 2 defines whether it holds in place or
                        // moves to another position.
mavlink20.MAV_CMD_OBLIQUE_SURVEY = 260 // Mission command to set a Camera Auto Mount Pivoting Oblique Survey
                        // (Replaces CAM_TRIGG_DIST for this purpose).
                        // The camera is triggered each time this
                        // distance is exceeded, then the mount moves
                        // to the next position. Params 4~6 set-up the
                        // angle limits and number of positions for
                        // oblique survey, where mount-enabled
                        // vehicles automatically roll the camera
                        // between shots to emulate an oblique camera
                        // setup (providing an increased HFOV). This
                        // command can also be used to set the shutter
                        // integration time for the camera.
mavlink20.MAV_CMD_MISSION_START = 300 // start running a mission
mavlink20.MAV_CMD_COMPONENT_ARM_DISARM = 400 // Arms / Disarms a component
mavlink20.MAV_CMD_RUN_PREARM_CHECKS = 401 // Instructs system to run pre-arm checks.  This command should return
                        // MAV_RESULT_TEMPORARILY_REJECTED in the case
                        // the system is armed, otherwse
                        // MAV_RESULT_ACCEPTED.  Note that the return
                        // value from executing this command does not
                        // indicate whether the vehicle is armable or
                        // not, just whether the system has
                        // successfully run/is currently running the
                        // checks.  The result of the checks is
                        // reflected in the SYS_STATUS message.
mavlink20.MAV_CMD_GET_HOME_POSITION = 410 // Request the home position from the vehicle.
mavlink20.MAV_CMD_START_RX_PAIR = 500 // Starts receiver pairing.
mavlink20.MAV_CMD_GET_MESSAGE_INTERVAL = 510 // Request the interval between messages for a particular MAVLink message
                        // ID. The receiver should ACK the command and
                        // then emit its response in a
                        // MESSAGE_INTERVAL message.
mavlink20.MAV_CMD_SET_MESSAGE_INTERVAL = 511 // Set the interval between messages for a particular MAVLink message ID.
                        // This interface replaces
                        // REQUEST_DATA_STREAM.
mavlink20.MAV_CMD_REQUEST_MESSAGE = 512 // Request the target system(s) emit a single instance of a specified
                        // message (i.e. a "one-shot" version of
                        // MAV_CMD_SET_MESSAGE_INTERVAL).
mavlink20.MAV_CMD_REQUEST_PROTOCOL_VERSION = 519 // Request MAVLink protocol version compatibility. All receivers should
                        // ACK the command and then emit their
                        // capabilities in an PROTOCOL_VERSION message
mavlink20.MAV_CMD_REQUEST_AUTOPILOT_CAPABILITIES = 520 // Request autopilot capabilities. The receiver should ACK the command
                        // and then emit its capabilities in an
                        // AUTOPILOT_VERSION message
mavlink20.MAV_CMD_REQUEST_CAMERA_INFORMATION = 521 // Request camera information (CAMERA_INFORMATION).
mavlink20.MAV_CMD_REQUEST_CAMERA_SETTINGS = 522 // Request camera settings (CAMERA_SETTINGS).
mavlink20.MAV_CMD_REQUEST_STORAGE_INFORMATION = 525 // Request storage information (STORAGE_INFORMATION). Use the command's
                        // target_component to target a specific
                        // component's storage.
mavlink20.MAV_CMD_STORAGE_FORMAT = 526 // Format a storage medium. Once format is complete, a
                        // STORAGE_INFORMATION message is sent. Use
                        // the command's target_component to target a
                        // specific component's storage.
mavlink20.MAV_CMD_REQUEST_CAMERA_CAPTURE_STATUS = 527 // Request camera capture status (CAMERA_CAPTURE_STATUS)
mavlink20.MAV_CMD_REQUEST_FLIGHT_INFORMATION = 528 // Request flight information (FLIGHT_INFORMATION)
mavlink20.MAV_CMD_RESET_CAMERA_SETTINGS = 529 // Reset all camera settings to Factory Default
mavlink20.MAV_CMD_SET_CAMERA_MODE = 530 // Set camera running mode. Use NaN for reserved values. GCS will send a
                        // MAV_CMD_REQUEST_VIDEO_STREAM_STATUS command
                        // after a mode change if the camera supports
                        // video streaming.
mavlink20.MAV_CMD_SET_CAMERA_ZOOM = 531 // Set camera zoom. Camera must respond with a CAMERA_SETTINGS message
                        // (on success).
mavlink20.MAV_CMD_SET_CAMERA_FOCUS = 532 // Set camera focus. Camera must respond with a CAMERA_SETTINGS message
                        // (on success).
mavlink20.MAV_CMD_JUMP_TAG = 600 // Tagged jump target. Can be jumped to with MAV_CMD_DO_JUMP_TAG.
mavlink20.MAV_CMD_DO_JUMP_TAG = 601 // Jump to the matching tag in the mission list. Repeat this action for
                        // the specified number of times. A mission
                        // should contain a single matching tag for
                        // each jump. If this is not the case then a
                        // jump to a missing tag should complete the
                        // mission, and a jump where there are
                        // multiple matching tags should always select
                        // the one with the lowest mission sequence
                        // number.
mavlink20.MAV_CMD_DO_GIMBAL_MANAGER_PITCHYAW = 1000 // Set gimbal manager pitch/yaw setpoints (low rate command). It is
                        // possible to set combinations of the values
                        // below. E.g. an angle as well as a desired
                        // angular rate can be used to get to this
                        // angle at a certain angular rate, or an
                        // angular rate only will result in continuous
                        // turning. NaN is to be used to signal unset.
                        // Note: only the gimbal manager will react to
                        // this command - it will be ignored by a
                        // gimbal device. Use
                        // GIMBAL_MANAGER_SET_PITCHYAW if you need to
                        // stream pitch/yaw setpoints at higher rate.
mavlink20.MAV_CMD_DO_GIMBAL_MANAGER_CONFIGURE = 1001 // Gimbal configuration to set which sysid/compid is in primary and
                        // secondary control.
mavlink20.MAV_CMD_IMAGE_START_CAPTURE = 2000 // Start image capture sequence. CAMERA_IMAGE_CAPTURED must be emitted
                        // after each capture.            Param1 (id)
                        // may be used to specify the target camera:
                        // 0: all cameras, 1 to 6: autopilot-connected
                        // cameras, 7-255: MAVLink camera component
                        // ID.           It is needed in order to
                        // target specific cameras connected to the
                        // autopilot, or specific sensors in a multi-
                        // sensor camera (neither of which have a
                        // distinct MAVLink component ID).
                        // It is also needed to specify the target
                        // camera in missions.            When used in
                        // a mission, an autopilot should execute the
                        // MAV_CMD for a specified local camera
                        // (param1 = 1-6), or resend it as a command
                        // if it is intended for a MAVLink camera
                        // (param1 = 7 - 255), setting the command's
                        // target_component as the param1 value (and
                        // setting param1 in the command to zero).
                        // If the param1 is 0 the autopilot should do
                        // both.            When sent in a command the
                        // target MAVLink address is set using
                        // target_component.           If addressed
                        // specifically to an autopilot: param1 should
                        // be used in the same way as it is for
                        // missions (though command should NACK with
                        // MAV_RESULT_DENIED if a specified local
                        // camera does not exist).           If
                        // addressed to a MAVLink camera, param 1 can
                        // be used to address all cameras (0), or to
                        // separately address 1 to 7 individual
                        // sensors. Other values should be NACKed with
                        // MAV_RESULT_DENIED.           If the command
                        // is broadcast (target_component is 0) then
                        // param 1 should be set to 0 (any other value
                        // should be NACKED with MAV_RESULT_DENIED).
                        // An autopilot would trigger any local
                        // cameras and forward the command to all
                        // channels.
mavlink20.MAV_CMD_IMAGE_STOP_CAPTURE = 2001 // Stop image capture sequence.            Param1 (id) may be used to
                        // specify the target camera: 0: all cameras,
                        // 1 to 6: autopilot-connected cameras, 7-255:
                        // MAVLink camera component ID.           It
                        // is needed in order to target specific
                        // cameras connected to the autopilot, or
                        // specific sensors in a multi-sensor camera
                        // (neither of which have a distinct MAVLink
                        // component ID).           It is also needed
                        // to specify the target camera in missions.
                        // When used in a mission, an autopilot should
                        // execute the MAV_CMD for a specified local
                        // camera (param1 = 1-6), or resend it as a
                        // command if it is intended for a MAVLink
                        // camera (param1 = 7 - 255), setting the
                        // command's target_component as the param1
                        // value (and setting param1 in the command to
                        // zero).           If the param1 is 0 the
                        // autopilot should do both.            When
                        // sent in a command the target MAVLink
                        // address is set using target_component.
                        // If addressed specifically to an autopilot:
                        // param1 should be used in the same way as it
                        // is for missions (though command should NACK
                        // with MAV_RESULT_DENIED if a specified local
                        // camera does not exist).           If
                        // addressed to a MAVLink camera, param1 can
                        // be used to address all cameras (0), or to
                        // separately address 1 to 7 individual
                        // sensors. Other values should be NACKed with
                        // MAV_RESULT_DENIED.           If the command
                        // is broadcast (target_component is 0) then
                        // param 1 should be set to 0 (any other value
                        // should be NACKED with MAV_RESULT_DENIED).
                        // An autopilot would trigger any local
                        // cameras and forward the command to all
                        // channels.
mavlink20.MAV_CMD_DO_TRIGGER_CONTROL = 2003 // Enable or disable on-board camera triggering system.
mavlink20.MAV_CMD_CAMERA_TRACK_POINT = 2004 // If the camera supports point visual tracking
                        // (CAMERA_CAP_FLAGS_HAS_TRACKING_POINT is
                        // set), this command allows to initiate the
                        // tracking.
mavlink20.MAV_CMD_CAMERA_TRACK_RECTANGLE = 2005 // If the camera supports rectangle visual tracking
                        // (CAMERA_CAP_FLAGS_HAS_TRACKING_RECTANGLE is
                        // set), this command allows to initiate the
                        // tracking.
mavlink20.MAV_CMD_CAMERA_STOP_TRACKING = 2010 // Stops ongoing tracking.
mavlink20.MAV_CMD_VIDEO_START_CAPTURE = 2500 // Starts video capture (recording).
mavlink20.MAV_CMD_VIDEO_STOP_CAPTURE = 2501 // Stop the current video capture (recording).
mavlink20.MAV_CMD_VIDEO_START_STREAMING = 2502 // Start video streaming
mavlink20.MAV_CMD_VIDEO_STOP_STREAMING = 2503 // Stop the given video stream
mavlink20.MAV_CMD_REQUEST_VIDEO_STREAM_INFORMATION = 2504 // Request video stream information (VIDEO_STREAM_INFORMATION)
mavlink20.MAV_CMD_REQUEST_VIDEO_STREAM_STATUS = 2505 // Request video stream status (VIDEO_STREAM_STATUS)
mavlink20.MAV_CMD_LOGGING_START = 2510 // Request to start streaming logging data over MAVLink (see also
                        // LOGGING_DATA message)
mavlink20.MAV_CMD_LOGGING_STOP = 2511 // Request to stop streaming log data over MAVLink
mavlink20.MAV_CMD_AIRFRAME_CONFIGURATION = 2520 // 
mavlink20.MAV_CMD_CONTROL_HIGH_LATENCY = 2600 // Request to start/stop transmitting over the high latency telemetry
mavlink20.MAV_CMD_PANORAMA_CREATE = 2800 // Create a panorama at the current position
mavlink20.MAV_CMD_DO_VTOL_TRANSITION = 3000 // Request VTOL transition
mavlink20.MAV_CMD_ARM_AUTHORIZATION_REQUEST = 3001 // Request authorization to arm the vehicle to a external entity, the arm
                        // authorizer is responsible to request all
                        // data that is needs from the vehicle before
                        // authorize or deny the request. If approved
                        // the progress of command_ack message should
                        // be set with period of time that this
                        // authorization is valid in seconds or in
                        // case it was denied it should be set with
                        // one of the reasons in
                        // ARM_AUTH_DENIED_REASON.
mavlink20.MAV_CMD_SET_GUIDED_SUBMODE_STANDARD = 4000 // This command sets the submode to standard guided when vehicle is in
                        // guided mode. The vehicle holds position and
                        // altitude and the user can input the desired
                        // velocities along all three axes.
mavlink20.MAV_CMD_SET_GUIDED_SUBMODE_CIRCLE = 4001 // This command sets submode circle when vehicle is in guided mode.
                        // Vehicle flies along a circle facing the
                        // center of the circle. The user can input
                        // the velocity along the circle and change
                        // the radius. If no input is given the
                        // vehicle will hold position.
mavlink20.MAV_CMD_NAV_FENCE_RETURN_POINT = 5000 // Fence return point (there can only be one such point in a geofence
                        // definition). If rally points are supported
                        // they should be used instead.
mavlink20.MAV_CMD_NAV_FENCE_POLYGON_VERTEX_INCLUSION = 5001 // Fence vertex for an inclusion polygon (the polygon must not be self-
                        // intersecting). The vehicle must stay within
                        // this area. Minimum of 3 vertices required.
mavlink20.MAV_CMD_NAV_FENCE_POLYGON_VERTEX_EXCLUSION = 5002 // Fence vertex for an exclusion polygon (the polygon must not be self-
                        // intersecting). The vehicle must stay
                        // outside this area. Minimum of 3 vertices
                        // required.
mavlink20.MAV_CMD_NAV_FENCE_CIRCLE_INCLUSION = 5003 // Circular fence area. The vehicle must stay inside this area.
mavlink20.MAV_CMD_NAV_FENCE_CIRCLE_EXCLUSION = 5004 // Circular fence area. The vehicle must stay outside this area.
mavlink20.MAV_CMD_NAV_RALLY_POINT = 5100 // Rally point. You can have multiple rally points defined.
mavlink20.MAV_CMD_UAVCAN_GET_NODE_INFO = 5200 // Commands the vehicle to respond with a sequence of messages
                        // UAVCAN_NODE_INFO, one message per every
                        // UAVCAN node that is online. Note that some
                        // of the response messages can be lost, which
                        // the receiver can detect easily by checking
                        // whether every received UAVCAN_NODE_STATUS
                        // has a matching message UAVCAN_NODE_INFO
                        // received earlier; if not, this command
                        // should be sent again in order to request
                        // re-transmission of the node information
                        // messages.
mavlink20.MAV_CMD_DO_ADSB_OUT_IDENT = 10001 // Trigger the start of an ADSB-out IDENT. This should only be used when
                        // requested to do so by an Air Traffic
                        // Controller in controlled airspace. This
                        // starts the IDENT which is then typically
                        // held for 18 seconds by the hardware per the
                        // Mode A, C, and S transponder spec.
mavlink20.MAV_CMD_LOWEHEISER_SET_STATE = 10151 // Set Loweheiser desired states
mavlink20.MAV_CMD_PAYLOAD_PREPARE_DEPLOY = 30001 // Deploy payload on a Lat / Lon / Alt position. This includes the
                        // navigation to reach the required release
                        // position and velocity.
mavlink20.MAV_CMD_PAYLOAD_CONTROL_DEPLOY = 30002 // Control the payload deployment.
mavlink20.MAV_CMD_WAYPOINT_USER_1 = 31000 // User defined waypoint item. Ground Station will show the Vehicle as
                        // flying through this item.
mavlink20.MAV_CMD_WAYPOINT_USER_2 = 31001 // User defined waypoint item. Ground Station will show the Vehicle as
                        // flying through this item.
mavlink20.MAV_CMD_WAYPOINT_USER_3 = 31002 // User defined waypoint item. Ground Station will show the Vehicle as
                        // flying through this item.
mavlink20.MAV_CMD_WAYPOINT_USER_4 = 31003 // User defined waypoint item. Ground Station will show the Vehicle as
                        // flying through this item.
mavlink20.MAV_CMD_WAYPOINT_USER_5 = 31004 // User defined waypoint item. Ground Station will show the Vehicle as
                        // flying through this item.
mavlink20.MAV_CMD_SPATIAL_USER_1 = 31005 // User defined spatial item. Ground Station will not show the Vehicle as
                        // flying through this item. Example: ROI
                        // item.
mavlink20.MAV_CMD_SPATIAL_USER_2 = 31006 // User defined spatial item. Ground Station will not show the Vehicle as
                        // flying through this item. Example: ROI
                        // item.
mavlink20.MAV_CMD_SPATIAL_USER_3 = 31007 // User defined spatial item. Ground Station will not show the Vehicle as
                        // flying through this item. Example: ROI
                        // item.
mavlink20.MAV_CMD_SPATIAL_USER_4 = 31008 // User defined spatial item. Ground Station will not show the Vehicle as
                        // flying through this item. Example: ROI
                        // item.
mavlink20.MAV_CMD_SPATIAL_USER_5 = 31009 // User defined spatial item. Ground Station will not show the Vehicle as
                        // flying through this item. Example: ROI
                        // item.
mavlink20.MAV_CMD_USER_1 = 31010 // User defined command. Ground Station will not show the Vehicle as
                        // flying through this item. Example:
                        // MAV_CMD_DO_SET_PARAMETER item.
mavlink20.MAV_CMD_USER_2 = 31011 // User defined command. Ground Station will not show the Vehicle as
                        // flying through this item. Example:
                        // MAV_CMD_DO_SET_PARAMETER item.
mavlink20.MAV_CMD_USER_3 = 31012 // User defined command. Ground Station will not show the Vehicle as
                        // flying through this item. Example:
                        // MAV_CMD_DO_SET_PARAMETER item.
mavlink20.MAV_CMD_USER_4 = 31013 // User defined command. Ground Station will not show the Vehicle as
                        // flying through this item. Example:
                        // MAV_CMD_DO_SET_PARAMETER item.
mavlink20.MAV_CMD_USER_5 = 31014 // User defined command. Ground Station will not show the Vehicle as
                        // flying through this item. Example:
                        // MAV_CMD_DO_SET_PARAMETER item.
mavlink20.MAV_CMD_CAN_FORWARD = 32000 // Request forwarding of CAN packets from the given CAN bus to this
                        // interface. CAN Frames are sent using
                        // CAN_FRAME and CANFD_FRAME messages
mavlink20.MAV_CMD_POWER_OFF_INITIATED = 42000 // A system wide power-off event has been initiated.
mavlink20.MAV_CMD_SOLO_BTN_FLY_CLICK = 42001 // FLY button has been clicked.
mavlink20.MAV_CMD_SOLO_BTN_FLY_HOLD = 42002 // FLY button has been held for 1.5 seconds.
mavlink20.MAV_CMD_SOLO_BTN_PAUSE_CLICK = 42003 // PAUSE button has been clicked.
mavlink20.MAV_CMD_FIXED_MAG_CAL = 42004 // Magnetometer calibration based on fixed position         in earth
                        // field given by inclination, declination and
                        // intensity.
mavlink20.MAV_CMD_FIXED_MAG_CAL_FIELD = 42005 // Magnetometer calibration based on fixed expected field values.
mavlink20.MAV_CMD_FIXED_MAG_CAL_YAW = 42006 // Magnetometer calibration based on provided known yaw. This allows for
                        // fast calibration using WMM field tables in
                        // the vehicle, given only the known yaw of
                        // the vehicle. If Latitude and longitude are
                        // both zero then use the current vehicle
                        // location.
mavlink20.MAV_CMD_SET_EKF_SOURCE_SET = 42007 // Set EKF sensor source set.
mavlink20.MAV_CMD_DO_START_MAG_CAL = 42424 // Initiate a magnetometer calibration.
mavlink20.MAV_CMD_DO_ACCEPT_MAG_CAL = 42425 // Accept a magnetometer calibration.
mavlink20.MAV_CMD_DO_CANCEL_MAG_CAL = 42426 // Cancel a running magnetometer calibration.
mavlink20.MAV_CMD_SET_FACTORY_TEST_MODE = 42427 // Command autopilot to get into factory test/diagnostic mode.
mavlink20.MAV_CMD_DO_SEND_BANNER = 42428 // Reply with the version banner.
mavlink20.MAV_CMD_ACCELCAL_VEHICLE_POS = 42429 // Used when doing accelerometer calibration. When sent to the GCS tells
                        // it what position to put the vehicle in.
                        // When sent to the vehicle says what position
                        // the vehicle is in.
mavlink20.MAV_CMD_GIMBAL_RESET = 42501 // Causes the gimbal to reset and boot as if it was just powered on.
mavlink20.MAV_CMD_GIMBAL_AXIS_CALIBRATION_STATUS = 42502 // Reports progress and success or failure of gimbal axis calibration
                        // procedure.
mavlink20.MAV_CMD_GIMBAL_REQUEST_AXIS_CALIBRATION = 42503 // Starts commutation calibration on the gimbal.
mavlink20.MAV_CMD_GIMBAL_FULL_RESET = 42505 // Erases gimbal application and parameters.
mavlink20.MAV_CMD_DO_WINCH = 42600 // Command to operate winch.
mavlink20.MAV_CMD_FLASH_BOOTLOADER = 42650 // Update the bootloader
mavlink20.MAV_CMD_BATTERY_RESET = 42651 // Reset battery capacity for batteries that accumulate consumed battery
                        // via integration.
mavlink20.MAV_CMD_DEBUG_TRAP = 42700 // Issue a trap signal to the autopilot process, presumably to enter the
                        // debugger.
mavlink20.MAV_CMD_SCRIPTING = 42701 // Control onboard scripting.
mavlink20.MAV_CMD_NAV_SCRIPT_TIME = 42702 // Scripting command as NAV command with wait for completion.
mavlink20.MAV_CMD_NAV_ATTITUDE_TIME = 42703 // Maintain an attitude for a specified time.
mavlink20.MAV_CMD_GUIDED_CHANGE_SPEED = 43000 // Change flight speed at a given rate. This slews the vehicle at a
                        // controllable rate between it's previous
                        // speed and the new one. (affects GUIDED
                        // only. Outside GUIDED, aircraft ignores
                        // these commands. Designed for onboard
                        // companion-computer command-and-control, not
                        // normally operator/GCS control.)
mavlink20.MAV_CMD_GUIDED_CHANGE_ALTITUDE = 43001 // Change target altitude at a given rate. This slews the vehicle at a
                        // controllable rate between it's previous
                        // altitude and the new one. (affects GUIDED
                        // only. Outside GUIDED, aircraft ignores
                        // these commands. Designed for onboard
                        // companion-computer command-and-control, not
                        // normally operator/GCS control.)
mavlink20.MAV_CMD_GUIDED_CHANGE_HEADING = 43002 // Change to target heading at a given rate, overriding previous
                        // heading/s. This slews the vehicle at a
                        // controllable rate between it's previous
                        // heading and the new one. (affects GUIDED
                        // only. Exiting GUIDED returns aircraft to
                        // normal behaviour defined elsewhere.
                        // Designed for onboard companion-computer
                        // command-and-control, not normally
                        // operator/GCS control.)
mavlink20.MAV_CMD_EXTERNAL_POSITION_ESTIMATE = 43003 // Provide an external position estimate for use when dead-reckoning.
                        // This is meant to be used for occasional
                        // position resets that may be provided by a
                        // external system such as a remote pilot
                        // using landmarks over a video link.
mavlink20.MAV_CMD_ENUM_END = 43004 // 

// SCRIPTING_CMD
mavlink20.SCRIPTING_CMD_REPL_START = 0 // Start a REPL session.
mavlink20.SCRIPTING_CMD_REPL_STOP = 1 // End a REPL session.
mavlink20.SCRIPTING_CMD_STOP = 2 // Stop execution of scripts.
mavlink20.SCRIPTING_CMD_STOP_AND_RESTART = 3 // Stop execution of scripts and restart.
mavlink20.SCRIPTING_CMD_ENUM_END = 4 // 

// SECURE_COMMAND_OP
mavlink20.SECURE_COMMAND_GET_SESSION_KEY = 0 // Get an 8 byte session key which is used for remote secure updates
                        // which operate on flight controller data
                        // such as bootloader public keys. Return data
                        // will be 8 bytes on success. The session key
                        // remains valid until either the flight
                        // controller reboots or another
                        // SECURE_COMMAND_GET_SESSION_KEY is run.
mavlink20.SECURE_COMMAND_GET_REMOTEID_SESSION_KEY = 1 // Get an 8 byte session key which is used for remote secure updates
                        // which operate on RemoteID module data.
                        // Return data will be 8 bytes on success. The
                        // session key remains valid until either the
                        // remote ID module reboots or another
                        // SECURE_COMMAND_GET_REMOTEID_SESSION_KEY is
                        // run.
mavlink20.SECURE_COMMAND_REMOVE_PUBLIC_KEYS = 2 // Remove range of public keys from the bootloader. Command data consists
                        // of two bytes, first byte if index of first
                        // public key to remove. Second byte is the
                        // number of keys to remove. If all keys are
                        // removed then secure boot is disabled and
                        // insecure firmware can be loaded.
mavlink20.SECURE_COMMAND_GET_PUBLIC_KEYS = 3 // Get current public keys from the bootloader. Command data consists of
                        // two bytes, first byte is index of first
                        // public key to fetch, 2nd byte is number of
                        // keys to fetch. Total data needs to fit in
                        // data portion of reply (max 6 keys for 32
                        // byte keys). Reply data has the index of the
                        // first key in the first byte, followed by
                        // the keys. Returned keys may be less than
                        // the number of keys requested if there are
                        // less keys installed than requested.
mavlink20.SECURE_COMMAND_SET_PUBLIC_KEYS = 4 // Set current public keys in the bootloader. Data consists of a one byte
                        // public key index followed by the public
                        // keys. With 32 byte keys this allows for up
                        // to 6 keys to be set in one request. Keys
                        // outside of the range that is being set will
                        // remain unchanged.
mavlink20.SECURE_COMMAND_GET_REMOTEID_CONFIG = 5 // Get config data for remote ID module. This command should be sent to
                        // the component ID of the flight controller
                        // which will forward it to the RemoteID
                        // module either over mavlink or DroneCAN.
                        // Data format is specific to the RemoteID
                        // implementation, see RemoteID firmware
                        // documentation for details.
mavlink20.SECURE_COMMAND_SET_REMOTEID_CONFIG = 6 // Set config data for remote ID module. This command should be sent to
                        // the component ID of the flight controller
                        // which will forward it to the RemoteID
                        // module either over mavlink or DroneCAN.
                        // Data format is specific to the RemoteID
                        // implementation, see RemoteID firmware
                        // documentation for details.
mavlink20.SECURE_COMMAND_FLASH_BOOTLOADER = 7 // Flash bootloader from local storage. Data is the filename to use for
                        // the bootloader. This is intended to be used
                        // with MAVFtp to upload a new bootloader to a
                        // microSD before flashing.
mavlink20.SECURE_COMMAND_OP_ENUM_END = 8 // 

// LIMITS_STATE
mavlink20.LIMITS_INIT = 0 // Pre-initialization.
mavlink20.LIMITS_DISABLED = 1 // Disabled.
mavlink20.LIMITS_ENABLED = 2 // Checking limits.
mavlink20.LIMITS_TRIGGERED = 3 // A limit has been breached.
mavlink20.LIMITS_RECOVERING = 4 // Taking action e.g. Return/RTL.
mavlink20.LIMITS_RECOVERED = 5 // We're no longer in breach of a limit.
mavlink20.LIMITS_STATE_ENUM_END = 6 // 

// LIMIT_MODULE
mavlink20.LIMIT_GPSLOCK = 1 // Pre-initialization.
mavlink20.LIMIT_GEOFENCE = 2 // Disabled.
mavlink20.LIMIT_ALTITUDE = 4 // Checking limits.
mavlink20.LIMIT_MODULE_ENUM_END = 5 // 

// RALLY_FLAGS
mavlink20.FAVORABLE_WIND = 1 // Flag set when requiring favorable winds for landing.
mavlink20.LAND_IMMEDIATELY = 2 // Flag set when plane is to immediately descend to break altitude and
                        // land without GCS intervention. Flag not set
                        // when plane is to loiter at Rally point
                        // until commanded to land.
mavlink20.RALLY_FLAGS_ENUM_END = 3 // 

// CAMERA_STATUS_TYPES
mavlink20.CAMERA_STATUS_TYPE_HEARTBEAT = 0 // Camera heartbeat, announce camera component ID at 1Hz.
mavlink20.CAMERA_STATUS_TYPE_TRIGGER = 1 // Camera image triggered.
mavlink20.CAMERA_STATUS_TYPE_DISCONNECT = 2 // Camera connection lost.
mavlink20.CAMERA_STATUS_TYPE_ERROR = 3 // Camera unknown error.
mavlink20.CAMERA_STATUS_TYPE_LOWBATT = 4 // Camera battery low. Parameter p1 shows reported voltage.
mavlink20.CAMERA_STATUS_TYPE_LOWSTORE = 5 // Camera storage low. Parameter p1 shows reported shots remaining.
mavlink20.CAMERA_STATUS_TYPE_LOWSTOREV = 6 // Camera storage low. Parameter p1 shows reported video minutes
                        // remaining.
mavlink20.CAMERA_STATUS_TYPES_ENUM_END = 7 // 

// CAMERA_FEEDBACK_FLAGS
mavlink20.CAMERA_FEEDBACK_PHOTO = 0 // Shooting photos, not video.
mavlink20.CAMERA_FEEDBACK_VIDEO = 1 // Shooting video, not stills.
mavlink20.CAMERA_FEEDBACK_BADEXPOSURE = 2 // Unable to achieve requested exposure (e.g. shutter speed too low).
mavlink20.CAMERA_FEEDBACK_CLOSEDLOOP = 3 // Closed loop feedback from camera, we know for sure it has successfully
                        // taken a picture.
mavlink20.CAMERA_FEEDBACK_OPENLOOP = 4 // Open loop camera, an image trigger has been requested but we can't
                        // know for sure it has successfully taken a
                        // picture.
mavlink20.CAMERA_FEEDBACK_FLAGS_ENUM_END = 5 // 

// MAV_MODE_GIMBAL
mavlink20.MAV_MODE_GIMBAL_UNINITIALIZED = 0 // Gimbal is powered on but has not started initializing yet.
mavlink20.MAV_MODE_GIMBAL_CALIBRATING_PITCH = 1 // Gimbal is currently running calibration on the pitch axis.
mavlink20.MAV_MODE_GIMBAL_CALIBRATING_ROLL = 2 // Gimbal is currently running calibration on the roll axis.
mavlink20.MAV_MODE_GIMBAL_CALIBRATING_YAW = 3 // Gimbal is currently running calibration on the yaw axis.
mavlink20.MAV_MODE_GIMBAL_INITIALIZED = 4 // Gimbal has finished calibrating and initializing, but is relaxed
                        // pending reception of first rate command
                        // from copter.
mavlink20.MAV_MODE_GIMBAL_ACTIVE = 5 // Gimbal is actively stabilizing.
mavlink20.MAV_MODE_GIMBAL_RATE_CMD_TIMEOUT = 6 // Gimbal is relaxed because it missed more than 10 expected rate command
                        // messages in a row. Gimbal will move back to
                        // active mode when it receives a new rate
                        // command.
mavlink20.MAV_MODE_GIMBAL_ENUM_END = 7 // 

// GIMBAL_AXIS
mavlink20.GIMBAL_AXIS_YAW = 0 // Gimbal yaw axis.
mavlink20.GIMBAL_AXIS_PITCH = 1 // Gimbal pitch axis.
mavlink20.GIMBAL_AXIS_ROLL = 2 // Gimbal roll axis.
mavlink20.GIMBAL_AXIS_ENUM_END = 3 // 

// GIMBAL_AXIS_CALIBRATION_STATUS
mavlink20.GIMBAL_AXIS_CALIBRATION_STATUS_IN_PROGRESS = 0 // Axis calibration is in progress.
mavlink20.GIMBAL_AXIS_CALIBRATION_STATUS_SUCCEEDED = 1 // Axis calibration succeeded.
mavlink20.GIMBAL_AXIS_CALIBRATION_STATUS_FAILED = 2 // Axis calibration failed.
mavlink20.GIMBAL_AXIS_CALIBRATION_STATUS_ENUM_END = 3 // 

// GIMBAL_AXIS_CALIBRATION_REQUIRED
mavlink20.GIMBAL_AXIS_CALIBRATION_REQUIRED_UNKNOWN = 0 // Whether or not this axis requires calibration is unknown at this time.
mavlink20.GIMBAL_AXIS_CALIBRATION_REQUIRED_TRUE = 1 // This axis requires calibration.
mavlink20.GIMBAL_AXIS_CALIBRATION_REQUIRED_FALSE = 2 // This axis does not require calibration.
mavlink20.GIMBAL_AXIS_CALIBRATION_REQUIRED_ENUM_END = 3 // 

// GOPRO_HEARTBEAT_STATUS
mavlink20.GOPRO_HEARTBEAT_STATUS_DISCONNECTED = 0 // No GoPro connected.
mavlink20.GOPRO_HEARTBEAT_STATUS_INCOMPATIBLE = 1 // The detected GoPro is not HeroBus compatible.
mavlink20.GOPRO_HEARTBEAT_STATUS_CONNECTED = 2 // A HeroBus compatible GoPro is connected.
mavlink20.GOPRO_HEARTBEAT_STATUS_ERROR = 3 // An unrecoverable error was encountered with the connected GoPro, it
                        // may require a power cycle.
mavlink20.GOPRO_HEARTBEAT_STATUS_ENUM_END = 4 // 

// GOPRO_HEARTBEAT_FLAGS
mavlink20.GOPRO_FLAG_RECORDING = 1 // GoPro is currently recording.
mavlink20.GOPRO_HEARTBEAT_FLAGS_ENUM_END = 2 // 

// GOPRO_REQUEST_STATUS
mavlink20.GOPRO_REQUEST_SUCCESS = 0 // The write message with ID indicated succeeded.
mavlink20.GOPRO_REQUEST_FAILED = 1 // The write message with ID indicated failed.
mavlink20.GOPRO_REQUEST_STATUS_ENUM_END = 2 // 

// GOPRO_COMMAND
mavlink20.GOPRO_COMMAND_POWER = 0 // (Get/Set).
mavlink20.GOPRO_COMMAND_CAPTURE_MODE = 1 // (Get/Set).
mavlink20.GOPRO_COMMAND_SHUTTER = 2 // (___/Set).
mavlink20.GOPRO_COMMAND_BATTERY = 3 // (Get/___).
mavlink20.GOPRO_COMMAND_MODEL = 4 // (Get/___).
mavlink20.GOPRO_COMMAND_VIDEO_SETTINGS = 5 // (Get/Set).
mavlink20.GOPRO_COMMAND_LOW_LIGHT = 6 // (Get/Set).
mavlink20.GOPRO_COMMAND_PHOTO_RESOLUTION = 7 // (Get/Set).
mavlink20.GOPRO_COMMAND_PHOTO_BURST_RATE = 8 // (Get/Set).
mavlink20.GOPRO_COMMAND_PROTUNE = 9 // (Get/Set).
mavlink20.GOPRO_COMMAND_PROTUNE_WHITE_BALANCE = 10 // (Get/Set) Hero 3+ Only.
mavlink20.GOPRO_COMMAND_PROTUNE_COLOUR = 11 // (Get/Set) Hero 3+ Only.
mavlink20.GOPRO_COMMAND_PROTUNE_GAIN = 12 // (Get/Set) Hero 3+ Only.
mavlink20.GOPRO_COMMAND_PROTUNE_SHARPNESS = 13 // (Get/Set) Hero 3+ Only.
mavlink20.GOPRO_COMMAND_PROTUNE_EXPOSURE = 14 // (Get/Set) Hero 3+ Only.
mavlink20.GOPRO_COMMAND_TIME = 15 // (Get/Set).
mavlink20.GOPRO_COMMAND_CHARGING = 16 // (Get/Set).
mavlink20.GOPRO_COMMAND_ENUM_END = 17 // 

// GOPRO_CAPTURE_MODE
mavlink20.GOPRO_CAPTURE_MODE_VIDEO = 0 // Video mode.
mavlink20.GOPRO_CAPTURE_MODE_PHOTO = 1 // Photo mode.
mavlink20.GOPRO_CAPTURE_MODE_BURST = 2 // Burst mode, Hero 3+ only.
mavlink20.GOPRO_CAPTURE_MODE_TIME_LAPSE = 3 // Time lapse mode, Hero 3+ only.
mavlink20.GOPRO_CAPTURE_MODE_MULTI_SHOT = 4 // Multi shot mode, Hero 4 only.
mavlink20.GOPRO_CAPTURE_MODE_PLAYBACK = 5 // Playback mode, Hero 4 only, silver only except when LCD or HDMI is
                        // connected to black.
mavlink20.GOPRO_CAPTURE_MODE_SETUP = 6 // Playback mode, Hero 4 only.
mavlink20.GOPRO_CAPTURE_MODE_UNKNOWN = 255 // Mode not yet known.
mavlink20.GOPRO_CAPTURE_MODE_ENUM_END = 256 // 

// GOPRO_RESOLUTION
mavlink20.GOPRO_RESOLUTION_480p = 0 // 848 x 480 (480p).
mavlink20.GOPRO_RESOLUTION_720p = 1 // 1280 x 720 (720p).
mavlink20.GOPRO_RESOLUTION_960p = 2 // 1280 x 960 (960p).
mavlink20.GOPRO_RESOLUTION_1080p = 3 // 1920 x 1080 (1080p).
mavlink20.GOPRO_RESOLUTION_1440p = 4 // 1920 x 1440 (1440p).
mavlink20.GOPRO_RESOLUTION_2_7k_17_9 = 5 // 2704 x 1440 (2.7k-17:9).
mavlink20.GOPRO_RESOLUTION_2_7k_16_9 = 6 // 2704 x 1524 (2.7k-16:9).
mavlink20.GOPRO_RESOLUTION_2_7k_4_3 = 7 // 2704 x 2028 (2.7k-4:3).
mavlink20.GOPRO_RESOLUTION_4k_16_9 = 8 // 3840 x 2160 (4k-16:9).
mavlink20.GOPRO_RESOLUTION_4k_17_9 = 9 // 4096 x 2160 (4k-17:9).
mavlink20.GOPRO_RESOLUTION_720p_SUPERVIEW = 10 // 1280 x 720 (720p-SuperView).
mavlink20.GOPRO_RESOLUTION_1080p_SUPERVIEW = 11 // 1920 x 1080 (1080p-SuperView).
mavlink20.GOPRO_RESOLUTION_2_7k_SUPERVIEW = 12 // 2704 x 1520 (2.7k-SuperView).
mavlink20.GOPRO_RESOLUTION_4k_SUPERVIEW = 13 // 3840 x 2160 (4k-SuperView).
mavlink20.GOPRO_RESOLUTION_ENUM_END = 14 // 

// GOPRO_FRAME_RATE
mavlink20.GOPRO_FRAME_RATE_12 = 0 // 12 FPS.
mavlink20.GOPRO_FRAME_RATE_15 = 1 // 15 FPS.
mavlink20.GOPRO_FRAME_RATE_24 = 2 // 24 FPS.
mavlink20.GOPRO_FRAME_RATE_25 = 3 // 25 FPS.
mavlink20.GOPRO_FRAME_RATE_30 = 4 // 30 FPS.
mavlink20.GOPRO_FRAME_RATE_48 = 5 // 48 FPS.
mavlink20.GOPRO_FRAME_RATE_50 = 6 // 50 FPS.
mavlink20.GOPRO_FRAME_RATE_60 = 7 // 60 FPS.
mavlink20.GOPRO_FRAME_RATE_80 = 8 // 80 FPS.
mavlink20.GOPRO_FRAME_RATE_90 = 9 // 90 FPS.
mavlink20.GOPRO_FRAME_RATE_100 = 10 // 100 FPS.
mavlink20.GOPRO_FRAME_RATE_120 = 11 // 120 FPS.
mavlink20.GOPRO_FRAME_RATE_240 = 12 // 240 FPS.
mavlink20.GOPRO_FRAME_RATE_12_5 = 13 // 12.5 FPS.
mavlink20.GOPRO_FRAME_RATE_ENUM_END = 14 // 

// GOPRO_FIELD_OF_VIEW
mavlink20.GOPRO_FIELD_OF_VIEW_WIDE = 0 // 0x00: Wide.
mavlink20.GOPRO_FIELD_OF_VIEW_MEDIUM = 1 // 0x01: Medium.
mavlink20.GOPRO_FIELD_OF_VIEW_NARROW = 2 // 0x02: Narrow.
mavlink20.GOPRO_FIELD_OF_VIEW_ENUM_END = 3 // 

// GOPRO_VIDEO_SETTINGS_FLAGS
mavlink20.GOPRO_VIDEO_SETTINGS_TV_MODE = 1 // 0=NTSC, 1=PAL.
mavlink20.GOPRO_VIDEO_SETTINGS_FLAGS_ENUM_END = 2 // 

// GOPRO_PHOTO_RESOLUTION
mavlink20.GOPRO_PHOTO_RESOLUTION_5MP_MEDIUM = 0 // 5MP Medium.
mavlink20.GOPRO_PHOTO_RESOLUTION_7MP_MEDIUM = 1 // 7MP Medium.
mavlink20.GOPRO_PHOTO_RESOLUTION_7MP_WIDE = 2 // 7MP Wide.
mavlink20.GOPRO_PHOTO_RESOLUTION_10MP_WIDE = 3 // 10MP Wide.
mavlink20.GOPRO_PHOTO_RESOLUTION_12MP_WIDE = 4 // 12MP Wide.
mavlink20.GOPRO_PHOTO_RESOLUTION_ENUM_END = 5 // 

// GOPRO_PROTUNE_WHITE_BALANCE
mavlink20.GOPRO_PROTUNE_WHITE_BALANCE_AUTO = 0 // Auto.
mavlink20.GOPRO_PROTUNE_WHITE_BALANCE_3000K = 1 // 3000K.
mavlink20.GOPRO_PROTUNE_WHITE_BALANCE_5500K = 2 // 5500K.
mavlink20.GOPRO_PROTUNE_WHITE_BALANCE_6500K = 3 // 6500K.
mavlink20.GOPRO_PROTUNE_WHITE_BALANCE_RAW = 4 // Camera Raw.
mavlink20.GOPRO_PROTUNE_WHITE_BALANCE_ENUM_END = 5 // 

// GOPRO_PROTUNE_COLOUR
mavlink20.GOPRO_PROTUNE_COLOUR_STANDARD = 0 // Auto.
mavlink20.GOPRO_PROTUNE_COLOUR_NEUTRAL = 1 // Neutral.
mavlink20.GOPRO_PROTUNE_COLOUR_ENUM_END = 2 // 

// GOPRO_PROTUNE_GAIN
mavlink20.GOPRO_PROTUNE_GAIN_400 = 0 // ISO 400.
mavlink20.GOPRO_PROTUNE_GAIN_800 = 1 // ISO 800 (Only Hero 4).
mavlink20.GOPRO_PROTUNE_GAIN_1600 = 2 // ISO 1600.
mavlink20.GOPRO_PROTUNE_GAIN_3200 = 3 // ISO 3200 (Only Hero 4).
mavlink20.GOPRO_PROTUNE_GAIN_6400 = 4 // ISO 6400.
mavlink20.GOPRO_PROTUNE_GAIN_ENUM_END = 5 // 

// GOPRO_PROTUNE_SHARPNESS
mavlink20.GOPRO_PROTUNE_SHARPNESS_LOW = 0 // Low Sharpness.
mavlink20.GOPRO_PROTUNE_SHARPNESS_MEDIUM = 1 // Medium Sharpness.
mavlink20.GOPRO_PROTUNE_SHARPNESS_HIGH = 2 // High Sharpness.
mavlink20.GOPRO_PROTUNE_SHARPNESS_ENUM_END = 3 // 

// GOPRO_PROTUNE_EXPOSURE
mavlink20.GOPRO_PROTUNE_EXPOSURE_NEG_5_0 = 0 // -5.0 EV (Hero 3+ Only).
mavlink20.GOPRO_PROTUNE_EXPOSURE_NEG_4_5 = 1 // -4.5 EV (Hero 3+ Only).
mavlink20.GOPRO_PROTUNE_EXPOSURE_NEG_4_0 = 2 // -4.0 EV (Hero 3+ Only).
mavlink20.GOPRO_PROTUNE_EXPOSURE_NEG_3_5 = 3 // -3.5 EV (Hero 3+ Only).
mavlink20.GOPRO_PROTUNE_EXPOSURE_NEG_3_0 = 4 // -3.0 EV (Hero 3+ Only).
mavlink20.GOPRO_PROTUNE_EXPOSURE_NEG_2_5 = 5 // -2.5 EV (Hero 3+ Only).
mavlink20.GOPRO_PROTUNE_EXPOSURE_NEG_2_0 = 6 // -2.0 EV.
mavlink20.GOPRO_PROTUNE_EXPOSURE_NEG_1_5 = 7 // -1.5 EV.
mavlink20.GOPRO_PROTUNE_EXPOSURE_NEG_1_0 = 8 // -1.0 EV.
mavlink20.GOPRO_PROTUNE_EXPOSURE_NEG_0_5 = 9 // -0.5 EV.
mavlink20.GOPRO_PROTUNE_EXPOSURE_ZERO = 10 // 0.0 EV.
mavlink20.GOPRO_PROTUNE_EXPOSURE_POS_0_5 = 11 // +0.5 EV.
mavlink20.GOPRO_PROTUNE_EXPOSURE_POS_1_0 = 12 // +1.0 EV.
mavlink20.GOPRO_PROTUNE_EXPOSURE_POS_1_5 = 13 // +1.5 EV.
mavlink20.GOPRO_PROTUNE_EXPOSURE_POS_2_0 = 14 // +2.0 EV.
mavlink20.GOPRO_PROTUNE_EXPOSURE_POS_2_5 = 15 // +2.5 EV (Hero 3+ Only).
mavlink20.GOPRO_PROTUNE_EXPOSURE_POS_3_0 = 16 // +3.0 EV (Hero 3+ Only).
mavlink20.GOPRO_PROTUNE_EXPOSURE_POS_3_5 = 17 // +3.5 EV (Hero 3+ Only).
mavlink20.GOPRO_PROTUNE_EXPOSURE_POS_4_0 = 18 // +4.0 EV (Hero 3+ Only).
mavlink20.GOPRO_PROTUNE_EXPOSURE_POS_4_5 = 19 // +4.5 EV (Hero 3+ Only).
mavlink20.GOPRO_PROTUNE_EXPOSURE_POS_5_0 = 20 // +5.0 EV (Hero 3+ Only).
mavlink20.GOPRO_PROTUNE_EXPOSURE_ENUM_END = 21 // 

// GOPRO_CHARGING
mavlink20.GOPRO_CHARGING_DISABLED = 0 // Charging disabled.
mavlink20.GOPRO_CHARGING_ENABLED = 1 // Charging enabled.
mavlink20.GOPRO_CHARGING_ENUM_END = 2 // 

// GOPRO_MODEL
mavlink20.GOPRO_MODEL_UNKNOWN = 0 // Unknown gopro model.
mavlink20.GOPRO_MODEL_HERO_3_PLUS_SILVER = 1 // Hero 3+ Silver (HeroBus not supported by GoPro).
mavlink20.GOPRO_MODEL_HERO_3_PLUS_BLACK = 2 // Hero 3+ Black.
mavlink20.GOPRO_MODEL_HERO_4_SILVER = 3 // Hero 4 Silver.
mavlink20.GOPRO_MODEL_HERO_4_BLACK = 4 // Hero 4 Black.
mavlink20.GOPRO_MODEL_ENUM_END = 5 // 

// GOPRO_BURST_RATE
mavlink20.GOPRO_BURST_RATE_3_IN_1_SECOND = 0 // 3 Shots / 1 Second.
mavlink20.GOPRO_BURST_RATE_5_IN_1_SECOND = 1 // 5 Shots / 1 Second.
mavlink20.GOPRO_BURST_RATE_10_IN_1_SECOND = 2 // 10 Shots / 1 Second.
mavlink20.GOPRO_BURST_RATE_10_IN_2_SECOND = 3 // 10 Shots / 2 Second.
mavlink20.GOPRO_BURST_RATE_10_IN_3_SECOND = 4 // 10 Shots / 3 Second (Hero 4 Only).
mavlink20.GOPRO_BURST_RATE_30_IN_1_SECOND = 5 // 30 Shots / 1 Second.
mavlink20.GOPRO_BURST_RATE_30_IN_2_SECOND = 6 // 30 Shots / 2 Second.
mavlink20.GOPRO_BURST_RATE_30_IN_3_SECOND = 7 // 30 Shots / 3 Second.
mavlink20.GOPRO_BURST_RATE_30_IN_6_SECOND = 8 // 30 Shots / 6 Second.
mavlink20.GOPRO_BURST_RATE_ENUM_END = 9 // 

// MAV_CMD_DO_AUX_FUNCTION_SWITCH_LEVEL
mavlink20.MAV_CMD_DO_AUX_FUNCTION_SWITCH_LEVEL_LOW = 0 // Switch Low.
mavlink20.MAV_CMD_DO_AUX_FUNCTION_SWITCH_LEVEL_MIDDLE = 1 // Switch Middle.
mavlink20.MAV_CMD_DO_AUX_FUNCTION_SWITCH_LEVEL_HIGH = 2 // Switch High.
mavlink20.MAV_CMD_DO_AUX_FUNCTION_SWITCH_LEVEL_ENUM_END = 3 // 

// LED_CONTROL_PATTERN
mavlink20.LED_CONTROL_PATTERN_OFF = 0 // LED patterns off (return control to regular vehicle control).
mavlink20.LED_CONTROL_PATTERN_FIRMWAREUPDATE = 1 // LEDs show pattern during firmware update.
mavlink20.LED_CONTROL_PATTERN_CUSTOM = 255 // Custom Pattern using custom bytes fields.
mavlink20.LED_CONTROL_PATTERN_ENUM_END = 256 // 

// EKF_STATUS_FLAGS
mavlink20.EKF_ATTITUDE = 1 // Set if EKF's attitude estimate is good.
mavlink20.EKF_VELOCITY_HORIZ = 2 // Set if EKF's horizontal velocity estimate is good.
mavlink20.EKF_VELOCITY_VERT = 4 // Set if EKF's vertical velocity estimate is good.
mavlink20.EKF_POS_HORIZ_REL = 8 // Set if EKF's horizontal position (relative) estimate is good.
mavlink20.EKF_POS_HORIZ_ABS = 16 // Set if EKF's horizontal position (absolute) estimate is good.
mavlink20.EKF_POS_VERT_ABS = 32 // Set if EKF's vertical position (absolute) estimate is good.
mavlink20.EKF_POS_VERT_AGL = 64 // Set if EKF's vertical position (above ground) estimate is good.
mavlink20.EKF_CONST_POS_MODE = 128 // EKF is in constant position mode and does not know it's absolute or
                        // relative position.
mavlink20.EKF_PRED_POS_HORIZ_REL = 256 // Set if EKF's predicted horizontal position (relative) estimate is
                        // good.
mavlink20.EKF_PRED_POS_HORIZ_ABS = 512 // Set if EKF's predicted horizontal position (absolute) estimate is
                        // good.
mavlink20.EKF_UNINITIALIZED = 1024 // Set if EKF has never been healthy.
mavlink20.EKF_STATUS_FLAGS_ENUM_END = 1025 // 

// PID_TUNING_AXIS
mavlink20.PID_TUNING_ROLL = 1 // 
mavlink20.PID_TUNING_PITCH = 2 // 
mavlink20.PID_TUNING_YAW = 3 // 
mavlink20.PID_TUNING_ACCZ = 4 // 
mavlink20.PID_TUNING_STEER = 5 // 
mavlink20.PID_TUNING_LANDING = 6 // 
mavlink20.PID_TUNING_AXIS_ENUM_END = 7 // 

// MAV_REMOTE_LOG_DATA_BLOCK_COMMANDS
mavlink20.MAV_REMOTE_LOG_DATA_BLOCK_STOP = 2147483645 // UAV to stop sending DataFlash blocks.
mavlink20.MAV_REMOTE_LOG_DATA_BLOCK_START = 2147483646 // UAV to start sending DataFlash blocks.
mavlink20.MAV_REMOTE_LOG_DATA_BLOCK_COMMANDS_ENUM_END = 2147483647 // 

// MAV_REMOTE_LOG_DATA_BLOCK_STATUSES
mavlink20.MAV_REMOTE_LOG_DATA_BLOCK_NACK = 0 // This block has NOT been received.
mavlink20.MAV_REMOTE_LOG_DATA_BLOCK_ACK = 1 // This block has been received.
mavlink20.MAV_REMOTE_LOG_DATA_BLOCK_STATUSES_ENUM_END = 2 // 

// DEVICE_OP_BUSTYPE
mavlink20.DEVICE_OP_BUSTYPE_I2C = 0 // I2C Device operation.
mavlink20.DEVICE_OP_BUSTYPE_SPI = 1 // SPI Device operation.
mavlink20.DEVICE_OP_BUSTYPE_ENUM_END = 2 // 

// DEEPSTALL_STAGE
mavlink20.DEEPSTALL_STAGE_FLY_TO_LANDING = 0 // Flying to the landing point.
mavlink20.DEEPSTALL_STAGE_ESTIMATE_WIND = 1 // Building an estimate of the wind.
mavlink20.DEEPSTALL_STAGE_WAIT_FOR_BREAKOUT = 2 // Waiting to breakout of the loiter to fly the approach.
mavlink20.DEEPSTALL_STAGE_FLY_TO_ARC = 3 // Flying to the first arc point to turn around to the landing point.
mavlink20.DEEPSTALL_STAGE_ARC = 4 // Turning around back to the deepstall landing point.
mavlink20.DEEPSTALL_STAGE_APPROACH = 5 // Approaching the landing point.
mavlink20.DEEPSTALL_STAGE_LAND = 6 // Stalling and steering towards the land point.
mavlink20.DEEPSTALL_STAGE_ENUM_END = 7 // 

// PLANE_MODE
mavlink20.PLANE_MODE_MANUAL = 0 // 
mavlink20.PLANE_MODE_CIRCLE = 1 // 
mavlink20.PLANE_MODE_STABILIZE = 2 // 
mavlink20.PLANE_MODE_TRAINING = 3 // 
mavlink20.PLANE_MODE_ACRO = 4 // 
mavlink20.PLANE_MODE_FLY_BY_WIRE_A = 5 // 
mavlink20.PLANE_MODE_FLY_BY_WIRE_B = 6 // 
mavlink20.PLANE_MODE_CRUISE = 7 // 
mavlink20.PLANE_MODE_AUTOTUNE = 8 // 
mavlink20.PLANE_MODE_AUTO = 10 // 
mavlink20.PLANE_MODE_RTL = 11 // 
mavlink20.PLANE_MODE_LOITER = 12 // 
mavlink20.PLANE_MODE_TAKEOFF = 13 // 
mavlink20.PLANE_MODE_AVOID_ADSB = 14 // 
mavlink20.PLANE_MODE_GUIDED = 15 // 
mavlink20.PLANE_MODE_INITIALIZING = 16 // 
mavlink20.PLANE_MODE_QSTABILIZE = 17 // 
mavlink20.PLANE_MODE_QHOVER = 18 // 
mavlink20.PLANE_MODE_QLOITER = 19 // 
mavlink20.PLANE_MODE_QLAND = 20 // 
mavlink20.PLANE_MODE_QRTL = 21 // 
mavlink20.PLANE_MODE_QAUTOTUNE = 22 // 
mavlink20.PLANE_MODE_QACRO = 23 // 
mavlink20.PLANE_MODE_THERMAL = 24 // 
mavlink20.PLANE_MODE_ENUM_END = 25 // 

// COPTER_MODE
mavlink20.COPTER_MODE_STABILIZE = 0 // 
mavlink20.COPTER_MODE_ACRO = 1 // 
mavlink20.COPTER_MODE_ALT_HOLD = 2 // 
mavlink20.COPTER_MODE_AUTO = 3 // 
mavlink20.COPTER_MODE_GUIDED = 4 // 
mavlink20.COPTER_MODE_LOITER = 5 // 
mavlink20.COPTER_MODE_RTL = 6 // 
mavlink20.COPTER_MODE_CIRCLE = 7 // 
mavlink20.COPTER_MODE_LAND = 9 // 
mavlink20.COPTER_MODE_DRIFT = 11 // 
mavlink20.COPTER_MODE_SPORT = 13 // 
mavlink20.COPTER_MODE_FLIP = 14 // 
mavlink20.COPTER_MODE_AUTOTUNE = 15 // 
mavlink20.COPTER_MODE_POSHOLD = 16 // 
mavlink20.COPTER_MODE_BRAKE = 17 // 
mavlink20.COPTER_MODE_THROW = 18 // 
mavlink20.COPTER_MODE_AVOID_ADSB = 19 // 
mavlink20.COPTER_MODE_GUIDED_NOGPS = 20 // 
mavlink20.COPTER_MODE_SMART_RTL = 21 // 
mavlink20.COPTER_MODE_FLOWHOLD = 22 // 
mavlink20.COPTER_MODE_FOLLOW = 23 // 
mavlink20.COPTER_MODE_ZIGZAG = 24 // 
mavlink20.COPTER_MODE_SYSTEMID = 25 // 
mavlink20.COPTER_MODE_AUTOROTATE = 26 // 
mavlink20.COPTER_MODE_AUTO_RTL = 27 // 
mavlink20.COPTER_MODE_ENUM_END = 28 // 

// SUB_MODE
mavlink20.SUB_MODE_STABILIZE = 0 // 
mavlink20.SUB_MODE_ACRO = 1 // 
mavlink20.SUB_MODE_ALT_HOLD = 2 // 
mavlink20.SUB_MODE_AUTO = 3 // 
mavlink20.SUB_MODE_GUIDED = 4 // 
mavlink20.SUB_MODE_CIRCLE = 7 // 
mavlink20.SUB_MODE_SURFACE = 9 // 
mavlink20.SUB_MODE_POSHOLD = 16 // 
mavlink20.SUB_MODE_MANUAL = 19 // 
mavlink20.SUB_MODE_ENUM_END = 20 // 

// ROVER_MODE
mavlink20.ROVER_MODE_MANUAL = 0 // 
mavlink20.ROVER_MODE_ACRO = 1 // 
mavlink20.ROVER_MODE_STEERING = 3 // 
mavlink20.ROVER_MODE_HOLD = 4 // 
mavlink20.ROVER_MODE_LOITER = 5 // 
mavlink20.ROVER_MODE_FOLLOW = 6 // 
mavlink20.ROVER_MODE_SIMPLE = 7 // 
mavlink20.ROVER_MODE_AUTO = 10 // 
mavlink20.ROVER_MODE_RTL = 11 // 
mavlink20.ROVER_MODE_SMART_RTL = 12 // 
mavlink20.ROVER_MODE_GUIDED = 15 // 
mavlink20.ROVER_MODE_INITIALIZING = 16 // 
mavlink20.ROVER_MODE_ENUM_END = 17 // 

// TRACKER_MODE
mavlink20.TRACKER_MODE_MANUAL = 0 // 
mavlink20.TRACKER_MODE_STOP = 1 // 
mavlink20.TRACKER_MODE_SCAN = 2 // 
mavlink20.TRACKER_MODE_SERVO_TEST = 3 // 
mavlink20.TRACKER_MODE_AUTO = 10 // 
mavlink20.TRACKER_MODE_INITIALIZING = 16 // 
mavlink20.TRACKER_MODE_ENUM_END = 17 // 

// OSD_PARAM_CONFIG_TYPE
mavlink20.OSD_PARAM_NONE = 0 // 
mavlink20.OSD_PARAM_SERIAL_PROTOCOL = 1 // 
mavlink20.OSD_PARAM_SERVO_FUNCTION = 2 // 
mavlink20.OSD_PARAM_AUX_FUNCTION = 3 // 
mavlink20.OSD_PARAM_FLIGHT_MODE = 4 // 
mavlink20.OSD_PARAM_FAILSAFE_ACTION = 5 // 
mavlink20.OSD_PARAM_FAILSAFE_ACTION_1 = 6 // 
mavlink20.OSD_PARAM_FAILSAFE_ACTION_2 = 7 // 
mavlink20.OSD_PARAM_NUM_TYPES = 8 // 
mavlink20.OSD_PARAM_CONFIG_TYPE_ENUM_END = 9 // 

// OSD_PARAM_CONFIG_ERROR
mavlink20.OSD_PARAM_SUCCESS = 0 // 
mavlink20.OSD_PARAM_INVALID_SCREEN = 1 // 
mavlink20.OSD_PARAM_INVALID_PARAMETER_INDEX = 2 // 
mavlink20.OSD_PARAM_INVALID_PARAMETER = 3 // 
mavlink20.OSD_PARAM_CONFIG_ERROR_ENUM_END = 4 // 

// FIRMWARE_VERSION_TYPE
mavlink20.FIRMWARE_VERSION_TYPE_DEV = 0 // development release
mavlink20.FIRMWARE_VERSION_TYPE_ALPHA = 64 // alpha release
mavlink20.FIRMWARE_VERSION_TYPE_BETA = 128 // beta release
mavlink20.FIRMWARE_VERSION_TYPE_RC = 192 // release candidate
mavlink20.FIRMWARE_VERSION_TYPE_OFFICIAL = 255 // official stable release
mavlink20.FIRMWARE_VERSION_TYPE_ENUM_END = 256 // 

// HL_FAILURE_FLAG
mavlink20.HL_FAILURE_FLAG_GPS = 1 // GPS failure.
mavlink20.HL_FAILURE_FLAG_DIFFERENTIAL_PRESSURE = 2 // Differential pressure sensor failure.
mavlink20.HL_FAILURE_FLAG_ABSOLUTE_PRESSURE = 4 // Absolute pressure sensor failure.
mavlink20.HL_FAILURE_FLAG_3D_ACCEL = 8 // Accelerometer sensor failure.
mavlink20.HL_FAILURE_FLAG_3D_GYRO = 16 // Gyroscope sensor failure.
mavlink20.HL_FAILURE_FLAG_3D_MAG = 32 // Magnetometer sensor failure.
mavlink20.HL_FAILURE_FLAG_TERRAIN = 64 // Terrain subsystem failure.
mavlink20.HL_FAILURE_FLAG_BATTERY = 128 // Battery failure/critical low battery.
mavlink20.HL_FAILURE_FLAG_RC_RECEIVER = 256 // RC receiver failure/no rc connection.
mavlink20.HL_FAILURE_FLAG_OFFBOARD_LINK = 512 // Offboard link failure.
mavlink20.HL_FAILURE_FLAG_ENGINE = 1024 // Engine failure.
mavlink20.HL_FAILURE_FLAG_GEOFENCE = 2048 // Geofence violation.
mavlink20.HL_FAILURE_FLAG_ESTIMATOR = 4096 // Estimator failure, for example measurement rejection or large
                        // variances.
mavlink20.HL_FAILURE_FLAG_MISSION = 8192 // Mission failure.
mavlink20.HL_FAILURE_FLAG_ENUM_END = 8193 // 

// MAV_GOTO
mavlink20.MAV_GOTO_DO_HOLD = 0 // Hold at the current position.
mavlink20.MAV_GOTO_DO_CONTINUE = 1 // Continue with the next item in mission execution.
mavlink20.MAV_GOTO_HOLD_AT_CURRENT_POSITION = 2 // Hold at the current position of the system
mavlink20.MAV_GOTO_HOLD_AT_SPECIFIED_POSITION = 3 // Hold at the position specified in the parameters of the DO_HOLD action
mavlink20.MAV_GOTO_ENUM_END = 4 // 

// MAV_MODE
mavlink20.MAV_MODE_PREFLIGHT = 0 // System is not ready to fly, booting, calibrating, etc. No flag is set.
mavlink20.MAV_MODE_MANUAL_DISARMED = 64 // System is allowed to be active, under manual (RC) control, no
                        // stabilization
mavlink20.MAV_MODE_TEST_DISARMED = 66 // UNDEFINED mode. This solely depends on the autopilot - use with
                        // caution, intended for developers only.
mavlink20.MAV_MODE_STABILIZE_DISARMED = 80 // System is allowed to be active, under assisted RC control.
mavlink20.MAV_MODE_GUIDED_DISARMED = 88 // System is allowed to be active, under autonomous control, manual
                        // setpoint
mavlink20.MAV_MODE_AUTO_DISARMED = 92 // System is allowed to be active, under autonomous control and
                        // navigation (the trajectory is decided
                        // onboard and not pre-programmed by
                        // waypoints)
mavlink20.MAV_MODE_MANUAL_ARMED = 192 // System is allowed to be active, under manual (RC) control, no
                        // stabilization
mavlink20.MAV_MODE_TEST_ARMED = 194 // UNDEFINED mode. This solely depends on the autopilot - use with
                        // caution, intended for developers only.
mavlink20.MAV_MODE_STABILIZE_ARMED = 208 // System is allowed to be active, under assisted RC control.
mavlink20.MAV_MODE_GUIDED_ARMED = 216 // System is allowed to be active, under autonomous control, manual
                        // setpoint
mavlink20.MAV_MODE_AUTO_ARMED = 220 // System is allowed to be active, under autonomous control and
                        // navigation (the trajectory is decided
                        // onboard and not pre-programmed by
                        // waypoints)
mavlink20.MAV_MODE_ENUM_END = 221 // 

// MAV_SYS_STATUS_SENSOR
mavlink20.MAV_SYS_STATUS_SENSOR_3D_GYRO = 1 // 0x01 3D gyro
mavlink20.MAV_SYS_STATUS_SENSOR_3D_ACCEL = 2 // 0x02 3D accelerometer
mavlink20.MAV_SYS_STATUS_SENSOR_3D_MAG = 4 // 0x04 3D magnetometer
mavlink20.MAV_SYS_STATUS_SENSOR_ABSOLUTE_PRESSURE = 8 // 0x08 absolute pressure
mavlink20.MAV_SYS_STATUS_SENSOR_DIFFERENTIAL_PRESSURE = 16 // 0x10 differential pressure
mavlink20.MAV_SYS_STATUS_SENSOR_GPS = 32 // 0x20 GPS
mavlink20.MAV_SYS_STATUS_SENSOR_OPTICAL_FLOW = 64 // 0x40 optical flow
mavlink20.MAV_SYS_STATUS_SENSOR_VISION_POSITION = 128 // 0x80 computer vision position
mavlink20.MAV_SYS_STATUS_SENSOR_LASER_POSITION = 256 // 0x100 laser based position
mavlink20.MAV_SYS_STATUS_SENSOR_EXTERNAL_GROUND_TRUTH = 512 // 0x200 external ground truth (Vicon or Leica)
mavlink20.MAV_SYS_STATUS_SENSOR_ANGULAR_RATE_CONTROL = 1024 // 0x400 3D angular rate control
mavlink20.MAV_SYS_STATUS_SENSOR_ATTITUDE_STABILIZATION = 2048 // 0x800 attitude stabilization
mavlink20.MAV_SYS_STATUS_SENSOR_YAW_POSITION = 4096 // 0x1000 yaw position
mavlink20.MAV_SYS_STATUS_SENSOR_Z_ALTITUDE_CONTROL = 8192 // 0x2000 z/altitude control
mavlink20.MAV_SYS_STATUS_SENSOR_XY_POSITION_CONTROL = 16384 // 0x4000 x/y position control
mavlink20.MAV_SYS_STATUS_SENSOR_MOTOR_OUTPUTS = 32768 // 0x8000 motor outputs / control
mavlink20.MAV_SYS_STATUS_SENSOR_RC_RECEIVER = 65536 // 0x10000 rc receiver
mavlink20.MAV_SYS_STATUS_SENSOR_3D_GYRO2 = 131072 // 0x20000 2nd 3D gyro
mavlink20.MAV_SYS_STATUS_SENSOR_3D_ACCEL2 = 262144 // 0x40000 2nd 3D accelerometer
mavlink20.MAV_SYS_STATUS_SENSOR_3D_MAG2 = 524288 // 0x80000 2nd 3D magnetometer
mavlink20.MAV_SYS_STATUS_GEOFENCE = 1048576 // 0x100000 geofence
mavlink20.MAV_SYS_STATUS_AHRS = 2097152 // 0x200000 AHRS subsystem health
mavlink20.MAV_SYS_STATUS_TERRAIN = 4194304 // 0x400000 Terrain subsystem health
mavlink20.MAV_SYS_STATUS_REVERSE_MOTOR = 8388608 // 0x800000 Motors are reversed
mavlink20.MAV_SYS_STATUS_LOGGING = 16777216 // 0x1000000 Logging
mavlink20.MAV_SYS_STATUS_SENSOR_BATTERY = 33554432 // 0x2000000 Battery
mavlink20.MAV_SYS_STATUS_SENSOR_PROXIMITY = 67108864 // 0x4000000 Proximity
mavlink20.MAV_SYS_STATUS_SENSOR_SATCOM = 134217728 // 0x8000000 Satellite Communication
mavlink20.MAV_SYS_STATUS_PREARM_CHECK = 268435456 // 0x10000000 pre-arm check status. Always healthy when armed
mavlink20.MAV_SYS_STATUS_OBSTACLE_AVOIDANCE = 536870912 // 0x20000000 Avoidance/collision prevention
mavlink20.MAV_SYS_STATUS_SENSOR_PROPULSION = 1073741824 // 0x40000000 propulsion (actuator, esc, motor or propellor)
mavlink20.MAV_SYS_STATUS_SENSOR_ENUM_END = 1073741825 // 

// MAV_FRAME
mavlink20.MAV_FRAME_GLOBAL = 0 // Global (WGS84) coordinate frame + MSL altitude. First value / x:
                        // latitude, second value / y: longitude,
                        // third value / z: positive altitude over
                        // mean sea level (MSL).
mavlink20.MAV_FRAME_LOCAL_NED = 1 // NED local tangent frame (x: North, y: East, z: Down) with origin fixed
                        // relative to earth.
mavlink20.MAV_FRAME_MISSION = 2 // NOT a coordinate frame, indicates a mission command.
mavlink20.MAV_FRAME_GLOBAL_RELATIVE_ALT = 3 // Global (WGS84) coordinate frame + altitude relative to the home
                        // position. First value / x: latitude, second
                        // value / y: longitude, third value / z:
                        // positive altitude with 0 being at the
                        // altitude of the home location.
mavlink20.MAV_FRAME_LOCAL_ENU = 4 // ENU local tangent frame (x: East, y: North, z: Up) with origin fixed
                        // relative to earth.
mavlink20.MAV_FRAME_GLOBAL_INT = 5 // Global (WGS84) coordinate frame (scaled) + MSL altitude. First value /
                        // x: latitude in degrees*1E7, second value /
                        // y: longitude in degrees*1E7, third value /
                        // z: positive altitude over mean sea level
                        // (MSL).
mavlink20.MAV_FRAME_GLOBAL_RELATIVE_ALT_INT = 6 // Global (WGS84) coordinate frame (scaled) + altitude relative to the
                        // home position. First value / x: latitude in
                        // degrees*1E7, second value / y: longitude in
                        // degrees*1E7, third value / z: positive
                        // altitude with 0 being at the altitude of
                        // the home location.
mavlink20.MAV_FRAME_LOCAL_OFFSET_NED = 7 // NED local tangent frame (x: North, y: East, z: Down) with origin that
                        // travels with the vehicle.
mavlink20.MAV_FRAME_BODY_NED = 8 // Same as MAV_FRAME_LOCAL_NED when used to represent position values.
                        // Same as MAV_FRAME_BODY_FRD when used with
                        // velocity/accelaration values.
mavlink20.MAV_FRAME_BODY_OFFSET_NED = 9 // This is the same as MAV_FRAME_BODY_FRD.
mavlink20.MAV_FRAME_GLOBAL_TERRAIN_ALT = 10 // Global (WGS84) coordinate frame with AGL altitude (at the waypoint
                        // coordinate). First value / x: latitude in
                        // degrees, second value / y: longitude in
                        // degrees, third value / z: positive altitude
                        // in meters with 0 being at ground level in
                        // terrain model.
mavlink20.MAV_FRAME_GLOBAL_TERRAIN_ALT_INT = 11 // Global (WGS84) coordinate frame (scaled) with AGL altitude (at the
                        // waypoint coordinate). First value / x:
                        // latitude in degrees*1E7, second value / y:
                        // longitude in degrees*1E7, third value / z:
                        // positive altitude in meters with 0 being at
                        // ground level in terrain model.
mavlink20.MAV_FRAME_BODY_FRD = 12 // FRD local tangent frame (x: Forward, y: Right, z: Down) with origin
                        // that travels with vehicle. The forward axis
                        // is aligned to the front of the vehicle in
                        // the horizontal plane.
mavlink20.MAV_FRAME_RESERVED_13 = 13 // MAV_FRAME_BODY_FLU - Body fixed frame of reference, Z-up (x: Forward,
                        // y: Left, z: Up).
mavlink20.MAV_FRAME_RESERVED_14 = 14 // MAV_FRAME_MOCAP_NED - Odometry local coordinate frame of data given by
                        // a motion capture system, Z-down (x: North,
                        // y: East, z: Down).
mavlink20.MAV_FRAME_RESERVED_15 = 15 // MAV_FRAME_MOCAP_ENU - Odometry local coordinate frame of data given by
                        // a motion capture system, Z-up (x: East, y:
                        // North, z: Up).
mavlink20.MAV_FRAME_RESERVED_16 = 16 // MAV_FRAME_VISION_NED - Odometry local coordinate frame of data given
                        // by a vision estimation system, Z-down (x:
                        // North, y: East, z: Down).
mavlink20.MAV_FRAME_RESERVED_17 = 17 // MAV_FRAME_VISION_ENU - Odometry local coordinate frame of data given
                        // by a vision estimation system, Z-up (x:
                        // East, y: North, z: Up).
mavlink20.MAV_FRAME_RESERVED_18 = 18 // MAV_FRAME_ESTIM_NED - Odometry local coordinate frame of data given by
                        // an estimator running onboard the vehicle,
                        // Z-down (x: North, y: East, z: Down).
mavlink20.MAV_FRAME_RESERVED_19 = 19 // MAV_FRAME_ESTIM_ENU - Odometry local coordinate frame of data given by
                        // an estimator running onboard the vehicle,
                        // Z-up (x: East, y: North, z: Up).
mavlink20.MAV_FRAME_LOCAL_FRD = 20 // FRD local tangent frame (x: Forward, y: Right, z: Down) with origin
                        // fixed relative to earth. The forward axis
                        // is aligned to the front of the vehicle in
                        // the horizontal plane.
mavlink20.MAV_FRAME_LOCAL_FLU = 21 // FLU local tangent frame (x: Forward, y: Left, z: Up) with origin fixed
                        // relative to earth. The forward axis is
                        // aligned to the front of the vehicle in the
                        // horizontal plane.
mavlink20.MAV_FRAME_ENUM_END = 22 // 

// MAVLINK_DATA_STREAM_TYPE
mavlink20.MAVLINK_DATA_STREAM_IMG_JPEG = 0 // 
mavlink20.MAVLINK_DATA_STREAM_IMG_BMP = 1 // 
mavlink20.MAVLINK_DATA_STREAM_IMG_RAW8U = 2 // 
mavlink20.MAVLINK_DATA_STREAM_IMG_RAW32U = 3 // 
mavlink20.MAVLINK_DATA_STREAM_IMG_PGM = 4 // 
mavlink20.MAVLINK_DATA_STREAM_IMG_PNG = 5 // 
mavlink20.MAVLINK_DATA_STREAM_TYPE_ENUM_END = 6 // 

// FENCE_ACTION
mavlink20.FENCE_ACTION_NONE = 0 // Disable fenced mode
mavlink20.FENCE_ACTION_GUIDED = 1 // Switched to guided mode to return point (fence point 0)
mavlink20.FENCE_ACTION_REPORT = 2 // Report fence breach, but don't take action
mavlink20.FENCE_ACTION_GUIDED_THR_PASS = 3 // Switched to guided mode to return point (fence point 0) with manual
                        // throttle control
mavlink20.FENCE_ACTION_RTL = 4 // Switch to RTL (return to launch) mode and head for the return point.
mavlink20.FENCE_ACTION_ENUM_END = 5 // 

// FENCE_BREACH
mavlink20.FENCE_BREACH_NONE = 0 // No last fence breach
mavlink20.FENCE_BREACH_MINALT = 1 // Breached minimum altitude
mavlink20.FENCE_BREACH_MAXALT = 2 // Breached maximum altitude
mavlink20.FENCE_BREACH_BOUNDARY = 3 // Breached fence boundary
mavlink20.FENCE_BREACH_ENUM_END = 4 // 

// FENCE_MITIGATE
mavlink20.FENCE_MITIGATE_UNKNOWN = 0 // Unknown
mavlink20.FENCE_MITIGATE_NONE = 1 // No actions being taken
mavlink20.FENCE_MITIGATE_VEL_LIMIT = 2 // Velocity limiting active to prevent breach
mavlink20.FENCE_MITIGATE_ENUM_END = 3 // 

// MAV_MOUNT_MODE
mavlink20.MAV_MOUNT_MODE_RETRACT = 0 // Load and keep safe position (Roll,Pitch,Yaw) from permant memory and
                        // stop stabilization
mavlink20.MAV_MOUNT_MODE_NEUTRAL = 1 // Load and keep neutral position (Roll,Pitch,Yaw) from permanent memory.
mavlink20.MAV_MOUNT_MODE_MAVLINK_TARGETING = 2 // Load neutral position and start MAVLink Roll,Pitch,Yaw control with
                        // stabilization
mavlink20.MAV_MOUNT_MODE_RC_TARGETING = 3 // Load neutral position and start RC Roll,Pitch,Yaw control with
                        // stabilization
mavlink20.MAV_MOUNT_MODE_GPS_POINT = 4 // Load neutral position and start to point to Lat,Lon,Alt
mavlink20.MAV_MOUNT_MODE_SYSID_TARGET = 5 // Gimbal tracks system with specified system ID
mavlink20.MAV_MOUNT_MODE_HOME_LOCATION = 6 // Gimbal tracks home location
mavlink20.MAV_MOUNT_MODE_ENUM_END = 7 // 

// GIMBAL_DEVICE_CAP_FLAGS
mavlink20.GIMBAL_DEVICE_CAP_FLAGS_HAS_RETRACT = 1 // Gimbal device supports a retracted position.
mavlink20.GIMBAL_DEVICE_CAP_FLAGS_HAS_NEUTRAL = 2 // Gimbal device supports a horizontal, forward looking position,
                        // stabilized.
mavlink20.GIMBAL_DEVICE_CAP_FLAGS_HAS_ROLL_AXIS = 4 // Gimbal device supports rotating around roll axis.
mavlink20.GIMBAL_DEVICE_CAP_FLAGS_HAS_ROLL_FOLLOW = 8 // Gimbal device supports to follow a roll angle relative to the vehicle.
mavlink20.GIMBAL_DEVICE_CAP_FLAGS_HAS_ROLL_LOCK = 16 // Gimbal device supports locking to a roll angle (generally that's the
                        // default with roll stabilized).
mavlink20.GIMBAL_DEVICE_CAP_FLAGS_HAS_PITCH_AXIS = 32 // Gimbal device supports rotating around pitch axis.
mavlink20.GIMBAL_DEVICE_CAP_FLAGS_HAS_PITCH_FOLLOW = 64 // Gimbal device supports to follow a pitch angle relative to the
                        // vehicle.
mavlink20.GIMBAL_DEVICE_CAP_FLAGS_HAS_PITCH_LOCK = 128 // Gimbal device supports locking to a pitch angle (generally that's the
                        // default with pitch stabilized).
mavlink20.GIMBAL_DEVICE_CAP_FLAGS_HAS_YAW_AXIS = 256 // Gimbal device supports rotating around yaw axis.
mavlink20.GIMBAL_DEVICE_CAP_FLAGS_HAS_YAW_FOLLOW = 512 // Gimbal device supports to follow a yaw angle relative to the vehicle
                        // (generally that's the default).
mavlink20.GIMBAL_DEVICE_CAP_FLAGS_HAS_YAW_LOCK = 1024 // Gimbal device supports locking to an absolute heading, i.e., yaw angle
                        // relative to North (earth frame, often this
                        // is an option available).
mavlink20.GIMBAL_DEVICE_CAP_FLAGS_SUPPORTS_INFINITE_YAW = 2048 // Gimbal device supports yawing/panning infinetely (e.g. using slip
                        // disk).
mavlink20.GIMBAL_DEVICE_CAP_FLAGS_SUPPORTS_YAW_IN_EARTH_FRAME = 4096 // Gimbal device supports yaw angles and angular velocities relative to
                        // North (earth frame). This usually requires
                        // support by an autopilot via
                        // AUTOPILOT_STATE_FOR_GIMBAL_DEVICE. Support
                        // can go on and off during runtime, which is
                        // reported by the flag GIMBAL_DEVICE_FLAGS_CA
                        // N_ACCEPT_YAW_IN_EARTH_FRAME.
mavlink20.GIMBAL_DEVICE_CAP_FLAGS_HAS_RC_INPUTS = 8192 // Gimbal device supports radio control inputs as an alternative input
                        // for controlling the gimbal orientation.
mavlink20.GIMBAL_DEVICE_CAP_FLAGS_ENUM_END = 8193 // 

// GIMBAL_MANAGER_CAP_FLAGS
mavlink20.GIMBAL_MANAGER_CAP_FLAGS_HAS_RETRACT = 1 // Based on GIMBAL_DEVICE_CAP_FLAGS_HAS_RETRACT.
mavlink20.GIMBAL_MANAGER_CAP_FLAGS_HAS_NEUTRAL = 2 // Based on GIMBAL_DEVICE_CAP_FLAGS_HAS_NEUTRAL.
mavlink20.GIMBAL_MANAGER_CAP_FLAGS_HAS_ROLL_AXIS = 4 // Based on GIMBAL_DEVICE_CAP_FLAGS_HAS_ROLL_AXIS.
mavlink20.GIMBAL_MANAGER_CAP_FLAGS_HAS_ROLL_FOLLOW = 8 // Based on GIMBAL_DEVICE_CAP_FLAGS_HAS_ROLL_FOLLOW.
mavlink20.GIMBAL_MANAGER_CAP_FLAGS_HAS_ROLL_LOCK = 16 // Based on GIMBAL_DEVICE_CAP_FLAGS_HAS_ROLL_LOCK.
mavlink20.GIMBAL_MANAGER_CAP_FLAGS_HAS_PITCH_AXIS = 32 // Based on GIMBAL_DEVICE_CAP_FLAGS_HAS_PITCH_AXIS.
mavlink20.GIMBAL_MANAGER_CAP_FLAGS_HAS_PITCH_FOLLOW = 64 // Based on GIMBAL_DEVICE_CAP_FLAGS_HAS_PITCH_FOLLOW.
mavlink20.GIMBAL_MANAGER_CAP_FLAGS_HAS_PITCH_LOCK = 128 // Based on GIMBAL_DEVICE_CAP_FLAGS_HAS_PITCH_LOCK.
mavlink20.GIMBAL_MANAGER_CAP_FLAGS_HAS_YAW_AXIS = 256 // Based on GIMBAL_DEVICE_CAP_FLAGS_HAS_YAW_AXIS.
mavlink20.GIMBAL_MANAGER_CAP_FLAGS_HAS_YAW_FOLLOW = 512 // Based on GIMBAL_DEVICE_CAP_FLAGS_HAS_YAW_FOLLOW.
mavlink20.GIMBAL_MANAGER_CAP_FLAGS_HAS_YAW_LOCK = 1024 // Based on GIMBAL_DEVICE_CAP_FLAGS_HAS_YAW_LOCK.
mavlink20.GIMBAL_MANAGER_CAP_FLAGS_SUPPORTS_INFINITE_YAW = 2048 // Based on GIMBAL_DEVICE_CAP_FLAGS_SUPPORTS_INFINITE_YAW.
mavlink20.GIMBAL_MANAGER_CAP_FLAGS_SUPPORTS_YAW_IN_EARTH_FRAME = 4096 // Based on GIMBAL_DEVICE_CAP_FLAGS_SUPPORTS_YAW_IN_EARTH_FRAME.
mavlink20.GIMBAL_MANAGER_CAP_FLAGS_HAS_RC_INPUTS = 8192 // Based on GIMBAL_DEVICE_CAP_FLAGS_HAS_RC_INPUTS.
mavlink20.GIMBAL_MANAGER_CAP_FLAGS_CAN_POINT_LOCATION_LOCAL = 65536 // Gimbal manager supports to point to a local position.
mavlink20.GIMBAL_MANAGER_CAP_FLAGS_CAN_POINT_LOCATION_GLOBAL = 131072 // Gimbal manager supports to point to a global latitude, longitude,
                        // altitude position.
mavlink20.GIMBAL_MANAGER_CAP_FLAGS_ENUM_END = 131073 // 

// GIMBAL_DEVICE_FLAGS
mavlink20.GIMBAL_DEVICE_FLAGS_RETRACT = 1 // Set to retracted safe position (no stabilization), takes presedence
                        // over all other flags.
mavlink20.GIMBAL_DEVICE_FLAGS_NEUTRAL = 2 // Set to neutral/default position, taking precedence over all other
                        // flags except RETRACT. Neutral is commonly
                        // forward-facing and horizontal
                        // (roll=pitch=yaw=0) but may be any
                        // orientation.
mavlink20.GIMBAL_DEVICE_FLAGS_ROLL_LOCK = 4 // Lock roll angle to absolute angle relative to horizon (not relative to
                        // vehicle). This is generally the default
                        // with a stabilizing gimbal.
mavlink20.GIMBAL_DEVICE_FLAGS_PITCH_LOCK = 8 // Lock pitch angle to absolute angle relative to horizon (not relative
                        // to vehicle). This is generally the default
                        // with a stabilizing gimbal.
mavlink20.GIMBAL_DEVICE_FLAGS_YAW_LOCK = 16 // Lock yaw angle to absolute angle relative to North (not relative to
                        // vehicle). If this flag is set, the yaw
                        // angle and z component of angular velocity
                        // are relative to North (earth frame, x-axis
                        // pointing North), else they are relative to
                        // the vehicle heading (vehicle frame, earth
                        // frame rotated so that the x-axis is
                        // pointing forward).
mavlink20.GIMBAL_DEVICE_FLAGS_YAW_IN_VEHICLE_FRAME = 32 // Yaw angle and z component of angular velocity are relative to the
                        // vehicle heading (vehicle frame, earth frame
                        // rotated such that the x-axis is pointing
                        // forward).
mavlink20.GIMBAL_DEVICE_FLAGS_YAW_IN_EARTH_FRAME = 64 // Yaw angle and z component of angular velocity are relative to North
                        // (earth frame, x-axis is pointing North).
mavlink20.GIMBAL_DEVICE_FLAGS_ACCEPTS_YAW_IN_EARTH_FRAME = 128 // Gimbal device can accept yaw angle inputs relative to North (earth
                        // frame). This flag is only for reporting
                        // (attempts to set this flag are ignored).
mavlink20.GIMBAL_DEVICE_FLAGS_RC_EXCLUSIVE = 256 // The gimbal orientation is set exclusively by the RC signals feed to
                        // the gimbal's radio control inputs. MAVLink
                        // messages for setting the gimbal orientation
                        // (GIMBAL_DEVICE_SET_ATTITUDE) are ignored.
mavlink20.GIMBAL_DEVICE_FLAGS_RC_MIXED = 512 // The gimbal orientation is determined by combining/mixing the RC
                        // signals feed to the gimbal's radio control
                        // inputs and the MAVLink messages for setting
                        // the gimbal orientation
                        // (GIMBAL_DEVICE_SET_ATTITUDE). How these two
                        // controls are combined or mixed is not
                        // defined by the protocol but is up to the
                        // implementation.
mavlink20.GIMBAL_DEVICE_FLAGS_ENUM_END = 513 // 

// GIMBAL_MANAGER_FLAGS
mavlink20.GIMBAL_MANAGER_FLAGS_RETRACT = 1 // Based on GIMBAL_DEVICE_FLAGS_RETRACT.
mavlink20.GIMBAL_MANAGER_FLAGS_NEUTRAL = 2 // Based on GIMBAL_DEVICE_FLAGS_NEUTRAL.
mavlink20.GIMBAL_MANAGER_FLAGS_ROLL_LOCK = 4 // Based on GIMBAL_DEVICE_FLAGS_ROLL_LOCK.
mavlink20.GIMBAL_MANAGER_FLAGS_PITCH_LOCK = 8 // Based on GIMBAL_DEVICE_FLAGS_PITCH_LOCK.
mavlink20.GIMBAL_MANAGER_FLAGS_YAW_LOCK = 16 // Based on GIMBAL_DEVICE_FLAGS_YAW_LOCK.
mavlink20.GIMBAL_MANAGER_FLAGS_YAW_IN_VEHICLE_FRAME = 32 // Based on GIMBAL_DEVICE_FLAGS_YAW_IN_VEHICLE_FRAME.
mavlink20.GIMBAL_MANAGER_FLAGS_YAW_IN_EARTH_FRAME = 64 // Based on GIMBAL_DEVICE_FLAGS_YAW_IN_EARTH_FRAME.
mavlink20.GIMBAL_MANAGER_FLAGS_ACCEPTS_YAW_IN_EARTH_FRAME = 128 // Based on GIMBAL_DEVICE_FLAGS_ACCEPTS_YAW_IN_EARTH_FRAME.
mavlink20.GIMBAL_MANAGER_FLAGS_RC_EXCLUSIVE = 256 // Based on GIMBAL_DEVICE_FLAGS_RC_EXCLUSIVE.
mavlink20.GIMBAL_MANAGER_FLAGS_RC_MIXED = 512 // Based on GIMBAL_DEVICE_FLAGS_RC_MIXED.
mavlink20.GIMBAL_MANAGER_FLAGS_ENUM_END = 513 // 

// GIMBAL_DEVICE_ERROR_FLAGS
mavlink20.GIMBAL_DEVICE_ERROR_FLAGS_AT_ROLL_LIMIT = 1 // Gimbal device is limited by hardware roll limit.
mavlink20.GIMBAL_DEVICE_ERROR_FLAGS_AT_PITCH_LIMIT = 2 // Gimbal device is limited by hardware pitch limit.
mavlink20.GIMBAL_DEVICE_ERROR_FLAGS_AT_YAW_LIMIT = 4 // Gimbal device is limited by hardware yaw limit.
mavlink20.GIMBAL_DEVICE_ERROR_FLAGS_ENCODER_ERROR = 8 // There is an error with the gimbal encoders.
mavlink20.GIMBAL_DEVICE_ERROR_FLAGS_POWER_ERROR = 16 // There is an error with the gimbal power source.
mavlink20.GIMBAL_DEVICE_ERROR_FLAGS_MOTOR_ERROR = 32 // There is an error with the gimbal motors.
mavlink20.GIMBAL_DEVICE_ERROR_FLAGS_SOFTWARE_ERROR = 64 // There is an error with the gimbal's software.
mavlink20.GIMBAL_DEVICE_ERROR_FLAGS_COMMS_ERROR = 128 // There is an error with the gimbal's communication.
mavlink20.GIMBAL_DEVICE_ERROR_FLAGS_CALIBRATION_RUNNING = 256 // Gimbal device is currently calibrating.
mavlink20.GIMBAL_DEVICE_ERROR_FLAGS_NO_MANAGER = 512 // Gimbal device is not assigned to a gimbal manager.
mavlink20.GIMBAL_DEVICE_ERROR_FLAGS_ENUM_END = 513 // 

// GRIPPER_ACTIONS
mavlink20.GRIPPER_ACTION_RELEASE = 0 // Gripper release cargo.
mavlink20.GRIPPER_ACTION_GRAB = 1 // Gripper grab onto cargo.
mavlink20.GRIPPER_ACTIONS_ENUM_END = 2 // 

// WINCH_ACTIONS
mavlink20.WINCH_RELAXED = 0 // Allow motor to freewheel.
mavlink20.WINCH_RELATIVE_LENGTH_CONTROL = 1 // Wind or unwind specified length of line, optionally using specified
                        // rate.
mavlink20.WINCH_RATE_CONTROL = 2 // Wind or unwind line at specified rate.
mavlink20.WINCH_LOCK = 3 // Perform the locking sequence to relieve motor while in the fully
                        // retracted position. Only action and
                        // instance command parameters are used,
                        // others are ignored.
mavlink20.WINCH_DELIVER = 4 // Sequence of drop, slow down, touch down, reel up, lock. Only action
                        // and instance command parameters are used,
                        // others are ignored.
mavlink20.WINCH_HOLD = 5 // Engage motor and hold current position. Only action and instance
                        // command parameters are used, others are
                        // ignored.
mavlink20.WINCH_RETRACT = 6 // Return the reel to the fully retracted position. Only action and
                        // instance command parameters are used,
                        // others are ignored.
mavlink20.WINCH_LOAD_LINE = 7 // Load the reel with line. The winch will calculate the total loaded
                        // length and stop when the tension exceeds a
                        // threshold. Only action and instance command
                        // parameters are used, others are ignored.
mavlink20.WINCH_ABANDON_LINE = 8 // Spool out the entire length of the line. Only action and instance
                        // command parameters are used, others are
                        // ignored.
mavlink20.WINCH_ACTIONS_ENUM_END = 9 // 

// UAVCAN_NODE_HEALTH
mavlink20.UAVCAN_NODE_HEALTH_OK = 0 // The node is functioning properly.
mavlink20.UAVCAN_NODE_HEALTH_WARNING = 1 // A critical parameter went out of range or the node has encountered a
                        // minor failure.
mavlink20.UAVCAN_NODE_HEALTH_ERROR = 2 // The node has encountered a major failure.
mavlink20.UAVCAN_NODE_HEALTH_CRITICAL = 3 // The node has suffered a fatal malfunction.
mavlink20.UAVCAN_NODE_HEALTH_ENUM_END = 4 // 

// UAVCAN_NODE_MODE
mavlink20.UAVCAN_NODE_MODE_OPERATIONAL = 0 // The node is performing its primary functions.
mavlink20.UAVCAN_NODE_MODE_INITIALIZATION = 1 // The node is initializing; this mode is entered immediately after
                        // startup.
mavlink20.UAVCAN_NODE_MODE_MAINTENANCE = 2 // The node is under maintenance.
mavlink20.UAVCAN_NODE_MODE_SOFTWARE_UPDATE = 3 // The node is in the process of updating its software.
mavlink20.UAVCAN_NODE_MODE_OFFLINE = 7 // The node is no longer available online.
mavlink20.UAVCAN_NODE_MODE_ENUM_END = 8 // 

// STORAGE_STATUS
mavlink20.STORAGE_STATUS_EMPTY = 0 // Storage is missing (no microSD card loaded for example.)
mavlink20.STORAGE_STATUS_UNFORMATTED = 1 // Storage present but unformatted.
mavlink20.STORAGE_STATUS_READY = 2 // Storage present and ready.
mavlink20.STORAGE_STATUS_NOT_SUPPORTED = 3 // Camera does not supply storage status information. Capacity
                        // information in STORAGE_INFORMATION fields
                        // will be ignored.
mavlink20.STORAGE_STATUS_ENUM_END = 4 // 

// STORAGE_TYPE
mavlink20.STORAGE_TYPE_UNKNOWN = 0 // Storage type is not known.
mavlink20.STORAGE_TYPE_USB_STICK = 1 // Storage type is USB device.
mavlink20.STORAGE_TYPE_SD = 2 // Storage type is SD card.
mavlink20.STORAGE_TYPE_MICROSD = 3 // Storage type is microSD card.
mavlink20.STORAGE_TYPE_CF = 4 // Storage type is CFast.
mavlink20.STORAGE_TYPE_CFE = 5 // Storage type is CFexpress.
mavlink20.STORAGE_TYPE_XQD = 6 // Storage type is XQD.
mavlink20.STORAGE_TYPE_HD = 7 // Storage type is HD mass storage type.
mavlink20.STORAGE_TYPE_OTHER = 254 // Storage type is other, not listed type.
mavlink20.STORAGE_TYPE_ENUM_END = 255 // 

// AUTOTUNE_AXIS
mavlink20.AUTOTUNE_AXIS_DEFAULT = 0 // Flight stack tunes axis according to its default settings.
mavlink20.AUTOTUNE_AXIS_ROLL = 1 // Autotune roll axis.
mavlink20.AUTOTUNE_AXIS_PITCH = 2 // Autotune pitch axis.
mavlink20.AUTOTUNE_AXIS_YAW = 4 // Autotune yaw axis.
mavlink20.AUTOTUNE_AXIS_ENUM_END = 5 // 

// MAV_DATA_STREAM
mavlink20.MAV_DATA_STREAM_ALL = 0 // Enable all data streams
mavlink20.MAV_DATA_STREAM_RAW_SENSORS = 1 // Enable IMU_RAW, GPS_RAW, GPS_STATUS packets.
mavlink20.MAV_DATA_STREAM_EXTENDED_STATUS = 2 // Enable GPS_STATUS, CONTROL_STATUS, AUX_STATUS
mavlink20.MAV_DATA_STREAM_RC_CHANNELS = 3 // Enable RC_CHANNELS_SCALED, RC_CHANNELS_RAW, SERVO_OUTPUT_RAW
mavlink20.MAV_DATA_STREAM_RAW_CONTROLLER = 4 // Enable ATTITUDE_CONTROLLER_OUTPUT, POSITION_CONTROLLER_OUTPUT,
                        // NAV_CONTROLLER_OUTPUT.
mavlink20.MAV_DATA_STREAM_POSITION = 6 // Enable LOCAL_POSITION, GLOBAL_POSITION/GLOBAL_POSITION_INT messages.
mavlink20.MAV_DATA_STREAM_EXTRA1 = 10 // Dependent on the autopilot
mavlink20.MAV_DATA_STREAM_EXTRA2 = 11 // Dependent on the autopilot
mavlink20.MAV_DATA_STREAM_EXTRA3 = 12 // Dependent on the autopilot
mavlink20.MAV_DATA_STREAM_ENUM_END = 13 // 

// MAV_ROI
mavlink20.MAV_ROI_NONE = 0 // No region of interest.
mavlink20.MAV_ROI_WPNEXT = 1 // Point toward next waypoint, with optional pitch/roll/yaw offset.
mavlink20.MAV_ROI_WPINDEX = 2 // Point toward given waypoint.
mavlink20.MAV_ROI_LOCATION = 3 // Point toward fixed location.
mavlink20.MAV_ROI_TARGET = 4 // Point toward of given id.
mavlink20.MAV_ROI_ENUM_END = 5 // 

// MAV_PARAM_TYPE
mavlink20.MAV_PARAM_TYPE_UINT8 = 1 // 8-bit unsigned integer
mavlink20.MAV_PARAM_TYPE_INT8 = 2 // 8-bit signed integer
mavlink20.MAV_PARAM_TYPE_UINT16 = 3 // 16-bit unsigned integer
mavlink20.MAV_PARAM_TYPE_INT16 = 4 // 16-bit signed integer
mavlink20.MAV_PARAM_TYPE_UINT32 = 5 // 32-bit unsigned integer
mavlink20.MAV_PARAM_TYPE_INT32 = 6 // 32-bit signed integer
mavlink20.MAV_PARAM_TYPE_UINT64 = 7 // 64-bit unsigned integer
mavlink20.MAV_PARAM_TYPE_INT64 = 8 // 64-bit signed integer
mavlink20.MAV_PARAM_TYPE_REAL32 = 9 // 32-bit floating-point
mavlink20.MAV_PARAM_TYPE_REAL64 = 10 // 64-bit floating-point
mavlink20.MAV_PARAM_TYPE_ENUM_END = 11 // 

// MAV_PARAM_EXT_TYPE
mavlink20.MAV_PARAM_EXT_TYPE_UINT8 = 1 // 8-bit unsigned integer
mavlink20.MAV_PARAM_EXT_TYPE_INT8 = 2 // 8-bit signed integer
mavlink20.MAV_PARAM_EXT_TYPE_UINT16 = 3 // 16-bit unsigned integer
mavlink20.MAV_PARAM_EXT_TYPE_INT16 = 4 // 16-bit signed integer
mavlink20.MAV_PARAM_EXT_TYPE_UINT32 = 5 // 32-bit unsigned integer
mavlink20.MAV_PARAM_EXT_TYPE_INT32 = 6 // 32-bit signed integer
mavlink20.MAV_PARAM_EXT_TYPE_UINT64 = 7 // 64-bit unsigned integer
mavlink20.MAV_PARAM_EXT_TYPE_INT64 = 8 // 64-bit signed integer
mavlink20.MAV_PARAM_EXT_TYPE_REAL32 = 9 // 32-bit floating-point
mavlink20.MAV_PARAM_EXT_TYPE_REAL64 = 10 // 64-bit floating-point
mavlink20.MAV_PARAM_EXT_TYPE_CUSTOM = 11 // Custom Type
mavlink20.MAV_PARAM_EXT_TYPE_ENUM_END = 12 // 

// MAV_RESULT
mavlink20.MAV_RESULT_ACCEPTED = 0 // Command is valid (is supported and has valid parameters), and was
                        // executed.
mavlink20.MAV_RESULT_TEMPORARILY_REJECTED = 1 // Command is valid, but cannot be executed at this time. This is used to
                        // indicate a problem that should be fixed
                        // just by waiting (e.g. a state machine is
                        // busy, can't arm because have not got GPS
                        // lock, etc.). Retrying later should work.
mavlink20.MAV_RESULT_DENIED = 2 // Command is invalid (is supported but has invalid parameters). Retrying
                        // same command and parameters will not work.
mavlink20.MAV_RESULT_UNSUPPORTED = 3 // Command is not supported (unknown).
mavlink20.MAV_RESULT_FAILED = 4 // Command is valid, but execution has failed. This is used to indicate
                        // any non-temporary or unexpected problem,
                        // i.e. any problem that must be fixed before
                        // the command can succeed/be retried. For
                        // example, attempting to write a file when
                        // out of memory, attempting to arm when
                        // sensors are not calibrated, etc.
mavlink20.MAV_RESULT_IN_PROGRESS = 5 // Command is valid and is being executed. This will be followed by
                        // further progress updates, i.e. the
                        // component may send further COMMAND_ACK
                        // messages with result MAV_RESULT_IN_PROGRESS
                        // (at a rate decided by the implementation),
                        // and must terminate by sending a COMMAND_ACK
                        // message with final result of the operation.
                        // The COMMAND_ACK.progress field can be used
                        // to indicate the progress of the operation.
                        // There is no need for the sender to retry
                        // the command, but if done during execution,
                        // the component will return
                        // MAV_RESULT_IN_PROGRESS with an updated
                        // progress.
mavlink20.MAV_RESULT_ENUM_END = 6 // 

// MAV_MISSION_RESULT
mavlink20.MAV_MISSION_ACCEPTED = 0 // mission accepted OK
mavlink20.MAV_MISSION_ERROR = 1 // Generic error / not accepting mission commands at all right now.
mavlink20.MAV_MISSION_UNSUPPORTED_FRAME = 2 // Coordinate frame is not supported.
mavlink20.MAV_MISSION_UNSUPPORTED = 3 // Command is not supported.
mavlink20.MAV_MISSION_NO_SPACE = 4 // Mission items exceed storage space.
mavlink20.MAV_MISSION_INVALID = 5 // One of the parameters has an invalid value.
mavlink20.MAV_MISSION_INVALID_PARAM1 = 6 // param1 has an invalid value.
mavlink20.MAV_MISSION_INVALID_PARAM2 = 7 // param2 has an invalid value.
mavlink20.MAV_MISSION_INVALID_PARAM3 = 8 // param3 has an invalid value.
mavlink20.MAV_MISSION_INVALID_PARAM4 = 9 // param4 has an invalid value.
mavlink20.MAV_MISSION_INVALID_PARAM5_X = 10 // x / param5 has an invalid value.
mavlink20.MAV_MISSION_INVALID_PARAM6_Y = 11 // y / param6 has an invalid value.
mavlink20.MAV_MISSION_INVALID_PARAM7 = 12 // z / param7 has an invalid value.
mavlink20.MAV_MISSION_INVALID_SEQUENCE = 13 // Mission item received out of sequence
mavlink20.MAV_MISSION_DENIED = 14 // Not accepting any mission commands from this communication partner.
mavlink20.MAV_MISSION_OPERATION_CANCELLED = 15 // Current mission operation cancelled (e.g. mission upload, mission
                        // download).
mavlink20.MAV_MISSION_RESULT_ENUM_END = 16 // 

// MAV_SEVERITY
mavlink20.MAV_SEVERITY_EMERGENCY = 0 // System is unusable. This is a "panic" condition.
mavlink20.MAV_SEVERITY_ALERT = 1 // Action should be taken immediately. Indicates error in non-critical
                        // systems.
mavlink20.MAV_SEVERITY_CRITICAL = 2 // Action must be taken immediately. Indicates failure in a primary
                        // system.
mavlink20.MAV_SEVERITY_ERROR = 3 // Indicates an error in secondary/redundant systems.
mavlink20.MAV_SEVERITY_WARNING = 4 // Indicates about a possible future error if this is not resolved within
                        // a given timeframe. Example would be a low
                        // battery warning.
mavlink20.MAV_SEVERITY_NOTICE = 5 // An unusual event has occurred, though not an error condition. This
                        // should be investigated for the root cause.
mavlink20.MAV_SEVERITY_INFO = 6 // Normal operational messages. Useful for logging. No action is required
                        // for these messages.
mavlink20.MAV_SEVERITY_DEBUG = 7 // Useful non-operational messages that can assist in debugging. These
                        // should not occur during normal operation.
mavlink20.MAV_SEVERITY_ENUM_END = 8 // 

// MAV_POWER_STATUS
mavlink20.MAV_POWER_STATUS_BRICK_VALID = 1 // main brick power supply valid
mavlink20.MAV_POWER_STATUS_SERVO_VALID = 2 // main servo power supply valid for FMU
mavlink20.MAV_POWER_STATUS_USB_CONNECTED = 4 // USB power is connected
mavlink20.MAV_POWER_STATUS_PERIPH_OVERCURRENT = 8 // peripheral supply is in over-current state
mavlink20.MAV_POWER_STATUS_PERIPH_HIPOWER_OVERCURRENT = 16 // hi-power peripheral supply is in over-current state
mavlink20.MAV_POWER_STATUS_CHANGED = 32 // Power status has changed since boot
mavlink20.MAV_POWER_STATUS_ENUM_END = 33 // 

// SERIAL_CONTROL_DEV
mavlink20.SERIAL_CONTROL_DEV_TELEM1 = 0 // First telemetry port
mavlink20.SERIAL_CONTROL_DEV_TELEM2 = 1 // Second telemetry port
mavlink20.SERIAL_CONTROL_DEV_GPS1 = 2 // First GPS port
mavlink20.SERIAL_CONTROL_DEV_GPS2 = 3 // Second GPS port
mavlink20.SERIAL_CONTROL_DEV_SHELL = 10 // system shell
mavlink20.SERIAL_CONTROL_SERIAL0 = 100 // SERIAL0
mavlink20.SERIAL_CONTROL_SERIAL1 = 101 // SERIAL1
mavlink20.SERIAL_CONTROL_SERIAL2 = 102 // SERIAL2
mavlink20.SERIAL_CONTROL_SERIAL3 = 103 // SERIAL3
mavlink20.SERIAL_CONTROL_SERIAL4 = 104 // SERIAL4
mavlink20.SERIAL_CONTROL_SERIAL5 = 105 // SERIAL5
mavlink20.SERIAL_CONTROL_SERIAL6 = 106 // SERIAL6
mavlink20.SERIAL_CONTROL_SERIAL7 = 107 // SERIAL7
mavlink20.SERIAL_CONTROL_SERIAL8 = 108 // SERIAL8
mavlink20.SERIAL_CONTROL_SERIAL9 = 109 // SERIAL9
mavlink20.SERIAL_CONTROL_DEV_ENUM_END = 110 // 

// SERIAL_CONTROL_FLAG
mavlink20.SERIAL_CONTROL_FLAG_REPLY = 1 // Set if this is a reply
mavlink20.SERIAL_CONTROL_FLAG_RESPOND = 2 // Set if the sender wants the receiver to send a response as another
                        // SERIAL_CONTROL message
mavlink20.SERIAL_CONTROL_FLAG_EXCLUSIVE = 4 // Set if access to the serial port should be removed from whatever
                        // driver is currently using it, giving
                        // exclusive access to the SERIAL_CONTROL
                        // protocol. The port can be handed back by
                        // sending a request without this flag set
mavlink20.SERIAL_CONTROL_FLAG_BLOCKING = 8 // Block on writes to the serial port
mavlink20.SERIAL_CONTROL_FLAG_MULTI = 16 // Send multiple replies until port is drained
mavlink20.SERIAL_CONTROL_FLAG_ENUM_END = 17 // 

// MAV_DISTANCE_SENSOR
mavlink20.MAV_DISTANCE_SENSOR_LASER = 0 // Laser rangefinder, e.g. LightWare SF02/F or PulsedLight units
mavlink20.MAV_DISTANCE_SENSOR_ULTRASOUND = 1 // Ultrasound rangefinder, e.g. MaxBotix units
mavlink20.MAV_DISTANCE_SENSOR_INFRARED = 2 // Infrared rangefinder, e.g. Sharp units
mavlink20.MAV_DISTANCE_SENSOR_RADAR = 3 // Radar type, e.g. uLanding units
mavlink20.MAV_DISTANCE_SENSOR_UNKNOWN = 4 // Broken or unknown type, e.g. analog units
mavlink20.MAV_DISTANCE_SENSOR_ENUM_END = 5 // 

// MAV_SENSOR_ORIENTATION
mavlink20.MAV_SENSOR_ROTATION_NONE = 0 // Roll: 0, Pitch: 0, Yaw: 0
mavlink20.MAV_SENSOR_ROTATION_YAW_45 = 1 // Roll: 0, Pitch: 0, Yaw: 45
mavlink20.MAV_SENSOR_ROTATION_YAW_90 = 2 // Roll: 0, Pitch: 0, Yaw: 90
mavlink20.MAV_SENSOR_ROTATION_YAW_135 = 3 // Roll: 0, Pitch: 0, Yaw: 135
mavlink20.MAV_SENSOR_ROTATION_YAW_180 = 4 // Roll: 0, Pitch: 0, Yaw: 180
mavlink20.MAV_SENSOR_ROTATION_YAW_225 = 5 // Roll: 0, Pitch: 0, Yaw: 225
mavlink20.MAV_SENSOR_ROTATION_YAW_270 = 6 // Roll: 0, Pitch: 0, Yaw: 270
mavlink20.MAV_SENSOR_ROTATION_YAW_315 = 7 // Roll: 0, Pitch: 0, Yaw: 315
mavlink20.MAV_SENSOR_ROTATION_ROLL_180 = 8 // Roll: 180, Pitch: 0, Yaw: 0
mavlink20.MAV_SENSOR_ROTATION_ROLL_180_YAW_45 = 9 // Roll: 180, Pitch: 0, Yaw: 45
mavlink20.MAV_SENSOR_ROTATION_ROLL_180_YAW_90 = 10 // Roll: 180, Pitch: 0, Yaw: 90
mavlink20.MAV_SENSOR_ROTATION_ROLL_180_YAW_135 = 11 // Roll: 180, Pitch: 0, Yaw: 135
mavlink20.MAV_SENSOR_ROTATION_PITCH_180 = 12 // Roll: 0, Pitch: 180, Yaw: 0
mavlink20.MAV_SENSOR_ROTATION_ROLL_180_YAW_225 = 13 // Roll: 180, Pitch: 0, Yaw: 225
mavlink20.MAV_SENSOR_ROTATION_ROLL_180_YAW_270 = 14 // Roll: 180, Pitch: 0, Yaw: 270
mavlink20.MAV_SENSOR_ROTATION_ROLL_180_YAW_315 = 15 // Roll: 180, Pitch: 0, Yaw: 315
mavlink20.MAV_SENSOR_ROTATION_ROLL_90 = 16 // Roll: 90, Pitch: 0, Yaw: 0
mavlink20.MAV_SENSOR_ROTATION_ROLL_90_YAW_45 = 17 // Roll: 90, Pitch: 0, Yaw: 45
mavlink20.MAV_SENSOR_ROTATION_ROLL_90_YAW_90 = 18 // Roll: 90, Pitch: 0, Yaw: 90
mavlink20.MAV_SENSOR_ROTATION_ROLL_90_YAW_135 = 19 // Roll: 90, Pitch: 0, Yaw: 135
mavlink20.MAV_SENSOR_ROTATION_ROLL_270 = 20 // Roll: 270, Pitch: 0, Yaw: 0
mavlink20.MAV_SENSOR_ROTATION_ROLL_270_YAW_45 = 21 // Roll: 270, Pitch: 0, Yaw: 45
mavlink20.MAV_SENSOR_ROTATION_ROLL_270_YAW_90 = 22 // Roll: 270, Pitch: 0, Yaw: 90
mavlink20.MAV_SENSOR_ROTATION_ROLL_270_YAW_135 = 23 // Roll: 270, Pitch: 0, Yaw: 135
mavlink20.MAV_SENSOR_ROTATION_PITCH_90 = 24 // Roll: 0, Pitch: 90, Yaw: 0
mavlink20.MAV_SENSOR_ROTATION_PITCH_270 = 25 // Roll: 0, Pitch: 270, Yaw: 0
mavlink20.MAV_SENSOR_ROTATION_PITCH_180_YAW_90 = 26 // Roll: 0, Pitch: 180, Yaw: 90
mavlink20.MAV_SENSOR_ROTATION_PITCH_180_YAW_270 = 27 // Roll: 0, Pitch: 180, Yaw: 270
mavlink20.MAV_SENSOR_ROTATION_ROLL_90_PITCH_90 = 28 // Roll: 90, Pitch: 90, Yaw: 0
mavlink20.MAV_SENSOR_ROTATION_ROLL_180_PITCH_90 = 29 // Roll: 180, Pitch: 90, Yaw: 0
mavlink20.MAV_SENSOR_ROTATION_ROLL_270_PITCH_90 = 30 // Roll: 270, Pitch: 90, Yaw: 0
mavlink20.MAV_SENSOR_ROTATION_ROLL_90_PITCH_180 = 31 // Roll: 90, Pitch: 180, Yaw: 0
mavlink20.MAV_SENSOR_ROTATION_ROLL_270_PITCH_180 = 32 // Roll: 270, Pitch: 180, Yaw: 0
mavlink20.MAV_SENSOR_ROTATION_ROLL_90_PITCH_270 = 33 // Roll: 90, Pitch: 270, Yaw: 0
mavlink20.MAV_SENSOR_ROTATION_ROLL_180_PITCH_270 = 34 // Roll: 180, Pitch: 270, Yaw: 0
mavlink20.MAV_SENSOR_ROTATION_ROLL_270_PITCH_270 = 35 // Roll: 270, Pitch: 270, Yaw: 0
mavlink20.MAV_SENSOR_ROTATION_ROLL_90_PITCH_180_YAW_90 = 36 // Roll: 90, Pitch: 180, Yaw: 90
mavlink20.MAV_SENSOR_ROTATION_ROLL_90_YAW_270 = 37 // Roll: 90, Pitch: 0, Yaw: 270
mavlink20.MAV_SENSOR_ROTATION_ROLL_90_PITCH_68_YAW_293 = 38 // Roll: 90, Pitch: 68, Yaw: 293
mavlink20.MAV_SENSOR_ROTATION_PITCH_315 = 39 // Pitch: 315
mavlink20.MAV_SENSOR_ROTATION_ROLL_90_PITCH_315 = 40 // Roll: 90, Pitch: 315
mavlink20.MAV_SENSOR_ROTATION_CUSTOM = 100 // Custom orientation
mavlink20.MAV_SENSOR_ORIENTATION_ENUM_END = 101 // 

// MAV_PROTOCOL_CAPABILITY
mavlink20.MAV_PROTOCOL_CAPABILITY_MISSION_FLOAT = 1 // Autopilot supports MISSION float message type.
mavlink20.MAV_PROTOCOL_CAPABILITY_PARAM_FLOAT = 2 // Autopilot supports the new param float message type.
mavlink20.MAV_PROTOCOL_CAPABILITY_MISSION_INT = 4 // Autopilot supports MISSION_ITEM_INT scaled integer message type.
mavlink20.MAV_PROTOCOL_CAPABILITY_COMMAND_INT = 8 // Autopilot supports COMMAND_INT scaled integer message type.
mavlink20.MAV_PROTOCOL_CAPABILITY_PARAM_UNION = 16 // Autopilot supports the new param union message type.
mavlink20.MAV_PROTOCOL_CAPABILITY_FTP = 32 // Autopilot supports the File Transfer Protocol v1:
                        // https://mavlink.io/en/services/ftp.html.
mavlink20.MAV_PROTOCOL_CAPABILITY_SET_ATTITUDE_TARGET = 64 // Autopilot supports commanding attitude offboard.
mavlink20.MAV_PROTOCOL_CAPABILITY_SET_POSITION_TARGET_LOCAL_NED = 128 // Autopilot supports commanding position and velocity targets in local
                        // NED frame.
mavlink20.MAV_PROTOCOL_CAPABILITY_SET_POSITION_TARGET_GLOBAL_INT = 256 // Autopilot supports commanding position and velocity targets in global
                        // scaled integers.
mavlink20.MAV_PROTOCOL_CAPABILITY_TERRAIN = 512 // Autopilot supports terrain protocol / data handling.
mavlink20.MAV_PROTOCOL_CAPABILITY_SET_ACTUATOR_TARGET = 1024 // Autopilot supports direct actuator control.
mavlink20.MAV_PROTOCOL_CAPABILITY_FLIGHT_TERMINATION = 2048 // Autopilot supports the MAV_CMD_DO_FLIGHTTERMINATION command (flight
                        // termination).
mavlink20.MAV_PROTOCOL_CAPABILITY_COMPASS_CALIBRATION = 4096 // Autopilot supports onboard compass calibration.
mavlink20.MAV_PROTOCOL_CAPABILITY_MAVLINK2 = 8192 // Autopilot supports MAVLink version 2.
mavlink20.MAV_PROTOCOL_CAPABILITY_MISSION_FENCE = 16384 // Autopilot supports mission fence protocol.
mavlink20.MAV_PROTOCOL_CAPABILITY_MISSION_RALLY = 32768 // Autopilot supports mission rally point protocol.
mavlink20.MAV_PROTOCOL_CAPABILITY_FLIGHT_INFORMATION = 65536 // Autopilot supports the flight information protocol.
mavlink20.MAV_PROTOCOL_CAPABILITY_ENUM_END = 65537 // 

// MAV_MISSION_TYPE
mavlink20.MAV_MISSION_TYPE_MISSION = 0 // Items are mission commands for main mission.
mavlink20.MAV_MISSION_TYPE_FENCE = 1 // Specifies GeoFence area(s). Items are MAV_CMD_NAV_FENCE_ GeoFence
                        // items.
mavlink20.MAV_MISSION_TYPE_RALLY = 2 // Specifies the rally points for the vehicle. Rally points are
                        // alternative RTL points. Items are
                        // MAV_CMD_NAV_RALLY_POINT rally point items.
mavlink20.MAV_MISSION_TYPE_ALL = 255 // Only used in MISSION_CLEAR_ALL to clear all mission types.
mavlink20.MAV_MISSION_TYPE_ENUM_END = 256 // 

// MAV_ESTIMATOR_TYPE
mavlink20.MAV_ESTIMATOR_TYPE_UNKNOWN = 0 // Unknown type of the estimator.
mavlink20.MAV_ESTIMATOR_TYPE_NAIVE = 1 // This is a naive estimator without any real covariance feedback.
mavlink20.MAV_ESTIMATOR_TYPE_VISION = 2 // Computer vision based estimate. Might be up to scale.
mavlink20.MAV_ESTIMATOR_TYPE_VIO = 3 // Visual-inertial estimate.
mavlink20.MAV_ESTIMATOR_TYPE_GPS = 4 // Plain GPS estimate.
mavlink20.MAV_ESTIMATOR_TYPE_GPS_INS = 5 // Estimator integrating GPS and inertial sensing.
mavlink20.MAV_ESTIMATOR_TYPE_MOCAP = 6 // Estimate from external motion capturing system.
mavlink20.MAV_ESTIMATOR_TYPE_LIDAR = 7 // Estimator based on lidar sensor input.
mavlink20.MAV_ESTIMATOR_TYPE_AUTOPILOT = 8 // Estimator on autopilot.
mavlink20.MAV_ESTIMATOR_TYPE_ENUM_END = 9 // 

// MAV_BATTERY_TYPE
mavlink20.MAV_BATTERY_TYPE_UNKNOWN = 0 // Not specified.
mavlink20.MAV_BATTERY_TYPE_LIPO = 1 // Lithium polymer battery
mavlink20.MAV_BATTERY_TYPE_LIFE = 2 // Lithium-iron-phosphate battery
mavlink20.MAV_BATTERY_TYPE_LION = 3 // Lithium-ION battery
mavlink20.MAV_BATTERY_TYPE_NIMH = 4 // Nickel metal hydride battery
mavlink20.MAV_BATTERY_TYPE_ENUM_END = 5 // 

// MAV_BATTERY_FUNCTION
mavlink20.MAV_BATTERY_FUNCTION_UNKNOWN = 0 // Battery function is unknown
mavlink20.MAV_BATTERY_FUNCTION_ALL = 1 // Battery supports all flight systems
mavlink20.MAV_BATTERY_FUNCTION_PROPULSION = 2 // Battery for the propulsion system
mavlink20.MAV_BATTERY_FUNCTION_AVIONICS = 3 // Avionics battery
mavlink20.MAV_BATTERY_TYPE_PAYLOAD = 4 // Payload battery
mavlink20.MAV_BATTERY_FUNCTION_ENUM_END = 5 // 

// MAV_BATTERY_CHARGE_STATE
mavlink20.MAV_BATTERY_CHARGE_STATE_UNDEFINED = 0 // Low battery state is not provided
mavlink20.MAV_BATTERY_CHARGE_STATE_OK = 1 // Battery is not in low state. Normal operation.
mavlink20.MAV_BATTERY_CHARGE_STATE_LOW = 2 // Battery state is low, warn and monitor close.
mavlink20.MAV_BATTERY_CHARGE_STATE_CRITICAL = 3 // Battery state is critical, return or abort immediately.
mavlink20.MAV_BATTERY_CHARGE_STATE_EMERGENCY = 4 // Battery state is too low for ordinary abort sequence. Perform fastest
                        // possible emergency stop to prevent damage.
mavlink20.MAV_BATTERY_CHARGE_STATE_FAILED = 5 // Battery failed, damage unavoidable. Possible causes (faults) are
                        // listed in MAV_BATTERY_FAULT.
mavlink20.MAV_BATTERY_CHARGE_STATE_UNHEALTHY = 6 // Battery is diagnosed to be defective or an error occurred, usage is
                        // discouraged / prohibited. Possible causes
                        // (faults) are listed in MAV_BATTERY_FAULT.
mavlink20.MAV_BATTERY_CHARGE_STATE_CHARGING = 7 // Battery is charging.
mavlink20.MAV_BATTERY_CHARGE_STATE_ENUM_END = 8 // 

// MAV_BATTERY_MODE
mavlink20.MAV_BATTERY_MODE_UNKNOWN = 0 // Battery mode not supported/unknown battery mode/normal operation.
mavlink20.MAV_BATTERY_MODE_AUTO_DISCHARGING = 1 // Battery is auto discharging (towards storage level).
mavlink20.MAV_BATTERY_MODE_HOT_SWAP = 2 // Battery in hot-swap mode (current limited to prevent spikes that might
                        // damage sensitive electrical circuits).
mavlink20.MAV_BATTERY_MODE_ENUM_END = 3 // 

// MAV_BATTERY_FAULT
mavlink20.MAV_BATTERY_FAULT_DEEP_DISCHARGE = 1 // Battery has deep discharged.
mavlink20.MAV_BATTERY_FAULT_SPIKES = 2 // Voltage spikes.
mavlink20.MAV_BATTERY_FAULT_CELL_FAIL = 4 // One or more cells have failed. Battery should also report
                        // MAV_BATTERY_CHARGE_STATE_FAILE (and should
                        // not be used).
mavlink20.MAV_BATTERY_FAULT_OVER_CURRENT = 8 // Over-current fault.
mavlink20.MAV_BATTERY_FAULT_OVER_TEMPERATURE = 16 // Over-temperature fault.
mavlink20.MAV_BATTERY_FAULT_UNDER_TEMPERATURE = 32 // Under-temperature fault.
mavlink20.MAV_BATTERY_FAULT_INCOMPATIBLE_VOLTAGE = 64 // Vehicle voltage is not compatible with this battery (batteries on same
                        // power rail should have similar voltage).
mavlink20.MAV_BATTERY_FAULT_INCOMPATIBLE_FIRMWARE = 128 // Battery firmware is not compatible with current autopilot firmware.
mavlink20.BATTERY_FAULT_INCOMPATIBLE_CELLS_CONFIGURATION = 256 // Battery is not compatible due to cell configuration (e.g. 5s1p when
                        // vehicle requires 6s).
mavlink20.MAV_BATTERY_FAULT_ENUM_END = 257 // 

// MAV_GENERATOR_STATUS_FLAG
mavlink20.MAV_GENERATOR_STATUS_FLAG_OFF = 1 // Generator is off.
mavlink20.MAV_GENERATOR_STATUS_FLAG_READY = 2 // Generator is ready to start generating power.
mavlink20.MAV_GENERATOR_STATUS_FLAG_GENERATING = 4 // Generator is generating power.
mavlink20.MAV_GENERATOR_STATUS_FLAG_CHARGING = 8 // Generator is charging the batteries (generating enough power to charge
                        // and provide the load).
mavlink20.MAV_GENERATOR_STATUS_FLAG_REDUCED_POWER = 16 // Generator is operating at a reduced maximum power.
mavlink20.MAV_GENERATOR_STATUS_FLAG_MAXPOWER = 32 // Generator is providing the maximum output.
mavlink20.MAV_GENERATOR_STATUS_FLAG_OVERTEMP_WARNING = 64 // Generator is near the maximum operating temperature, cooling is
                        // insufficient.
mavlink20.MAV_GENERATOR_STATUS_FLAG_OVERTEMP_FAULT = 128 // Generator hit the maximum operating temperature and shutdown.
mavlink20.MAV_GENERATOR_STATUS_FLAG_ELECTRONICS_OVERTEMP_WARNING = 256 // Power electronics are near the maximum operating temperature, cooling
                        // is insufficient.
mavlink20.MAV_GENERATOR_STATUS_FLAG_ELECTRONICS_OVERTEMP_FAULT = 512 // Power electronics hit the maximum operating temperature and shutdown.
mavlink20.MAV_GENERATOR_STATUS_FLAG_ELECTRONICS_FAULT = 1024 // Power electronics experienced a fault and shutdown.
mavlink20.MAV_GENERATOR_STATUS_FLAG_POWERSOURCE_FAULT = 2048 // The power source supplying the generator failed e.g. mechanical
                        // generator stopped, tether is no longer
                        // providing power, solar cell is in shade,
                        // hydrogen reaction no longer happening.
mavlink20.MAV_GENERATOR_STATUS_FLAG_COMMUNICATION_WARNING = 4096 // Generator controller having communication problems.
mavlink20.MAV_GENERATOR_STATUS_FLAG_COOLING_WARNING = 8192 // Power electronic or generator cooling system error.
mavlink20.MAV_GENERATOR_STATUS_FLAG_POWER_RAIL_FAULT = 16384 // Generator controller power rail experienced a fault.
mavlink20.MAV_GENERATOR_STATUS_FLAG_OVERCURRENT_FAULT = 32768 // Generator controller exceeded the overcurrent threshold and shutdown
                        // to prevent damage.
mavlink20.MAV_GENERATOR_STATUS_FLAG_BATTERY_OVERCHARGE_CURRENT_FAULT = 65536 // Generator controller detected a high current going into the batteries
                        // and shutdown to prevent battery damage.
mavlink20.MAV_GENERATOR_STATUS_FLAG_OVERVOLTAGE_FAULT = 131072 // Generator controller exceeded it's overvoltage threshold and shutdown
                        // to prevent it exceeding the voltage rating.
mavlink20.MAV_GENERATOR_STATUS_FLAG_BATTERY_UNDERVOLT_FAULT = 262144 // Batteries are under voltage (generator will not start).
mavlink20.MAV_GENERATOR_STATUS_FLAG_START_INHIBITED = 524288 // Generator start is inhibited by e.g. a safety switch.
mavlink20.MAV_GENERATOR_STATUS_FLAG_MAINTENANCE_REQUIRED = 1048576 // Generator requires maintenance.
mavlink20.MAV_GENERATOR_STATUS_FLAG_WARMING_UP = 2097152 // Generator is not ready to generate yet.
mavlink20.MAV_GENERATOR_STATUS_FLAG_IDLE = 4194304 // Generator is idle.
mavlink20.MAV_GENERATOR_STATUS_FLAG_ENUM_END = 4194305 // 

// MAV_VTOL_STATE
mavlink20.MAV_VTOL_STATE_UNDEFINED = 0 // MAV is not configured as VTOL
mavlink20.MAV_VTOL_STATE_TRANSITION_TO_FW = 1 // VTOL is in transition from multicopter to fixed-wing
mavlink20.MAV_VTOL_STATE_TRANSITION_TO_MC = 2 // VTOL is in transition from fixed-wing to multicopter
mavlink20.MAV_VTOL_STATE_MC = 3 // VTOL is in multicopter state
mavlink20.MAV_VTOL_STATE_FW = 4 // VTOL is in fixed-wing state
mavlink20.MAV_VTOL_STATE_ENUM_END = 5 // 

// MAV_LANDED_STATE
mavlink20.MAV_LANDED_STATE_UNDEFINED = 0 // MAV landed state is unknown
mavlink20.MAV_LANDED_STATE_ON_GROUND = 1 // MAV is landed (on ground)
mavlink20.MAV_LANDED_STATE_IN_AIR = 2 // MAV is in air
mavlink20.MAV_LANDED_STATE_TAKEOFF = 3 // MAV currently taking off
mavlink20.MAV_LANDED_STATE_LANDING = 4 // MAV currently landing
mavlink20.MAV_LANDED_STATE_ENUM_END = 5 // 

// ADSB_ALTITUDE_TYPE
mavlink20.ADSB_ALTITUDE_TYPE_PRESSURE_QNH = 0 // Altitude reported from a Baro source using QNH reference
mavlink20.ADSB_ALTITUDE_TYPE_GEOMETRIC = 1 // Altitude reported from a GNSS source
mavlink20.ADSB_ALTITUDE_TYPE_ENUM_END = 2 // 

// ADSB_EMITTER_TYPE
mavlink20.ADSB_EMITTER_TYPE_NO_INFO = 0 // 
mavlink20.ADSB_EMITTER_TYPE_LIGHT = 1 // 
mavlink20.ADSB_EMITTER_TYPE_SMALL = 2 // 
mavlink20.ADSB_EMITTER_TYPE_LARGE = 3 // 
mavlink20.ADSB_EMITTER_TYPE_HIGH_VORTEX_LARGE = 4 // 
mavlink20.ADSB_EMITTER_TYPE_HEAVY = 5 // 
mavlink20.ADSB_EMITTER_TYPE_HIGHLY_MANUV = 6 // 
mavlink20.ADSB_EMITTER_TYPE_ROTOCRAFT = 7 // 
mavlink20.ADSB_EMITTER_TYPE_UNASSIGNED = 8 // 
mavlink20.ADSB_EMITTER_TYPE_GLIDER = 9 // 
mavlink20.ADSB_EMITTER_TYPE_LIGHTER_AIR = 10 // 
mavlink20.ADSB_EMITTER_TYPE_PARACHUTE = 11 // 
mavlink20.ADSB_EMITTER_TYPE_ULTRA_LIGHT = 12 // 
mavlink20.ADSB_EMITTER_TYPE_UNASSIGNED2 = 13 // 
mavlink20.ADSB_EMITTER_TYPE_UAV = 14 // 
mavlink20.ADSB_EMITTER_TYPE_SPACE = 15 // 
mavlink20.ADSB_EMITTER_TYPE_UNASSGINED3 = 16 // 
mavlink20.ADSB_EMITTER_TYPE_EMERGENCY_SURFACE = 17 // 
mavlink20.ADSB_EMITTER_TYPE_SERVICE_SURFACE = 18 // 
mavlink20.ADSB_EMITTER_TYPE_POINT_OBSTACLE = 19 // 
mavlink20.ADSB_EMITTER_TYPE_ENUM_END = 20 // 

// ADSB_FLAGS
mavlink20.ADSB_FLAGS_VALID_COORDS = 1 // 
mavlink20.ADSB_FLAGS_VALID_ALTITUDE = 2 // 
mavlink20.ADSB_FLAGS_VALID_HEADING = 4 // 
mavlink20.ADSB_FLAGS_VALID_VELOCITY = 8 // 
mavlink20.ADSB_FLAGS_VALID_CALLSIGN = 16 // 
mavlink20.ADSB_FLAGS_VALID_SQUAWK = 32 // 
mavlink20.ADSB_FLAGS_SIMULATED = 64 // 
mavlink20.ADSB_FLAGS_VERTICAL_VELOCITY_VALID = 128 // 
mavlink20.ADSB_FLAGS_BARO_VALID = 256 // 
mavlink20.ADSB_FLAGS_SOURCE_UAT = 32768 // 
mavlink20.ADSB_FLAGS_ENUM_END = 32769 // 

// MAV_DO_REPOSITION_FLAGS
mavlink20.MAV_DO_REPOSITION_FLAGS_CHANGE_MODE = 1 // The aircraft should immediately transition into guided. This should
                        // not be set for follow me applications
mavlink20.MAV_DO_REPOSITION_FLAGS_ENUM_END = 2 // 

// SPEED_TYPE
mavlink20.SPEED_TYPE_AIRSPEED = 0 // Airspeed
mavlink20.SPEED_TYPE_GROUNDSPEED = 1 // Groundspeed
mavlink20.SPEED_TYPE_CLIMB_SPEED = 2 // Climb speed
mavlink20.SPEED_TYPE_DESCENT_SPEED = 3 // Descent speed
mavlink20.SPEED_TYPE_ENUM_END = 4 // 

// ESTIMATOR_STATUS_FLAGS
mavlink20.ESTIMATOR_ATTITUDE = 1 // True if the attitude estimate is good
mavlink20.ESTIMATOR_VELOCITY_HORIZ = 2 // True if the horizontal velocity estimate is good
mavlink20.ESTIMATOR_VELOCITY_VERT = 4 // True if the  vertical velocity estimate is good
mavlink20.ESTIMATOR_POS_HORIZ_REL = 8 // True if the horizontal position (relative) estimate is good
mavlink20.ESTIMATOR_POS_HORIZ_ABS = 16 // True if the horizontal position (absolute) estimate is good
mavlink20.ESTIMATOR_POS_VERT_ABS = 32 // True if the vertical position (absolute) estimate is good
mavlink20.ESTIMATOR_POS_VERT_AGL = 64 // True if the vertical position (above ground) estimate is good
mavlink20.ESTIMATOR_CONST_POS_MODE = 128 // True if the EKF is in a constant position mode and is not using
                        // external measurements (eg GPS or optical
                        // flow)
mavlink20.ESTIMATOR_PRED_POS_HORIZ_REL = 256 // True if the EKF has sufficient data to enter a mode that will provide
                        // a (relative) position estimate
mavlink20.ESTIMATOR_PRED_POS_HORIZ_ABS = 512 // True if the EKF has sufficient data to enter a mode that will provide
                        // a (absolute) position estimate
mavlink20.ESTIMATOR_GPS_GLITCH = 1024 // True if the EKF has detected a GPS glitch
mavlink20.ESTIMATOR_ACCEL_ERROR = 2048 // True if the EKF has detected bad accelerometer data
mavlink20.ESTIMATOR_STATUS_FLAGS_ENUM_END = 2049 // 

// MOTOR_TEST_ORDER
mavlink20.MOTOR_TEST_ORDER_DEFAULT = 0 // Default autopilot motor test method.
mavlink20.MOTOR_TEST_ORDER_SEQUENCE = 1 // Motor numbers are specified as their index in a predefined vehicle-
                        // specific sequence.
mavlink20.MOTOR_TEST_ORDER_BOARD = 2 // Motor numbers are specified as the output as labeled on the board.
mavlink20.MOTOR_TEST_ORDER_ENUM_END = 3 // 

// MOTOR_TEST_THROTTLE_TYPE
mavlink20.MOTOR_TEST_THROTTLE_PERCENT = 0 // Throttle as a percentage (0 ~ 100)
mavlink20.MOTOR_TEST_THROTTLE_PWM = 1 // Throttle as an absolute PWM value (normally in range of 1000~2000).
mavlink20.MOTOR_TEST_THROTTLE_PILOT = 2 // Throttle pass-through from pilot's transmitter.
mavlink20.MOTOR_TEST_COMPASS_CAL = 3 // Per-motor compass calibration test.
mavlink20.MOTOR_TEST_THROTTLE_TYPE_ENUM_END = 4 // 

// GPS_INPUT_IGNORE_FLAGS
mavlink20.GPS_INPUT_IGNORE_FLAG_ALT = 1 // ignore altitude field
mavlink20.GPS_INPUT_IGNORE_FLAG_HDOP = 2 // ignore hdop field
mavlink20.GPS_INPUT_IGNORE_FLAG_VDOP = 4 // ignore vdop field
mavlink20.GPS_INPUT_IGNORE_FLAG_VEL_HORIZ = 8 // ignore horizontal velocity field (vn and ve)
mavlink20.GPS_INPUT_IGNORE_FLAG_VEL_VERT = 16 // ignore vertical velocity field (vd)
mavlink20.GPS_INPUT_IGNORE_FLAG_SPEED_ACCURACY = 32 // ignore speed accuracy field
mavlink20.GPS_INPUT_IGNORE_FLAG_HORIZONTAL_ACCURACY = 64 // ignore horizontal accuracy field
mavlink20.GPS_INPUT_IGNORE_FLAG_VERTICAL_ACCURACY = 128 // ignore vertical accuracy field
mavlink20.GPS_INPUT_IGNORE_FLAGS_ENUM_END = 129 // 

// MAV_COLLISION_ACTION
mavlink20.MAV_COLLISION_ACTION_NONE = 0 // Ignore any potential collisions
mavlink20.MAV_COLLISION_ACTION_REPORT = 1 // Report potential collision
mavlink20.MAV_COLLISION_ACTION_ASCEND_OR_DESCEND = 2 // Ascend or Descend to avoid threat
mavlink20.MAV_COLLISION_ACTION_MOVE_HORIZONTALLY = 3 // Move horizontally to avoid threat
mavlink20.MAV_COLLISION_ACTION_MOVE_PERPENDICULAR = 4 // Aircraft to move perpendicular to the collision's velocity vector
mavlink20.MAV_COLLISION_ACTION_RTL = 5 // Aircraft to fly directly back to its launch point
mavlink20.MAV_COLLISION_ACTION_HOVER = 6 // Aircraft to stop in place
mavlink20.MAV_COLLISION_ACTION_ENUM_END = 7 // 

// MAV_COLLISION_THREAT_LEVEL
mavlink20.MAV_COLLISION_THREAT_LEVEL_NONE = 0 // Not a threat
mavlink20.MAV_COLLISION_THREAT_LEVEL_LOW = 1 // Craft is mildly concerned about this threat
mavlink20.MAV_COLLISION_THREAT_LEVEL_HIGH = 2 // Craft is panicking, and may take actions to avoid threat
mavlink20.MAV_COLLISION_THREAT_LEVEL_ENUM_END = 3 // 

// MAV_COLLISION_SRC
mavlink20.MAV_COLLISION_SRC_ADSB = 0 // ID field references ADSB_VEHICLE packets
mavlink20.MAV_COLLISION_SRC_MAVLINK_GPS_GLOBAL_INT = 1 // ID field references MAVLink SRC ID
mavlink20.MAV_COLLISION_SRC_ENUM_END = 2 // 

// GPS_FIX_TYPE
mavlink20.GPS_FIX_TYPE_NO_GPS = 0 // No GPS connected
mavlink20.GPS_FIX_TYPE_NO_FIX = 1 // No position information, GPS is connected
mavlink20.GPS_FIX_TYPE_2D_FIX = 2 // 2D position
mavlink20.GPS_FIX_TYPE_3D_FIX = 3 // 3D position
mavlink20.GPS_FIX_TYPE_DGPS = 4 // DGPS/SBAS aided 3D position
mavlink20.GPS_FIX_TYPE_RTK_FLOAT = 5 // RTK float, 3D position
mavlink20.GPS_FIX_TYPE_RTK_FIXED = 6 // RTK Fixed, 3D position
mavlink20.GPS_FIX_TYPE_STATIC = 7 // Static fixed, typically used for base stations
mavlink20.GPS_FIX_TYPE_PPP = 8 // PPP, 3D position.
mavlink20.GPS_FIX_TYPE_ENUM_END = 9 // 

// RTK_BASELINE_COORDINATE_SYSTEM
mavlink20.RTK_BASELINE_COORDINATE_SYSTEM_ECEF = 0 // Earth-centered, Earth-fixed
mavlink20.RTK_BASELINE_COORDINATE_SYSTEM_NED = 1 // RTK basestation centered, north, east, down
mavlink20.RTK_BASELINE_COORDINATE_SYSTEM_ENUM_END = 2 // 

// LANDING_TARGET_TYPE
mavlink20.LANDING_TARGET_TYPE_LIGHT_BEACON = 0 // Landing target signaled by light beacon (ex: IR-LOCK)
mavlink20.LANDING_TARGET_TYPE_RADIO_BEACON = 1 // Landing target signaled by radio beacon (ex: ILS, NDB)
mavlink20.LANDING_TARGET_TYPE_VISION_FIDUCIAL = 2 // Landing target represented by a fiducial marker (ex: ARTag)
mavlink20.LANDING_TARGET_TYPE_VISION_OTHER = 3 // Landing target represented by a pre-defined visual shape/feature (ex:
                        // X-marker, H-marker, square)
mavlink20.LANDING_TARGET_TYPE_ENUM_END = 4 // 

// VTOL_TRANSITION_HEADING
mavlink20.VTOL_TRANSITION_HEADING_VEHICLE_DEFAULT = 0 // Respect the heading configuration of the vehicle.
mavlink20.VTOL_TRANSITION_HEADING_NEXT_WAYPOINT = 1 // Use the heading pointing towards the next waypoint.
mavlink20.VTOL_TRANSITION_HEADING_TAKEOFF = 2 // Use the heading on takeoff (while sitting on the ground).
mavlink20.VTOL_TRANSITION_HEADING_SPECIFIED = 3 // Use the specified heading in parameter 4.
mavlink20.VTOL_TRANSITION_HEADING_ANY = 4 // Use the current heading when reaching takeoff altitude (potentially
                        // facing the wind when weather-vaning is
                        // active).
mavlink20.VTOL_TRANSITION_HEADING_ENUM_END = 5 // 

// CAMERA_CAP_FLAGS
mavlink20.CAMERA_CAP_FLAGS_CAPTURE_VIDEO = 1 // Camera is able to record video
mavlink20.CAMERA_CAP_FLAGS_CAPTURE_IMAGE = 2 // Camera is able to capture images
mavlink20.CAMERA_CAP_FLAGS_HAS_MODES = 4 // Camera has separate Video and Image/Photo modes
                        // (MAV_CMD_SET_CAMERA_MODE)
mavlink20.CAMERA_CAP_FLAGS_CAN_CAPTURE_IMAGE_IN_VIDEO_MODE = 8 // Camera can capture images while in video mode
mavlink20.CAMERA_CAP_FLAGS_CAN_CAPTURE_VIDEO_IN_IMAGE_MODE = 16 // Camera can capture videos while in Photo/Image mode
mavlink20.CAMERA_CAP_FLAGS_HAS_IMAGE_SURVEY_MODE = 32 // Camera has image survey mode (MAV_CMD_SET_CAMERA_MODE)
mavlink20.CAMERA_CAP_FLAGS_HAS_BASIC_ZOOM = 64 // Camera has basic zoom control (MAV_CMD_SET_CAMERA_ZOOM)
mavlink20.CAMERA_CAP_FLAGS_HAS_BASIC_FOCUS = 128 // Camera has basic focus control (MAV_CMD_SET_CAMERA_FOCUS)
mavlink20.CAMERA_CAP_FLAGS_HAS_VIDEO_STREAM = 256 // Camera has video streaming capabilities (request
                        // VIDEO_STREAM_INFORMATION with
                        // MAV_CMD_REQUEST_MESSAGE for video streaming
                        // info)
mavlink20.CAMERA_CAP_FLAGS_HAS_TRACKING_POINT = 512 // Camera supports tracking of a point on the camera view.
mavlink20.CAMERA_CAP_FLAGS_HAS_TRACKING_RECTANGLE = 1024 // Camera supports tracking of a selection rectangle on the camera view.
mavlink20.CAMERA_CAP_FLAGS_HAS_TRACKING_GEO_STATUS = 2048 // Camera supports tracking geo status (CAMERA_TRACKING_GEO_STATUS).
mavlink20.CAMERA_CAP_FLAGS_ENUM_END = 2049 // 

// VIDEO_STREAM_STATUS_FLAGS
mavlink20.VIDEO_STREAM_STATUS_FLAGS_RUNNING = 1 // Stream is active (running)
mavlink20.VIDEO_STREAM_STATUS_FLAGS_THERMAL = 2 // Stream is thermal imaging
mavlink20.VIDEO_STREAM_STATUS_FLAGS_ENUM_END = 3 // 

// VIDEO_STREAM_TYPE
mavlink20.VIDEO_STREAM_TYPE_RTSP = 0 // Stream is RTSP
mavlink20.VIDEO_STREAM_TYPE_RTPUDP = 1 // Stream is RTP UDP (URI gives the port number)
mavlink20.VIDEO_STREAM_TYPE_TCP_MPEG = 2 // Stream is MPEG on TCP
mavlink20.VIDEO_STREAM_TYPE_MPEG_TS_H264 = 3 // Stream is h.264 on MPEG TS (URI gives the port number)
mavlink20.VIDEO_STREAM_TYPE_ENUM_END = 4 // 

// CAMERA_TRACKING_STATUS_FLAGS
mavlink20.CAMERA_TRACKING_STATUS_FLAGS_IDLE = 0 // Camera is not tracking
mavlink20.CAMERA_TRACKING_STATUS_FLAGS_ACTIVE = 1 // Camera is tracking
mavlink20.CAMERA_TRACKING_STATUS_FLAGS_ERROR = 2 // Camera tracking in error state
mavlink20.CAMERA_TRACKING_STATUS_FLAGS_ENUM_END = 3 // 

// CAMERA_TRACKING_MODE
mavlink20.CAMERA_TRACKING_MODE_NONE = 0 // Not tracking
mavlink20.CAMERA_TRACKING_MODE_POINT = 1 // Target is a point
mavlink20.CAMERA_TRACKING_MODE_RECTANGLE = 2 // Target is a rectangle
mavlink20.CAMERA_TRACKING_MODE_ENUM_END = 3 // 

// CAMERA_TRACKING_TARGET_DATA
mavlink20.CAMERA_TRACKING_TARGET_DATA_NONE = 0 // No target data
mavlink20.CAMERA_TRACKING_TARGET_DATA_EMBEDDED = 1 // Target data embedded in image data (proprietary)
mavlink20.CAMERA_TRACKING_TARGET_DATA_RENDERED = 2 // Target data rendered in image
mavlink20.CAMERA_TRACKING_TARGET_DATA_IN_STATUS = 4 // Target data within status message (Point or Rectangle)
mavlink20.CAMERA_TRACKING_TARGET_DATA_ENUM_END = 5 // 

// CAMERA_ZOOM_TYPE
mavlink20.ZOOM_TYPE_STEP = 0 // Zoom one step increment (-1 for wide, 1 for tele)
mavlink20.ZOOM_TYPE_CONTINUOUS = 1 // Continuous zoom up/down until stopped (-1 for wide, 1 for tele, 0 to
                        // stop zooming)
mavlink20.ZOOM_TYPE_RANGE = 2 // Zoom value as proportion of full camera range (a percentage value
                        // between 0.0 and 100.0)
mavlink20.ZOOM_TYPE_FOCAL_LENGTH = 3 // Zoom value/variable focal length in millimetres. Note that there is no
                        // message to get the valid zoom range of the
                        // camera, so this can type can only be used
                        // for cameras where the zoom range is known
                        // (implying that this cannot reliably be used
                        // in a GCS for an arbitrary camera)
mavlink20.CAMERA_ZOOM_TYPE_ENUM_END = 4 // 

// SET_FOCUS_TYPE
mavlink20.FOCUS_TYPE_STEP = 0 // Focus one step increment (-1 for focusing in, 1 for focusing out
                        // towards infinity).
mavlink20.FOCUS_TYPE_CONTINUOUS = 1 // Continuous focus up/down until stopped (-1 for focusing in, 1 for
                        // focusing out towards infinity, 0 to stop
                        // focusing)
mavlink20.FOCUS_TYPE_RANGE = 2 // Focus value as proportion of full camera focus range (a value between
                        // 0.0 and 100.0)
mavlink20.FOCUS_TYPE_METERS = 3 // Focus value in metres. Note that there is no message to get the valid
                        // focus range of the camera, so this can type
                        // can only be used for cameras where the
                        // range is known (implying that this cannot
                        // reliably be used in a GCS for an arbitrary
                        // camera).
mavlink20.FOCUS_TYPE_AUTO = 4 // Focus automatically.
mavlink20.FOCUS_TYPE_AUTO_SINGLE = 5 // Single auto focus. Mainly used for still pictures. Usually abbreviated
                        // as AF-S.
mavlink20.FOCUS_TYPE_AUTO_CONTINUOUS = 6 // Continuous auto focus. Mainly used for dynamic scenes. Abbreviated as
                        // AF-C.
mavlink20.SET_FOCUS_TYPE_ENUM_END = 7 // 

// PARAM_ACK
mavlink20.PARAM_ACK_ACCEPTED = 0 // Parameter value ACCEPTED and SET
mavlink20.PARAM_ACK_VALUE_UNSUPPORTED = 1 // Parameter value UNKNOWN/UNSUPPORTED
mavlink20.PARAM_ACK_FAILED = 2 // Parameter failed to set
mavlink20.PARAM_ACK_IN_PROGRESS = 3 // Parameter value received but not yet set/accepted. A subsequent
                        // PARAM_ACK_TRANSACTION or PARAM_EXT_ACK with
                        // the final result will follow once operation
                        // is completed. This is returned immediately
                        // for parameters that take longer to set,
                        // indicating taht the the parameter was
                        // recieved and does not need to be resent.
mavlink20.PARAM_ACK_ENUM_END = 4 // 

// CAMERA_MODE
mavlink20.CAMERA_MODE_IMAGE = 0 // Camera is in image/photo capture mode.
mavlink20.CAMERA_MODE_VIDEO = 1 // Camera is in video capture mode.
mavlink20.CAMERA_MODE_IMAGE_SURVEY = 2 // Camera is in image survey capture mode. It allows for camera
                        // controller to do specific settings for
                        // surveys.
mavlink20.CAMERA_MODE_ENUM_END = 3 // 

// MAV_ARM_AUTH_DENIED_REASON
mavlink20.MAV_ARM_AUTH_DENIED_REASON_GENERIC = 0 // Not a specific reason
mavlink20.MAV_ARM_AUTH_DENIED_REASON_NONE = 1 // Authorizer will send the error as string to GCS
mavlink20.MAV_ARM_AUTH_DENIED_REASON_INVALID_WAYPOINT = 2 // At least one waypoint have a invalid value
mavlink20.MAV_ARM_AUTH_DENIED_REASON_TIMEOUT = 3 // Timeout in the authorizer process(in case it depends on network)
mavlink20.MAV_ARM_AUTH_DENIED_REASON_AIRSPACE_IN_USE = 4 // Airspace of the mission in use by another vehicle, second result
                        // parameter can have the waypoint id that
                        // caused it to be denied.
mavlink20.MAV_ARM_AUTH_DENIED_REASON_BAD_WEATHER = 5 // Weather is not good to fly
mavlink20.MAV_ARM_AUTH_DENIED_REASON_ENUM_END = 6 // 

// RC_TYPE
mavlink20.RC_TYPE_SPEKTRUM_DSM2 = 0 // Spektrum DSM2
mavlink20.RC_TYPE_SPEKTRUM_DSMX = 1 // Spektrum DSMX
mavlink20.RC_TYPE_ENUM_END = 2 // 

// ENGINE_CONTROL_OPTIONS
mavlink20.ENGINE_CONTROL_OPTIONS_ALLOW_START_WHILE_DISARMED = 1 // Allow starting the engine once while disarmed
mavlink20.ENGINE_CONTROL_OPTIONS_ENUM_END = 2 // 

// POSITION_TARGET_TYPEMASK
mavlink20.POSITION_TARGET_TYPEMASK_X_IGNORE = 1 // Ignore position x
mavlink20.POSITION_TARGET_TYPEMASK_Y_IGNORE = 2 // Ignore position y
mavlink20.POSITION_TARGET_TYPEMASK_Z_IGNORE = 4 // Ignore position z
mavlink20.POSITION_TARGET_TYPEMASK_VX_IGNORE = 8 // Ignore velocity x
mavlink20.POSITION_TARGET_TYPEMASK_VY_IGNORE = 16 // Ignore velocity y
mavlink20.POSITION_TARGET_TYPEMASK_VZ_IGNORE = 32 // Ignore velocity z
mavlink20.POSITION_TARGET_TYPEMASK_AX_IGNORE = 64 // Ignore acceleration x
mavlink20.POSITION_TARGET_TYPEMASK_AY_IGNORE = 128 // Ignore acceleration y
mavlink20.POSITION_TARGET_TYPEMASK_AZ_IGNORE = 256 // Ignore acceleration z
mavlink20.POSITION_TARGET_TYPEMASK_FORCE_SET = 512 // Use force instead of acceleration
mavlink20.POSITION_TARGET_TYPEMASK_YAW_IGNORE = 1024 // Ignore yaw
mavlink20.POSITION_TARGET_TYPEMASK_YAW_RATE_IGNORE = 2048 // Ignore yaw rate
mavlink20.POSITION_TARGET_TYPEMASK_ENUM_END = 2049 // 

// ATTITUDE_TARGET_TYPEMASK
mavlink20.ATTITUDE_TARGET_TYPEMASK_BODY_ROLL_RATE_IGNORE = 1 // Ignore body roll rate
mavlink20.ATTITUDE_TARGET_TYPEMASK_BODY_PITCH_RATE_IGNORE = 2 // Ignore body pitch rate
mavlink20.ATTITUDE_TARGET_TYPEMASK_BODY_YAW_RATE_IGNORE = 4 // Ignore body yaw rate
mavlink20.ATTITUDE_TARGET_TYPEMASK_THROTTLE_IGNORE = 64 // Ignore throttle
mavlink20.ATTITUDE_TARGET_TYPEMASK_ATTITUDE_IGNORE = 128 // Ignore attitude
mavlink20.ATTITUDE_TARGET_TYPEMASK_ENUM_END = 129 // 

// UTM_FLIGHT_STATE
mavlink20.UTM_FLIGHT_STATE_UNKNOWN = 1 // The flight state can't be determined.
mavlink20.UTM_FLIGHT_STATE_GROUND = 2 // UAS on ground.
mavlink20.UTM_FLIGHT_STATE_AIRBORNE = 3 // UAS airborne.
mavlink20.UTM_FLIGHT_STATE_EMERGENCY = 16 // UAS is in an emergency flight state.
mavlink20.UTM_FLIGHT_STATE_NOCTRL = 32 // UAS has no active controls.
mavlink20.UTM_FLIGHT_STATE_ENUM_END = 33 // 

// UTM_DATA_AVAIL_FLAGS
mavlink20.UTM_DATA_AVAIL_FLAGS_TIME_VALID = 1 // The field time contains valid data.
mavlink20.UTM_DATA_AVAIL_FLAGS_UAS_ID_AVAILABLE = 2 // The field uas_id contains valid data.
mavlink20.UTM_DATA_AVAIL_FLAGS_POSITION_AVAILABLE = 4 // The fields lat, lon and h_acc contain valid data.
mavlink20.UTM_DATA_AVAIL_FLAGS_ALTITUDE_AVAILABLE = 8 // The fields alt and v_acc contain valid data.
mavlink20.UTM_DATA_AVAIL_FLAGS_RELATIVE_ALTITUDE_AVAILABLE = 16 // The field relative_alt contains valid data.
mavlink20.UTM_DATA_AVAIL_FLAGS_HORIZONTAL_VELO_AVAILABLE = 32 // The fields vx and vy contain valid data.
mavlink20.UTM_DATA_AVAIL_FLAGS_VERTICAL_VELO_AVAILABLE = 64 // The field vz contains valid data.
mavlink20.UTM_DATA_AVAIL_FLAGS_NEXT_WAYPOINT_AVAILABLE = 128 // The fields next_lat, next_lon and next_alt contain valid data.
mavlink20.UTM_DATA_AVAIL_FLAGS_ENUM_END = 129 // 

// PRECISION_LAND_MODE
mavlink20.PRECISION_LAND_MODE_DISABLED = 0 // Normal (non-precision) landing.
mavlink20.PRECISION_LAND_MODE_OPPORTUNISTIC = 1 // Use precision landing if beacon detected when land command accepted,
                        // otherwise land normally.
mavlink20.PRECISION_LAND_MODE_REQUIRED = 2 // Use precision landing, searching for beacon if not found when land
                        // command accepted (land normally if beacon
                        // cannot be found).
mavlink20.PRECISION_LAND_MODE_ENUM_END = 3 // 

// PARACHUTE_ACTION
mavlink20.PARACHUTE_DISABLE = 0 // Disable auto-release of parachute (i.e. release triggered by crash
                        // detectors).
mavlink20.PARACHUTE_ENABLE = 1 // Enable auto-release of parachute.
mavlink20.PARACHUTE_RELEASE = 2 // Release parachute and kill motors.
mavlink20.PARACHUTE_ACTION_ENUM_END = 3 // 

// MAV_TUNNEL_PAYLOAD_TYPE
mavlink20.MAV_TUNNEL_PAYLOAD_TYPE_UNKNOWN = 0 // Encoding of payload unknown.
mavlink20.MAV_TUNNEL_PAYLOAD_TYPE_STORM32_RESERVED0 = 200 // Registered for STorM32 gimbal controller.
mavlink20.MAV_TUNNEL_PAYLOAD_TYPE_STORM32_RESERVED1 = 201 // Registered for STorM32 gimbal controller.
mavlink20.MAV_TUNNEL_PAYLOAD_TYPE_STORM32_RESERVED2 = 202 // Registered for STorM32 gimbal controller.
mavlink20.MAV_TUNNEL_PAYLOAD_TYPE_STORM32_RESERVED3 = 203 // Registered for STorM32 gimbal controller.
mavlink20.MAV_TUNNEL_PAYLOAD_TYPE_STORM32_RESERVED4 = 204 // Registered for STorM32 gimbal controller.
mavlink20.MAV_TUNNEL_PAYLOAD_TYPE_STORM32_RESERVED5 = 205 // Registered for STorM32 gimbal controller.
mavlink20.MAV_TUNNEL_PAYLOAD_TYPE_STORM32_RESERVED6 = 206 // Registered for STorM32 gimbal controller.
mavlink20.MAV_TUNNEL_PAYLOAD_TYPE_STORM32_RESERVED7 = 207 // Registered for STorM32 gimbal controller.
mavlink20.MAV_TUNNEL_PAYLOAD_TYPE_STORM32_RESERVED8 = 208 // Registered for STorM32 gimbal controller.
mavlink20.MAV_TUNNEL_PAYLOAD_TYPE_STORM32_RESERVED9 = 209 // Registered for STorM32 gimbal controller.
mavlink20.MAV_TUNNEL_PAYLOAD_TYPE_ENUM_END = 210 // 

// MAV_ODID_ID_TYPE
mavlink20.MAV_ODID_ID_TYPE_NONE = 0 // No type defined.
mavlink20.MAV_ODID_ID_TYPE_SERIAL_NUMBER = 1 // Manufacturer Serial Number (ANSI/CTA-2063 format).
mavlink20.MAV_ODID_ID_TYPE_CAA_REGISTRATION_ID = 2 // CAA (Civil Aviation Authority) registered ID. Format: [ICAO Country
                        // Code].[CAA Assigned ID].
mavlink20.MAV_ODID_ID_TYPE_UTM_ASSIGNED_UUID = 3 // UTM (Unmanned Traffic Management) assigned UUID (RFC4122).
mavlink20.MAV_ODID_ID_TYPE_SPECIFIC_SESSION_ID = 4 // A 20 byte ID for a specific flight/session. The exact ID type is
                        // indicated by the first byte of uas_id and
                        // these type values are managed by ICAO.
mavlink20.MAV_ODID_ID_TYPE_ENUM_END = 5 // 

// MAV_ODID_UA_TYPE
mavlink20.MAV_ODID_UA_TYPE_NONE = 0 // No UA (Unmanned Aircraft) type defined.
mavlink20.MAV_ODID_UA_TYPE_AEROPLANE = 1 // Aeroplane/Airplane. Fixed wing.
mavlink20.MAV_ODID_UA_TYPE_HELICOPTER_OR_MULTIROTOR = 2 // Helicopter or multirotor.
mavlink20.MAV_ODID_UA_TYPE_GYROPLANE = 3 // Gyroplane.
mavlink20.MAV_ODID_UA_TYPE_HYBRID_LIFT = 4 // VTOL (Vertical Take-Off and Landing). Fixed wing aircraft that can
                        // take off vertically.
mavlink20.MAV_ODID_UA_TYPE_ORNITHOPTER = 5 // Ornithopter.
mavlink20.MAV_ODID_UA_TYPE_GLIDER = 6 // Glider.
mavlink20.MAV_ODID_UA_TYPE_KITE = 7 // Kite.
mavlink20.MAV_ODID_UA_TYPE_FREE_BALLOON = 8 // Free Balloon.
mavlink20.MAV_ODID_UA_TYPE_CAPTIVE_BALLOON = 9 // Captive Balloon.
mavlink20.MAV_ODID_UA_TYPE_AIRSHIP = 10 // Airship. E.g. a blimp.
mavlink20.MAV_ODID_UA_TYPE_FREE_FALL_PARACHUTE = 11 // Free Fall/Parachute (unpowered).
mavlink20.MAV_ODID_UA_TYPE_ROCKET = 12 // Rocket.
mavlink20.MAV_ODID_UA_TYPE_TETHERED_POWERED_AIRCRAFT = 13 // Tethered powered aircraft.
mavlink20.MAV_ODID_UA_TYPE_GROUND_OBSTACLE = 14 // Ground Obstacle.
mavlink20.MAV_ODID_UA_TYPE_OTHER = 15 // Other type of aircraft not listed earlier.
mavlink20.MAV_ODID_UA_TYPE_ENUM_END = 16 // 

// MAV_ODID_STATUS
mavlink20.MAV_ODID_STATUS_UNDECLARED = 0 // The status of the (UA) Unmanned Aircraft is undefined.
mavlink20.MAV_ODID_STATUS_GROUND = 1 // The UA is on the ground.
mavlink20.MAV_ODID_STATUS_AIRBORNE = 2 // The UA is in the air.
mavlink20.MAV_ODID_STATUS_EMERGENCY = 3 // The UA is having an emergency.
mavlink20.MAV_ODID_STATUS_REMOTE_ID_SYSTEM_FAILURE = 4 // The remote ID system is failing or unreliable in some way.
mavlink20.MAV_ODID_STATUS_ENUM_END = 5 // 

// MAV_ODID_HEIGHT_REF
mavlink20.MAV_ODID_HEIGHT_REF_OVER_TAKEOFF = 0 // The height field is relative to the take-off location.
mavlink20.MAV_ODID_HEIGHT_REF_OVER_GROUND = 1 // The height field is relative to ground.
mavlink20.MAV_ODID_HEIGHT_REF_ENUM_END = 2 // 

// MAV_ODID_HOR_ACC
mavlink20.MAV_ODID_HOR_ACC_UNKNOWN = 0 // The horizontal accuracy is unknown.
mavlink20.MAV_ODID_HOR_ACC_10NM = 1 // The horizontal accuracy is smaller than 10 Nautical Miles. 18.52 km.
mavlink20.MAV_ODID_HOR_ACC_4NM = 2 // The horizontal accuracy is smaller than 4 Nautical Miles. 7.408 km.
mavlink20.MAV_ODID_HOR_ACC_2NM = 3 // The horizontal accuracy is smaller than 2 Nautical Miles. 3.704 km.
mavlink20.MAV_ODID_HOR_ACC_1NM = 4 // The horizontal accuracy is smaller than 1 Nautical Miles. 1.852 km.
mavlink20.MAV_ODID_HOR_ACC_0_5NM = 5 // The horizontal accuracy is smaller than 0.5 Nautical Miles. 926 m.
mavlink20.MAV_ODID_HOR_ACC_0_3NM = 6 // The horizontal accuracy is smaller than 0.3 Nautical Miles. 555.6 m.
mavlink20.MAV_ODID_HOR_ACC_0_1NM = 7 // The horizontal accuracy is smaller than 0.1 Nautical Miles. 185.2 m.
mavlink20.MAV_ODID_HOR_ACC_0_05NM = 8 // The horizontal accuracy is smaller than 0.05 Nautical Miles. 92.6 m.
mavlink20.MAV_ODID_HOR_ACC_30_METER = 9 // The horizontal accuracy is smaller than 30 meter.
mavlink20.MAV_ODID_HOR_ACC_10_METER = 10 // The horizontal accuracy is smaller than 10 meter.
mavlink20.MAV_ODID_HOR_ACC_3_METER = 11 // The horizontal accuracy is smaller than 3 meter.
mavlink20.MAV_ODID_HOR_ACC_1_METER = 12 // The horizontal accuracy is smaller than 1 meter.
mavlink20.MAV_ODID_HOR_ACC_ENUM_END = 13 // 

// MAV_ODID_VER_ACC
mavlink20.MAV_ODID_VER_ACC_UNKNOWN = 0 // The vertical accuracy is unknown.
mavlink20.MAV_ODID_VER_ACC_150_METER = 1 // The vertical accuracy is smaller than 150 meter.
mavlink20.MAV_ODID_VER_ACC_45_METER = 2 // The vertical accuracy is smaller than 45 meter.
mavlink20.MAV_ODID_VER_ACC_25_METER = 3 // The vertical accuracy is smaller than 25 meter.
mavlink20.MAV_ODID_VER_ACC_10_METER = 4 // The vertical accuracy is smaller than 10 meter.
mavlink20.MAV_ODID_VER_ACC_3_METER = 5 // The vertical accuracy is smaller than 3 meter.
mavlink20.MAV_ODID_VER_ACC_1_METER = 6 // The vertical accuracy is smaller than 1 meter.
mavlink20.MAV_ODID_VER_ACC_ENUM_END = 7 // 

// MAV_ODID_SPEED_ACC
mavlink20.MAV_ODID_SPEED_ACC_UNKNOWN = 0 // The speed accuracy is unknown.
mavlink20.MAV_ODID_SPEED_ACC_10_METERS_PER_SECOND = 1 // The speed accuracy is smaller than 10 meters per second.
mavlink20.MAV_ODID_SPEED_ACC_3_METERS_PER_SECOND = 2 // The speed accuracy is smaller than 3 meters per second.
mavlink20.MAV_ODID_SPEED_ACC_1_METERS_PER_SECOND = 3 // The speed accuracy is smaller than 1 meters per second.
mavlink20.MAV_ODID_SPEED_ACC_0_3_METERS_PER_SECOND = 4 // The speed accuracy is smaller than 0.3 meters per second.
mavlink20.MAV_ODID_SPEED_ACC_ENUM_END = 5 // 

// MAV_ODID_TIME_ACC
mavlink20.MAV_ODID_TIME_ACC_UNKNOWN = 0 // The timestamp accuracy is unknown.
mavlink20.MAV_ODID_TIME_ACC_0_1_SECOND = 1 // The timestamp accuracy is smaller than or equal to 0.1 second.
mavlink20.MAV_ODID_TIME_ACC_0_2_SECOND = 2 // The timestamp accuracy is smaller than or equal to 0.2 second.
mavlink20.MAV_ODID_TIME_ACC_0_3_SECOND = 3 // The timestamp accuracy is smaller than or equal to 0.3 second.
mavlink20.MAV_ODID_TIME_ACC_0_4_SECOND = 4 // The timestamp accuracy is smaller than or equal to 0.4 second.
mavlink20.MAV_ODID_TIME_ACC_0_5_SECOND = 5 // The timestamp accuracy is smaller than or equal to 0.5 second.
mavlink20.MAV_ODID_TIME_ACC_0_6_SECOND = 6 // The timestamp accuracy is smaller than or equal to 0.6 second.
mavlink20.MAV_ODID_TIME_ACC_0_7_SECOND = 7 // The timestamp accuracy is smaller than or equal to 0.7 second.
mavlink20.MAV_ODID_TIME_ACC_0_8_SECOND = 8 // The timestamp accuracy is smaller than or equal to 0.8 second.
mavlink20.MAV_ODID_TIME_ACC_0_9_SECOND = 9 // The timestamp accuracy is smaller than or equal to 0.9 second.
mavlink20.MAV_ODID_TIME_ACC_1_0_SECOND = 10 // The timestamp accuracy is smaller than or equal to 1.0 second.
mavlink20.MAV_ODID_TIME_ACC_1_1_SECOND = 11 // The timestamp accuracy is smaller than or equal to 1.1 second.
mavlink20.MAV_ODID_TIME_ACC_1_2_SECOND = 12 // The timestamp accuracy is smaller than or equal to 1.2 second.
mavlink20.MAV_ODID_TIME_ACC_1_3_SECOND = 13 // The timestamp accuracy is smaller than or equal to 1.3 second.
mavlink20.MAV_ODID_TIME_ACC_1_4_SECOND = 14 // The timestamp accuracy is smaller than or equal to 1.4 second.
mavlink20.MAV_ODID_TIME_ACC_1_5_SECOND = 15 // The timestamp accuracy is smaller than or equal to 1.5 second.
mavlink20.MAV_ODID_TIME_ACC_ENUM_END = 16 // 

// MAV_ODID_AUTH_TYPE
mavlink20.MAV_ODID_AUTH_TYPE_NONE = 0 // No authentication type is specified.
mavlink20.MAV_ODID_AUTH_TYPE_UAS_ID_SIGNATURE = 1 // Signature for the UAS (Unmanned Aircraft System) ID.
mavlink20.MAV_ODID_AUTH_TYPE_OPERATOR_ID_SIGNATURE = 2 // Signature for the Operator ID.
mavlink20.MAV_ODID_AUTH_TYPE_MESSAGE_SET_SIGNATURE = 3 // Signature for the entire message set.
mavlink20.MAV_ODID_AUTH_TYPE_NETWORK_REMOTE_ID = 4 // Authentication is provided by Network Remote ID.
mavlink20.MAV_ODID_AUTH_TYPE_SPECIFIC_AUTHENTICATION = 5 // The exact authentication type is indicated by the first byte of
                        // authentication_data and these type values
                        // are managed by ICAO.
mavlink20.MAV_ODID_AUTH_TYPE_ENUM_END = 6 // 

// MAV_ODID_DESC_TYPE
mavlink20.MAV_ODID_DESC_TYPE_TEXT = 0 // Free-form text description of the purpose of the flight.
mavlink20.MAV_ODID_DESC_TYPE_EMERGENCY = 1 // Optional additional clarification when status ==
                        // MAV_ODID_STATUS_EMERGENCY.
mavlink20.MAV_ODID_DESC_TYPE_EXTENDED_STATUS = 2 // Optional additional clarification when status !=
                        // MAV_ODID_STATUS_EMERGENCY.
mavlink20.MAV_ODID_DESC_TYPE_ENUM_END = 3 // 

// MAV_ODID_OPERATOR_LOCATION_TYPE
mavlink20.MAV_ODID_OPERATOR_LOCATION_TYPE_TAKEOFF = 0 // The location of the operator is the same as the take-off location.
mavlink20.MAV_ODID_OPERATOR_LOCATION_TYPE_LIVE_GNSS = 1 // The location of the operator is based on live GNSS data.
mavlink20.MAV_ODID_OPERATOR_LOCATION_TYPE_FIXED = 2 // The location of the operator is a fixed location.
mavlink20.MAV_ODID_OPERATOR_LOCATION_TYPE_ENUM_END = 3 // 

// MAV_ODID_CLASSIFICATION_TYPE
mavlink20.MAV_ODID_CLASSIFICATION_TYPE_UNDECLARED = 0 // The classification type for the UA is undeclared.
mavlink20.MAV_ODID_CLASSIFICATION_TYPE_EU = 1 // The classification type for the UA follows EU (European Union)
                        // specifications.
mavlink20.MAV_ODID_CLASSIFICATION_TYPE_ENUM_END = 2 // 

// MAV_ODID_CATEGORY_EU
mavlink20.MAV_ODID_CATEGORY_EU_UNDECLARED = 0 // The category for the UA, according to the EU specification, is
                        // undeclared.
mavlink20.MAV_ODID_CATEGORY_EU_OPEN = 1 // The category for the UA, according to the EU specification, is the
                        // Open category.
mavlink20.MAV_ODID_CATEGORY_EU_SPECIFIC = 2 // The category for the UA, according to the EU specification, is the
                        // Specific category.
mavlink20.MAV_ODID_CATEGORY_EU_CERTIFIED = 3 // The category for the UA, according to the EU specification, is the
                        // Certified category.
mavlink20.MAV_ODID_CATEGORY_EU_ENUM_END = 4 // 

// MAV_ODID_CLASS_EU
mavlink20.MAV_ODID_CLASS_EU_UNDECLARED = 0 // The class for the UA, according to the EU specification, is
                        // undeclared.
mavlink20.MAV_ODID_CLASS_EU_CLASS_0 = 1 // The class for the UA, according to the EU specification, is Class 0.
mavlink20.MAV_ODID_CLASS_EU_CLASS_1 = 2 // The class for the UA, according to the EU specification, is Class 1.
mavlink20.MAV_ODID_CLASS_EU_CLASS_2 = 3 // The class for the UA, according to the EU specification, is Class 2.
mavlink20.MAV_ODID_CLASS_EU_CLASS_3 = 4 // The class for the UA, according to the EU specification, is Class 3.
mavlink20.MAV_ODID_CLASS_EU_CLASS_4 = 5 // The class for the UA, according to the EU specification, is Class 4.
mavlink20.MAV_ODID_CLASS_EU_CLASS_5 = 6 // The class for the UA, according to the EU specification, is Class 5.
mavlink20.MAV_ODID_CLASS_EU_CLASS_6 = 7 // The class for the UA, according to the EU specification, is Class 6.
mavlink20.MAV_ODID_CLASS_EU_ENUM_END = 8 // 

// MAV_ODID_OPERATOR_ID_TYPE
mavlink20.MAV_ODID_OPERATOR_ID_TYPE_CAA = 0 // CAA (Civil Aviation Authority) registered operator ID.
mavlink20.MAV_ODID_OPERATOR_ID_TYPE_ENUM_END = 1 // 

// MAV_ODID_ARM_STATUS
mavlink20.MAV_ODID_ARM_STATUS_GOOD_TO_ARM = 0 // Passing arming checks.
mavlink20.MAV_ODID_ARM_STATUS_PRE_ARM_FAIL_GENERIC = 1 // Generic arming failure, see error string for details.
mavlink20.MAV_ODID_ARM_STATUS_ENUM_END = 2 // 

// AIS_TYPE
mavlink20.AIS_TYPE_UNKNOWN = 0 // Not available (default).
mavlink20.AIS_TYPE_RESERVED_1 = 1 // 
mavlink20.AIS_TYPE_RESERVED_2 = 2 // 
mavlink20.AIS_TYPE_RESERVED_3 = 3 // 
mavlink20.AIS_TYPE_RESERVED_4 = 4 // 
mavlink20.AIS_TYPE_RESERVED_5 = 5 // 
mavlink20.AIS_TYPE_RESERVED_6 = 6 // 
mavlink20.AIS_TYPE_RESERVED_7 = 7 // 
mavlink20.AIS_TYPE_RESERVED_8 = 8 // 
mavlink20.AIS_TYPE_RESERVED_9 = 9 // 
mavlink20.AIS_TYPE_RESERVED_10 = 10 // 
mavlink20.AIS_TYPE_RESERVED_11 = 11 // 
mavlink20.AIS_TYPE_RESERVED_12 = 12 // 
mavlink20.AIS_TYPE_RESERVED_13 = 13 // 
mavlink20.AIS_TYPE_RESERVED_14 = 14 // 
mavlink20.AIS_TYPE_RESERVED_15 = 15 // 
mavlink20.AIS_TYPE_RESERVED_16 = 16 // 
mavlink20.AIS_TYPE_RESERVED_17 = 17 // 
mavlink20.AIS_TYPE_RESERVED_18 = 18 // 
mavlink20.AIS_TYPE_RESERVED_19 = 19 // 
mavlink20.AIS_TYPE_WIG = 20 // Wing In Ground effect.
mavlink20.AIS_TYPE_WIG_HAZARDOUS_A = 21 // 
mavlink20.AIS_TYPE_WIG_HAZARDOUS_B = 22 // 
mavlink20.AIS_TYPE_WIG_HAZARDOUS_C = 23 // 
mavlink20.AIS_TYPE_WIG_HAZARDOUS_D = 24 // 
mavlink20.AIS_TYPE_WIG_RESERVED_1 = 25 // 
mavlink20.AIS_TYPE_WIG_RESERVED_2 = 26 // 
mavlink20.AIS_TYPE_WIG_RESERVED_3 = 27 // 
mavlink20.AIS_TYPE_WIG_RESERVED_4 = 28 // 
mavlink20.AIS_TYPE_WIG_RESERVED_5 = 29 // 
mavlink20.AIS_TYPE_FISHING = 30 // 
mavlink20.AIS_TYPE_TOWING = 31 // 
mavlink20.AIS_TYPE_TOWING_LARGE = 32 // Towing: length exceeds 200m or breadth exceeds 25m.
mavlink20.AIS_TYPE_DREDGING = 33 // Dredging or other underwater ops.
mavlink20.AIS_TYPE_DIVING = 34 // 
mavlink20.AIS_TYPE_MILITARY = 35 // 
mavlink20.AIS_TYPE_SAILING = 36 // 
mavlink20.AIS_TYPE_PLEASURE = 37 // 
mavlink20.AIS_TYPE_RESERVED_20 = 38 // 
mavlink20.AIS_TYPE_RESERVED_21 = 39 // 
mavlink20.AIS_TYPE_HSC = 40 // High Speed Craft.
mavlink20.AIS_TYPE_HSC_HAZARDOUS_A = 41 // 
mavlink20.AIS_TYPE_HSC_HAZARDOUS_B = 42 // 
mavlink20.AIS_TYPE_HSC_HAZARDOUS_C = 43 // 
mavlink20.AIS_TYPE_HSC_HAZARDOUS_D = 44 // 
mavlink20.AIS_TYPE_HSC_RESERVED_1 = 45 // 
mavlink20.AIS_TYPE_HSC_RESERVED_2 = 46 // 
mavlink20.AIS_TYPE_HSC_RESERVED_3 = 47 // 
mavlink20.AIS_TYPE_HSC_RESERVED_4 = 48 // 
mavlink20.AIS_TYPE_HSC_UNKNOWN = 49 // 
mavlink20.AIS_TYPE_PILOT = 50 // 
mavlink20.AIS_TYPE_SAR = 51 // Search And Rescue vessel.
mavlink20.AIS_TYPE_TUG = 52 // 
mavlink20.AIS_TYPE_PORT_TENDER = 53 // 
mavlink20.AIS_TYPE_ANTI_POLLUTION = 54 // Anti-pollution equipment.
mavlink20.AIS_TYPE_LAW_ENFORCEMENT = 55 // 
mavlink20.AIS_TYPE_SPARE_LOCAL_1 = 56 // 
mavlink20.AIS_TYPE_SPARE_LOCAL_2 = 57 // 
mavlink20.AIS_TYPE_MEDICAL_TRANSPORT = 58 // 
mavlink20.AIS_TYPE_NONECOMBATANT = 59 // Noncombatant ship according to RR Resolution No. 18.
mavlink20.AIS_TYPE_PASSENGER = 60 // 
mavlink20.AIS_TYPE_PASSENGER_HAZARDOUS_A = 61 // 
mavlink20.AIS_TYPE_PASSENGER_HAZARDOUS_B = 62 // 
mavlink20.AIS_TYPE_AIS_TYPE_PASSENGER_HAZARDOUS_C = 63 // 
mavlink20.AIS_TYPE_PASSENGER_HAZARDOUS_D = 64 // 
mavlink20.AIS_TYPE_PASSENGER_RESERVED_1 = 65 // 
mavlink20.AIS_TYPE_PASSENGER_RESERVED_2 = 66 // 
mavlink20.AIS_TYPE_PASSENGER_RESERVED_3 = 67 // 
mavlink20.AIS_TYPE_AIS_TYPE_PASSENGER_RESERVED_4 = 68 // 
mavlink20.AIS_TYPE_PASSENGER_UNKNOWN = 69 // 
mavlink20.AIS_TYPE_CARGO = 70 // 
mavlink20.AIS_TYPE_CARGO_HAZARDOUS_A = 71 // 
mavlink20.AIS_TYPE_CARGO_HAZARDOUS_B = 72 // 
mavlink20.AIS_TYPE_CARGO_HAZARDOUS_C = 73 // 
mavlink20.AIS_TYPE_CARGO_HAZARDOUS_D = 74 // 
mavlink20.AIS_TYPE_CARGO_RESERVED_1 = 75 // 
mavlink20.AIS_TYPE_CARGO_RESERVED_2 = 76 // 
mavlink20.AIS_TYPE_CARGO_RESERVED_3 = 77 // 
mavlink20.AIS_TYPE_CARGO_RESERVED_4 = 78 // 
mavlink20.AIS_TYPE_CARGO_UNKNOWN = 79 // 
mavlink20.AIS_TYPE_TANKER = 80 // 
mavlink20.AIS_TYPE_TANKER_HAZARDOUS_A = 81 // 
mavlink20.AIS_TYPE_TANKER_HAZARDOUS_B = 82 // 
mavlink20.AIS_TYPE_TANKER_HAZARDOUS_C = 83 // 
mavlink20.AIS_TYPE_TANKER_HAZARDOUS_D = 84 // 
mavlink20.AIS_TYPE_TANKER_RESERVED_1 = 85 // 
mavlink20.AIS_TYPE_TANKER_RESERVED_2 = 86 // 
mavlink20.AIS_TYPE_TANKER_RESERVED_3 = 87 // 
mavlink20.AIS_TYPE_TANKER_RESERVED_4 = 88 // 
mavlink20.AIS_TYPE_TANKER_UNKNOWN = 89 // 
mavlink20.AIS_TYPE_OTHER = 90 // 
mavlink20.AIS_TYPE_OTHER_HAZARDOUS_A = 91 // 
mavlink20.AIS_TYPE_OTHER_HAZARDOUS_B = 92 // 
mavlink20.AIS_TYPE_OTHER_HAZARDOUS_C = 93 // 
mavlink20.AIS_TYPE_OTHER_HAZARDOUS_D = 94 // 
mavlink20.AIS_TYPE_OTHER_RESERVED_1 = 95 // 
mavlink20.AIS_TYPE_OTHER_RESERVED_2 = 96 // 
mavlink20.AIS_TYPE_OTHER_RESERVED_3 = 97 // 
mavlink20.AIS_TYPE_OTHER_RESERVED_4 = 98 // 
mavlink20.AIS_TYPE_OTHER_UNKNOWN = 99 // 
mavlink20.AIS_TYPE_ENUM_END = 100 // 

// AIS_NAV_STATUS
mavlink20.UNDER_WAY = 0 // Under way using engine.
mavlink20.AIS_NAV_ANCHORED = 1 // 
mavlink20.AIS_NAV_UN_COMMANDED = 2 // 
mavlink20.AIS_NAV_RESTRICTED_MANOEUVERABILITY = 3 // 
mavlink20.AIS_NAV_DRAUGHT_CONSTRAINED = 4 // 
mavlink20.AIS_NAV_MOORED = 5 // 
mavlink20.AIS_NAV_AGROUND = 6 // 
mavlink20.AIS_NAV_FISHING = 7 // 
mavlink20.AIS_NAV_SAILING = 8 // 
mavlink20.AIS_NAV_RESERVED_HSC = 9 // 
mavlink20.AIS_NAV_RESERVED_WIG = 10 // 
mavlink20.AIS_NAV_RESERVED_1 = 11 // 
mavlink20.AIS_NAV_RESERVED_2 = 12 // 
mavlink20.AIS_NAV_RESERVED_3 = 13 // 
mavlink20.AIS_NAV_AIS_SART = 14 // Search And Rescue Transponder.
mavlink20.AIS_NAV_UNKNOWN = 15 // Not available (default).
mavlink20.AIS_NAV_STATUS_ENUM_END = 16 // 

// AIS_FLAGS
mavlink20.AIS_FLAGS_POSITION_ACCURACY = 1 // 1 = Position accuracy less than 10m, 0 = position accuracy greater
                        // than 10m.
mavlink20.AIS_FLAGS_VALID_COG = 2 // 
mavlink20.AIS_FLAGS_VALID_VELOCITY = 4 // 
mavlink20.AIS_FLAGS_HIGH_VELOCITY = 8 // 1 = Velocity over 52.5765m/s (102.2 knots)
mavlink20.AIS_FLAGS_VALID_TURN_RATE = 16 // 
mavlink20.AIS_FLAGS_TURN_RATE_SIGN_ONLY = 32 // Only the sign of the returned turn rate value is valid, either greater
                        // than 5deg/30s or less than -5deg/30s
mavlink20.AIS_FLAGS_VALID_DIMENSIONS = 64 // 
mavlink20.AIS_FLAGS_LARGE_BOW_DIMENSION = 128 // Distance to bow is larger than 511m
mavlink20.AIS_FLAGS_LARGE_STERN_DIMENSION = 256 // Distance to stern is larger than 511m
mavlink20.AIS_FLAGS_LARGE_PORT_DIMENSION = 512 // Distance to port side is larger than 63m
mavlink20.AIS_FLAGS_LARGE_STARBOARD_DIMENSION = 1024 // Distance to starboard side is larger than 63m
mavlink20.AIS_FLAGS_VALID_CALLSIGN = 2048 // 
mavlink20.AIS_FLAGS_VALID_NAME = 4096 // 
mavlink20.AIS_FLAGS_ENUM_END = 4097 // 

// MAV_WINCH_STATUS_FLAG
mavlink20.MAV_WINCH_STATUS_HEALTHY = 1 // Winch is healthy
mavlink20.MAV_WINCH_STATUS_FULLY_RETRACTED = 2 // Winch thread is fully retracted
mavlink20.MAV_WINCH_STATUS_MOVING = 4 // Winch motor is moving
mavlink20.MAV_WINCH_STATUS_CLUTCH_ENGAGED = 8 // Winch clutch is engaged allowing motor to move freely
mavlink20.MAV_WINCH_STATUS_FLAG_ENUM_END = 9 // 

// MAG_CAL_STATUS
mavlink20.MAG_CAL_NOT_STARTED = 0 // 
mavlink20.MAG_CAL_WAITING_TO_START = 1 // 
mavlink20.MAG_CAL_RUNNING_STEP_ONE = 2 // 
mavlink20.MAG_CAL_RUNNING_STEP_TWO = 3 // 
mavlink20.MAG_CAL_SUCCESS = 4 // 
mavlink20.MAG_CAL_FAILED = 5 // 
mavlink20.MAG_CAL_BAD_ORIENTATION = 6 // 
mavlink20.MAG_CAL_BAD_RADIUS = 7 // 
mavlink20.MAG_CAL_STATUS_ENUM_END = 8 // 

// CAN_FILTER_OP
mavlink20.CAN_FILTER_REPLACE = 0 // 
mavlink20.CAN_FILTER_ADD = 1 // 
mavlink20.CAN_FILTER_REMOVE = 2 // 
mavlink20.CAN_FILTER_OP_ENUM_END = 3 // 

// NAV_VTOL_LAND_OPTIONS
mavlink20.NAV_VTOL_LAND_OPTIONS_DEFAULT = 0 // Default autopilot landing behaviour.
mavlink20.NAV_VTOL_LAND_OPTIONS_FW_SPIRAL_APPROACH = 1 // Use a fixed wing spiral desent approach before landing.
mavlink20.NAV_VTOL_LAND_OPTIONS_FW_APPROACH = 2 // Use a fixed wing approach before detransitioning and landing
                        // vertically.
mavlink20.NAV_VTOL_LAND_OPTIONS_ENUM_END = 3 // 

// MISSION_STATE
mavlink20.MISSION_STATE_UNKNOWN = 0 // The mission status reporting is not supported.
mavlink20.MISSION_STATE_NO_MISSION = 1 // No mission on the vehicle.
mavlink20.MISSION_STATE_NOT_STARTED = 2 // Mission has not started. This is the case after a mission has uploaded
                        // but not yet started executing.
mavlink20.MISSION_STATE_ACTIVE = 3 // Mission is active, and will execute mission items when in auto mode.
mavlink20.MISSION_STATE_PAUSED = 4 // Mission is paused when in auto mode.
mavlink20.MISSION_STATE_COMPLETE = 5 // Mission has executed all mission items.
mavlink20.MISSION_STATE_ENUM_END = 6 // 

// UAVIONIX_ADSB_OUT_DYNAMIC_STATE
mavlink20.UAVIONIX_ADSB_OUT_DYNAMIC_STATE_INTENT_CHANGE = 1 // 
mavlink20.UAVIONIX_ADSB_OUT_DYNAMIC_STATE_AUTOPILOT_ENABLED = 2 // 
mavlink20.UAVIONIX_ADSB_OUT_DYNAMIC_STATE_NICBARO_CROSSCHECKED = 4 // 
mavlink20.UAVIONIX_ADSB_OUT_DYNAMIC_STATE_ON_GROUND = 8 // 
mavlink20.UAVIONIX_ADSB_OUT_DYNAMIC_STATE_IDENT = 16 // 
mavlink20.UAVIONIX_ADSB_OUT_DYNAMIC_STATE_ENUM_END = 17 // 

// UAVIONIX_ADSB_OUT_RF_SELECT
mavlink20.UAVIONIX_ADSB_OUT_RF_SELECT_STANDBY = 0 // 
mavlink20.UAVIONIX_ADSB_OUT_RF_SELECT_RX_ENABLED = 1 // 
mavlink20.UAVIONIX_ADSB_OUT_RF_SELECT_TX_ENABLED = 2 // 
mavlink20.UAVIONIX_ADSB_OUT_RF_SELECT_ENUM_END = 3 // 

// UAVIONIX_ADSB_OUT_DYNAMIC_GPS_FIX
mavlink20.UAVIONIX_ADSB_OUT_DYNAMIC_GPS_FIX_NONE_0 = 0 // 
mavlink20.UAVIONIX_ADSB_OUT_DYNAMIC_GPS_FIX_NONE_1 = 1 // 
mavlink20.UAVIONIX_ADSB_OUT_DYNAMIC_GPS_FIX_2D = 2 // 
mavlink20.UAVIONIX_ADSB_OUT_DYNAMIC_GPS_FIX_3D = 3 // 
mavlink20.UAVIONIX_ADSB_OUT_DYNAMIC_GPS_FIX_DGPS = 4 // 
mavlink20.UAVIONIX_ADSB_OUT_DYNAMIC_GPS_FIX_RTK = 5 // 
mavlink20.UAVIONIX_ADSB_OUT_DYNAMIC_GPS_FIX_ENUM_END = 6 // 

// UAVIONIX_ADSB_RF_HEALTH
mavlink20.UAVIONIX_ADSB_RF_HEALTH_INITIALIZING = 0 // 
mavlink20.UAVIONIX_ADSB_RF_HEALTH_OK = 1 // 
mavlink20.UAVIONIX_ADSB_RF_HEALTH_FAIL_TX = 2 // 
mavlink20.UAVIONIX_ADSB_RF_HEALTH_FAIL_RX = 16 // 
mavlink20.UAVIONIX_ADSB_RF_HEALTH_ENUM_END = 17 // 

// UAVIONIX_ADSB_OUT_CFG_AIRCRAFT_SIZE
mavlink20.UAVIONIX_ADSB_OUT_CFG_AIRCRAFT_SIZE_NO_DATA = 0 // 
mavlink20.UAVIONIX_ADSB_OUT_CFG_AIRCRAFT_SIZE_L15M_W23M = 1 // 
mavlink20.UAVIONIX_ADSB_OUT_CFG_AIRCRAFT_SIZE_L25M_W28P5M = 2 // 
mavlink20.UAVIONIX_ADSB_OUT_CFG_AIRCRAFT_SIZE_L25_34M = 3 // 
mavlink20.UAVIONIX_ADSB_OUT_CFG_AIRCRAFT_SIZE_L35_33M = 4 // 
mavlink20.UAVIONIX_ADSB_OUT_CFG_AIRCRAFT_SIZE_L35_38M = 5 // 
mavlink20.UAVIONIX_ADSB_OUT_CFG_AIRCRAFT_SIZE_L45_39P5M = 6 // 
mavlink20.UAVIONIX_ADSB_OUT_CFG_AIRCRAFT_SIZE_L45_45M = 7 // 
mavlink20.UAVIONIX_ADSB_OUT_CFG_AIRCRAFT_SIZE_L55_45M = 8 // 
mavlink20.UAVIONIX_ADSB_OUT_CFG_AIRCRAFT_SIZE_L55_52M = 9 // 
mavlink20.UAVIONIX_ADSB_OUT_CFG_AIRCRAFT_SIZE_L65_59P5M = 10 // 
mavlink20.UAVIONIX_ADSB_OUT_CFG_AIRCRAFT_SIZE_L65_67M = 11 // 
mavlink20.UAVIONIX_ADSB_OUT_CFG_AIRCRAFT_SIZE_L75_W72P5M = 12 // 
mavlink20.UAVIONIX_ADSB_OUT_CFG_AIRCRAFT_SIZE_L75_W80M = 13 // 
mavlink20.UAVIONIX_ADSB_OUT_CFG_AIRCRAFT_SIZE_L85_W80M = 14 // 
mavlink20.UAVIONIX_ADSB_OUT_CFG_AIRCRAFT_SIZE_L85_W90M = 15 // 
mavlink20.UAVIONIX_ADSB_OUT_CFG_AIRCRAFT_SIZE_ENUM_END = 16 // 

// UAVIONIX_ADSB_OUT_CFG_GPS_OFFSET_LAT
mavlink20.UAVIONIX_ADSB_OUT_CFG_GPS_OFFSET_LAT_NO_DATA = 0 // 
mavlink20.UAVIONIX_ADSB_OUT_CFG_GPS_OFFSET_LAT_LEFT_2M = 1 // 
mavlink20.UAVIONIX_ADSB_OUT_CFG_GPS_OFFSET_LAT_LEFT_4M = 2 // 
mavlink20.UAVIONIX_ADSB_OUT_CFG_GPS_OFFSET_LAT_LEFT_6M = 3 // 
mavlink20.UAVIONIX_ADSB_OUT_CFG_GPS_OFFSET_LAT_RIGHT_0M = 4 // 
mavlink20.UAVIONIX_ADSB_OUT_CFG_GPS_OFFSET_LAT_RIGHT_2M = 5 // 
mavlink20.UAVIONIX_ADSB_OUT_CFG_GPS_OFFSET_LAT_RIGHT_4M = 6 // 
mavlink20.UAVIONIX_ADSB_OUT_CFG_GPS_OFFSET_LAT_RIGHT_6M = 7 // 
mavlink20.UAVIONIX_ADSB_OUT_CFG_GPS_OFFSET_LAT_ENUM_END = 8 // 

// UAVIONIX_ADSB_OUT_CFG_GPS_OFFSET_LON
mavlink20.UAVIONIX_ADSB_OUT_CFG_GPS_OFFSET_LON_NO_DATA = 0 // 
mavlink20.UAVIONIX_ADSB_OUT_CFG_GPS_OFFSET_LON_APPLIED_BY_SENSOR = 1 // 
mavlink20.UAVIONIX_ADSB_OUT_CFG_GPS_OFFSET_LON_ENUM_END = 2 // 

// UAVIONIX_ADSB_EMERGENCY_STATUS
mavlink20.UAVIONIX_ADSB_OUT_NO_EMERGENCY = 0 // 
mavlink20.UAVIONIX_ADSB_OUT_GENERAL_EMERGENCY = 1 // 
mavlink20.UAVIONIX_ADSB_OUT_LIFEGUARD_EMERGENCY = 2 // 
mavlink20.UAVIONIX_ADSB_OUT_MINIMUM_FUEL_EMERGENCY = 3 // 
mavlink20.UAVIONIX_ADSB_OUT_NO_COMM_EMERGENCY = 4 // 
mavlink20.UAVIONIX_ADSB_OUT_UNLAWFUL_INTERFERANCE_EMERGENCY = 5 // 
mavlink20.UAVIONIX_ADSB_OUT_DOWNED_AIRCRAFT_EMERGENCY = 6 // 
mavlink20.UAVIONIX_ADSB_OUT_RESERVED = 7 // 
mavlink20.UAVIONIX_ADSB_EMERGENCY_STATUS_ENUM_END = 8 // 

// UAVIONIX_ADSB_OUT_CONTROL_STATE
mavlink20.UAVIONIX_ADSB_OUT_CONTROL_STATE_EXTERNAL_BARO_CROSSCHECKED = 1 // 
mavlink20.UAVIONIX_ADSB_OUT_CONTROL_STATE_ON_GROUND = 4 // 
mavlink20.UAVIONIX_ADSB_OUT_CONTROL_STATE_IDENT_BUTTON_ACTIVE = 8 // 
mavlink20.UAVIONIX_ADSB_OUT_CONTROL_STATE_MODE_A_ENABLED = 16 // 
mavlink20.UAVIONIX_ADSB_OUT_CONTROL_STATE_MODE_C_ENABLED = 32 // 
mavlink20.UAVIONIX_ADSB_OUT_CONTROL_STATE_MODE_S_ENABLED = 64 // 
mavlink20.UAVIONIX_ADSB_OUT_CONTROL_STATE_1090ES_TX_ENABLED = 128 // 
mavlink20.UAVIONIX_ADSB_OUT_CONTROL_STATE_ENUM_END = 129 // 

// UAVIONIX_ADSB_XBIT
mavlink20.UAVIONIX_ADSB_XBIT_ENABLED = 128 // 
mavlink20.UAVIONIX_ADSB_XBIT_ENUM_END = 129 // 

// UAVIONIX_ADSB_OUT_STATUS_STATE
mavlink20.UAVIONIX_ADSB_OUT_STATUS_STATE_ON_GROUND = 1 // 
mavlink20.UAVIONIX_ADSB_OUT_STATUS_STATE_INTERROGATED_SINCE_LAST = 2 // 
mavlink20.UAVIONIX_ADSB_OUT_STATUS_STATE_XBIT_ENABLED = 4 // 
mavlink20.UAVIONIX_ADSB_OUT_STATUS_STATE_IDENT_ACTIVE = 8 // 
mavlink20.UAVIONIX_ADSB_OUT_STATUS_STATE_MODE_A_ENABLED = 16 // 
mavlink20.UAVIONIX_ADSB_OUT_STATUS_STATE_MODE_C_ENABLED = 32 // 
mavlink20.UAVIONIX_ADSB_OUT_STATUS_STATE_MODE_S_ENABLED = 64 // 
mavlink20.UAVIONIX_ADSB_OUT_STATUS_STATE_1090ES_TX_ENABLED = 128 // 
mavlink20.UAVIONIX_ADSB_OUT_STATUS_STATE_ENUM_END = 129 // 

// UAVIONIX_ADSB_OUT_STATUS_NIC_NACP
mavlink20.UAVIONIX_ADSB_NIC_CR_20_NM = 1 // 
mavlink20.UAVIONIX_ADSB_NIC_CR_8_NM = 2 // 
mavlink20.UAVIONIX_ADSB_NIC_CR_4_NM = 3 // 
mavlink20.UAVIONIX_ADSB_NIC_CR_2_NM = 4 // 
mavlink20.UAVIONIX_ADSB_NIC_CR_1_NM = 5 // 
mavlink20.UAVIONIX_ADSB_NIC_CR_0_3_NM = 6 // 
mavlink20.UAVIONIX_ADSB_NIC_CR_0_2_NM = 7 // 
mavlink20.UAVIONIX_ADSB_NIC_CR_0_1_NM = 8 // 
mavlink20.UAVIONIX_ADSB_NIC_CR_75_M = 9 // 
mavlink20.UAVIONIX_ADSB_NIC_CR_25_M = 10 // 
mavlink20.UAVIONIX_ADSB_NIC_CR_7_5_M = 11 // 
mavlink20.UAVIONIX_ADSB_NACP_EPU_10_NM = 16 // 
mavlink20.UAVIONIX_ADSB_NACP_EPU_4_NM = 32 // 
mavlink20.UAVIONIX_ADSB_NACP_EPU_2_NM = 48 // 
mavlink20.UAVIONIX_ADSB_NACP_EPU_1_NM = 64 // 
mavlink20.UAVIONIX_ADSB_NACP_EPU_0_5_NM = 80 // 
mavlink20.UAVIONIX_ADSB_NACP_EPU_0_3_NM = 96 // 
mavlink20.UAVIONIX_ADSB_NACP_EPU_0_1_NM = 112 // 
mavlink20.UAVIONIX_ADSB_NACP_EPU_0_05_NM = 128 // 
mavlink20.UAVIONIX_ADSB_NACP_EPU_30_M = 144 // 
mavlink20.UAVIONIX_ADSB_NACP_EPU_10_M = 160 // 
mavlink20.UAVIONIX_ADSB_NACP_EPU_3_M = 176 // 
mavlink20.UAVIONIX_ADSB_OUT_STATUS_NIC_NACP_ENUM_END = 177 // 

// UAVIONIX_ADSB_OUT_STATUS_FAULT
mavlink20.UAVIONIX_ADSB_OUT_STATUS_FAULT_STATUS_MESSAGE_UNAVAIL = 8 // 
mavlink20.UAVIONIX_ADSB_OUT_STATUS_FAULT_GPS_NO_POS = 16 // 
mavlink20.UAVIONIX_ADSB_OUT_STATUS_FAULT_GPS_UNAVAIL = 32 // 
mavlink20.UAVIONIX_ADSB_OUT_STATUS_FAULT_TX_SYSTEM_FAIL = 64 // 
mavlink20.UAVIONIX_ADSB_OUT_STATUS_FAULT_MAINT_REQ = 128 // 
mavlink20.UAVIONIX_ADSB_OUT_STATUS_FAULT_ENUM_END = 129 // 

// ICAROUS_TRACK_BAND_TYPES
mavlink20.ICAROUS_TRACK_BAND_TYPE_NONE = 0 // 
mavlink20.ICAROUS_TRACK_BAND_TYPE_NEAR = 1 // 
mavlink20.ICAROUS_TRACK_BAND_TYPE_RECOVERY = 2 // 
mavlink20.ICAROUS_TRACK_BAND_TYPES_ENUM_END = 3 // 

// ICAROUS_FMS_STATE
mavlink20.ICAROUS_FMS_STATE_IDLE = 0 // 
mavlink20.ICAROUS_FMS_STATE_TAKEOFF = 1 // 
mavlink20.ICAROUS_FMS_STATE_CLIMB = 2 // 
mavlink20.ICAROUS_FMS_STATE_CRUISE = 3 // 
mavlink20.ICAROUS_FMS_STATE_APPROACH = 4 // 
mavlink20.ICAROUS_FMS_STATE_LAND = 5 // 
mavlink20.ICAROUS_FMS_STATE_ENUM_END = 6 // 

// AIRLINK_AUTH_RESPONSE_TYPE
mavlink20.AIRLINK_ERROR_LOGIN_OR_PASS = 0 // Login or password error
mavlink20.AIRLINK_AUTH_OK = 1 // Auth successful
mavlink20.AIRLINK_AUTH_RESPONSE_TYPE_ENUM_END = 2 // 

// MAV_AUTOPILOT
mavlink20.MAV_AUTOPILOT_GENERIC = 0 // Generic autopilot, full support for everything
mavlink20.MAV_AUTOPILOT_RESERVED = 1 // Reserved for future use.
mavlink20.MAV_AUTOPILOT_SLUGS = 2 // SLUGS autopilot, http://slugsuav.soe.ucsc.edu
mavlink20.MAV_AUTOPILOT_ARDUPILOTMEGA = 3 // ArduPilot - Plane/Copter/Rover/Sub/Tracker, https://ardupilot.org
mavlink20.MAV_AUTOPILOT_OPENPILOT = 4 // OpenPilot, http://openpilot.org
mavlink20.MAV_AUTOPILOT_GENERIC_WAYPOINTS_ONLY = 5 // Generic autopilot only supporting simple waypoints
mavlink20.MAV_AUTOPILOT_GENERIC_WAYPOINTS_AND_SIMPLE_NAVIGATION_ONLY = 6 // Generic autopilot supporting waypoints and other simple navigation
                        // commands
mavlink20.MAV_AUTOPILOT_GENERIC_MISSION_FULL = 7 // Generic autopilot supporting the full mission command set
mavlink20.MAV_AUTOPILOT_INVALID = 8 // No valid autopilot, e.g. a GCS or other MAVLink component
mavlink20.MAV_AUTOPILOT_PPZ = 9 // PPZ UAV - http://nongnu.org/paparazzi
mavlink20.MAV_AUTOPILOT_UDB = 10 // UAV Dev Board
mavlink20.MAV_AUTOPILOT_FP = 11 // FlexiPilot
mavlink20.MAV_AUTOPILOT_PX4 = 12 // PX4 Autopilot - http://px4.io/
mavlink20.MAV_AUTOPILOT_SMACCMPILOT = 13 // SMACCMPilot - http://smaccmpilot.org
mavlink20.MAV_AUTOPILOT_AUTOQUAD = 14 // AutoQuad -- http://autoquad.org
mavlink20.MAV_AUTOPILOT_ARMAZILA = 15 // Armazila -- http://armazila.com
mavlink20.MAV_AUTOPILOT_AEROB = 16 // Aerob -- http://aerob.ru
mavlink20.MAV_AUTOPILOT_ASLUAV = 17 // ASLUAV autopilot -- http://www.asl.ethz.ch
mavlink20.MAV_AUTOPILOT_SMARTAP = 18 // SmartAP Autopilot - http://sky-drones.com
mavlink20.MAV_AUTOPILOT_AIRRAILS = 19 // AirRails - http://uaventure.com
mavlink20.MAV_AUTOPILOT_REFLEX = 20 // Fusion Reflex - https://fusion.engineering
mavlink20.MAV_AUTOPILOT_ENUM_END = 21 // 

// MAV_TYPE
mavlink20.MAV_TYPE_GENERIC = 0 // Generic micro air vehicle
mavlink20.MAV_TYPE_FIXED_WING = 1 // Fixed wing aircraft.
mavlink20.MAV_TYPE_QUADROTOR = 2 // Quadrotor
mavlink20.MAV_TYPE_COAXIAL = 3 // Coaxial helicopter
mavlink20.MAV_TYPE_HELICOPTER = 4 // Normal helicopter with tail rotor.
mavlink20.MAV_TYPE_ANTENNA_TRACKER = 5 // Ground installation
mavlink20.MAV_TYPE_GCS = 6 // Operator control unit / ground control station
mavlink20.MAV_TYPE_AIRSHIP = 7 // Airship, controlled
mavlink20.MAV_TYPE_FREE_BALLOON = 8 // Free balloon, uncontrolled
mavlink20.MAV_TYPE_ROCKET = 9 // Rocket
mavlink20.MAV_TYPE_GROUND_ROVER = 10 // Ground rover
mavlink20.MAV_TYPE_SURFACE_BOAT = 11 // Surface vessel, boat, ship
mavlink20.MAV_TYPE_SUBMARINE = 12 // Submarine
mavlink20.MAV_TYPE_HEXAROTOR = 13 // Hexarotor
mavlink20.MAV_TYPE_OCTOROTOR = 14 // Octorotor
mavlink20.MAV_TYPE_TRICOPTER = 15 // Tricopter
mavlink20.MAV_TYPE_FLAPPING_WING = 16 // Flapping wing
mavlink20.MAV_TYPE_KITE = 17 // Kite
mavlink20.MAV_TYPE_ONBOARD_CONTROLLER = 18 // Onboard companion controller
mavlink20.MAV_TYPE_VTOL_DUOROTOR = 19 // Two-rotor VTOL using control surfaces in vertical operation in
                        // addition. Tailsitter.
mavlink20.MAV_TYPE_VTOL_QUADROTOR = 20 // Quad-rotor VTOL using a V-shaped quad config in vertical operation.
                        // Tailsitter.
mavlink20.MAV_TYPE_VTOL_TILTROTOR = 21 // Tiltrotor VTOL
mavlink20.MAV_TYPE_VTOL_RESERVED2 = 22 // VTOL reserved 2
mavlink20.MAV_TYPE_VTOL_RESERVED3 = 23 // VTOL reserved 3
mavlink20.MAV_TYPE_VTOL_RESERVED4 = 24 // VTOL reserved 4
mavlink20.MAV_TYPE_VTOL_RESERVED5 = 25 // VTOL reserved 5
mavlink20.MAV_TYPE_GIMBAL = 26 // Gimbal
mavlink20.MAV_TYPE_ADSB = 27 // ADSB system
mavlink20.MAV_TYPE_PARAFOIL = 28 // Steerable, nonrigid airfoil
mavlink20.MAV_TYPE_DODECAROTOR = 29 // Dodecarotor
mavlink20.MAV_TYPE_CAMERA = 30 // Camera
mavlink20.MAV_TYPE_CHARGING_STATION = 31 // Charging station
mavlink20.MAV_TYPE_FLARM = 32 // FLARM collision avoidance system
mavlink20.MAV_TYPE_SERVO = 33 // Servo
mavlink20.MAV_TYPE_ODID = 34 // Open Drone ID. See https://mavlink.io/en/services/opendroneid.html.
mavlink20.MAV_TYPE_DECAROTOR = 35 // Decarotor
mavlink20.MAV_TYPE_BATTERY = 36 // Battery
mavlink20.MAV_TYPE_PARACHUTE = 37 // Parachute
mavlink20.MAV_TYPE_LOG = 38 // Log
mavlink20.MAV_TYPE_OSD = 39 // OSD
mavlink20.MAV_TYPE_IMU = 40 // IMU
mavlink20.MAV_TYPE_GPS = 41 // GPS
mavlink20.MAV_TYPE_WINCH = 42 // Winch
mavlink20.MAV_TYPE_ENUM_END = 43 // 

// MAV_MODE_FLAG
mavlink20.MAV_MODE_FLAG_CUSTOM_MODE_ENABLED = 1 // 0b00000001 Reserved for future use.
mavlink20.MAV_MODE_FLAG_TEST_ENABLED = 2 // 0b00000010 system has a test mode enabled. This flag is intended for
                        // temporary system tests and should not be
                        // used for stable implementations.
mavlink20.MAV_MODE_FLAG_AUTO_ENABLED = 4 // 0b00000100 autonomous mode enabled, system finds its own goal
                        // positions. Guided flag can be set or not,
                        // depends on the actual implementation.
mavlink20.MAV_MODE_FLAG_GUIDED_ENABLED = 8 // 0b00001000 guided mode enabled, system flies waypoints / mission
                        // items.
mavlink20.MAV_MODE_FLAG_STABILIZE_ENABLED = 16 // 0b00010000 system stabilizes electronically its attitude (and
                        // optionally position). It needs however
                        // further control inputs to move around.
mavlink20.MAV_MODE_FLAG_HIL_ENABLED = 32 // 0b00100000 hardware in the loop simulation. All motors / actuators are
                        // blocked, but internal software is full
                        // operational.
mavlink20.MAV_MODE_FLAG_MANUAL_INPUT_ENABLED = 64 // 0b01000000 remote control input is enabled.
mavlink20.MAV_MODE_FLAG_SAFETY_ARMED = 128 // 0b10000000 MAV safety set to armed. Motors are enabled / running / can
                        // start. Ready to fly. Additional note: this
                        // flag is to be ignore when sent in the
                        // command MAV_CMD_DO_SET_MODE and
                        // MAV_CMD_COMPONENT_ARM_DISARM shall be used
                        // instead. The flag can still be used to
                        // report the armed state.
mavlink20.MAV_MODE_FLAG_ENUM_END = 129 // 

// MAV_MODE_FLAG_DECODE_POSITION
mavlink20.MAV_MODE_FLAG_DECODE_POSITION_CUSTOM_MODE = 1 // Eighth bit: 00000001
mavlink20.MAV_MODE_FLAG_DECODE_POSITION_TEST = 2 // Seventh bit: 00000010
mavlink20.MAV_MODE_FLAG_DECODE_POSITION_AUTO = 4 // Sixth bit:   00000100
mavlink20.MAV_MODE_FLAG_DECODE_POSITION_GUIDED = 8 // Fifth bit:  00001000
mavlink20.MAV_MODE_FLAG_DECODE_POSITION_STABILIZE = 16 // Fourth bit: 00010000
mavlink20.MAV_MODE_FLAG_DECODE_POSITION_HIL = 32 // Third bit:  00100000
mavlink20.MAV_MODE_FLAG_DECODE_POSITION_MANUAL = 64 // Second bit: 01000000
mavlink20.MAV_MODE_FLAG_DECODE_POSITION_SAFETY = 128 // First bit:  10000000
mavlink20.MAV_MODE_FLAG_DECODE_POSITION_ENUM_END = 129 // 

// MAV_STATE
mavlink20.MAV_STATE_UNINIT = 0 // Uninitialized system, state is unknown.
mavlink20.MAV_STATE_BOOT = 1 // System is booting up.
mavlink20.MAV_STATE_CALIBRATING = 2 // System is calibrating and not flight-ready.
mavlink20.MAV_STATE_STANDBY = 3 // System is grounded and on standby. It can be launched any time.
mavlink20.MAV_STATE_ACTIVE = 4 // System is active and might be already airborne. Motors are engaged.
mavlink20.MAV_STATE_CRITICAL = 5 // System is in a non-normal flight mode. It can however still navigate.
mavlink20.MAV_STATE_EMERGENCY = 6 // System is in a non-normal flight mode. It lost control over parts or
                        // over the whole airframe. It is in mayday
                        // and going down.
mavlink20.MAV_STATE_POWEROFF = 7 // System just initialized its power-down sequence, will shut down now.
mavlink20.MAV_STATE_FLIGHT_TERMINATION = 8 // System is terminating itself.
mavlink20.MAV_STATE_ENUM_END = 9 // 

// MAV_COMPONENT
mavlink20.MAV_COMP_ID_ALL = 0 // Target id (target_component) used to broadcast messages to all
                        // components of the receiving system.
                        // Components should attempt to process
                        // messages with this component ID and forward
                        // to components on any other interfaces.
                        // Note: This is not a valid *source*
                        // component id for a message.
mavlink20.MAV_COMP_ID_AUTOPILOT1 = 1 // System flight controller component ("autopilot"). Only one autopilot
                        // is expected in a particular system.
mavlink20.MAV_COMP_ID_USER1 = 25 // Id for a component on privately managed MAVLink network. Can be used
                        // for any purpose but may not be published by
                        // components outside of the private network.
mavlink20.MAV_COMP_ID_USER2 = 26 // Id for a component on privately managed MAVLink network. Can be used
                        // for any purpose but may not be published by
                        // components outside of the private network.
mavlink20.MAV_COMP_ID_USER3 = 27 // Id for a component on privately managed MAVLink network. Can be used
                        // for any purpose but may not be published by
                        // components outside of the private network.
mavlink20.MAV_COMP_ID_USER4 = 28 // Id for a component on privately managed MAVLink network. Can be used
                        // for any purpose but may not be published by
                        // components outside of the private network.
mavlink20.MAV_COMP_ID_USER5 = 29 // Id for a component on privately managed MAVLink network. Can be used
                        // for any purpose but may not be published by
                        // components outside of the private network.
mavlink20.MAV_COMP_ID_USER6 = 30 // Id for a component on privately managed MAVLink network. Can be used
                        // for any purpose but may not be published by
                        // components outside of the private network.
mavlink20.MAV_COMP_ID_USER7 = 31 // Id for a component on privately managed MAVLink network. Can be used
                        // for any purpose but may not be published by
                        // components outside of the private network.
mavlink20.MAV_COMP_ID_USER8 = 32 // Id for a component on privately managed MAVLink network. Can be used
                        // for any purpose but may not be published by
                        // components outside of the private network.
mavlink20.MAV_COMP_ID_USER9 = 33 // Id for a component on privately managed MAVLink network. Can be used
                        // for any purpose but may not be published by
                        // components outside of the private network.
mavlink20.MAV_COMP_ID_USER10 = 34 // Id for a component on privately managed MAVLink network. Can be used
                        // for any purpose but may not be published by
                        // components outside of the private network.
mavlink20.MAV_COMP_ID_USER11 = 35 // Id for a component on privately managed MAVLink network. Can be used
                        // for any purpose but may not be published by
                        // components outside of the private network.
mavlink20.MAV_COMP_ID_USER12 = 36 // Id for a component on privately managed MAVLink network. Can be used
                        // for any purpose but may not be published by
                        // components outside of the private network.
mavlink20.MAV_COMP_ID_USER13 = 37 // Id for a component on privately managed MAVLink network. Can be used
                        // for any purpose but may not be published by
                        // components outside of the private network.
mavlink20.MAV_COMP_ID_USER14 = 38 // Id for a component on privately managed MAVLink network. Can be used
                        // for any purpose but may not be published by
                        // components outside of the private network.
mavlink20.MAV_COMP_ID_USER15 = 39 // Id for a component on privately managed MAVLink network. Can be used
                        // for any purpose but may not be published by
                        // components outside of the private network.
mavlink20.MAV_COMP_ID_USER16 = 40 // Id for a component on privately managed MAVLink network. Can be used
                        // for any purpose but may not be published by
                        // components outside of the private network.
mavlink20.MAV_COMP_ID_USER17 = 41 // Id for a component on privately managed MAVLink network. Can be used
                        // for any purpose but may not be published by
                        // components outside of the private network.
mavlink20.MAV_COMP_ID_USER18 = 42 // Id for a component on privately managed MAVLink network. Can be used
                        // for any purpose but may not be published by
                        // components outside of the private network.
mavlink20.MAV_COMP_ID_USER19 = 43 // Id for a component on privately managed MAVLink network. Can be used
                        // for any purpose but may not be published by
                        // components outside of the private network.
mavlink20.MAV_COMP_ID_USER20 = 44 // Id for a component on privately managed MAVLink network. Can be used
                        // for any purpose but may not be published by
                        // components outside of the private network.
mavlink20.MAV_COMP_ID_USER21 = 45 // Id for a component on privately managed MAVLink network. Can be used
                        // for any purpose but may not be published by
                        // components outside of the private network.
mavlink20.MAV_COMP_ID_USER22 = 46 // Id for a component on privately managed MAVLink network. Can be used
                        // for any purpose but may not be published by
                        // components outside of the private network.
mavlink20.MAV_COMP_ID_USER23 = 47 // Id for a component on privately managed MAVLink network. Can be used
                        // for any purpose but may not be published by
                        // components outside of the private network.
mavlink20.MAV_COMP_ID_USER24 = 48 // Id for a component on privately managed MAVLink network. Can be used
                        // for any purpose but may not be published by
                        // components outside of the private network.
mavlink20.MAV_COMP_ID_USER25 = 49 // Id for a component on privately managed MAVLink network. Can be used
                        // for any purpose but may not be published by
                        // components outside of the private network.
mavlink20.MAV_COMP_ID_USER26 = 50 // Id for a component on privately managed MAVLink network. Can be used
                        // for any purpose but may not be published by
                        // components outside of the private network.
mavlink20.MAV_COMP_ID_USER27 = 51 // Id for a component on privately managed MAVLink network. Can be used
                        // for any purpose but may not be published by
                        // components outside of the private network.
mavlink20.MAV_COMP_ID_USER28 = 52 // Id for a component on privately managed MAVLink network. Can be used
                        // for any purpose but may not be published by
                        // components outside of the private network.
mavlink20.MAV_COMP_ID_USER29 = 53 // Id for a component on privately managed MAVLink network. Can be used
                        // for any purpose but may not be published by
                        // components outside of the private network.
mavlink20.MAV_COMP_ID_USER30 = 54 // Id for a component on privately managed MAVLink network. Can be used
                        // for any purpose but may not be published by
                        // components outside of the private network.
mavlink20.MAV_COMP_ID_USER31 = 55 // Id for a component on privately managed MAVLink network. Can be used
                        // for any purpose but may not be published by
                        // components outside of the private network.
mavlink20.MAV_COMP_ID_USER32 = 56 // Id for a component on privately managed MAVLink network. Can be used
                        // for any purpose but may not be published by
                        // components outside of the private network.
mavlink20.MAV_COMP_ID_USER33 = 57 // Id for a component on privately managed MAVLink network. Can be used
                        // for any purpose but may not be published by
                        // components outside of the private network.
mavlink20.MAV_COMP_ID_USER34 = 58 // Id for a component on privately managed MAVLink network. Can be used
                        // for any purpose but may not be published by
                        // components outside of the private network.
mavlink20.MAV_COMP_ID_USER35 = 59 // Id for a component on privately managed MAVLink network. Can be used
                        // for any purpose but may not be published by
                        // components outside of the private network.
mavlink20.MAV_COMP_ID_USER36 = 60 // Id for a component on privately managed MAVLink network. Can be used
                        // for any purpose but may not be published by
                        // components outside of the private network.
mavlink20.MAV_COMP_ID_USER37 = 61 // Id for a component on privately managed MAVLink network. Can be used
                        // for any purpose but may not be published by
                        // components outside of the private network.
mavlink20.MAV_COMP_ID_USER38 = 62 // Id for a component on privately managed MAVLink network. Can be used
                        // for any purpose but may not be published by
                        // components outside of the private network.
mavlink20.MAV_COMP_ID_USER39 = 63 // Id for a component on privately managed MAVLink network. Can be used
                        // for any purpose but may not be published by
                        // components outside of the private network.
mavlink20.MAV_COMP_ID_USER40 = 64 // Id for a component on privately managed MAVLink network. Can be used
                        // for any purpose but may not be published by
                        // components outside of the private network.
mavlink20.MAV_COMP_ID_USER41 = 65 // Id for a component on privately managed MAVLink network. Can be used
                        // for any purpose but may not be published by
                        // components outside of the private network.
mavlink20.MAV_COMP_ID_USER42 = 66 // Id for a component on privately managed MAVLink network. Can be used
                        // for any purpose but may not be published by
                        // components outside of the private network.
mavlink20.MAV_COMP_ID_USER43 = 67 // Id for a component on privately managed MAVLink network. Can be used
                        // for any purpose but may not be published by
                        // components outside of the private network.
mavlink20.MAV_COMP_ID_TELEMETRY_RADIO = 68 // Telemetry radio (e.g. SiK radio, or other component that emits
                        // RADIO_STATUS messages).
mavlink20.MAV_COMP_ID_USER45 = 69 // Id for a component on privately managed MAVLink network. Can be used
                        // for any purpose but may not be published by
                        // components outside of the private network.
mavlink20.MAV_COMP_ID_USER46 = 70 // Id for a component on privately managed MAVLink network. Can be used
                        // for any purpose but may not be published by
                        // components outside of the private network.
mavlink20.MAV_COMP_ID_USER47 = 71 // Id for a component on privately managed MAVLink network. Can be used
                        // for any purpose but may not be published by
                        // components outside of the private network.
mavlink20.MAV_COMP_ID_USER48 = 72 // Id for a component on privately managed MAVLink network. Can be used
                        // for any purpose but may not be published by
                        // components outside of the private network.
mavlink20.MAV_COMP_ID_USER49 = 73 // Id for a component on privately managed MAVLink network. Can be used
                        // for any purpose but may not be published by
                        // components outside of the private network.
mavlink20.MAV_COMP_ID_USER50 = 74 // Id for a component on privately managed MAVLink network. Can be used
                        // for any purpose but may not be published by
                        // components outside of the private network.
mavlink20.MAV_COMP_ID_USER51 = 75 // Id for a component on privately managed MAVLink network. Can be used
                        // for any purpose but may not be published by
                        // components outside of the private network.
mavlink20.MAV_COMP_ID_USER52 = 76 // Id for a component on privately managed MAVLink network. Can be used
                        // for any purpose but may not be published by
                        // components outside of the private network.
mavlink20.MAV_COMP_ID_USER53 = 77 // Id for a component on privately managed MAVLink network. Can be used
                        // for any purpose but may not be published by
                        // components outside of the private network.
mavlink20.MAV_COMP_ID_USER54 = 78 // Id for a component on privately managed MAVLink network. Can be used
                        // for any purpose but may not be published by
                        // components outside of the private network.
mavlink20.MAV_COMP_ID_USER55 = 79 // Id for a component on privately managed MAVLink network. Can be used
                        // for any purpose but may not be published by
                        // components outside of the private network.
mavlink20.MAV_COMP_ID_USER56 = 80 // Id for a component on privately managed MAVLink network. Can be used
                        // for any purpose but may not be published by
                        // components outside of the private network.
mavlink20.MAV_COMP_ID_USER57 = 81 // Id for a component on privately managed MAVLink network. Can be used
                        // for any purpose but may not be published by
                        // components outside of the private network.
mavlink20.MAV_COMP_ID_USER58 = 82 // Id for a component on privately managed MAVLink network. Can be used
                        // for any purpose but may not be published by
                        // components outside of the private network.
mavlink20.MAV_COMP_ID_USER59 = 83 // Id for a component on privately managed MAVLink network. Can be used
                        // for any purpose but may not be published by
                        // components outside of the private network.
mavlink20.MAV_COMP_ID_USER60 = 84 // Id for a component on privately managed MAVLink network. Can be used
                        // for any purpose but may not be published by
                        // components outside of the private network.
mavlink20.MAV_COMP_ID_USER61 = 85 // Id for a component on privately managed MAVLink network. Can be used
                        // for any purpose but may not be published by
                        // components outside of the private network.
mavlink20.MAV_COMP_ID_USER62 = 86 // Id for a component on privately managed MAVLink network. Can be used
                        // for any purpose but may not be published by
                        // components outside of the private network.
mavlink20.MAV_COMP_ID_USER63 = 87 // Id for a component on privately managed MAVLink network. Can be used
                        // for any purpose but may not be published by
                        // components outside of the private network.
mavlink20.MAV_COMP_ID_USER64 = 88 // Id for a component on privately managed MAVLink network. Can be used
                        // for any purpose but may not be published by
                        // components outside of the private network.
mavlink20.MAV_COMP_ID_USER65 = 89 // Id for a component on privately managed MAVLink network. Can be used
                        // for any purpose but may not be published by
                        // components outside of the private network.
mavlink20.MAV_COMP_ID_USER66 = 90 // Id for a component on privately managed MAVLink network. Can be used
                        // for any purpose but may not be published by
                        // components outside of the private network.
mavlink20.MAV_COMP_ID_USER67 = 91 // Id for a component on privately managed MAVLink network. Can be used
                        // for any purpose but may not be published by
                        // components outside of the private network.
mavlink20.MAV_COMP_ID_USER68 = 92 // Id for a component on privately managed MAVLink network. Can be used
                        // for any purpose but may not be published by
                        // components outside of the private network.
mavlink20.MAV_COMP_ID_USER69 = 93 // Id for a component on privately managed MAVLink network. Can be used
                        // for any purpose but may not be published by
                        // components outside of the private network.
mavlink20.MAV_COMP_ID_USER70 = 94 // Id for a component on privately managed MAVLink network. Can be used
                        // for any purpose but may not be published by
                        // components outside of the private network.
mavlink20.MAV_COMP_ID_USER71 = 95 // Id for a component on privately managed MAVLink network. Can be used
                        // for any purpose but may not be published by
                        // components outside of the private network.
mavlink20.MAV_COMP_ID_USER72 = 96 // Id for a component on privately managed MAVLink network. Can be used
                        // for any purpose but may not be published by
                        // components outside of the private network.
mavlink20.MAV_COMP_ID_USER73 = 97 // Id for a component on privately managed MAVLink network. Can be used
                        // for any purpose but may not be published by
                        // components outside of the private network.
mavlink20.MAV_COMP_ID_USER74 = 98 // Id for a component on privately managed MAVLink network. Can be used
                        // for any purpose but may not be published by
                        // components outside of the private network.
mavlink20.MAV_COMP_ID_USER75 = 99 // Id for a component on privately managed MAVLink network. Can be used
                        // for any purpose but may not be published by
                        // components outside of the private network.
mavlink20.MAV_COMP_ID_CAMERA = 100 // Camera #1.
mavlink20.MAV_COMP_ID_CAMERA2 = 101 // Camera #2.
mavlink20.MAV_COMP_ID_CAMERA3 = 102 // Camera #3.
mavlink20.MAV_COMP_ID_CAMERA4 = 103 // Camera #4.
mavlink20.MAV_COMP_ID_CAMERA5 = 104 // Camera #5.
mavlink20.MAV_COMP_ID_CAMERA6 = 105 // Camera #6.
mavlink20.MAV_COMP_ID_SERVO1 = 140 // Servo #1.
mavlink20.MAV_COMP_ID_SERVO2 = 141 // Servo #2.
mavlink20.MAV_COMP_ID_SERVO3 = 142 // Servo #3.
mavlink20.MAV_COMP_ID_SERVO4 = 143 // Servo #4.
mavlink20.MAV_COMP_ID_SERVO5 = 144 // Servo #5.
mavlink20.MAV_COMP_ID_SERVO6 = 145 // Servo #6.
mavlink20.MAV_COMP_ID_SERVO7 = 146 // Servo #7.
mavlink20.MAV_COMP_ID_SERVO8 = 147 // Servo #8.
mavlink20.MAV_COMP_ID_SERVO9 = 148 // Servo #9.
mavlink20.MAV_COMP_ID_SERVO10 = 149 // Servo #10.
mavlink20.MAV_COMP_ID_SERVO11 = 150 // Servo #11.
mavlink20.MAV_COMP_ID_SERVO12 = 151 // Servo #12.
mavlink20.MAV_COMP_ID_SERVO13 = 152 // Servo #13.
mavlink20.MAV_COMP_ID_SERVO14 = 153 // Servo #14.
mavlink20.MAV_COMP_ID_GIMBAL = 154 // Gimbal #1.
mavlink20.MAV_COMP_ID_LOG = 155 // Logging component.
mavlink20.MAV_COMP_ID_ADSB = 156 // Automatic Dependent Surveillance-Broadcast (ADS-B) component.
mavlink20.MAV_COMP_ID_OSD = 157 // On Screen Display (OSD) devices for video links.
mavlink20.MAV_COMP_ID_PERIPHERAL = 158 // Generic autopilot peripheral component ID. Meant for devices that do
                        // not implement the parameter microservice.
mavlink20.MAV_COMP_ID_QX1_GIMBAL = 159 // Gimbal ID for QX1.
mavlink20.MAV_COMP_ID_FLARM = 160 // FLARM collision alert component.
mavlink20.MAV_COMP_ID_PARACHUTE = 161 // Parachute component.
mavlink20.MAV_COMP_ID_GIMBAL2 = 171 // Gimbal #2.
mavlink20.MAV_COMP_ID_GIMBAL3 = 172 // Gimbal #3.
mavlink20.MAV_COMP_ID_GIMBAL4 = 173 // Gimbal #4
mavlink20.MAV_COMP_ID_GIMBAL5 = 174 // Gimbal #5.
mavlink20.MAV_COMP_ID_GIMBAL6 = 175 // Gimbal #6.
mavlink20.MAV_COMP_ID_BATTERY = 180 // Battery #1.
mavlink20.MAV_COMP_ID_BATTERY2 = 181 // Battery #2.
mavlink20.MAV_COMP_ID_MAVCAN = 189 // CAN over MAVLink client.
mavlink20.MAV_COMP_ID_MISSIONPLANNER = 190 // Component that can generate/supply a mission flight plan (e.g. GCS or
                        // developer API).
mavlink20.MAV_COMP_ID_ONBOARD_COMPUTER = 191 // Component that lives on the onboard computer (companion computer) and
                        // has some generic functionalities, such as
                        // settings system parameters and monitoring
                        // the status of some processes that don't
                        // directly speak mavlink and so on.
mavlink20.MAV_COMP_ID_ONBOARD_COMPUTER2 = 192 // Component that lives on the onboard computer (companion computer) and
                        // has some generic functionalities, such as
                        // settings system parameters and monitoring
                        // the status of some processes that don't
                        // directly speak mavlink and so on.
mavlink20.MAV_COMP_ID_ONBOARD_COMPUTER3 = 193 // Component that lives on the onboard computer (companion computer) and
                        // has some generic functionalities, such as
                        // settings system parameters and monitoring
                        // the status of some processes that don't
                        // directly speak mavlink and so on.
mavlink20.MAV_COMP_ID_ONBOARD_COMPUTER4 = 194 // Component that lives on the onboard computer (companion computer) and
                        // has some generic functionalities, such as
                        // settings system parameters and monitoring
                        // the status of some processes that don't
                        // directly speak mavlink and so on.
mavlink20.MAV_COMP_ID_PATHPLANNER = 195 // Component that finds an optimal path between points based on a certain
                        // constraint (e.g. minimum snap, shortest
                        // path, cost, etc.).
mavlink20.MAV_COMP_ID_OBSTACLE_AVOIDANCE = 196 // Component that plans a collision free path between two points.
mavlink20.MAV_COMP_ID_VISUAL_INERTIAL_ODOMETRY = 197 // Component that provides position estimates using VIO techniques.
mavlink20.MAV_COMP_ID_PAIRING_MANAGER = 198 // Component that manages pairing of vehicle and GCS.
mavlink20.MAV_COMP_ID_IMU = 200 // Inertial Measurement Unit (IMU) #1.
mavlink20.MAV_COMP_ID_IMU_2 = 201 // Inertial Measurement Unit (IMU) #2.
mavlink20.MAV_COMP_ID_IMU_3 = 202 // Inertial Measurement Unit (IMU) #3.
mavlink20.MAV_COMP_ID_GPS = 220 // GPS #1.
mavlink20.MAV_COMP_ID_GPS2 = 221 // GPS #2.
mavlink20.MAV_COMP_ID_ODID_TXRX_1 = 236 // Open Drone ID transmitter/receiver (Bluetooth/WiFi/Internet).
mavlink20.MAV_COMP_ID_ODID_TXRX_2 = 237 // Open Drone ID transmitter/receiver (Bluetooth/WiFi/Internet).
mavlink20.MAV_COMP_ID_ODID_TXRX_3 = 238 // Open Drone ID transmitter/receiver (Bluetooth/WiFi/Internet).
mavlink20.MAV_COMP_ID_UDP_BRIDGE = 240 // Component to bridge MAVLink to UDP (i.e. from a UART).
mavlink20.MAV_COMP_ID_UART_BRIDGE = 241 // Component to bridge to UART (i.e. from UDP).
mavlink20.MAV_COMP_ID_TUNNEL_NODE = 242 // Component handling TUNNEL messages (e.g. vendor specific GUI of a
                        // component).
mavlink20.MAV_COMP_ID_SYSTEM_CONTROL = 250 // Component for handling system messages (e.g. to ARM, takeoff, etc.).
mavlink20.MAV_COMPONENT_ENUM_END = 251 // 

// message IDs
mavlink20.MAVLINK_MSG_ID_BAD_DATA = -1
mavlink20.MAVLINK_MSG_ID_SENSOR_OFFSETS = 150
mavlink20.MAVLINK_MSG_ID_SET_MAG_OFFSETS = 151
mavlink20.MAVLINK_MSG_ID_MEMINFO = 152
mavlink20.MAVLINK_MSG_ID_AP_ADC = 153
mavlink20.MAVLINK_MSG_ID_DIGICAM_CONFIGURE = 154
mavlink20.MAVLINK_MSG_ID_DIGICAM_CONTROL = 155
mavlink20.MAVLINK_MSG_ID_MOUNT_CONFIGURE = 156
mavlink20.MAVLINK_MSG_ID_MOUNT_CONTROL = 157
mavlink20.MAVLINK_MSG_ID_MOUNT_STATUS = 158
mavlink20.MAVLINK_MSG_ID_FENCE_POINT = 160
mavlink20.MAVLINK_MSG_ID_FENCE_FETCH_POINT = 161
mavlink20.MAVLINK_MSG_ID_AHRS = 163
mavlink20.MAVLINK_MSG_ID_SIMSTATE = 164
mavlink20.MAVLINK_MSG_ID_HWSTATUS = 165
mavlink20.MAVLINK_MSG_ID_RADIO = 166
mavlink20.MAVLINK_MSG_ID_LIMITS_STATUS = 167
mavlink20.MAVLINK_MSG_ID_WIND = 168
mavlink20.MAVLINK_MSG_ID_DATA16 = 169
mavlink20.MAVLINK_MSG_ID_DATA32 = 170
mavlink20.MAVLINK_MSG_ID_DATA64 = 171
mavlink20.MAVLINK_MSG_ID_DATA96 = 172
mavlink20.MAVLINK_MSG_ID_RANGEFINDER = 173
mavlink20.MAVLINK_MSG_ID_AIRSPEED_AUTOCAL = 174
mavlink20.MAVLINK_MSG_ID_RALLY_POINT = 175
mavlink20.MAVLINK_MSG_ID_RALLY_FETCH_POINT = 176
mavlink20.MAVLINK_MSG_ID_COMPASSMOT_STATUS = 177
mavlink20.MAVLINK_MSG_ID_AHRS2 = 178
mavlink20.MAVLINK_MSG_ID_CAMERA_STATUS = 179
mavlink20.MAVLINK_MSG_ID_CAMERA_FEEDBACK = 180
mavlink20.MAVLINK_MSG_ID_BATTERY2 = 181
mavlink20.MAVLINK_MSG_ID_AHRS3 = 182
mavlink20.MAVLINK_MSG_ID_AUTOPILOT_VERSION_REQUEST = 183
mavlink20.MAVLINK_MSG_ID_REMOTE_LOG_DATA_BLOCK = 184
mavlink20.MAVLINK_MSG_ID_REMOTE_LOG_BLOCK_STATUS = 185
mavlink20.MAVLINK_MSG_ID_LED_CONTROL = 186
mavlink20.MAVLINK_MSG_ID_MAG_CAL_PROGRESS = 191
mavlink20.MAVLINK_MSG_ID_EKF_STATUS_REPORT = 193
mavlink20.MAVLINK_MSG_ID_PID_TUNING = 194
mavlink20.MAVLINK_MSG_ID_DEEPSTALL = 195
mavlink20.MAVLINK_MSG_ID_GIMBAL_REPORT = 200
mavlink20.MAVLINK_MSG_ID_GIMBAL_CONTROL = 201
mavlink20.MAVLINK_MSG_ID_GIMBAL_TORQUE_CMD_REPORT = 214
mavlink20.MAVLINK_MSG_ID_GOPRO_HEARTBEAT = 215
mavlink20.MAVLINK_MSG_ID_GOPRO_GET_REQUEST = 216
mavlink20.MAVLINK_MSG_ID_GOPRO_GET_RESPONSE = 217
mavlink20.MAVLINK_MSG_ID_GOPRO_SET_REQUEST = 218
mavlink20.MAVLINK_MSG_ID_GOPRO_SET_RESPONSE = 219
mavlink20.MAVLINK_MSG_ID_RPM = 226
mavlink20.MAVLINK_MSG_ID_DEVICE_OP_READ = 11000
mavlink20.MAVLINK_MSG_ID_DEVICE_OP_READ_REPLY = 11001
mavlink20.MAVLINK_MSG_ID_DEVICE_OP_WRITE = 11002
mavlink20.MAVLINK_MSG_ID_DEVICE_OP_WRITE_REPLY = 11003
mavlink20.MAVLINK_MSG_ID_SECURE_COMMAND = 11004
mavlink20.MAVLINK_MSG_ID_SECURE_COMMAND_REPLY = 11005
mavlink20.MAVLINK_MSG_ID_ADAP_TUNING = 11010
mavlink20.MAVLINK_MSG_ID_VISION_POSITION_DELTA = 11011
mavlink20.MAVLINK_MSG_ID_AOA_SSA = 11020
mavlink20.MAVLINK_MSG_ID_ESC_TELEMETRY_1_TO_4 = 11030
mavlink20.MAVLINK_MSG_ID_ESC_TELEMETRY_5_TO_8 = 11031
mavlink20.MAVLINK_MSG_ID_ESC_TELEMETRY_9_TO_12 = 11032
mavlink20.MAVLINK_MSG_ID_OSD_PARAM_CONFIG = 11033
mavlink20.MAVLINK_MSG_ID_OSD_PARAM_CONFIG_REPLY = 11034
mavlink20.MAVLINK_MSG_ID_OSD_PARAM_SHOW_CONFIG = 11035
mavlink20.MAVLINK_MSG_ID_OSD_PARAM_SHOW_CONFIG_REPLY = 11036
mavlink20.MAVLINK_MSG_ID_OBSTACLE_DISTANCE_3D = 11037
mavlink20.MAVLINK_MSG_ID_WATER_DEPTH = 11038
mavlink20.MAVLINK_MSG_ID_MCU_STATUS = 11039
mavlink20.MAVLINK_MSG_ID_ESC_TELEMETRY_13_TO_16 = 11040
mavlink20.MAVLINK_MSG_ID_ESC_TELEMETRY_17_TO_20 = 11041
mavlink20.MAVLINK_MSG_ID_ESC_TELEMETRY_21_TO_24 = 11042
mavlink20.MAVLINK_MSG_ID_ESC_TELEMETRY_25_TO_28 = 11043
mavlink20.MAVLINK_MSG_ID_ESC_TELEMETRY_29_TO_32 = 11044
mavlink20.MAVLINK_MSG_ID_SYS_STATUS = 1
mavlink20.MAVLINK_MSG_ID_SYSTEM_TIME = 2
mavlink20.MAVLINK_MSG_ID_PING = 4
mavlink20.MAVLINK_MSG_ID_CHANGE_OPERATOR_CONTROL = 5
mavlink20.MAVLINK_MSG_ID_CHANGE_OPERATOR_CONTROL_ACK = 6
mavlink20.MAVLINK_MSG_ID_AUTH_KEY = 7
mavlink20.MAVLINK_MSG_ID_SET_MODE = 11
mavlink20.MAVLINK_MSG_ID_PARAM_REQUEST_READ = 20
mavlink20.MAVLINK_MSG_ID_PARAM_REQUEST_LIST = 21
mavlink20.MAVLINK_MSG_ID_PARAM_VALUE = 22
mavlink20.MAVLINK_MSG_ID_PARAM_SET = 23
mavlink20.MAVLINK_MSG_ID_GPS_RAW_INT = 24
mavlink20.MAVLINK_MSG_ID_GPS_STATUS = 25
mavlink20.MAVLINK_MSG_ID_SCALED_IMU = 26
mavlink20.MAVLINK_MSG_ID_RAW_IMU = 27
mavlink20.MAVLINK_MSG_ID_RAW_PRESSURE = 28
mavlink20.MAVLINK_MSG_ID_SCALED_PRESSURE = 29
mavlink20.MAVLINK_MSG_ID_ATTITUDE = 30
mavlink20.MAVLINK_MSG_ID_ATTITUDE_QUATERNION = 31
mavlink20.MAVLINK_MSG_ID_LOCAL_POSITION_NED = 32
mavlink20.MAVLINK_MSG_ID_GLOBAL_POSITION_INT = 33
mavlink20.MAVLINK_MSG_ID_RC_CHANNELS_SCALED = 34
mavlink20.MAVLINK_MSG_ID_RC_CHANNELS_RAW = 35
mavlink20.MAVLINK_MSG_ID_SERVO_OUTPUT_RAW = 36
mavlink20.MAVLINK_MSG_ID_MISSION_REQUEST_PARTIAL_LIST = 37
mavlink20.MAVLINK_MSG_ID_MISSION_WRITE_PARTIAL_LIST = 38
mavlink20.MAVLINK_MSG_ID_MISSION_ITEM = 39
mavlink20.MAVLINK_MSG_ID_MISSION_REQUEST = 40
mavlink20.MAVLINK_MSG_ID_MISSION_SET_CURRENT = 41
mavlink20.MAVLINK_MSG_ID_MISSION_CURRENT = 42
mavlink20.MAVLINK_MSG_ID_MISSION_REQUEST_LIST = 43
mavlink20.MAVLINK_MSG_ID_MISSION_COUNT = 44
mavlink20.MAVLINK_MSG_ID_MISSION_CLEAR_ALL = 45
mavlink20.MAVLINK_MSG_ID_MISSION_ITEM_REACHED = 46
mavlink20.MAVLINK_MSG_ID_MISSION_ACK = 47
mavlink20.MAVLINK_MSG_ID_SET_GPS_GLOBAL_ORIGIN = 48
mavlink20.MAVLINK_MSG_ID_GPS_GLOBAL_ORIGIN = 49
mavlink20.MAVLINK_MSG_ID_PARAM_MAP_RC = 50
mavlink20.MAVLINK_MSG_ID_MISSION_REQUEST_INT = 51
mavlink20.MAVLINK_MSG_ID_SAFETY_SET_ALLOWED_AREA = 54
mavlink20.MAVLINK_MSG_ID_SAFETY_ALLOWED_AREA = 55
mavlink20.MAVLINK_MSG_ID_ATTITUDE_QUATERNION_COV = 61
mavlink20.MAVLINK_MSG_ID_NAV_CONTROLLER_OUTPUT = 62
mavlink20.MAVLINK_MSG_ID_GLOBAL_POSITION_INT_COV = 63
mavlink20.MAVLINK_MSG_ID_LOCAL_POSITION_NED_COV = 64
mavlink20.MAVLINK_MSG_ID_RC_CHANNELS = 65
mavlink20.MAVLINK_MSG_ID_REQUEST_DATA_STREAM = 66
mavlink20.MAVLINK_MSG_ID_DATA_STREAM = 67
mavlink20.MAVLINK_MSG_ID_MANUAL_CONTROL = 69
mavlink20.MAVLINK_MSG_ID_RC_CHANNELS_OVERRIDE = 70
mavlink20.MAVLINK_MSG_ID_MISSION_ITEM_INT = 73
mavlink20.MAVLINK_MSG_ID_VFR_HUD = 74
mavlink20.MAVLINK_MSG_ID_COMMAND_INT = 75
mavlink20.MAVLINK_MSG_ID_COMMAND_LONG = 76
mavlink20.MAVLINK_MSG_ID_COMMAND_ACK = 77
mavlink20.MAVLINK_MSG_ID_MANUAL_SETPOINT = 81
mavlink20.MAVLINK_MSG_ID_SET_ATTITUDE_TARGET = 82
mavlink20.MAVLINK_MSG_ID_ATTITUDE_TARGET = 83
mavlink20.MAVLINK_MSG_ID_SET_POSITION_TARGET_LOCAL_NED = 84
mavlink20.MAVLINK_MSG_ID_POSITION_TARGET_LOCAL_NED = 85
mavlink20.MAVLINK_MSG_ID_SET_POSITION_TARGET_GLOBAL_INT = 86
mavlink20.MAVLINK_MSG_ID_POSITION_TARGET_GLOBAL_INT = 87
mavlink20.MAVLINK_MSG_ID_LOCAL_POSITION_NED_SYSTEM_GLOBAL_OFFSET = 89
mavlink20.MAVLINK_MSG_ID_HIL_STATE = 90
mavlink20.MAVLINK_MSG_ID_HIL_CONTROLS = 91
mavlink20.MAVLINK_MSG_ID_HIL_RC_INPUTS_RAW = 92
mavlink20.MAVLINK_MSG_ID_HIL_ACTUATOR_CONTROLS = 93
mavlink20.MAVLINK_MSG_ID_OPTICAL_FLOW = 100
mavlink20.MAVLINK_MSG_ID_GLOBAL_VISION_POSITION_ESTIMATE = 101
mavlink20.MAVLINK_MSG_ID_VISION_POSITION_ESTIMATE = 102
mavlink20.MAVLINK_MSG_ID_VISION_SPEED_ESTIMATE = 103
mavlink20.MAVLINK_MSG_ID_VICON_POSITION_ESTIMATE = 104
mavlink20.MAVLINK_MSG_ID_HIGHRES_IMU = 105
mavlink20.MAVLINK_MSG_ID_OPTICAL_FLOW_RAD = 106
mavlink20.MAVLINK_MSG_ID_HIL_SENSOR = 107
mavlink20.MAVLINK_MSG_ID_SIM_STATE = 108
mavlink20.MAVLINK_MSG_ID_RADIO_STATUS = 109
mavlink20.MAVLINK_MSG_ID_FILE_TRANSFER_PROTOCOL = 110
mavlink20.MAVLINK_MSG_ID_TIMESYNC = 111
mavlink20.MAVLINK_MSG_ID_CAMERA_TRIGGER = 112
mavlink20.MAVLINK_MSG_ID_HIL_GPS = 113
mavlink20.MAVLINK_MSG_ID_HIL_OPTICAL_FLOW = 114
mavlink20.MAVLINK_MSG_ID_HIL_STATE_QUATERNION = 115
mavlink20.MAVLINK_MSG_ID_SCALED_IMU2 = 116
mavlink20.MAVLINK_MSG_ID_LOG_REQUEST_LIST = 117
mavlink20.MAVLINK_MSG_ID_LOG_ENTRY = 118
mavlink20.MAVLINK_MSG_ID_LOG_REQUEST_DATA = 119
mavlink20.MAVLINK_MSG_ID_LOG_DATA = 120
mavlink20.MAVLINK_MSG_ID_LOG_ERASE = 121
mavlink20.MAVLINK_MSG_ID_LOG_REQUEST_END = 122
mavlink20.MAVLINK_MSG_ID_GPS_INJECT_DATA = 123
mavlink20.MAVLINK_MSG_ID_GPS2_RAW = 124
mavlink20.MAVLINK_MSG_ID_POWER_STATUS = 125
mavlink20.MAVLINK_MSG_ID_SERIAL_CONTROL = 126
mavlink20.MAVLINK_MSG_ID_GPS_RTK = 127
mavlink20.MAVLINK_MSG_ID_GPS2_RTK = 128
mavlink20.MAVLINK_MSG_ID_SCALED_IMU3 = 129
mavlink20.MAVLINK_MSG_ID_DATA_TRANSMISSION_HANDSHAKE = 130
mavlink20.MAVLINK_MSG_ID_ENCAPSULATED_DATA = 131
mavlink20.MAVLINK_MSG_ID_DISTANCE_SENSOR = 132
mavlink20.MAVLINK_MSG_ID_TERRAIN_REQUEST = 133
mavlink20.MAVLINK_MSG_ID_TERRAIN_DATA = 134
mavlink20.MAVLINK_MSG_ID_TERRAIN_CHECK = 135
mavlink20.MAVLINK_MSG_ID_TERRAIN_REPORT = 136
mavlink20.MAVLINK_MSG_ID_SCALED_PRESSURE2 = 137
mavlink20.MAVLINK_MSG_ID_ATT_POS_MOCAP = 138
mavlink20.MAVLINK_MSG_ID_SET_ACTUATOR_CONTROL_TARGET = 139
mavlink20.MAVLINK_MSG_ID_ACTUATOR_CONTROL_TARGET = 140
mavlink20.MAVLINK_MSG_ID_ALTITUDE = 141
mavlink20.MAVLINK_MSG_ID_RESOURCE_REQUEST = 142
mavlink20.MAVLINK_MSG_ID_SCALED_PRESSURE3 = 143
mavlink20.MAVLINK_MSG_ID_FOLLOW_TARGET = 144
mavlink20.MAVLINK_MSG_ID_CONTROL_SYSTEM_STATE = 146
mavlink20.MAVLINK_MSG_ID_BATTERY_STATUS = 147
mavlink20.MAVLINK_MSG_ID_AUTOPILOT_VERSION = 148
mavlink20.MAVLINK_MSG_ID_LANDING_TARGET = 149
mavlink20.MAVLINK_MSG_ID_FENCE_STATUS = 162
mavlink20.MAVLINK_MSG_ID_MAG_CAL_REPORT = 192
mavlink20.MAVLINK_MSG_ID_EFI_STATUS = 225
mavlink20.MAVLINK_MSG_ID_ESTIMATOR_STATUS = 230
mavlink20.MAVLINK_MSG_ID_WIND_COV = 231
mavlink20.MAVLINK_MSG_ID_GPS_INPUT = 232
mavlink20.MAVLINK_MSG_ID_GPS_RTCM_DATA = 233
mavlink20.MAVLINK_MSG_ID_HIGH_LATENCY = 234
mavlink20.MAVLINK_MSG_ID_HIGH_LATENCY2 = 235
mavlink20.MAVLINK_MSG_ID_VIBRATION = 241
mavlink20.MAVLINK_MSG_ID_HOME_POSITION = 242
mavlink20.MAVLINK_MSG_ID_SET_HOME_POSITION = 243
mavlink20.MAVLINK_MSG_ID_MESSAGE_INTERVAL = 244
mavlink20.MAVLINK_MSG_ID_EXTENDED_SYS_STATE = 245
mavlink20.MAVLINK_MSG_ID_ADSB_VEHICLE = 246
mavlink20.MAVLINK_MSG_ID_COLLISION = 247
mavlink20.MAVLINK_MSG_ID_V2_EXTENSION = 248
mavlink20.MAVLINK_MSG_ID_MEMORY_VECT = 249
mavlink20.MAVLINK_MSG_ID_DEBUG_VECT = 250
mavlink20.MAVLINK_MSG_ID_NAMED_VALUE_FLOAT = 251
mavlink20.MAVLINK_MSG_ID_NAMED_VALUE_INT = 252
mavlink20.MAVLINK_MSG_ID_STATUSTEXT = 253
mavlink20.MAVLINK_MSG_ID_DEBUG = 254
mavlink20.MAVLINK_MSG_ID_SETUP_SIGNING = 256
mavlink20.MAVLINK_MSG_ID_BUTTON_CHANGE = 257
mavlink20.MAVLINK_MSG_ID_PLAY_TUNE = 258
mavlink20.MAVLINK_MSG_ID_CAMERA_INFORMATION = 259
mavlink20.MAVLINK_MSG_ID_CAMERA_SETTINGS = 260
mavlink20.MAVLINK_MSG_ID_STORAGE_INFORMATION = 261
mavlink20.MAVLINK_MSG_ID_CAMERA_CAPTURE_STATUS = 262
mavlink20.MAVLINK_MSG_ID_CAMERA_IMAGE_CAPTURED = 263
mavlink20.MAVLINK_MSG_ID_FLIGHT_INFORMATION = 264
mavlink20.MAVLINK_MSG_ID_MOUNT_ORIENTATION = 265
mavlink20.MAVLINK_MSG_ID_LOGGING_DATA = 266
mavlink20.MAVLINK_MSG_ID_LOGGING_DATA_ACKED = 267
mavlink20.MAVLINK_MSG_ID_LOGGING_ACK = 268
mavlink20.MAVLINK_MSG_ID_VIDEO_STREAM_INFORMATION = 269
mavlink20.MAVLINK_MSG_ID_VIDEO_STREAM_STATUS = 270
mavlink20.MAVLINK_MSG_ID_CAMERA_FOV_STATUS = 271
mavlink20.MAVLINK_MSG_ID_CAMERA_TRACKING_IMAGE_STATUS = 275
mavlink20.MAVLINK_MSG_ID_CAMERA_TRACKING_GEO_STATUS = 276
mavlink20.MAVLINK_MSG_ID_GIMBAL_MANAGER_INFORMATION = 280
mavlink20.MAVLINK_MSG_ID_GIMBAL_MANAGER_STATUS = 281
mavlink20.MAVLINK_MSG_ID_GIMBAL_MANAGER_SET_ATTITUDE = 282
mavlink20.MAVLINK_MSG_ID_GIMBAL_DEVICE_INFORMATION = 283
mavlink20.MAVLINK_MSG_ID_GIMBAL_DEVICE_SET_ATTITUDE = 284
mavlink20.MAVLINK_MSG_ID_GIMBAL_DEVICE_ATTITUDE_STATUS = 285
mavlink20.MAVLINK_MSG_ID_AUTOPILOT_STATE_FOR_GIMBAL_DEVICE = 286
mavlink20.MAVLINK_MSG_ID_GIMBAL_MANAGER_SET_PITCHYAW = 287
mavlink20.MAVLINK_MSG_ID_GIMBAL_MANAGER_SET_MANUAL_CONTROL = 288
mavlink20.MAVLINK_MSG_ID_WIFI_CONFIG_AP = 299
mavlink20.MAVLINK_MSG_ID_AIS_VESSEL = 301
mavlink20.MAVLINK_MSG_ID_UAVCAN_NODE_STATUS = 310
mavlink20.MAVLINK_MSG_ID_UAVCAN_NODE_INFO = 311
mavlink20.MAVLINK_MSG_ID_PARAM_EXT_REQUEST_READ = 320
mavlink20.MAVLINK_MSG_ID_PARAM_EXT_REQUEST_LIST = 321
mavlink20.MAVLINK_MSG_ID_PARAM_EXT_VALUE = 322
mavlink20.MAVLINK_MSG_ID_PARAM_EXT_SET = 323
mavlink20.MAVLINK_MSG_ID_PARAM_EXT_ACK = 324
mavlink20.MAVLINK_MSG_ID_OBSTACLE_DISTANCE = 330
mavlink20.MAVLINK_MSG_ID_ODOMETRY = 331
mavlink20.MAVLINK_MSG_ID_ISBD_LINK_STATUS = 335
mavlink20.MAVLINK_MSG_ID_RAW_RPM = 339
mavlink20.MAVLINK_MSG_ID_UTM_GLOBAL_POSITION = 340
mavlink20.MAVLINK_MSG_ID_DEBUG_FLOAT_ARRAY = 350
mavlink20.MAVLINK_MSG_ID_SMART_BATTERY_INFO = 370
mavlink20.MAVLINK_MSG_ID_GENERATOR_STATUS = 373
mavlink20.MAVLINK_MSG_ID_ACTUATOR_OUTPUT_STATUS = 375
mavlink20.MAVLINK_MSG_ID_RELAY_STATUS = 376
mavlink20.MAVLINK_MSG_ID_TUNNEL = 385
mavlink20.MAVLINK_MSG_ID_CAN_FRAME = 386
mavlink20.MAVLINK_MSG_ID_CANFD_FRAME = 387
mavlink20.MAVLINK_MSG_ID_CAN_FILTER_MODIFY = 388
mavlink20.MAVLINK_MSG_ID_WHEEL_DISTANCE = 9000
mavlink20.MAVLINK_MSG_ID_WINCH_STATUS = 9005
mavlink20.MAVLINK_MSG_ID_OPEN_DRONE_ID_BASIC_ID = 12900
mavlink20.MAVLINK_MSG_ID_OPEN_DRONE_ID_LOCATION = 12901
mavlink20.MAVLINK_MSG_ID_OPEN_DRONE_ID_AUTHENTICATION = 12902
mavlink20.MAVLINK_MSG_ID_OPEN_DRONE_ID_SELF_ID = 12903
mavlink20.MAVLINK_MSG_ID_OPEN_DRONE_ID_SYSTEM = 12904
mavlink20.MAVLINK_MSG_ID_OPEN_DRONE_ID_OPERATOR_ID = 12905
mavlink20.MAVLINK_MSG_ID_OPEN_DRONE_ID_ARM_STATUS = 12918
mavlink20.MAVLINK_MSG_ID_OPEN_DRONE_ID_MESSAGE_PACK = 12915
mavlink20.MAVLINK_MSG_ID_OPEN_DRONE_ID_SYSTEM_UPDATE = 12919
mavlink20.MAVLINK_MSG_ID_HYGROMETER_SENSOR = 12920
mavlink20.MAVLINK_MSG_ID_UAVIONIX_ADSB_OUT_CFG = 10001
mavlink20.MAVLINK_MSG_ID_UAVIONIX_ADSB_OUT_DYNAMIC = 10002
mavlink20.MAVLINK_MSG_ID_UAVIONIX_ADSB_TRANSCEIVER_HEALTH_REPORT = 10003
mavlink20.MAVLINK_MSG_ID_UAVIONIX_ADSB_OUT_CFG_REGISTRATION = 10004
mavlink20.MAVLINK_MSG_ID_UAVIONIX_ADSB_OUT_CFG_FLIGHTID = 10005
mavlink20.MAVLINK_MSG_ID_UAVIONIX_ADSB_GET = 10006
mavlink20.MAVLINK_MSG_ID_UAVIONIX_ADSB_OUT_CONTROL = 10007
mavlink20.MAVLINK_MSG_ID_UAVIONIX_ADSB_OUT_STATUS = 10008
mavlink20.MAVLINK_MSG_ID_ICAROUS_HEARTBEAT = 42000
mavlink20.MAVLINK_MSG_ID_ICAROUS_KINEMATIC_BANDS = 42001
mavlink20.MAVLINK_MSG_ID_LOWEHEISER_GOV_EFI = 10151
mavlink20.MAVLINK_MSG_ID_CUBEPILOT_RAW_RC = 50001
mavlink20.MAVLINK_MSG_ID_HERELINK_VIDEO_STREAM_INFORMATION = 50002
mavlink20.MAVLINK_MSG_ID_HERELINK_TELEM = 50003
mavlink20.MAVLINK_MSG_ID_CUBEPILOT_FIRMWARE_UPDATE_START = 50004
mavlink20.MAVLINK_MSG_ID_CUBEPILOT_FIRMWARE_UPDATE_RESP = 50005
mavlink20.MAVLINK_MSG_ID_AIRLINK_AUTH = 52000
mavlink20.MAVLINK_MSG_ID_AIRLINK_AUTH_RESPONSE = 52001
mavlink20.MAVLINK_MSG_ID_HEARTBEAT = 0
mavlink20.messages = {};


/* 
Offsets and calibrations values for hardware sensors. This makes it
easier to debug the calibration process.

                mag_ofs_x                 : Magnetometer X offset. (int16_t)
                mag_ofs_y                 : Magnetometer Y offset. (int16_t)
                mag_ofs_z                 : Magnetometer Z offset. (int16_t)
                mag_declination           : Magnetic declination. (float)
                raw_press                 : Raw pressure from barometer. (int32_t)
                raw_temp                  : Raw temperature from barometer. (int32_t)
                gyro_cal_x                : Gyro X calibration. (float)
                gyro_cal_y                : Gyro Y calibration. (float)
                gyro_cal_z                : Gyro Z calibration. (float)
                accel_cal_x               : Accel X calibration. (float)
                accel_cal_y               : Accel Y calibration. (float)
                accel_cal_z               : Accel Z calibration. (float)

*/
    mavlink20.messages.sensor_offsets = function( ...moreargs ) {
     [ this.mag_ofs_x , this.mag_ofs_y , this.mag_ofs_z , this.mag_declination , this.raw_press , this.raw_temp , this.gyro_cal_x , this.gyro_cal_y , this.gyro_cal_z , this.accel_cal_x , this.accel_cal_y , this.accel_cal_z ] = moreargs;


    this._format = '<fiiffffffhhh';
    this._id = mavlink20.MAVLINK_MSG_ID_SENSOR_OFFSETS;
    this.order_map = [9, 10, 11, 0, 1, 2, 3, 4, 5, 6, 7, 8];
    this.len_map = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1];
    this.array_len_map = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
    this.crc_extra = 134;
    this._name = 'SENSOR_OFFSETS';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['mag_ofs_x', 'mag_ofs_y', 'mag_ofs_z', 'mag_declination', 'raw_press', 'raw_temp', 'gyro_cal_x', 'gyro_cal_y', 'gyro_cal_z', 'accel_cal_x', 'accel_cal_y', 'accel_cal_z'];

}

mavlink20.messages.sensor_offsets.prototype = new mavlink20.message;
mavlink20.messages.sensor_offsets.prototype.pack = function(mav) {
    var orderedfields = [ this.mag_declination, this.raw_press, this.raw_temp, this.gyro_cal_x, this.gyro_cal_y, this.gyro_cal_z, this.accel_cal_x, this.accel_cal_y, this.accel_cal_z, this.mag_ofs_x, this.mag_ofs_y, this.mag_ofs_z];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink20.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
Set the magnetometer offsets

                target_system             : System ID. (uint8_t)
                target_component          : Component ID. (uint8_t)
                mag_ofs_x                 : Magnetometer X offset. (int16_t)
                mag_ofs_y                 : Magnetometer Y offset. (int16_t)
                mag_ofs_z                 : Magnetometer Z offset. (int16_t)

*/
    mavlink20.messages.set_mag_offsets = function( ...moreargs ) {
     [ this.target_system , this.target_component , this.mag_ofs_x , this.mag_ofs_y , this.mag_ofs_z ] = moreargs;


    this._format = '<hhhBB';
    this._id = mavlink20.MAVLINK_MSG_ID_SET_MAG_OFFSETS;
    this.order_map = [3, 4, 0, 1, 2];
    this.len_map = [1, 1, 1, 1, 1];
    this.array_len_map = [0, 0, 0, 0, 0];
    this.crc_extra = 219;
    this._name = 'SET_MAG_OFFSETS';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['target_system', 'target_component', 'mag_ofs_x', 'mag_ofs_y', 'mag_ofs_z'];

}

mavlink20.messages.set_mag_offsets.prototype = new mavlink20.message;
mavlink20.messages.set_mag_offsets.prototype.pack = function(mav) {
    var orderedfields = [ this.mag_ofs_x, this.mag_ofs_y, this.mag_ofs_z, this.target_system, this.target_component];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink20.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
State of autopilot RAM.

                brkval                    : Heap top. (uint16_t)
                freemem                   : Free memory. (uint16_t)
                freemem32                 : Free memory (32 bit). (uint32_t)

*/
    mavlink20.messages.meminfo = function( ...moreargs ) {
     [ this.brkval , this.freemem , this.freemem32 ] = moreargs;


    this._format = '<HHI';
    this._id = mavlink20.MAVLINK_MSG_ID_MEMINFO;
    this.order_map = [0, 1, 2];
    this.len_map = [1, 1, 1];
    this.array_len_map = [0, 0, 0];
    this.crc_extra = 208;
    this._name = 'MEMINFO';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['brkval', 'freemem', 'freemem32'];

}

mavlink20.messages.meminfo.prototype = new mavlink20.message;
mavlink20.messages.meminfo.prototype.pack = function(mav) {
    var orderedfields = [ this.brkval, this.freemem, this.freemem32];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink20.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
Raw ADC output.

                adc1                      : ADC output 1. (uint16_t)
                adc2                      : ADC output 2. (uint16_t)
                adc3                      : ADC output 3. (uint16_t)
                adc4                      : ADC output 4. (uint16_t)
                adc5                      : ADC output 5. (uint16_t)
                adc6                      : ADC output 6. (uint16_t)

*/
    mavlink20.messages.ap_adc = function( ...moreargs ) {
     [ this.adc1 , this.adc2 , this.adc3 , this.adc4 , this.adc5 , this.adc6 ] = moreargs;


    this._format = '<HHHHHH';
    this._id = mavlink20.MAVLINK_MSG_ID_AP_ADC;
    this.order_map = [0, 1, 2, 3, 4, 5];
    this.len_map = [1, 1, 1, 1, 1, 1];
    this.array_len_map = [0, 0, 0, 0, 0, 0];
    this.crc_extra = 188;
    this._name = 'AP_ADC';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['adc1', 'adc2', 'adc3', 'adc4', 'adc5', 'adc6'];

}

mavlink20.messages.ap_adc.prototype = new mavlink20.message;
mavlink20.messages.ap_adc.prototype.pack = function(mav) {
    var orderedfields = [ this.adc1, this.adc2, this.adc3, this.adc4, this.adc5, this.adc6];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink20.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
Configure on-board Camera Control System.

                target_system             : System ID. (uint8_t)
                target_component          : Component ID. (uint8_t)
                mode                      : Mode enumeration from 1 to N //P, TV, AV, M, etc. (0 means ignore). (uint8_t)
                shutter_speed             : Divisor number //e.g. 1000 means 1/1000 (0 means ignore). (uint16_t)
                aperture                  : F stop number x 10 //e.g. 28 means 2.8 (0 means ignore). (uint8_t)
                iso                       : ISO enumeration from 1 to N //e.g. 80, 100, 200, Etc (0 means ignore). (uint8_t)
                exposure_type             : Exposure type enumeration from 1 to N (0 means ignore). (uint8_t)
                command_id                : Command Identity (incremental loop: 0 to 255). //A command sent multiple times will be executed or pooled just once. (uint8_t)
                engine_cut_off            : Main engine cut-off time before camera trigger (0 means no cut-off). (uint8_t)
                extra_param               : Extra parameters enumeration (0 means ignore). (uint8_t)
                extra_value               : Correspondent value to given extra_param. (float)

*/
    mavlink20.messages.digicam_configure = function( ...moreargs ) {
     [ this.target_system , this.target_component , this.mode , this.shutter_speed , this.aperture , this.iso , this.exposure_type , this.command_id , this.engine_cut_off , this.extra_param , this.extra_value ] = moreargs;


    this._format = '<fHBBBBBBBBB';
    this._id = mavlink20.MAVLINK_MSG_ID_DIGICAM_CONFIGURE;
    this.order_map = [2, 3, 4, 1, 5, 6, 7, 8, 9, 10, 0];
    this.len_map = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1];
    this.array_len_map = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
    this.crc_extra = 84;
    this._name = 'DIGICAM_CONFIGURE';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['target_system', 'target_component', 'mode', 'shutter_speed', 'aperture', 'iso', 'exposure_type', 'command_id', 'engine_cut_off', 'extra_param', 'extra_value'];

}

mavlink20.messages.digicam_configure.prototype = new mavlink20.message;
mavlink20.messages.digicam_configure.prototype.pack = function(mav) {
    var orderedfields = [ this.extra_value, this.shutter_speed, this.target_system, this.target_component, this.mode, this.aperture, this.iso, this.exposure_type, this.command_id, this.engine_cut_off, this.extra_param];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink20.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
Control on-board Camera Control System to take shots.

                target_system             : System ID. (uint8_t)
                target_component          : Component ID. (uint8_t)
                session                   : 0: stop, 1: start or keep it up //Session control e.g. show/hide lens. (uint8_t)
                zoom_pos                  : 1 to N //Zoom's absolute position (0 means ignore). (uint8_t)
                zoom_step                 : -100 to 100 //Zooming step value to offset zoom from the current position. (int8_t)
                focus_lock                : 0: unlock focus or keep unlocked, 1: lock focus or keep locked, 3: re-lock focus. (uint8_t)
                shot                      : 0: ignore, 1: shot or start filming. (uint8_t)
                command_id                : Command Identity (incremental loop: 0 to 255)//A command sent multiple times will be executed or pooled just once. (uint8_t)
                extra_param               : Extra parameters enumeration (0 means ignore). (uint8_t)
                extra_value               : Correspondent value to given extra_param. (float)

*/
    mavlink20.messages.digicam_control = function( ...moreargs ) {
     [ this.target_system , this.target_component , this.session , this.zoom_pos , this.zoom_step , this.focus_lock , this.shot , this.command_id , this.extra_param , this.extra_value ] = moreargs;


    this._format = '<fBBBBbBBBB';
    this._id = mavlink20.MAVLINK_MSG_ID_DIGICAM_CONTROL;
    this.order_map = [1, 2, 3, 4, 5, 6, 7, 8, 9, 0];
    this.len_map = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1];
    this.array_len_map = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
    this.crc_extra = 22;
    this._name = 'DIGICAM_CONTROL';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['target_system', 'target_component', 'session', 'zoom_pos', 'zoom_step', 'focus_lock', 'shot', 'command_id', 'extra_param', 'extra_value'];

}

mavlink20.messages.digicam_control.prototype = new mavlink20.message;
mavlink20.messages.digicam_control.prototype.pack = function(mav) {
    var orderedfields = [ this.extra_value, this.target_system, this.target_component, this.session, this.zoom_pos, this.zoom_step, this.focus_lock, this.shot, this.command_id, this.extra_param];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink20.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
Message to configure a camera mount, directional antenna, etc.

                target_system             : System ID. (uint8_t)
                target_component          : Component ID. (uint8_t)
                mount_mode                : Mount operating mode. (uint8_t)
                stab_roll                 : (1 = yes, 0 = no). (uint8_t)
                stab_pitch                : (1 = yes, 0 = no). (uint8_t)
                stab_yaw                  : (1 = yes, 0 = no). (uint8_t)

*/
    mavlink20.messages.mount_configure = function( ...moreargs ) {
     [ this.target_system , this.target_component , this.mount_mode , this.stab_roll , this.stab_pitch , this.stab_yaw ] = moreargs;


    this._format = '<BBBBBB';
    this._id = mavlink20.MAVLINK_MSG_ID_MOUNT_CONFIGURE;
    this.order_map = [0, 1, 2, 3, 4, 5];
    this.len_map = [1, 1, 1, 1, 1, 1];
    this.array_len_map = [0, 0, 0, 0, 0, 0];
    this.crc_extra = 19;
    this._name = 'MOUNT_CONFIGURE';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['target_system', 'target_component', 'mount_mode', 'stab_roll', 'stab_pitch', 'stab_yaw'];

}

mavlink20.messages.mount_configure.prototype = new mavlink20.message;
mavlink20.messages.mount_configure.prototype.pack = function(mav) {
    var orderedfields = [ this.target_system, this.target_component, this.mount_mode, this.stab_roll, this.stab_pitch, this.stab_yaw];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink20.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
Message to control a camera mount, directional antenna, etc.

                target_system             : System ID. (uint8_t)
                target_component          : Component ID. (uint8_t)
                input_a                   : Pitch (centi-degrees) or lat (degE7), depending on mount mode. (int32_t)
                input_b                   : Roll (centi-degrees) or lon (degE7) depending on mount mode. (int32_t)
                input_c                   : Yaw (centi-degrees) or alt (cm) depending on mount mode. (int32_t)
                save_position             : If "1" it will save current trimmed position on EEPROM (just valid for NEUTRAL and LANDING). (uint8_t)

*/
    mavlink20.messages.mount_control = function( ...moreargs ) {
     [ this.target_system , this.target_component , this.input_a , this.input_b , this.input_c , this.save_position ] = moreargs;


    this._format = '<iiiBBB';
    this._id = mavlink20.MAVLINK_MSG_ID_MOUNT_CONTROL;
    this.order_map = [3, 4, 0, 1, 2, 5];
    this.len_map = [1, 1, 1, 1, 1, 1];
    this.array_len_map = [0, 0, 0, 0, 0, 0];
    this.crc_extra = 21;
    this._name = 'MOUNT_CONTROL';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['target_system', 'target_component', 'input_a', 'input_b', 'input_c', 'save_position'];

}

mavlink20.messages.mount_control.prototype = new mavlink20.message;
mavlink20.messages.mount_control.prototype.pack = function(mav) {
    var orderedfields = [ this.input_a, this.input_b, this.input_c, this.target_system, this.target_component, this.save_position];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink20.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
Message with some status from autopilot to GCS about camera or antenna
mount.

                target_system             : System ID. (uint8_t)
                target_component          : Component ID. (uint8_t)
                pointing_a                : Pitch. (int32_t)
                pointing_b                : Roll. (int32_t)
                pointing_c                : Yaw. (int32_t)
                mount_mode                : Mount operating mode. (uint8_t)

*/
    mavlink20.messages.mount_status = function( ...moreargs ) {
     [ this.target_system , this.target_component , this.pointing_a , this.pointing_b , this.pointing_c , this.mount_mode ] = moreargs;


    this._format = '<iiiBBB';
    this._id = mavlink20.MAVLINK_MSG_ID_MOUNT_STATUS;
    this.order_map = [3, 4, 0, 1, 2, 5];
    this.len_map = [1, 1, 1, 1, 1, 1];
    this.array_len_map = [0, 0, 0, 0, 0, 0];
    this.crc_extra = 134;
    this._name = 'MOUNT_STATUS';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['target_system', 'target_component', 'pointing_a', 'pointing_b', 'pointing_c', 'mount_mode'];

}

mavlink20.messages.mount_status.prototype = new mavlink20.message;
mavlink20.messages.mount_status.prototype.pack = function(mav) {
    var orderedfields = [ this.pointing_a, this.pointing_b, this.pointing_c, this.target_system, this.target_component, this.mount_mode];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink20.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
A fence point. Used to set a point when from GCS -> MAV. Also used to
return a point from MAV -> GCS.

                target_system             : System ID. (uint8_t)
                target_component          : Component ID. (uint8_t)
                idx                       : Point index (first point is 1, 0 is for return point). (uint8_t)
                count                     : Total number of points (for sanity checking). (uint8_t)
                lat                       : Latitude of point. (float)
                lng                       : Longitude of point. (float)

*/
    mavlink20.messages.fence_point = function( ...moreargs ) {
     [ this.target_system , this.target_component , this.idx , this.count , this.lat , this.lng ] = moreargs;


    this._format = '<ffBBBB';
    this._id = mavlink20.MAVLINK_MSG_ID_FENCE_POINT;
    this.order_map = [2, 3, 4, 5, 0, 1];
    this.len_map = [1, 1, 1, 1, 1, 1];
    this.array_len_map = [0, 0, 0, 0, 0, 0];
    this.crc_extra = 78;
    this._name = 'FENCE_POINT';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['target_system', 'target_component', 'idx', 'count', 'lat', 'lng'];

}

mavlink20.messages.fence_point.prototype = new mavlink20.message;
mavlink20.messages.fence_point.prototype.pack = function(mav) {
    var orderedfields = [ this.lat, this.lng, this.target_system, this.target_component, this.idx, this.count];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink20.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
Request a current fence point from MAV.

                target_system             : System ID. (uint8_t)
                target_component          : Component ID. (uint8_t)
                idx                       : Point index (first point is 1, 0 is for return point). (uint8_t)

*/
    mavlink20.messages.fence_fetch_point = function( ...moreargs ) {
     [ this.target_system , this.target_component , this.idx ] = moreargs;


    this._format = '<BBB';
    this._id = mavlink20.MAVLINK_MSG_ID_FENCE_FETCH_POINT;
    this.order_map = [0, 1, 2];
    this.len_map = [1, 1, 1];
    this.array_len_map = [0, 0, 0];
    this.crc_extra = 68;
    this._name = 'FENCE_FETCH_POINT';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['target_system', 'target_component', 'idx'];

}

mavlink20.messages.fence_fetch_point.prototype = new mavlink20.message;
mavlink20.messages.fence_fetch_point.prototype.pack = function(mav) {
    var orderedfields = [ this.target_system, this.target_component, this.idx];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink20.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
Status of DCM attitude estimator.

                omegaIx                   : X gyro drift estimate. (float)
                omegaIy                   : Y gyro drift estimate. (float)
                omegaIz                   : Z gyro drift estimate. (float)
                accel_weight              : Average accel_weight. (float)
                renorm_val                : Average renormalisation value. (float)
                error_rp                  : Average error_roll_pitch value. (float)
                error_yaw                 : Average error_yaw value. (float)

*/
    mavlink20.messages.ahrs = function( ...moreargs ) {
     [ this.omegaIx , this.omegaIy , this.omegaIz , this.accel_weight , this.renorm_val , this.error_rp , this.error_yaw ] = moreargs;


    this._format = '<fffffff';
    this._id = mavlink20.MAVLINK_MSG_ID_AHRS;
    this.order_map = [0, 1, 2, 3, 4, 5, 6];
    this.len_map = [1, 1, 1, 1, 1, 1, 1];
    this.array_len_map = [0, 0, 0, 0, 0, 0, 0];
    this.crc_extra = 127;
    this._name = 'AHRS';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['omegaIx', 'omegaIy', 'omegaIz', 'accel_weight', 'renorm_val', 'error_rp', 'error_yaw'];

}

mavlink20.messages.ahrs.prototype = new mavlink20.message;
mavlink20.messages.ahrs.prototype.pack = function(mav) {
    var orderedfields = [ this.omegaIx, this.omegaIy, this.omegaIz, this.accel_weight, this.renorm_val, this.error_rp, this.error_yaw];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink20.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
Status of simulation environment, if used.

                roll                      : Roll angle. (float)
                pitch                     : Pitch angle. (float)
                yaw                       : Yaw angle. (float)
                xacc                      : X acceleration. (float)
                yacc                      : Y acceleration. (float)
                zacc                      : Z acceleration. (float)
                xgyro                     : Angular speed around X axis. (float)
                ygyro                     : Angular speed around Y axis. (float)
                zgyro                     : Angular speed around Z axis. (float)
                lat                       : Latitude. (int32_t)
                lng                       : Longitude. (int32_t)

*/
    mavlink20.messages.simstate = function( ...moreargs ) {
     [ this.roll , this.pitch , this.yaw , this.xacc , this.yacc , this.zacc , this.xgyro , this.ygyro , this.zgyro , this.lat , this.lng ] = moreargs;


    this._format = '<fffffffffii';
    this._id = mavlink20.MAVLINK_MSG_ID_SIMSTATE;
    this.order_map = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10];
    this.len_map = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1];
    this.array_len_map = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
    this.crc_extra = 154;
    this._name = 'SIMSTATE';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['roll', 'pitch', 'yaw', 'xacc', 'yacc', 'zacc', 'xgyro', 'ygyro', 'zgyro', 'lat', 'lng'];

}

mavlink20.messages.simstate.prototype = new mavlink20.message;
mavlink20.messages.simstate.prototype.pack = function(mav) {
    var orderedfields = [ this.roll, this.pitch, this.yaw, this.xacc, this.yacc, this.zacc, this.xgyro, this.ygyro, this.zgyro, this.lat, this.lng];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink20.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
Status of key hardware.

                Vcc                       : Board voltage. (uint16_t)
                I2Cerr                    : I2C error count. (uint8_t)

*/
    mavlink20.messages.hwstatus = function( ...moreargs ) {
     [ this.Vcc , this.I2Cerr ] = moreargs;


    this._format = '<HB';
    this._id = mavlink20.MAVLINK_MSG_ID_HWSTATUS;
    this.order_map = [0, 1];
    this.len_map = [1, 1];
    this.array_len_map = [0, 0];
    this.crc_extra = 21;
    this._name = 'HWSTATUS';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['Vcc', 'I2Cerr'];

}

mavlink20.messages.hwstatus.prototype = new mavlink20.message;
mavlink20.messages.hwstatus.prototype.pack = function(mav) {
    var orderedfields = [ this.Vcc, this.I2Cerr];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink20.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
Status generated by radio.

                rssi                      : Local signal strength. (uint8_t)
                remrssi                   : Remote signal strength. (uint8_t)
                txbuf                     : How full the tx buffer is. (uint8_t)
                noise                     : Background noise level. (uint8_t)
                remnoise                  : Remote background noise level. (uint8_t)
                rxerrors                  : Receive errors. (uint16_t)
                fixed                     : Count of error corrected packets. (uint16_t)

*/
    mavlink20.messages.radio = function( ...moreargs ) {
     [ this.rssi , this.remrssi , this.txbuf , this.noise , this.remnoise , this.rxerrors , this.fixed ] = moreargs;


    this._format = '<HHBBBBB';
    this._id = mavlink20.MAVLINK_MSG_ID_RADIO;
    this.order_map = [2, 3, 4, 5, 6, 0, 1];
    this.len_map = [1, 1, 1, 1, 1, 1, 1];
    this.array_len_map = [0, 0, 0, 0, 0, 0, 0];
    this.crc_extra = 21;
    this._name = 'RADIO';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['rssi', 'remrssi', 'txbuf', 'noise', 'remnoise', 'rxerrors', 'fixed'];

}

mavlink20.messages.radio.prototype = new mavlink20.message;
mavlink20.messages.radio.prototype.pack = function(mav) {
    var orderedfields = [ this.rxerrors, this.fixed, this.rssi, this.remrssi, this.txbuf, this.noise, this.remnoise];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink20.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
Status of AP_Limits. Sent in extended status stream when AP_Limits is
enabled.

                limits_state              : State of AP_Limits. (uint8_t)
                last_trigger              : Time (since boot) of last breach. (uint32_t)
                last_action               : Time (since boot) of last recovery action. (uint32_t)
                last_recovery             : Time (since boot) of last successful recovery. (uint32_t)
                last_clear                : Time (since boot) of last all-clear. (uint32_t)
                breach_count              : Number of fence breaches. (uint16_t)
                mods_enabled              : AP_Limit_Module bitfield of enabled modules. (uint8_t)
                mods_required             : AP_Limit_Module bitfield of required modules. (uint8_t)
                mods_triggered            : AP_Limit_Module bitfield of triggered modules. (uint8_t)

*/
    mavlink20.messages.limits_status = function( ...moreargs ) {
     [ this.limits_state , this.last_trigger , this.last_action , this.last_recovery , this.last_clear , this.breach_count , this.mods_enabled , this.mods_required , this.mods_triggered ] = moreargs;


    this._format = '<IIIIHBBBB';
    this._id = mavlink20.MAVLINK_MSG_ID_LIMITS_STATUS;
    this.order_map = [5, 0, 1, 2, 3, 4, 6, 7, 8];
    this.len_map = [1, 1, 1, 1, 1, 1, 1, 1, 1];
    this.array_len_map = [0, 0, 0, 0, 0, 0, 0, 0, 0];
    this.crc_extra = 144;
    this._name = 'LIMITS_STATUS';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['limits_state', 'last_trigger', 'last_action', 'last_recovery', 'last_clear', 'breach_count', 'mods_enabled', 'mods_required', 'mods_triggered'];

}

mavlink20.messages.limits_status.prototype = new mavlink20.message;
mavlink20.messages.limits_status.prototype.pack = function(mav) {
    var orderedfields = [ this.last_trigger, this.last_action, this.last_recovery, this.last_clear, this.breach_count, this.limits_state, this.mods_enabled, this.mods_required, this.mods_triggered];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink20.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
Wind estimation.

                direction                 : Wind direction (that wind is coming from). (float)
                speed                     : Wind speed in ground plane. (float)
                speed_z                   : Vertical wind speed. (float)

*/
    mavlink20.messages.wind = function( ...moreargs ) {
     [ this.direction , this.speed , this.speed_z ] = moreargs;


    this._format = '<fff';
    this._id = mavlink20.MAVLINK_MSG_ID_WIND;
    this.order_map = [0, 1, 2];
    this.len_map = [1, 1, 1];
    this.array_len_map = [0, 0, 0];
    this.crc_extra = 1;
    this._name = 'WIND';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['direction', 'speed', 'speed_z'];

}

mavlink20.messages.wind.prototype = new mavlink20.message;
mavlink20.messages.wind.prototype.pack = function(mav) {
    var orderedfields = [ this.direction, this.speed, this.speed_z];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink20.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
Data packet, size 16.

                type                      : Data type. (uint8_t)
                len                       : Data length. (uint8_t)
                data                      : Raw data. (uint8_t)

*/
    mavlink20.messages.data16 = function( ...moreargs ) {
     [ this.type , this.len , this.data ] = moreargs;


    this._format = '<BB16s';
    this._id = mavlink20.MAVLINK_MSG_ID_DATA16;
    this.order_map = [0, 1, 2];
    this.len_map = [1, 1, 16];
    this.array_len_map = [0, 0, 16];
    this.crc_extra = 234;
    this._name = 'DATA16';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['type', 'len', 'data'];

}

mavlink20.messages.data16.prototype = new mavlink20.message;
mavlink20.messages.data16.prototype.pack = function(mav) {
    var orderedfields = [ this.type, this.len, this.data];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink20.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
Data packet, size 32.

                type                      : Data type. (uint8_t)
                len                       : Data length. (uint8_t)
                data                      : Raw data. (uint8_t)

*/
    mavlink20.messages.data32 = function( ...moreargs ) {
     [ this.type , this.len , this.data ] = moreargs;


    this._format = '<BB32s';
    this._id = mavlink20.MAVLINK_MSG_ID_DATA32;
    this.order_map = [0, 1, 2];
    this.len_map = [1, 1, 32];
    this.array_len_map = [0, 0, 32];
    this.crc_extra = 73;
    this._name = 'DATA32';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['type', 'len', 'data'];

}

mavlink20.messages.data32.prototype = new mavlink20.message;
mavlink20.messages.data32.prototype.pack = function(mav) {
    var orderedfields = [ this.type, this.len, this.data];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink20.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
Data packet, size 64.

                type                      : Data type. (uint8_t)
                len                       : Data length. (uint8_t)
                data                      : Raw data. (uint8_t)

*/
    mavlink20.messages.data64 = function( ...moreargs ) {
     [ this.type , this.len , this.data ] = moreargs;


    this._format = '<BB64s';
    this._id = mavlink20.MAVLINK_MSG_ID_DATA64;
    this.order_map = [0, 1, 2];
    this.len_map = [1, 1, 64];
    this.array_len_map = [0, 0, 64];
    this.crc_extra = 181;
    this._name = 'DATA64';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['type', 'len', 'data'];

}

mavlink20.messages.data64.prototype = new mavlink20.message;
mavlink20.messages.data64.prototype.pack = function(mav) {
    var orderedfields = [ this.type, this.len, this.data];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink20.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
Data packet, size 96.

                type                      : Data type. (uint8_t)
                len                       : Data length. (uint8_t)
                data                      : Raw data. (uint8_t)

*/
    mavlink20.messages.data96 = function( ...moreargs ) {
     [ this.type , this.len , this.data ] = moreargs;


    this._format = '<BB96s';
    this._id = mavlink20.MAVLINK_MSG_ID_DATA96;
    this.order_map = [0, 1, 2];
    this.len_map = [1, 1, 96];
    this.array_len_map = [0, 0, 96];
    this.crc_extra = 22;
    this._name = 'DATA96';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['type', 'len', 'data'];

}

mavlink20.messages.data96.prototype = new mavlink20.message;
mavlink20.messages.data96.prototype.pack = function(mav) {
    var orderedfields = [ this.type, this.len, this.data];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink20.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
Rangefinder reporting.

                distance                  : Distance. (float)
                voltage                   : Raw voltage if available, zero otherwise. (float)

*/
    mavlink20.messages.rangefinder = function( ...moreargs ) {
     [ this.distance , this.voltage ] = moreargs;


    this._format = '<ff';
    this._id = mavlink20.MAVLINK_MSG_ID_RANGEFINDER;
    this.order_map = [0, 1];
    this.len_map = [1, 1];
    this.array_len_map = [0, 0];
    this.crc_extra = 83;
    this._name = 'RANGEFINDER';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['distance', 'voltage'];

}

mavlink20.messages.rangefinder.prototype = new mavlink20.message;
mavlink20.messages.rangefinder.prototype.pack = function(mav) {
    var orderedfields = [ this.distance, this.voltage];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink20.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
Airspeed auto-calibration.

                vx                        : GPS velocity north. (float)
                vy                        : GPS velocity east. (float)
                vz                        : GPS velocity down. (float)
                diff_pressure             : Differential pressure. (float)
                EAS2TAS                   : Estimated to true airspeed ratio. (float)
                ratio                     : Airspeed ratio. (float)
                state_x                   : EKF state x. (float)
                state_y                   : EKF state y. (float)
                state_z                   : EKF state z. (float)
                Pax                       : EKF Pax. (float)
                Pby                       : EKF Pby. (float)
                Pcz                       : EKF Pcz. (float)

*/
    mavlink20.messages.airspeed_autocal = function( ...moreargs ) {
     [ this.vx , this.vy , this.vz , this.diff_pressure , this.EAS2TAS , this.ratio , this.state_x , this.state_y , this.state_z , this.Pax , this.Pby , this.Pcz ] = moreargs;


    this._format = '<ffffffffffff';
    this._id = mavlink20.MAVLINK_MSG_ID_AIRSPEED_AUTOCAL;
    this.order_map = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11];
    this.len_map = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1];
    this.array_len_map = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
    this.crc_extra = 167;
    this._name = 'AIRSPEED_AUTOCAL';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['vx', 'vy', 'vz', 'diff_pressure', 'EAS2TAS', 'ratio', 'state_x', 'state_y', 'state_z', 'Pax', 'Pby', 'Pcz'];

}

mavlink20.messages.airspeed_autocal.prototype = new mavlink20.message;
mavlink20.messages.airspeed_autocal.prototype.pack = function(mav) {
    var orderedfields = [ this.vx, this.vy, this.vz, this.diff_pressure, this.EAS2TAS, this.ratio, this.state_x, this.state_y, this.state_z, this.Pax, this.Pby, this.Pcz];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink20.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
A rally point. Used to set a point when from GCS -> MAV. Also used to
return a point from MAV -> GCS.

                target_system             : System ID. (uint8_t)
                target_component          : Component ID. (uint8_t)
                idx                       : Point index (first point is 0). (uint8_t)
                count                     : Total number of points (for sanity checking). (uint8_t)
                lat                       : Latitude of point. (int32_t)
                lng                       : Longitude of point. (int32_t)
                alt                       : Transit / loiter altitude relative to home. (int16_t)
                break_alt                 : Break altitude relative to home. (int16_t)
                land_dir                  : Heading to aim for when landing. (uint16_t)
                flags                     : Configuration flags. (uint8_t)

*/
    mavlink20.messages.rally_point = function( ...moreargs ) {
     [ this.target_system , this.target_component , this.idx , this.count , this.lat , this.lng , this.alt , this.break_alt , this.land_dir , this.flags ] = moreargs;


    this._format = '<iihhHBBBBB';
    this._id = mavlink20.MAVLINK_MSG_ID_RALLY_POINT;
    this.order_map = [5, 6, 7, 8, 0, 1, 2, 3, 4, 9];
    this.len_map = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1];
    this.array_len_map = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
    this.crc_extra = 138;
    this._name = 'RALLY_POINT';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['target_system', 'target_component', 'idx', 'count', 'lat', 'lng', 'alt', 'break_alt', 'land_dir', 'flags'];

}

mavlink20.messages.rally_point.prototype = new mavlink20.message;
mavlink20.messages.rally_point.prototype.pack = function(mav) {
    var orderedfields = [ this.lat, this.lng, this.alt, this.break_alt, this.land_dir, this.target_system, this.target_component, this.idx, this.count, this.flags];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink20.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
Request a current rally point from MAV. MAV should respond with a
RALLY_POINT message. MAV should not respond if the request is invalid.

                target_system             : System ID. (uint8_t)
                target_component          : Component ID. (uint8_t)
                idx                       : Point index (first point is 0). (uint8_t)

*/
    mavlink20.messages.rally_fetch_point = function( ...moreargs ) {
     [ this.target_system , this.target_component , this.idx ] = moreargs;


    this._format = '<BBB';
    this._id = mavlink20.MAVLINK_MSG_ID_RALLY_FETCH_POINT;
    this.order_map = [0, 1, 2];
    this.len_map = [1, 1, 1];
    this.array_len_map = [0, 0, 0];
    this.crc_extra = 234;
    this._name = 'RALLY_FETCH_POINT';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['target_system', 'target_component', 'idx'];

}

mavlink20.messages.rally_fetch_point.prototype = new mavlink20.message;
mavlink20.messages.rally_fetch_point.prototype.pack = function(mav) {
    var orderedfields = [ this.target_system, this.target_component, this.idx];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink20.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
Status of compassmot calibration.

                throttle                  : Throttle. (uint16_t)
                current                   : Current. (float)
                interference              : Interference. (uint16_t)
                CompensationX             : Motor Compensation X. (float)
                CompensationY             : Motor Compensation Y. (float)
                CompensationZ             : Motor Compensation Z. (float)

*/
    mavlink20.messages.compassmot_status = function( ...moreargs ) {
     [ this.throttle , this.current , this.interference , this.CompensationX , this.CompensationY , this.CompensationZ ] = moreargs;


    this._format = '<ffffHH';
    this._id = mavlink20.MAVLINK_MSG_ID_COMPASSMOT_STATUS;
    this.order_map = [4, 0, 5, 1, 2, 3];
    this.len_map = [1, 1, 1, 1, 1, 1];
    this.array_len_map = [0, 0, 0, 0, 0, 0];
    this.crc_extra = 240;
    this._name = 'COMPASSMOT_STATUS';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['throttle', 'current', 'interference', 'CompensationX', 'CompensationY', 'CompensationZ'];

}

mavlink20.messages.compassmot_status.prototype = new mavlink20.message;
mavlink20.messages.compassmot_status.prototype.pack = function(mav) {
    var orderedfields = [ this.current, this.CompensationX, this.CompensationY, this.CompensationZ, this.throttle, this.interference];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink20.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
Status of secondary AHRS filter if available.

                roll                      : Roll angle. (float)
                pitch                     : Pitch angle. (float)
                yaw                       : Yaw angle. (float)
                altitude                  : Altitude (MSL). (float)
                lat                       : Latitude. (int32_t)
                lng                       : Longitude. (int32_t)

*/
    mavlink20.messages.ahrs2 = function( ...moreargs ) {
     [ this.roll , this.pitch , this.yaw , this.altitude , this.lat , this.lng ] = moreargs;


    this._format = '<ffffii';
    this._id = mavlink20.MAVLINK_MSG_ID_AHRS2;
    this.order_map = [0, 1, 2, 3, 4, 5];
    this.len_map = [1, 1, 1, 1, 1, 1];
    this.array_len_map = [0, 0, 0, 0, 0, 0];
    this.crc_extra = 47;
    this._name = 'AHRS2';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['roll', 'pitch', 'yaw', 'altitude', 'lat', 'lng'];

}

mavlink20.messages.ahrs2.prototype = new mavlink20.message;
mavlink20.messages.ahrs2.prototype.pack = function(mav) {
    var orderedfields = [ this.roll, this.pitch, this.yaw, this.altitude, this.lat, this.lng];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink20.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
Camera Event.

                time_usec                 : Image timestamp (since UNIX epoch, according to camera clock). (uint64_t)
                target_system             : System ID. (uint8_t)
                cam_idx                   : Camera ID. (uint8_t)
                img_idx                   : Image index. (uint16_t)
                event_id                  : Event type. (uint8_t)
                p1                        : Parameter 1 (meaning depends on event_id, see CAMERA_STATUS_TYPES enum). (float)
                p2                        : Parameter 2 (meaning depends on event_id, see CAMERA_STATUS_TYPES enum). (float)
                p3                        : Parameter 3 (meaning depends on event_id, see CAMERA_STATUS_TYPES enum). (float)
                p4                        : Parameter 4 (meaning depends on event_id, see CAMERA_STATUS_TYPES enum). (float)

*/
    mavlink20.messages.camera_status = function( ...moreargs ) {
     [ this.time_usec , this.target_system , this.cam_idx , this.img_idx , this.event_id , this.p1 , this.p2 , this.p3 , this.p4 ] = moreargs;


    this._format = '<QffffHBBB';
    this._id = mavlink20.MAVLINK_MSG_ID_CAMERA_STATUS;
    this.order_map = [0, 6, 7, 5, 8, 1, 2, 3, 4];
    this.len_map = [1, 1, 1, 1, 1, 1, 1, 1, 1];
    this.array_len_map = [0, 0, 0, 0, 0, 0, 0, 0, 0];
    this.crc_extra = 189;
    this._name = 'CAMERA_STATUS';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['time_usec', 'target_system', 'cam_idx', 'img_idx', 'event_id', 'p1', 'p2', 'p3', 'p4'];

}

mavlink20.messages.camera_status.prototype = new mavlink20.message;
mavlink20.messages.camera_status.prototype.pack = function(mav) {
    var orderedfields = [ this.time_usec, this.p1, this.p2, this.p3, this.p4, this.img_idx, this.target_system, this.cam_idx, this.event_id];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink20.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
Camera Capture Feedback.

                time_usec                 : Image timestamp (since UNIX epoch), as passed in by CAMERA_STATUS message (or autopilot if no CCB). (uint64_t)
                target_system             : System ID. (uint8_t)
                cam_idx                   : Camera ID. (uint8_t)
                img_idx                   : Image index. (uint16_t)
                lat                       : Latitude. (int32_t)
                lng                       : Longitude. (int32_t)
                alt_msl                   : Altitude (MSL). (float)
                alt_rel                   : Altitude (Relative to HOME location). (float)
                roll                      : Camera Roll angle (earth frame, +-180). (float)
                pitch                     : Camera Pitch angle (earth frame, +-180). (float)
                yaw                       : Camera Yaw (earth frame, 0-360, true). (float)
                foc_len                   : Focal Length. (float)
                flags                     : Feedback flags. (uint8_t)
                completed_captures        : Completed image captures. (uint16_t)

*/
    mavlink20.messages.camera_feedback = function( ...moreargs ) {
     [ this.time_usec , this.target_system , this.cam_idx , this.img_idx , this.lat , this.lng , this.alt_msl , this.alt_rel , this.roll , this.pitch , this.yaw , this.foc_len , this.flags , this.completed_captures ] = moreargs;


    this._format = '<QiiffffffHBBBH';
    this._id = mavlink20.MAVLINK_MSG_ID_CAMERA_FEEDBACK;
    this.order_map = [0, 10, 11, 9, 1, 2, 3, 4, 5, 6, 7, 8, 12, 13];
    this.len_map = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1];
    this.array_len_map = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
    this.crc_extra = 52;
    this._name = 'CAMERA_FEEDBACK';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['time_usec', 'target_system', 'cam_idx', 'img_idx', 'lat', 'lng', 'alt_msl', 'alt_rel', 'roll', 'pitch', 'yaw', 'foc_len', 'flags', 'completed_captures'];

}

mavlink20.messages.camera_feedback.prototype = new mavlink20.message;
mavlink20.messages.camera_feedback.prototype.pack = function(mav) {
    var orderedfields = [ this.time_usec, this.lat, this.lng, this.alt_msl, this.alt_rel, this.roll, this.pitch, this.yaw, this.foc_len, this.img_idx, this.target_system, this.cam_idx, this.flags, this.completed_captures];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink20.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
2nd Battery status

                voltage                   : Voltage. (uint16_t)
                current_battery           : Battery current, -1: autopilot does not measure the current. (int16_t)

*/
    mavlink20.messages.battery2 = function( ...moreargs ) {
     [ this.voltage , this.current_battery ] = moreargs;


    this._format = '<Hh';
    this._id = mavlink20.MAVLINK_MSG_ID_BATTERY2;
    this.order_map = [0, 1];
    this.len_map = [1, 1];
    this.array_len_map = [0, 0];
    this.crc_extra = 174;
    this._name = 'BATTERY2';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['voltage', 'current_battery'];

}

mavlink20.messages.battery2.prototype = new mavlink20.message;
mavlink20.messages.battery2.prototype.pack = function(mav) {
    var orderedfields = [ this.voltage, this.current_battery];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink20.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
Status of third AHRS filter if available. This is for ANU research
group (Ali and Sean).

                roll                      : Roll angle. (float)
                pitch                     : Pitch angle. (float)
                yaw                       : Yaw angle. (float)
                altitude                  : Altitude (MSL). (float)
                lat                       : Latitude. (int32_t)
                lng                       : Longitude. (int32_t)
                v1                        : Test variable1. (float)
                v2                        : Test variable2. (float)
                v3                        : Test variable3. (float)
                v4                        : Test variable4. (float)

*/
    mavlink20.messages.ahrs3 = function( ...moreargs ) {
     [ this.roll , this.pitch , this.yaw , this.altitude , this.lat , this.lng , this.v1 , this.v2 , this.v3 , this.v4 ] = moreargs;


    this._format = '<ffffiiffff';
    this._id = mavlink20.MAVLINK_MSG_ID_AHRS3;
    this.order_map = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9];
    this.len_map = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1];
    this.array_len_map = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
    this.crc_extra = 229;
    this._name = 'AHRS3';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['roll', 'pitch', 'yaw', 'altitude', 'lat', 'lng', 'v1', 'v2', 'v3', 'v4'];

}

mavlink20.messages.ahrs3.prototype = new mavlink20.message;
mavlink20.messages.ahrs3.prototype.pack = function(mav) {
    var orderedfields = [ this.roll, this.pitch, this.yaw, this.altitude, this.lat, this.lng, this.v1, this.v2, this.v3, this.v4];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink20.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
Request the autopilot version from the system/component.

                target_system             : System ID. (uint8_t)
                target_component          : Component ID. (uint8_t)

*/
    mavlink20.messages.autopilot_version_request = function( ...moreargs ) {
     [ this.target_system , this.target_component ] = moreargs;


    this._format = '<BB';
    this._id = mavlink20.MAVLINK_MSG_ID_AUTOPILOT_VERSION_REQUEST;
    this.order_map = [0, 1];
    this.len_map = [1, 1];
    this.array_len_map = [0, 0];
    this.crc_extra = 85;
    this._name = 'AUTOPILOT_VERSION_REQUEST';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['target_system', 'target_component'];

}

mavlink20.messages.autopilot_version_request.prototype = new mavlink20.message;
mavlink20.messages.autopilot_version_request.prototype.pack = function(mav) {
    var orderedfields = [ this.target_system, this.target_component];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink20.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
Send a block of log data to remote location.

                target_system             : System ID. (uint8_t)
                target_component          : Component ID. (uint8_t)
                seqno                     : Log data block sequence number. (uint32_t)
                data                      : Log data block. (uint8_t)

*/
    mavlink20.messages.remote_log_data_block = function( ...moreargs ) {
     [ this.target_system , this.target_component , this.seqno , this.data ] = moreargs;


    this._format = '<IBB200s';
    this._id = mavlink20.MAVLINK_MSG_ID_REMOTE_LOG_DATA_BLOCK;
    this.order_map = [1, 2, 0, 3];
    this.len_map = [1, 1, 1, 200];
    this.array_len_map = [0, 0, 0, 200];
    this.crc_extra = 159;
    this._name = 'REMOTE_LOG_DATA_BLOCK';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['target_system', 'target_component', 'seqno', 'data'];

}

mavlink20.messages.remote_log_data_block.prototype = new mavlink20.message;
mavlink20.messages.remote_log_data_block.prototype.pack = function(mav) {
    var orderedfields = [ this.seqno, this.target_system, this.target_component, this.data];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink20.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
Send Status of each log block that autopilot board might have sent.

                target_system             : System ID. (uint8_t)
                target_component          : Component ID. (uint8_t)
                seqno                     : Log data block sequence number. (uint32_t)
                status                    : Log data block status. (uint8_t)

*/
    mavlink20.messages.remote_log_block_status = function( ...moreargs ) {
     [ this.target_system , this.target_component , this.seqno , this.status ] = moreargs;


    this._format = '<IBBB';
    this._id = mavlink20.MAVLINK_MSG_ID_REMOTE_LOG_BLOCK_STATUS;
    this.order_map = [1, 2, 0, 3];
    this.len_map = [1, 1, 1, 1];
    this.array_len_map = [0, 0, 0, 0];
    this.crc_extra = 186;
    this._name = 'REMOTE_LOG_BLOCK_STATUS';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['target_system', 'target_component', 'seqno', 'status'];

}

mavlink20.messages.remote_log_block_status.prototype = new mavlink20.message;
mavlink20.messages.remote_log_block_status.prototype.pack = function(mav) {
    var orderedfields = [ this.seqno, this.target_system, this.target_component, this.status];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink20.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
Control vehicle LEDs.

                target_system             : System ID. (uint8_t)
                target_component          : Component ID. (uint8_t)
                instance                  : Instance (LED instance to control or 255 for all LEDs). (uint8_t)
                pattern                   : Pattern (see LED_PATTERN_ENUM). (uint8_t)
                custom_len                : Custom Byte Length. (uint8_t)
                custom_bytes              : Custom Bytes. (uint8_t)

*/
    mavlink20.messages.led_control = function( ...moreargs ) {
     [ this.target_system , this.target_component , this.instance , this.pattern , this.custom_len , this.custom_bytes ] = moreargs;


    this._format = '<BBBBB24s';
    this._id = mavlink20.MAVLINK_MSG_ID_LED_CONTROL;
    this.order_map = [0, 1, 2, 3, 4, 5];
    this.len_map = [1, 1, 1, 1, 1, 24];
    this.array_len_map = [0, 0, 0, 0, 0, 24];
    this.crc_extra = 72;
    this._name = 'LED_CONTROL';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['target_system', 'target_component', 'instance', 'pattern', 'custom_len', 'custom_bytes'];

}

mavlink20.messages.led_control.prototype = new mavlink20.message;
mavlink20.messages.led_control.prototype.pack = function(mav) {
    var orderedfields = [ this.target_system, this.target_component, this.instance, this.pattern, this.custom_len, this.custom_bytes];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink20.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
Reports progress of compass calibration.

                compass_id                : Compass being calibrated. (uint8_t)
                cal_mask                  : Bitmask of compasses being calibrated. (uint8_t)
                cal_status                : Calibration Status. (uint8_t)
                attempt                   : Attempt number. (uint8_t)
                completion_pct            : Completion percentage. (uint8_t)
                completion_mask           : Bitmask of sphere sections (see http://en.wikipedia.org/wiki/Geodesic_grid). (uint8_t)
                direction_x               : Body frame direction vector for display. (float)
                direction_y               : Body frame direction vector for display. (float)
                direction_z               : Body frame direction vector for display. (float)

*/
    mavlink20.messages.mag_cal_progress = function( ...moreargs ) {
     [ this.compass_id , this.cal_mask , this.cal_status , this.attempt , this.completion_pct , this.completion_mask , this.direction_x , this.direction_y , this.direction_z ] = moreargs;


    this._format = '<fffBBBBB10s';
    this._id = mavlink20.MAVLINK_MSG_ID_MAG_CAL_PROGRESS;
    this.order_map = [3, 4, 5, 6, 7, 8, 0, 1, 2];
    this.len_map = [1, 1, 1, 1, 1, 1, 1, 1, 10];
    this.array_len_map = [0, 0, 0, 0, 0, 0, 0, 0, 10];
    this.crc_extra = 92;
    this._name = 'MAG_CAL_PROGRESS';

    this._instance_field = 'compass_id';
    this._instance_offset = 12;

    this.fieldnames = ['compass_id', 'cal_mask', 'cal_status', 'attempt', 'completion_pct', 'completion_mask', 'direction_x', 'direction_y', 'direction_z'];

}

mavlink20.messages.mag_cal_progress.prototype = new mavlink20.message;
mavlink20.messages.mag_cal_progress.prototype.pack = function(mav) {
    var orderedfields = [ this.direction_x, this.direction_y, this.direction_z, this.compass_id, this.cal_mask, this.cal_status, this.attempt, this.completion_pct, this.completion_mask];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink20.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
EKF Status message including flags and variances.

                flags                     : Flags. (uint16_t)
                velocity_variance         : Velocity variance. (float)
                pos_horiz_variance        : Horizontal Position variance. (float)
                pos_vert_variance         : Vertical Position variance. (float)
                compass_variance          : Compass variance. (float)
                terrain_alt_variance        : Terrain Altitude variance. (float)
                airspeed_variance         : Airspeed variance. (float)

*/
    mavlink20.messages.ekf_status_report = function( ...moreargs ) {
     [ this.flags , this.velocity_variance , this.pos_horiz_variance , this.pos_vert_variance , this.compass_variance , this.terrain_alt_variance , this.airspeed_variance ] = moreargs;


    this._format = '<fffffHf';
    this._id = mavlink20.MAVLINK_MSG_ID_EKF_STATUS_REPORT;
    this.order_map = [5, 0, 1, 2, 3, 4, 6];
    this.len_map = [1, 1, 1, 1, 1, 1, 1];
    this.array_len_map = [0, 0, 0, 0, 0, 0, 0];
    this.crc_extra = 71;
    this._name = 'EKF_STATUS_REPORT';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['flags', 'velocity_variance', 'pos_horiz_variance', 'pos_vert_variance', 'compass_variance', 'terrain_alt_variance', 'airspeed_variance'];

}

mavlink20.messages.ekf_status_report.prototype = new mavlink20.message;
mavlink20.messages.ekf_status_report.prototype.pack = function(mav) {
    var orderedfields = [ this.velocity_variance, this.pos_horiz_variance, this.pos_vert_variance, this.compass_variance, this.terrain_alt_variance, this.flags, this.airspeed_variance];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink20.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
PID tuning information.

                axis                      : Axis. (uint8_t)
                desired                   : Desired rate. (float)
                achieved                  : Achieved rate. (float)
                FF                        : FF component. (float)
                P                         : P component. (float)
                I                         : I component. (float)
                D                         : D component. (float)
                SRate                     : Slew rate. (float)
                PDmod                     : P/D oscillation modifier. (float)

*/
    mavlink20.messages.pid_tuning = function( ...moreargs ) {
     [ this.axis , this.desired , this.achieved , this.FF , this.P , this.I , this.D , this.SRate , this.PDmod ] = moreargs;


    this._format = '<ffffffBff';
    this._id = mavlink20.MAVLINK_MSG_ID_PID_TUNING;
    this.order_map = [6, 0, 1, 2, 3, 4, 5, 7, 8];
    this.len_map = [1, 1, 1, 1, 1, 1, 1, 1, 1];
    this.array_len_map = [0, 0, 0, 0, 0, 0, 0, 0, 0];
    this.crc_extra = 98;
    this._name = 'PID_TUNING';

    this._instance_field = 'axis';
    this._instance_offset = 24;

    this.fieldnames = ['axis', 'desired', 'achieved', 'FF', 'P', 'I', 'D', 'SRate', 'PDmod'];

}

mavlink20.messages.pid_tuning.prototype = new mavlink20.message;
mavlink20.messages.pid_tuning.prototype.pack = function(mav) {
    var orderedfields = [ this.desired, this.achieved, this.FF, this.P, this.I, this.D, this.axis, this.SRate, this.PDmod];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink20.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
Deepstall path planning.

                landing_lat               : Landing latitude. (int32_t)
                landing_lon               : Landing longitude. (int32_t)
                path_lat                  : Final heading start point, latitude. (int32_t)
                path_lon                  : Final heading start point, longitude. (int32_t)
                arc_entry_lat             : Arc entry point, latitude. (int32_t)
                arc_entry_lon             : Arc entry point, longitude. (int32_t)
                altitude                  : Altitude. (float)
                expected_travel_distance        : Distance the aircraft expects to travel during the deepstall. (float)
                cross_track_error         : Deepstall cross track error (only valid when in DEEPSTALL_STAGE_LAND). (float)
                stage                     : Deepstall stage. (uint8_t)

*/
    mavlink20.messages.deepstall = function( ...moreargs ) {
     [ this.landing_lat , this.landing_lon , this.path_lat , this.path_lon , this.arc_entry_lat , this.arc_entry_lon , this.altitude , this.expected_travel_distance , this.cross_track_error , this.stage ] = moreargs;


    this._format = '<iiiiiifffB';
    this._id = mavlink20.MAVLINK_MSG_ID_DEEPSTALL;
    this.order_map = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9];
    this.len_map = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1];
    this.array_len_map = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
    this.crc_extra = 120;
    this._name = 'DEEPSTALL';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['landing_lat', 'landing_lon', 'path_lat', 'path_lon', 'arc_entry_lat', 'arc_entry_lon', 'altitude', 'expected_travel_distance', 'cross_track_error', 'stage'];

}

mavlink20.messages.deepstall.prototype = new mavlink20.message;
mavlink20.messages.deepstall.prototype.pack = function(mav) {
    var orderedfields = [ this.landing_lat, this.landing_lon, this.path_lat, this.path_lon, this.arc_entry_lat, this.arc_entry_lon, this.altitude, this.expected_travel_distance, this.cross_track_error, this.stage];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink20.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
3 axis gimbal measurements.

                target_system             : System ID. (uint8_t)
                target_component          : Component ID. (uint8_t)
                delta_time                : Time since last update. (float)
                delta_angle_x             : Delta angle X. (float)
                delta_angle_y             : Delta angle Y. (float)
                delta_angle_z             : Delta angle X. (float)
                delta_velocity_x          : Delta velocity X. (float)
                delta_velocity_y          : Delta velocity Y. (float)
                delta_velocity_z          : Delta velocity Z. (float)
                joint_roll                : Joint ROLL. (float)
                joint_el                  : Joint EL. (float)
                joint_az                  : Joint AZ. (float)

*/
    mavlink20.messages.gimbal_report = function( ...moreargs ) {
     [ this.target_system , this.target_component , this.delta_time , this.delta_angle_x , this.delta_angle_y , this.delta_angle_z , this.delta_velocity_x , this.delta_velocity_y , this.delta_velocity_z , this.joint_roll , this.joint_el , this.joint_az ] = moreargs;


    this._format = '<ffffffffffBB';
    this._id = mavlink20.MAVLINK_MSG_ID_GIMBAL_REPORT;
    this.order_map = [10, 11, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9];
    this.len_map = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1];
    this.array_len_map = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
    this.crc_extra = 134;
    this._name = 'GIMBAL_REPORT';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['target_system', 'target_component', 'delta_time', 'delta_angle_x', 'delta_angle_y', 'delta_angle_z', 'delta_velocity_x', 'delta_velocity_y', 'delta_velocity_z', 'joint_roll', 'joint_el', 'joint_az'];

}

mavlink20.messages.gimbal_report.prototype = new mavlink20.message;
mavlink20.messages.gimbal_report.prototype.pack = function(mav) {
    var orderedfields = [ this.delta_time, this.delta_angle_x, this.delta_angle_y, this.delta_angle_z, this.delta_velocity_x, this.delta_velocity_y, this.delta_velocity_z, this.joint_roll, this.joint_el, this.joint_az, this.target_system, this.target_component];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink20.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
Control message for rate gimbal.

                target_system             : System ID. (uint8_t)
                target_component          : Component ID. (uint8_t)
                demanded_rate_x           : Demanded angular rate X. (float)
                demanded_rate_y           : Demanded angular rate Y. (float)
                demanded_rate_z           : Demanded angular rate Z. (float)

*/
    mavlink20.messages.gimbal_control = function( ...moreargs ) {
     [ this.target_system , this.target_component , this.demanded_rate_x , this.demanded_rate_y , this.demanded_rate_z ] = moreargs;


    this._format = '<fffBB';
    this._id = mavlink20.MAVLINK_MSG_ID_GIMBAL_CONTROL;
    this.order_map = [3, 4, 0, 1, 2];
    this.len_map = [1, 1, 1, 1, 1];
    this.array_len_map = [0, 0, 0, 0, 0];
    this.crc_extra = 205;
    this._name = 'GIMBAL_CONTROL';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['target_system', 'target_component', 'demanded_rate_x', 'demanded_rate_y', 'demanded_rate_z'];

}

mavlink20.messages.gimbal_control.prototype = new mavlink20.message;
mavlink20.messages.gimbal_control.prototype.pack = function(mav) {
    var orderedfields = [ this.demanded_rate_x, this.demanded_rate_y, this.demanded_rate_z, this.target_system, this.target_component];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink20.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
100 Hz gimbal torque command telemetry.

                target_system             : System ID. (uint8_t)
                target_component          : Component ID. (uint8_t)
                rl_torque_cmd             : Roll Torque Command. (int16_t)
                el_torque_cmd             : Elevation Torque Command. (int16_t)
                az_torque_cmd             : Azimuth Torque Command. (int16_t)

*/
    mavlink20.messages.gimbal_torque_cmd_report = function( ...moreargs ) {
     [ this.target_system , this.target_component , this.rl_torque_cmd , this.el_torque_cmd , this.az_torque_cmd ] = moreargs;


    this._format = '<hhhBB';
    this._id = mavlink20.MAVLINK_MSG_ID_GIMBAL_TORQUE_CMD_REPORT;
    this.order_map = [3, 4, 0, 1, 2];
    this.len_map = [1, 1, 1, 1, 1];
    this.array_len_map = [0, 0, 0, 0, 0];
    this.crc_extra = 69;
    this._name = 'GIMBAL_TORQUE_CMD_REPORT';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['target_system', 'target_component', 'rl_torque_cmd', 'el_torque_cmd', 'az_torque_cmd'];

}

mavlink20.messages.gimbal_torque_cmd_report.prototype = new mavlink20.message;
mavlink20.messages.gimbal_torque_cmd_report.prototype.pack = function(mav) {
    var orderedfields = [ this.rl_torque_cmd, this.el_torque_cmd, this.az_torque_cmd, this.target_system, this.target_component];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink20.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
Heartbeat from a HeroBus attached GoPro.

                status                    : Status. (uint8_t)
                capture_mode              : Current capture mode. (uint8_t)
                flags                     : Additional status bits. (uint8_t)

*/
    mavlink20.messages.gopro_heartbeat = function( ...moreargs ) {
     [ this.status , this.capture_mode , this.flags ] = moreargs;


    this._format = '<BBB';
    this._id = mavlink20.MAVLINK_MSG_ID_GOPRO_HEARTBEAT;
    this.order_map = [0, 1, 2];
    this.len_map = [1, 1, 1];
    this.array_len_map = [0, 0, 0];
    this.crc_extra = 101;
    this._name = 'GOPRO_HEARTBEAT';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['status', 'capture_mode', 'flags'];

}

mavlink20.messages.gopro_heartbeat.prototype = new mavlink20.message;
mavlink20.messages.gopro_heartbeat.prototype.pack = function(mav) {
    var orderedfields = [ this.status, this.capture_mode, this.flags];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink20.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
Request a GOPRO_COMMAND response from the GoPro.

                target_system             : System ID. (uint8_t)
                target_component          : Component ID. (uint8_t)
                cmd_id                    : Command ID. (uint8_t)

*/
    mavlink20.messages.gopro_get_request = function( ...moreargs ) {
     [ this.target_system , this.target_component , this.cmd_id ] = moreargs;


    this._format = '<BBB';
    this._id = mavlink20.MAVLINK_MSG_ID_GOPRO_GET_REQUEST;
    this.order_map = [0, 1, 2];
    this.len_map = [1, 1, 1];
    this.array_len_map = [0, 0, 0];
    this.crc_extra = 50;
    this._name = 'GOPRO_GET_REQUEST';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['target_system', 'target_component', 'cmd_id'];

}

mavlink20.messages.gopro_get_request.prototype = new mavlink20.message;
mavlink20.messages.gopro_get_request.prototype.pack = function(mav) {
    var orderedfields = [ this.target_system, this.target_component, this.cmd_id];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink20.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
Response from a GOPRO_COMMAND get request.

                cmd_id                    : Command ID. (uint8_t)
                status                    : Status. (uint8_t)
                value                     : Value. (uint8_t)

*/
    mavlink20.messages.gopro_get_response = function( ...moreargs ) {
     [ this.cmd_id , this.status , this.value ] = moreargs;


    this._format = '<BB4s';
    this._id = mavlink20.MAVLINK_MSG_ID_GOPRO_GET_RESPONSE;
    this.order_map = [0, 1, 2];
    this.len_map = [1, 1, 4];
    this.array_len_map = [0, 0, 4];
    this.crc_extra = 202;
    this._name = 'GOPRO_GET_RESPONSE';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['cmd_id', 'status', 'value'];

}

mavlink20.messages.gopro_get_response.prototype = new mavlink20.message;
mavlink20.messages.gopro_get_response.prototype.pack = function(mav) {
    var orderedfields = [ this.cmd_id, this.status, this.value];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink20.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
Request to set a GOPRO_COMMAND with a desired.

                target_system             : System ID. (uint8_t)
                target_component          : Component ID. (uint8_t)
                cmd_id                    : Command ID. (uint8_t)
                value                     : Value. (uint8_t)

*/
    mavlink20.messages.gopro_set_request = function( ...moreargs ) {
     [ this.target_system , this.target_component , this.cmd_id , this.value ] = moreargs;


    this._format = '<BBB4s';
    this._id = mavlink20.MAVLINK_MSG_ID_GOPRO_SET_REQUEST;
    this.order_map = [0, 1, 2, 3];
    this.len_map = [1, 1, 1, 4];
    this.array_len_map = [0, 0, 0, 4];
    this.crc_extra = 17;
    this._name = 'GOPRO_SET_REQUEST';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['target_system', 'target_component', 'cmd_id', 'value'];

}

mavlink20.messages.gopro_set_request.prototype = new mavlink20.message;
mavlink20.messages.gopro_set_request.prototype.pack = function(mav) {
    var orderedfields = [ this.target_system, this.target_component, this.cmd_id, this.value];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink20.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
Response from a GOPRO_COMMAND set request.

                cmd_id                    : Command ID. (uint8_t)
                status                    : Status. (uint8_t)

*/
    mavlink20.messages.gopro_set_response = function( ...moreargs ) {
     [ this.cmd_id , this.status ] = moreargs;


    this._format = '<BB';
    this._id = mavlink20.MAVLINK_MSG_ID_GOPRO_SET_RESPONSE;
    this.order_map = [0, 1];
    this.len_map = [1, 1];
    this.array_len_map = [0, 0];
    this.crc_extra = 162;
    this._name = 'GOPRO_SET_RESPONSE';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['cmd_id', 'status'];

}

mavlink20.messages.gopro_set_response.prototype = new mavlink20.message;
mavlink20.messages.gopro_set_response.prototype.pack = function(mav) {
    var orderedfields = [ this.cmd_id, this.status];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink20.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
RPM sensor output.

                rpm1                      : RPM Sensor1. (float)
                rpm2                      : RPM Sensor2. (float)

*/
    mavlink20.messages.rpm = function( ...moreargs ) {
     [ this.rpm1 , this.rpm2 ] = moreargs;


    this._format = '<ff';
    this._id = mavlink20.MAVLINK_MSG_ID_RPM;
    this.order_map = [0, 1];
    this.len_map = [1, 1];
    this.array_len_map = [0, 0];
    this.crc_extra = 207;
    this._name = 'RPM';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['rpm1', 'rpm2'];

}

mavlink20.messages.rpm.prototype = new mavlink20.message;
mavlink20.messages.rpm.prototype.pack = function(mav) {
    var orderedfields = [ this.rpm1, this.rpm2];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink20.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
Read registers for a device.

                target_system             : System ID. (uint8_t)
                target_component          : Component ID. (uint8_t)
                request_id                : Request ID - copied to reply. (uint32_t)
                bustype                   : The bus type. (uint8_t)
                bus                       : Bus number. (uint8_t)
                address                   : Bus address. (uint8_t)
                busname                   : Name of device on bus (for SPI). (char)
                regstart                  : First register to read. (uint8_t)
                count                     : Count of registers to read. (uint8_t)
                bank                      : Bank number. (uint8_t)

*/
    mavlink20.messages.device_op_read = function( ...moreargs ) {
     [ this.target_system , this.target_component , this.request_id , this.bustype , this.bus , this.address , this.busname , this.regstart , this.count , this.bank ] = moreargs;


    this._format = '<IBBBBB40sBBB';
    this._id = mavlink20.MAVLINK_MSG_ID_DEVICE_OP_READ;
    this.order_map = [1, 2, 0, 3, 4, 5, 6, 7, 8, 9];
    this.len_map = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1];
    this.array_len_map = [0, 0, 0, 0, 0, 0, 40, 0, 0, 0];
    this.crc_extra = 134;
    this._name = 'DEVICE_OP_READ';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['target_system', 'target_component', 'request_id', 'bustype', 'bus', 'address', 'busname', 'regstart', 'count', 'bank'];

}

mavlink20.messages.device_op_read.prototype = new mavlink20.message;
mavlink20.messages.device_op_read.prototype.pack = function(mav) {
    var orderedfields = [ this.request_id, this.target_system, this.target_component, this.bustype, this.bus, this.address, this.busname, this.regstart, this.count, this.bank];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink20.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
Read registers reply.

                request_id                : Request ID - copied from request. (uint32_t)
                result                    : 0 for success, anything else is failure code. (uint8_t)
                regstart                  : Starting register. (uint8_t)
                count                     : Count of bytes read. (uint8_t)
                data                      : Reply data. (uint8_t)
                bank                      : Bank number. (uint8_t)

*/
    mavlink20.messages.device_op_read_reply = function( ...moreargs ) {
     [ this.request_id , this.result , this.regstart , this.count , this.data , this.bank ] = moreargs;


    this._format = '<IBBB128sB';
    this._id = mavlink20.MAVLINK_MSG_ID_DEVICE_OP_READ_REPLY;
    this.order_map = [0, 1, 2, 3, 4, 5];
    this.len_map = [1, 1, 1, 1, 128, 1];
    this.array_len_map = [0, 0, 0, 0, 128, 0];
    this.crc_extra = 15;
    this._name = 'DEVICE_OP_READ_REPLY';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['request_id', 'result', 'regstart', 'count', 'data', 'bank'];

}

mavlink20.messages.device_op_read_reply.prototype = new mavlink20.message;
mavlink20.messages.device_op_read_reply.prototype.pack = function(mav) {
    var orderedfields = [ this.request_id, this.result, this.regstart, this.count, this.data, this.bank];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink20.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
Write registers for a device.

                target_system             : System ID. (uint8_t)
                target_component          : Component ID. (uint8_t)
                request_id                : Request ID - copied to reply. (uint32_t)
                bustype                   : The bus type. (uint8_t)
                bus                       : Bus number. (uint8_t)
                address                   : Bus address. (uint8_t)
                busname                   : Name of device on bus (for SPI). (char)
                regstart                  : First register to write. (uint8_t)
                count                     : Count of registers to write. (uint8_t)
                data                      : Write data. (uint8_t)
                bank                      : Bank number. (uint8_t)

*/
    mavlink20.messages.device_op_write = function( ...moreargs ) {
     [ this.target_system , this.target_component , this.request_id , this.bustype , this.bus , this.address , this.busname , this.regstart , this.count , this.data , this.bank ] = moreargs;


    this._format = '<IBBBBB40sBB128sB';
    this._id = mavlink20.MAVLINK_MSG_ID_DEVICE_OP_WRITE;
    this.order_map = [1, 2, 0, 3, 4, 5, 6, 7, 8, 9, 10];
    this.len_map = [1, 1, 1, 1, 1, 1, 1, 1, 1, 128, 1];
    this.array_len_map = [0, 0, 0, 0, 0, 0, 40, 0, 0, 128, 0];
    this.crc_extra = 234;
    this._name = 'DEVICE_OP_WRITE';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['target_system', 'target_component', 'request_id', 'bustype', 'bus', 'address', 'busname', 'regstart', 'count', 'data', 'bank'];

}

mavlink20.messages.device_op_write.prototype = new mavlink20.message;
mavlink20.messages.device_op_write.prototype.pack = function(mav) {
    var orderedfields = [ this.request_id, this.target_system, this.target_component, this.bustype, this.bus, this.address, this.busname, this.regstart, this.count, this.data, this.bank];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink20.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
Write registers reply.

                request_id                : Request ID - copied from request. (uint32_t)
                result                    : 0 for success, anything else is failure code. (uint8_t)

*/
    mavlink20.messages.device_op_write_reply = function( ...moreargs ) {
     [ this.request_id , this.result ] = moreargs;


    this._format = '<IB';
    this._id = mavlink20.MAVLINK_MSG_ID_DEVICE_OP_WRITE_REPLY;
    this.order_map = [0, 1];
    this.len_map = [1, 1];
    this.array_len_map = [0, 0];
    this.crc_extra = 64;
    this._name = 'DEVICE_OP_WRITE_REPLY';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['request_id', 'result'];

}

mavlink20.messages.device_op_write_reply.prototype = new mavlink20.message;
mavlink20.messages.device_op_write_reply.prototype.pack = function(mav) {
    var orderedfields = [ this.request_id, this.result];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink20.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
Send a secure command. Data should be signed with a private key
corresponding with a public key known to the recipient. Signature
should be over the concatenation of the sequence number (little-endian
format), the operation (little-endian format) the data and the session
key. For SECURE_COMMAND_GET_SESSION_KEY the session key should be zero
length. The data array consists of the data followed by the signature.
The sum of the data_length and the sig_length cannot be more than 220.
The format of the data is command specific.

                target_system             : System ID. (uint8_t)
                target_component          : Component ID. (uint8_t)
                sequence                  : Sequence ID for tagging reply. (uint32_t)
                operation                 : Operation being requested. (uint32_t)
                data_length               : Data length. (uint8_t)
                sig_length                : Signature length. (uint8_t)
                data                      : Signed data. (uint8_t)

*/
    mavlink20.messages.secure_command = function( ...moreargs ) {
     [ this.target_system , this.target_component , this.sequence , this.operation , this.data_length , this.sig_length , this.data ] = moreargs;


    this._format = '<IIBBBB220s';
    this._id = mavlink20.MAVLINK_MSG_ID_SECURE_COMMAND;
    this.order_map = [2, 3, 0, 1, 4, 5, 6];
    this.len_map = [1, 1, 1, 1, 1, 1, 220];
    this.array_len_map = [0, 0, 0, 0, 0, 0, 220];
    this.crc_extra = 11;
    this._name = 'SECURE_COMMAND';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['target_system', 'target_component', 'sequence', 'operation', 'data_length', 'sig_length', 'data'];

}

mavlink20.messages.secure_command.prototype = new mavlink20.message;
mavlink20.messages.secure_command.prototype.pack = function(mav) {
    var orderedfields = [ this.sequence, this.operation, this.target_system, this.target_component, this.data_length, this.sig_length, this.data];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink20.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
Reply from secure command.

                sequence                  : Sequence ID from request. (uint32_t)
                operation                 : Operation that was requested. (uint32_t)
                result                    : Result of command. (uint8_t)
                data_length               : Data length. (uint8_t)
                data                      : Reply data. (uint8_t)

*/
    mavlink20.messages.secure_command_reply = function( ...moreargs ) {
     [ this.sequence , this.operation , this.result , this.data_length , this.data ] = moreargs;


    this._format = '<IIBB220s';
    this._id = mavlink20.MAVLINK_MSG_ID_SECURE_COMMAND_REPLY;
    this.order_map = [0, 1, 2, 3, 4];
    this.len_map = [1, 1, 1, 1, 220];
    this.array_len_map = [0, 0, 0, 0, 220];
    this.crc_extra = 93;
    this._name = 'SECURE_COMMAND_REPLY';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['sequence', 'operation', 'result', 'data_length', 'data'];

}

mavlink20.messages.secure_command_reply.prototype = new mavlink20.message;
mavlink20.messages.secure_command_reply.prototype.pack = function(mav) {
    var orderedfields = [ this.sequence, this.operation, this.result, this.data_length, this.data];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink20.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
Adaptive Controller tuning information.

                axis                      : Axis. (uint8_t)
                desired                   : Desired rate. (float)
                achieved                  : Achieved rate. (float)
                error                     : Error between model and vehicle. (float)
                theta                     : Theta estimated state predictor. (float)
                omega                     : Omega estimated state predictor. (float)
                sigma                     : Sigma estimated state predictor. (float)
                theta_dot                 : Theta derivative. (float)
                omega_dot                 : Omega derivative. (float)
                sigma_dot                 : Sigma derivative. (float)
                f                         : Projection operator value. (float)
                f_dot                     : Projection operator derivative. (float)
                u                         : u adaptive controlled output command. (float)

*/
    mavlink20.messages.adap_tuning = function( ...moreargs ) {
     [ this.axis , this.desired , this.achieved , this.error , this.theta , this.omega , this.sigma , this.theta_dot , this.omega_dot , this.sigma_dot , this.f , this.f_dot , this.u ] = moreargs;


    this._format = '<ffffffffffffB';
    this._id = mavlink20.MAVLINK_MSG_ID_ADAP_TUNING;
    this.order_map = [12, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11];
    this.len_map = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1];
    this.array_len_map = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
    this.crc_extra = 46;
    this._name = 'ADAP_TUNING';

    this._instance_field = 'axis';
    this._instance_offset = 48;

    this.fieldnames = ['axis', 'desired', 'achieved', 'error', 'theta', 'omega', 'sigma', 'theta_dot', 'omega_dot', 'sigma_dot', 'f', 'f_dot', 'u'];

}

mavlink20.messages.adap_tuning.prototype = new mavlink20.message;
mavlink20.messages.adap_tuning.prototype.pack = function(mav) {
    var orderedfields = [ this.desired, this.achieved, this.error, this.theta, this.omega, this.sigma, this.theta_dot, this.omega_dot, this.sigma_dot, this.f, this.f_dot, this.u, this.axis];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink20.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
Camera vision based attitude and position deltas.

                time_usec                 : Timestamp (synced to UNIX time or since system boot). (uint64_t)
                time_delta_usec           : Time since the last reported camera frame. (uint64_t)
                angle_delta               : Defines a rotation vector [roll, pitch, yaw] to the current MAV_FRAME_BODY_FRD from the previous MAV_FRAME_BODY_FRD. (float)
                position_delta            : Change in position to the current MAV_FRAME_BODY_FRD from the previous FRAME_BODY_FRD rotated to the current MAV_FRAME_BODY_FRD. (float)
                confidence                : Normalised confidence value from 0 to 100. (float)

*/
    mavlink20.messages.vision_position_delta = function( ...moreargs ) {
     [ this.time_usec , this.time_delta_usec , this.angle_delta , this.position_delta , this.confidence ] = moreargs;


    this._format = '<QQ3f3ff';
    this._id = mavlink20.MAVLINK_MSG_ID_VISION_POSITION_DELTA;
    this.order_map = [0, 1, 2, 3, 4];
    this.len_map = [1, 1, 3, 3, 1];
    this.array_len_map = [0, 0, 3, 3, 0];
    this.crc_extra = 106;
    this._name = 'VISION_POSITION_DELTA';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['time_usec', 'time_delta_usec', 'angle_delta', 'position_delta', 'confidence'];

}

mavlink20.messages.vision_position_delta.prototype = new mavlink20.message;
mavlink20.messages.vision_position_delta.prototype.pack = function(mav) {
    var orderedfields = [ this.time_usec, this.time_delta_usec, this.angle_delta, this.position_delta, this.confidence];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink20.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
Angle of Attack and Side Slip Angle.

                time_usec                 : Timestamp (since boot or Unix epoch). (uint64_t)
                AOA                       : Angle of Attack. (float)
                SSA                       : Side Slip Angle. (float)

*/
    mavlink20.messages.aoa_ssa = function( ...moreargs ) {
     [ this.time_usec , this.AOA , this.SSA ] = moreargs;


    this._format = '<Qff';
    this._id = mavlink20.MAVLINK_MSG_ID_AOA_SSA;
    this.order_map = [0, 1, 2];
    this.len_map = [1, 1, 1];
    this.array_len_map = [0, 0, 0];
    this.crc_extra = 205;
    this._name = 'AOA_SSA';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['time_usec', 'AOA', 'SSA'];

}

mavlink20.messages.aoa_ssa.prototype = new mavlink20.message;
mavlink20.messages.aoa_ssa.prototype.pack = function(mav) {
    var orderedfields = [ this.time_usec, this.AOA, this.SSA];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink20.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
ESC Telemetry Data for ESCs 1 to 4, matching data sent by BLHeli ESCs.

                temperature               : Temperature. (uint8_t)
                voltage                   : Voltage. (uint16_t)
                current                   : Current. (uint16_t)
                totalcurrent              : Total current. (uint16_t)
                rpm                       : RPM (eRPM). (uint16_t)
                count                     : count of telemetry packets received (wraps at 65535). (uint16_t)

*/
    mavlink20.messages.esc_telemetry_1_to_4 = function( ...moreargs ) {
     [ this.temperature , this.voltage , this.current , this.totalcurrent , this.rpm , this.count ] = moreargs;


    this._format = '<4H4H4H4H4H4s';
    this._id = mavlink20.MAVLINK_MSG_ID_ESC_TELEMETRY_1_TO_4;
    this.order_map = [5, 0, 1, 2, 3, 4];
    this.len_map = [4, 4, 4, 4, 4, 4];
    this.array_len_map = [4, 4, 4, 4, 4, 4];
    this.crc_extra = 144;
    this._name = 'ESC_TELEMETRY_1_TO_4';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['temperature', 'voltage', 'current', 'totalcurrent', 'rpm', 'count'];

}

mavlink20.messages.esc_telemetry_1_to_4.prototype = new mavlink20.message;
mavlink20.messages.esc_telemetry_1_to_4.prototype.pack = function(mav) {
    var orderedfields = [ this.voltage, this.current, this.totalcurrent, this.rpm, this.count, this.temperature];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink20.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
ESC Telemetry Data for ESCs 5 to 8, matching data sent by BLHeli ESCs.

                temperature               : Temperature. (uint8_t)
                voltage                   : Voltage. (uint16_t)
                current                   : Current. (uint16_t)
                totalcurrent              : Total current. (uint16_t)
                rpm                       : RPM (eRPM). (uint16_t)
                count                     : count of telemetry packets received (wraps at 65535). (uint16_t)

*/
    mavlink20.messages.esc_telemetry_5_to_8 = function( ...moreargs ) {
     [ this.temperature , this.voltage , this.current , this.totalcurrent , this.rpm , this.count ] = moreargs;


    this._format = '<4H4H4H4H4H4s';
    this._id = mavlink20.MAVLINK_MSG_ID_ESC_TELEMETRY_5_TO_8;
    this.order_map = [5, 0, 1, 2, 3, 4];
    this.len_map = [4, 4, 4, 4, 4, 4];
    this.array_len_map = [4, 4, 4, 4, 4, 4];
    this.crc_extra = 133;
    this._name = 'ESC_TELEMETRY_5_TO_8';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['temperature', 'voltage', 'current', 'totalcurrent', 'rpm', 'count'];

}

mavlink20.messages.esc_telemetry_5_to_8.prototype = new mavlink20.message;
mavlink20.messages.esc_telemetry_5_to_8.prototype.pack = function(mav) {
    var orderedfields = [ this.voltage, this.current, this.totalcurrent, this.rpm, this.count, this.temperature];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink20.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
ESC Telemetry Data for ESCs 9 to 12, matching data sent by BLHeli
ESCs.

                temperature               : Temperature. (uint8_t)
                voltage                   : Voltage. (uint16_t)
                current                   : Current. (uint16_t)
                totalcurrent              : Total current. (uint16_t)
                rpm                       : RPM (eRPM). (uint16_t)
                count                     : count of telemetry packets received (wraps at 65535). (uint16_t)

*/
    mavlink20.messages.esc_telemetry_9_to_12 = function( ...moreargs ) {
     [ this.temperature , this.voltage , this.current , this.totalcurrent , this.rpm , this.count ] = moreargs;


    this._format = '<4H4H4H4H4H4s';
    this._id = mavlink20.MAVLINK_MSG_ID_ESC_TELEMETRY_9_TO_12;
    this.order_map = [5, 0, 1, 2, 3, 4];
    this.len_map = [4, 4, 4, 4, 4, 4];
    this.array_len_map = [4, 4, 4, 4, 4, 4];
    this.crc_extra = 85;
    this._name = 'ESC_TELEMETRY_9_TO_12';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['temperature', 'voltage', 'current', 'totalcurrent', 'rpm', 'count'];

}

mavlink20.messages.esc_telemetry_9_to_12.prototype = new mavlink20.message;
mavlink20.messages.esc_telemetry_9_to_12.prototype.pack = function(mav) {
    var orderedfields = [ this.voltage, this.current, this.totalcurrent, this.rpm, this.count, this.temperature];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink20.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
Configure an OSD parameter slot.

                target_system             : System ID. (uint8_t)
                target_component          : Component ID. (uint8_t)
                request_id                : Request ID - copied to reply. (uint32_t)
                osd_screen                : OSD parameter screen index. (uint8_t)
                osd_index                 : OSD parameter display index. (uint8_t)
                param_id                  : Onboard parameter id, terminated by NULL if the length is less than 16 human-readable chars and WITHOUT null termination (NULL) byte if the length is exactly 16 chars - applications have to provide 16+1 bytes storage if the ID is stored as string (char)
                config_type               : Config type. (uint8_t)
                min_value                 : OSD parameter minimum value. (float)
                max_value                 : OSD parameter maximum value. (float)
                increment                 : OSD parameter increment. (float)

*/
    mavlink20.messages.osd_param_config = function( ...moreargs ) {
     [ this.target_system , this.target_component , this.request_id , this.osd_screen , this.osd_index , this.param_id , this.config_type , this.min_value , this.max_value , this.increment ] = moreargs;


    this._format = '<IfffBBBB16sB';
    this._id = mavlink20.MAVLINK_MSG_ID_OSD_PARAM_CONFIG;
    this.order_map = [4, 5, 0, 6, 7, 8, 9, 1, 2, 3];
    this.len_map = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1];
    this.array_len_map = [0, 0, 0, 0, 0, 0, 0, 0, 16, 0];
    this.crc_extra = 195;
    this._name = 'OSD_PARAM_CONFIG';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['target_system', 'target_component', 'request_id', 'osd_screen', 'osd_index', 'param_id', 'config_type', 'min_value', 'max_value', 'increment'];

}

mavlink20.messages.osd_param_config.prototype = new mavlink20.message;
mavlink20.messages.osd_param_config.prototype.pack = function(mav) {
    var orderedfields = [ this.request_id, this.min_value, this.max_value, this.increment, this.target_system, this.target_component, this.osd_screen, this.osd_index, this.param_id, this.config_type];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink20.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
Configure OSD parameter reply.

                request_id                : Request ID - copied from request. (uint32_t)
                result                    : Config error type. (uint8_t)

*/
    mavlink20.messages.osd_param_config_reply = function( ...moreargs ) {
     [ this.request_id , this.result ] = moreargs;


    this._format = '<IB';
    this._id = mavlink20.MAVLINK_MSG_ID_OSD_PARAM_CONFIG_REPLY;
    this.order_map = [0, 1];
    this.len_map = [1, 1];
    this.array_len_map = [0, 0];
    this.crc_extra = 79;
    this._name = 'OSD_PARAM_CONFIG_REPLY';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['request_id', 'result'];

}

mavlink20.messages.osd_param_config_reply.prototype = new mavlink20.message;
mavlink20.messages.osd_param_config_reply.prototype.pack = function(mav) {
    var orderedfields = [ this.request_id, this.result];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink20.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
Read a configured an OSD parameter slot.

                target_system             : System ID. (uint8_t)
                target_component          : Component ID. (uint8_t)
                request_id                : Request ID - copied to reply. (uint32_t)
                osd_screen                : OSD parameter screen index. (uint8_t)
                osd_index                 : OSD parameter display index. (uint8_t)

*/
    mavlink20.messages.osd_param_show_config = function( ...moreargs ) {
     [ this.target_system , this.target_component , this.request_id , this.osd_screen , this.osd_index ] = moreargs;


    this._format = '<IBBBB';
    this._id = mavlink20.MAVLINK_MSG_ID_OSD_PARAM_SHOW_CONFIG;
    this.order_map = [1, 2, 0, 3, 4];
    this.len_map = [1, 1, 1, 1, 1];
    this.array_len_map = [0, 0, 0, 0, 0];
    this.crc_extra = 128;
    this._name = 'OSD_PARAM_SHOW_CONFIG';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['target_system', 'target_component', 'request_id', 'osd_screen', 'osd_index'];

}

mavlink20.messages.osd_param_show_config.prototype = new mavlink20.message;
mavlink20.messages.osd_param_show_config.prototype.pack = function(mav) {
    var orderedfields = [ this.request_id, this.target_system, this.target_component, this.osd_screen, this.osd_index];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink20.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
Read configured OSD parameter reply.

                request_id                : Request ID - copied from request. (uint32_t)
                result                    : Config error type. (uint8_t)
                param_id                  : Onboard parameter id, terminated by NULL if the length is less than 16 human-readable chars and WITHOUT null termination (NULL) byte if the length is exactly 16 chars - applications have to provide 16+1 bytes storage if the ID is stored as string (char)
                config_type               : Config type. (uint8_t)
                min_value                 : OSD parameter minimum value. (float)
                max_value                 : OSD parameter maximum value. (float)
                increment                 : OSD parameter increment. (float)

*/
    mavlink20.messages.osd_param_show_config_reply = function( ...moreargs ) {
     [ this.request_id , this.result , this.param_id , this.config_type , this.min_value , this.max_value , this.increment ] = moreargs;


    this._format = '<IfffB16sB';
    this._id = mavlink20.MAVLINK_MSG_ID_OSD_PARAM_SHOW_CONFIG_REPLY;
    this.order_map = [0, 4, 5, 6, 1, 2, 3];
    this.len_map = [1, 1, 1, 1, 1, 1, 1];
    this.array_len_map = [0, 0, 0, 0, 0, 16, 0];
    this.crc_extra = 177;
    this._name = 'OSD_PARAM_SHOW_CONFIG_REPLY';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['request_id', 'result', 'param_id', 'config_type', 'min_value', 'max_value', 'increment'];

}

mavlink20.messages.osd_param_show_config_reply.prototype = new mavlink20.message;
mavlink20.messages.osd_param_show_config_reply.prototype.pack = function(mav) {
    var orderedfields = [ this.request_id, this.min_value, this.max_value, this.increment, this.result, this.param_id, this.config_type];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink20.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
Obstacle located as a 3D vector.

                time_boot_ms              : Timestamp (time since system boot). (uint32_t)
                sensor_type               : Class id of the distance sensor type. (uint8_t)
                frame                     : Coordinate frame of reference. (uint8_t)
                obstacle_id               : Unique ID given to each obstacle so that its movement can be tracked. Use UINT16_MAX if object ID is unknown or cannot be determined. (uint16_t)
                x                         : X position of the obstacle. (float)
                y                         : Y position of the obstacle. (float)
                z                         : Z position of the obstacle. (float)
                min_distance              : Minimum distance the sensor can measure. (float)
                max_distance              : Maximum distance the sensor can measure. (float)

*/
    mavlink20.messages.obstacle_distance_3d = function( ...moreargs ) {
     [ this.time_boot_ms , this.sensor_type , this.frame , this.obstacle_id , this.x , this.y , this.z , this.min_distance , this.max_distance ] = moreargs;


    this._format = '<IfffffHBB';
    this._id = mavlink20.MAVLINK_MSG_ID_OBSTACLE_DISTANCE_3D;
    this.order_map = [0, 7, 8, 6, 1, 2, 3, 4, 5];
    this.len_map = [1, 1, 1, 1, 1, 1, 1, 1, 1];
    this.array_len_map = [0, 0, 0, 0, 0, 0, 0, 0, 0];
    this.crc_extra = 130;
    this._name = 'OBSTACLE_DISTANCE_3D';

    this._instance_field = 'obstacle_id';
    this._instance_offset = 24;

    this.fieldnames = ['time_boot_ms', 'sensor_type', 'frame', 'obstacle_id', 'x', 'y', 'z', 'min_distance', 'max_distance'];

}

mavlink20.messages.obstacle_distance_3d.prototype = new mavlink20.message;
mavlink20.messages.obstacle_distance_3d.prototype.pack = function(mav) {
    var orderedfields = [ this.time_boot_ms, this.x, this.y, this.z, this.min_distance, this.max_distance, this.obstacle_id, this.sensor_type, this.frame];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink20.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
Water depth

                time_boot_ms              : Timestamp (time since system boot) (uint32_t)
                id                        : Onboard ID of the sensor (uint8_t)
                healthy                   : Sensor data healthy (0=unhealthy, 1=healthy) (uint8_t)
                lat                       : Latitude (int32_t)
                lng                       : Longitude (int32_t)
                alt                       : Altitude (MSL) of vehicle (float)
                roll                      : Roll angle (float)
                pitch                     : Pitch angle (float)
                yaw                       : Yaw angle (float)
                distance                  : Distance (uncorrected) (float)
                temperature               : Water temperature (float)

*/
    mavlink20.messages.water_depth = function( ...moreargs ) {
     [ this.time_boot_ms , this.id , this.healthy , this.lat , this.lng , this.alt , this.roll , this.pitch , this.yaw , this.distance , this.temperature ] = moreargs;


    this._format = '<IiiffffffBB';
    this._id = mavlink20.MAVLINK_MSG_ID_WATER_DEPTH;
    this.order_map = [0, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8];
    this.len_map = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1];
    this.array_len_map = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
    this.crc_extra = 47;
    this._name = 'WATER_DEPTH';

    this._instance_field = 'id';
    this._instance_offset = 36;

    this.fieldnames = ['time_boot_ms', 'id', 'healthy', 'lat', 'lng', 'alt', 'roll', 'pitch', 'yaw', 'distance', 'temperature'];

}

mavlink20.messages.water_depth.prototype = new mavlink20.message;
mavlink20.messages.water_depth.prototype.pack = function(mav) {
    var orderedfields = [ this.time_boot_ms, this.lat, this.lng, this.alt, this.roll, this.pitch, this.yaw, this.distance, this.temperature, this.id, this.healthy];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink20.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
The MCU status, giving MCU temperature and voltage. The min and max
voltages are to allow for detecting power supply instability.

                id                        : MCU instance (uint8_t)
                MCU_temperature           : MCU Internal temperature (int16_t)
                MCU_voltage               : MCU voltage (uint16_t)
                MCU_voltage_min           : MCU voltage minimum (uint16_t)
                MCU_voltage_max           : MCU voltage maximum (uint16_t)

*/
    mavlink20.messages.mcu_status = function( ...moreargs ) {
     [ this.id , this.MCU_temperature , this.MCU_voltage , this.MCU_voltage_min , this.MCU_voltage_max ] = moreargs;


    this._format = '<hHHHB';
    this._id = mavlink20.MAVLINK_MSG_ID_MCU_STATUS;
    this.order_map = [4, 0, 1, 2, 3];
    this.len_map = [1, 1, 1, 1, 1];
    this.array_len_map = [0, 0, 0, 0, 0];
    this.crc_extra = 142;
    this._name = 'MCU_STATUS';

    this._instance_field = 'id';
    this._instance_offset = 8;

    this.fieldnames = ['id', 'MCU_temperature', 'MCU_voltage', 'MCU_voltage_min', 'MCU_voltage_max'];

}

mavlink20.messages.mcu_status.prototype = new mavlink20.message;
mavlink20.messages.mcu_status.prototype.pack = function(mav) {
    var orderedfields = [ this.MCU_temperature, this.MCU_voltage, this.MCU_voltage_min, this.MCU_voltage_max, this.id];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink20.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
ESC Telemetry Data for ESCs 13 to 16, matching data sent by BLHeli
ESCs.

                temperature               : Temperature. (uint8_t)
                voltage                   : Voltage. (uint16_t)
                current                   : Current. (uint16_t)
                totalcurrent              : Total current. (uint16_t)
                rpm                       : RPM (eRPM). (uint16_t)
                count                     : count of telemetry packets received (wraps at 65535). (uint16_t)

*/
    mavlink20.messages.esc_telemetry_13_to_16 = function( ...moreargs ) {
     [ this.temperature , this.voltage , this.current , this.totalcurrent , this.rpm , this.count ] = moreargs;


    this._format = '<4H4H4H4H4H4s';
    this._id = mavlink20.MAVLINK_MSG_ID_ESC_TELEMETRY_13_TO_16;
    this.order_map = [5, 0, 1, 2, 3, 4];
    this.len_map = [4, 4, 4, 4, 4, 4];
    this.array_len_map = [4, 4, 4, 4, 4, 4];
    this.crc_extra = 132;
    this._name = 'ESC_TELEMETRY_13_TO_16';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['temperature', 'voltage', 'current', 'totalcurrent', 'rpm', 'count'];

}

mavlink20.messages.esc_telemetry_13_to_16.prototype = new mavlink20.message;
mavlink20.messages.esc_telemetry_13_to_16.prototype.pack = function(mav) {
    var orderedfields = [ this.voltage, this.current, this.totalcurrent, this.rpm, this.count, this.temperature];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink20.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
ESC Telemetry Data for ESCs 17 to 20, matching data sent by BLHeli
ESCs.

                temperature               : Temperature. (uint8_t)
                voltage                   : Voltage. (uint16_t)
                current                   : Current. (uint16_t)
                totalcurrent              : Total current. (uint16_t)
                rpm                       : RPM (eRPM). (uint16_t)
                count                     : count of telemetry packets received (wraps at 65535). (uint16_t)

*/
    mavlink20.messages.esc_telemetry_17_to_20 = function( ...moreargs ) {
     [ this.temperature , this.voltage , this.current , this.totalcurrent , this.rpm , this.count ] = moreargs;


    this._format = '<4H4H4H4H4H4s';
    this._id = mavlink20.MAVLINK_MSG_ID_ESC_TELEMETRY_17_TO_20;
    this.order_map = [5, 0, 1, 2, 3, 4];
    this.len_map = [4, 4, 4, 4, 4, 4];
    this.array_len_map = [4, 4, 4, 4, 4, 4];
    this.crc_extra = 208;
    this._name = 'ESC_TELEMETRY_17_TO_20';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['temperature', 'voltage', 'current', 'totalcurrent', 'rpm', 'count'];

}

mavlink20.messages.esc_telemetry_17_to_20.prototype = new mavlink20.message;
mavlink20.messages.esc_telemetry_17_to_20.prototype.pack = function(mav) {
    var orderedfields = [ this.voltage, this.current, this.totalcurrent, this.rpm, this.count, this.temperature];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink20.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
ESC Telemetry Data for ESCs 21 to 24, matching data sent by BLHeli
ESCs.

                temperature               : Temperature. (uint8_t)
                voltage                   : Voltage. (uint16_t)
                current                   : Current. (uint16_t)
                totalcurrent              : Total current. (uint16_t)
                rpm                       : RPM (eRPM). (uint16_t)
                count                     : count of telemetry packets received (wraps at 65535). (uint16_t)

*/
    mavlink20.messages.esc_telemetry_21_to_24 = function( ...moreargs ) {
     [ this.temperature , this.voltage , this.current , this.totalcurrent , this.rpm , this.count ] = moreargs;


    this._format = '<4H4H4H4H4H4s';
    this._id = mavlink20.MAVLINK_MSG_ID_ESC_TELEMETRY_21_TO_24;
    this.order_map = [5, 0, 1, 2, 3, 4];
    this.len_map = [4, 4, 4, 4, 4, 4];
    this.array_len_map = [4, 4, 4, 4, 4, 4];
    this.crc_extra = 201;
    this._name = 'ESC_TELEMETRY_21_TO_24';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['temperature', 'voltage', 'current', 'totalcurrent', 'rpm', 'count'];

}

mavlink20.messages.esc_telemetry_21_to_24.prototype = new mavlink20.message;
mavlink20.messages.esc_telemetry_21_to_24.prototype.pack = function(mav) {
    var orderedfields = [ this.voltage, this.current, this.totalcurrent, this.rpm, this.count, this.temperature];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink20.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
ESC Telemetry Data for ESCs 25 to 28, matching data sent by BLHeli
ESCs.

                temperature               : Temperature. (uint8_t)
                voltage                   : Voltage. (uint16_t)
                current                   : Current. (uint16_t)
                totalcurrent              : Total current. (uint16_t)
                rpm                       : RPM (eRPM). (uint16_t)
                count                     : count of telemetry packets received (wraps at 65535). (uint16_t)

*/
    mavlink20.messages.esc_telemetry_25_to_28 = function( ...moreargs ) {
     [ this.temperature , this.voltage , this.current , this.totalcurrent , this.rpm , this.count ] = moreargs;


    this._format = '<4H4H4H4H4H4s';
    this._id = mavlink20.MAVLINK_MSG_ID_ESC_TELEMETRY_25_TO_28;
    this.order_map = [5, 0, 1, 2, 3, 4];
    this.len_map = [4, 4, 4, 4, 4, 4];
    this.array_len_map = [4, 4, 4, 4, 4, 4];
    this.crc_extra = 193;
    this._name = 'ESC_TELEMETRY_25_TO_28';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['temperature', 'voltage', 'current', 'totalcurrent', 'rpm', 'count'];

}

mavlink20.messages.esc_telemetry_25_to_28.prototype = new mavlink20.message;
mavlink20.messages.esc_telemetry_25_to_28.prototype.pack = function(mav) {
    var orderedfields = [ this.voltage, this.current, this.totalcurrent, this.rpm, this.count, this.temperature];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink20.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
ESC Telemetry Data for ESCs 29 to 32, matching data sent by BLHeli
ESCs.

                temperature               : Temperature. (uint8_t)
                voltage                   : Voltage. (uint16_t)
                current                   : Current. (uint16_t)
                totalcurrent              : Total current. (uint16_t)
                rpm                       : RPM (eRPM). (uint16_t)
                count                     : count of telemetry packets received (wraps at 65535). (uint16_t)

*/
    mavlink20.messages.esc_telemetry_29_to_32 = function( ...moreargs ) {
     [ this.temperature , this.voltage , this.current , this.totalcurrent , this.rpm , this.count ] = moreargs;


    this._format = '<4H4H4H4H4H4s';
    this._id = mavlink20.MAVLINK_MSG_ID_ESC_TELEMETRY_29_TO_32;
    this.order_map = [5, 0, 1, 2, 3, 4];
    this.len_map = [4, 4, 4, 4, 4, 4];
    this.array_len_map = [4, 4, 4, 4, 4, 4];
    this.crc_extra = 189;
    this._name = 'ESC_TELEMETRY_29_TO_32';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['temperature', 'voltage', 'current', 'totalcurrent', 'rpm', 'count'];

}

mavlink20.messages.esc_telemetry_29_to_32.prototype = new mavlink20.message;
mavlink20.messages.esc_telemetry_29_to_32.prototype.pack = function(mav) {
    var orderedfields = [ this.voltage, this.current, this.totalcurrent, this.rpm, this.count, this.temperature];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink20.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
The general system state. If the system is following the MAVLink
standard, the system state is mainly defined by three orthogonal
states/modes: The system mode, which is either LOCKED (motors shut
down and locked), MANUAL (system under RC control), GUIDED (system
with autonomous position control, position setpoint controlled
manually) or AUTO (system guided by path/waypoint planner). The
NAV_MODE defined the current flight state: LIFTOFF (often an open-loop
maneuver), LANDING, WAYPOINTS or VECTOR. This represents the internal
navigation state machine. The system status shows whether the system
is currently active or not and if an emergency occurred. During the
CRITICAL and EMERGENCY states the MAV is still considered to be
active, but should start emergency procedures autonomously. After a
failure occurred it should first move from active to critical to allow
manual intervention and then move to emergency after a certain
timeout.

                onboard_control_sensors_present        : Bitmap showing which onboard controllers and sensors are present. Value of 0: not present. Value of 1: present. (uint32_t)
                onboard_control_sensors_enabled        : Bitmap showing which onboard controllers and sensors are enabled:  Value of 0: not enabled. Value of 1: enabled. (uint32_t)
                onboard_control_sensors_health        : Bitmap showing which onboard controllers and sensors have an error (or are operational). Value of 0: error. Value of 1: healthy. (uint32_t)
                load                      : Maximum usage in percent of the mainloop time. Values: [0-1000] - should always be below 1000 (uint16_t)
                voltage_battery           : Battery voltage, UINT16_MAX: Voltage not sent by autopilot (uint16_t)
                current_battery           : Battery current, -1: Current not sent by autopilot (int16_t)
                battery_remaining         : Battery energy remaining, -1: Battery remaining energy not sent by autopilot (int8_t)
                drop_rate_comm            : Communication drop rate, (UART, I2C, SPI, CAN), dropped packets on all links (packets that were corrupted on reception on the MAV) (uint16_t)
                errors_comm               : Communication errors (UART, I2C, SPI, CAN), dropped packets on all links (packets that were corrupted on reception on the MAV) (uint16_t)
                errors_count1             : Autopilot-specific errors (uint16_t)
                errors_count2             : Autopilot-specific errors (uint16_t)
                errors_count3             : Autopilot-specific errors (uint16_t)
                errors_count4             : Autopilot-specific errors (uint16_t)

*/
    mavlink20.messages.sys_status = function( ...moreargs ) {
     [ this.onboard_control_sensors_present , this.onboard_control_sensors_enabled , this.onboard_control_sensors_health , this.load , this.voltage_battery , this.current_battery , this.battery_remaining , this.drop_rate_comm , this.errors_comm , this.errors_count1 , this.errors_count2 , this.errors_count3 , this.errors_count4 ] = moreargs;


    this._format = '<IIIHHhHHHHHHb';
    this._id = mavlink20.MAVLINK_MSG_ID_SYS_STATUS;
    this.order_map = [0, 1, 2, 3, 4, 5, 12, 6, 7, 8, 9, 10, 11];
    this.len_map = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1];
    this.array_len_map = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
    this.crc_extra = 124;
    this._name = 'SYS_STATUS';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['onboard_control_sensors_present', 'onboard_control_sensors_enabled', 'onboard_control_sensors_health', 'load', 'voltage_battery', 'current_battery', 'battery_remaining', 'drop_rate_comm', 'errors_comm', 'errors_count1', 'errors_count2', 'errors_count3', 'errors_count4'];

}

mavlink20.messages.sys_status.prototype = new mavlink20.message;
mavlink20.messages.sys_status.prototype.pack = function(mav) {
    var orderedfields = [ this.onboard_control_sensors_present, this.onboard_control_sensors_enabled, this.onboard_control_sensors_health, this.load, this.voltage_battery, this.current_battery, this.drop_rate_comm, this.errors_comm, this.errors_count1, this.errors_count2, this.errors_count3, this.errors_count4, this.battery_remaining];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink20.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
The system time is the time of the master clock, typically the
computer clock of the main onboard computer.

                time_unix_usec            : Timestamp (UNIX epoch time). (uint64_t)
                time_boot_ms              : Timestamp (time since system boot). (uint32_t)

*/
    mavlink20.messages.system_time = function( ...moreargs ) {
     [ this.time_unix_usec , this.time_boot_ms ] = moreargs;


    this._format = '<QI';
    this._id = mavlink20.MAVLINK_MSG_ID_SYSTEM_TIME;
    this.order_map = [0, 1];
    this.len_map = [1, 1];
    this.array_len_map = [0, 0];
    this.crc_extra = 137;
    this._name = 'SYSTEM_TIME';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['time_unix_usec', 'time_boot_ms'];

}

mavlink20.messages.system_time.prototype = new mavlink20.message;
mavlink20.messages.system_time.prototype.pack = function(mav) {
    var orderedfields = [ this.time_unix_usec, this.time_boot_ms];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink20.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
A ping message either requesting or responding to a ping. This allows
to measure the system latencies, including serial port, radio modem
and UDP connections. The ping microservice is documented at
https://mavlink.io/en/services/ping.html

                time_usec                 : Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude of the number. (uint64_t)
                seq                       : PING sequence (uint32_t)
                target_system             : 0: request ping from all receiving systems. If greater than 0: message is a ping response and number is the system id of the requesting system (uint8_t)
                target_component          : 0: request ping from all receiving components. If greater than 0: message is a ping response and number is the component id of the requesting component. (uint8_t)

*/
    mavlink20.messages.ping = function( ...moreargs ) {
     [ this.time_usec , this.seq , this.target_system , this.target_component ] = moreargs;


    this._format = '<QIBB';
    this._id = mavlink20.MAVLINK_MSG_ID_PING;
    this.order_map = [0, 1, 2, 3];
    this.len_map = [1, 1, 1, 1];
    this.array_len_map = [0, 0, 0, 0];
    this.crc_extra = 237;
    this._name = 'PING';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['time_usec', 'seq', 'target_system', 'target_component'];

}

mavlink20.messages.ping.prototype = new mavlink20.message;
mavlink20.messages.ping.prototype.pack = function(mav) {
    var orderedfields = [ this.time_usec, this.seq, this.target_system, this.target_component];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink20.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
Request to control this MAV

                target_system             : System the GCS requests control for (uint8_t)
                control_request           : 0: request control of this MAV, 1: Release control of this MAV (uint8_t)
                version                   : 0: key as plaintext, 1-255: future, different hashing/encryption variants. The GCS should in general use the safest mode possible initially and then gradually move down the encryption level if it gets a NACK message indicating an encryption mismatch. (uint8_t)
                passkey                   : Password / Key, depending on version plaintext or encrypted. 25 or less characters, NULL terminated. The characters may involve A-Z, a-z, 0-9, and "!?,.-" (char)

*/
    mavlink20.messages.change_operator_control = function( ...moreargs ) {
     [ this.target_system , this.control_request , this.version , this.passkey ] = moreargs;


    this._format = '<BBB25s';
    this._id = mavlink20.MAVLINK_MSG_ID_CHANGE_OPERATOR_CONTROL;
    this.order_map = [0, 1, 2, 3];
    this.len_map = [1, 1, 1, 1];
    this.array_len_map = [0, 0, 0, 25];
    this.crc_extra = 217;
    this._name = 'CHANGE_OPERATOR_CONTROL';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['target_system', 'control_request', 'version', 'passkey'];

}

mavlink20.messages.change_operator_control.prototype = new mavlink20.message;
mavlink20.messages.change_operator_control.prototype.pack = function(mav) {
    var orderedfields = [ this.target_system, this.control_request, this.version, this.passkey];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink20.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
Accept / deny control of this MAV

                gcs_system_id             : ID of the GCS this message (uint8_t)
                control_request           : 0: request control of this MAV, 1: Release control of this MAV (uint8_t)
                ack                       : 0: ACK, 1: NACK: Wrong passkey, 2: NACK: Unsupported passkey encryption method, 3: NACK: Already under control (uint8_t)

*/
    mavlink20.messages.change_operator_control_ack = function( ...moreargs ) {
     [ this.gcs_system_id , this.control_request , this.ack ] = moreargs;


    this._format = '<BBB';
    this._id = mavlink20.MAVLINK_MSG_ID_CHANGE_OPERATOR_CONTROL_ACK;
    this.order_map = [0, 1, 2];
    this.len_map = [1, 1, 1];
    this.array_len_map = [0, 0, 0];
    this.crc_extra = 104;
    this._name = 'CHANGE_OPERATOR_CONTROL_ACK';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['gcs_system_id', 'control_request', 'ack'];

}

mavlink20.messages.change_operator_control_ack.prototype = new mavlink20.message;
mavlink20.messages.change_operator_control_ack.prototype.pack = function(mav) {
    var orderedfields = [ this.gcs_system_id, this.control_request, this.ack];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink20.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
Emit an encrypted signature / key identifying this system. PLEASE
NOTE: This protocol has been kept simple, so transmitting the key
requires an encrypted channel for true safety.

                key                       : key (char)

*/
    mavlink20.messages.auth_key = function( ...moreargs ) {
     [ this.key ] = moreargs;


    this._format = '<32s';
    this._id = mavlink20.MAVLINK_MSG_ID_AUTH_KEY;
    this.order_map = [0];
    this.len_map = [1];
    this.array_len_map = [32];
    this.crc_extra = 119;
    this._name = 'AUTH_KEY';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['key'];

}

mavlink20.messages.auth_key.prototype = new mavlink20.message;
mavlink20.messages.auth_key.prototype.pack = function(mav) {
    var orderedfields = [ this.key];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink20.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
Set the system mode, as defined by enum MAV_MODE. There is no target
component id as the mode is by definition for the overall aircraft,
not only for one component.

                target_system             : The system setting the mode (uint8_t)
                base_mode                 : The new base mode. (uint8_t)
                custom_mode               : The new autopilot-specific mode. This field can be ignored by an autopilot. (uint32_t)

*/
    mavlink20.messages.set_mode = function( ...moreargs ) {
     [ this.target_system , this.base_mode , this.custom_mode ] = moreargs;


    this._format = '<IBB';
    this._id = mavlink20.MAVLINK_MSG_ID_SET_MODE;
    this.order_map = [1, 2, 0];
    this.len_map = [1, 1, 1];
    this.array_len_map = [0, 0, 0];
    this.crc_extra = 89;
    this._name = 'SET_MODE';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['target_system', 'base_mode', 'custom_mode'];

}

mavlink20.messages.set_mode.prototype = new mavlink20.message;
mavlink20.messages.set_mode.prototype.pack = function(mav) {
    var orderedfields = [ this.custom_mode, this.target_system, this.base_mode];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink20.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
Request to read the onboard parameter with the param_id string id.
Onboard parameters are stored as key[const char*] -> value[float].
This allows to send a parameter to any other component (such as the
GCS) without the need of previous knowledge of possible parameter
names. Thus the same GCS can store different parameters for different
autopilots. See also https://mavlink.io/en/services/parameter.html for
a full documentation of QGroundControl and IMU code.

                target_system             : System ID (uint8_t)
                target_component          : Component ID (uint8_t)
                param_id                  : Onboard parameter id, terminated by NULL if the length is less than 16 human-readable chars and WITHOUT null termination (NULL) byte if the length is exactly 16 chars - applications have to provide 16+1 bytes storage if the ID is stored as string (char)
                param_index               : Parameter index. Send -1 to use the param ID field as identifier (else the param id will be ignored) (int16_t)

*/
    mavlink20.messages.param_request_read = function( ...moreargs ) {
     [ this.target_system , this.target_component , this.param_id , this.param_index ] = moreargs;


    this._format = '<hBB16s';
    this._id = mavlink20.MAVLINK_MSG_ID_PARAM_REQUEST_READ;
    this.order_map = [1, 2, 3, 0];
    this.len_map = [1, 1, 1, 1];
    this.array_len_map = [0, 0, 0, 16];
    this.crc_extra = 214;
    this._name = 'PARAM_REQUEST_READ';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['target_system', 'target_component', 'param_id', 'param_index'];

}

mavlink20.messages.param_request_read.prototype = new mavlink20.message;
mavlink20.messages.param_request_read.prototype.pack = function(mav) {
    var orderedfields = [ this.param_index, this.target_system, this.target_component, this.param_id];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink20.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
Request all parameters of this component. After this request, all
parameters are emitted. The parameter microservice is documented at
https://mavlink.io/en/services/parameter.html

                target_system             : System ID (uint8_t)
                target_component          : Component ID (uint8_t)

*/
    mavlink20.messages.param_request_list = function( ...moreargs ) {
     [ this.target_system , this.target_component ] = moreargs;


    this._format = '<BB';
    this._id = mavlink20.MAVLINK_MSG_ID_PARAM_REQUEST_LIST;
    this.order_map = [0, 1];
    this.len_map = [1, 1];
    this.array_len_map = [0, 0];
    this.crc_extra = 159;
    this._name = 'PARAM_REQUEST_LIST';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['target_system', 'target_component'];

}

mavlink20.messages.param_request_list.prototype = new mavlink20.message;
mavlink20.messages.param_request_list.prototype.pack = function(mav) {
    var orderedfields = [ this.target_system, this.target_component];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink20.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
Emit the value of a onboard parameter. The inclusion of param_count
and param_index in the message allows the recipient to keep track of
received parameters and allows him to re-request missing parameters
after a loss or timeout. The parameter microservice is documented at
https://mavlink.io/en/services/parameter.html

                param_id                  : Onboard parameter id, terminated by NULL if the length is less than 16 human-readable chars and WITHOUT null termination (NULL) byte if the length is exactly 16 chars - applications have to provide 16+1 bytes storage if the ID is stored as string (char)
                param_value               : Onboard parameter value (float)
                param_type                : Onboard parameter type. (uint8_t)
                param_count               : Total number of onboard parameters (uint16_t)
                param_index               : Index of this onboard parameter (uint16_t)

*/
    mavlink20.messages.param_value = function( ...moreargs ) {
     [ this.param_id , this.param_value , this.param_type , this.param_count , this.param_index ] = moreargs;


    this._format = '<fHH16sB';
    this._id = mavlink20.MAVLINK_MSG_ID_PARAM_VALUE;
    this.order_map = [3, 0, 4, 1, 2];
    this.len_map = [1, 1, 1, 1, 1];
    this.array_len_map = [0, 0, 0, 16, 0];
    this.crc_extra = 220;
    this._name = 'PARAM_VALUE';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['param_id', 'param_value', 'param_type', 'param_count', 'param_index'];

}

mavlink20.messages.param_value.prototype = new mavlink20.message;
mavlink20.messages.param_value.prototype.pack = function(mav) {
    var orderedfields = [ this.param_value, this.param_count, this.param_index, this.param_id, this.param_type];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink20.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
Set a parameter value (write new value to permanent storage).
The receiving component should acknowledge the new parameter value by
broadcasting a PARAM_VALUE message (broadcasting ensures that multiple
GCS all have an up-to-date list of all parameters). If the sending GCS
did not receive a PARAM_VALUE within its timeout time, it should re-
send the PARAM_SET message. The parameter microservice is documented
at https://mavlink.io/en/services/parameter.html.

                target_system             : System ID (uint8_t)
                target_component          : Component ID (uint8_t)
                param_id                  : Onboard parameter id, terminated by NULL if the length is less than 16 human-readable chars and WITHOUT null termination (NULL) byte if the length is exactly 16 chars - applications have to provide 16+1 bytes storage if the ID is stored as string (char)
                param_value               : Onboard parameter value (float)
                param_type                : Onboard parameter type. (uint8_t)

*/
    mavlink20.messages.param_set = function( ...moreargs ) {
     [ this.target_system , this.target_component , this.param_id , this.param_value , this.param_type ] = moreargs;


    this._format = '<fBB16sB';
    this._id = mavlink20.MAVLINK_MSG_ID_PARAM_SET;
    this.order_map = [1, 2, 3, 0, 4];
    this.len_map = [1, 1, 1, 1, 1];
    this.array_len_map = [0, 0, 0, 16, 0];
    this.crc_extra = 168;
    this._name = 'PARAM_SET';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['target_system', 'target_component', 'param_id', 'param_value', 'param_type'];

}

mavlink20.messages.param_set.prototype = new mavlink20.message;
mavlink20.messages.param_set.prototype.pack = function(mav) {
    var orderedfields = [ this.param_value, this.target_system, this.target_component, this.param_id, this.param_type];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink20.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
The global position, as returned by the Global Positioning System
(GPS). This is                 NOT the global position estimate of the
system, but rather a RAW sensor value. See message GLOBAL_POSITION for
the global position estimate.

                time_usec                 : Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude of the number. (uint64_t)
                fix_type                  : GPS fix type. (uint8_t)
                lat                       : Latitude (WGS84, EGM96 ellipsoid) (int32_t)
                lon                       : Longitude (WGS84, EGM96 ellipsoid) (int32_t)
                alt                       : Altitude (MSL). Positive for up. Note that virtually all GPS modules provide the MSL altitude in addition to the WGS84 altitude. (int32_t)
                eph                       : GPS HDOP horizontal dilution of position (unitless). If unknown, set to: UINT16_MAX (uint16_t)
                epv                       : GPS VDOP vertical dilution of position (unitless). If unknown, set to: UINT16_MAX (uint16_t)
                vel                       : GPS ground speed. If unknown, set to: UINT16_MAX (uint16_t)
                cog                       : Course over ground (NOT heading, but direction of movement) in degrees * 100, 0.0..359.99 degrees. If unknown, set to: UINT16_MAX (uint16_t)
                satellites_visible        : Number of satellites visible. If unknown, set to 255 (uint8_t)
                alt_ellipsoid             : Altitude (above WGS84, EGM96 ellipsoid). Positive for up. (int32_t)
                h_acc                     : Position uncertainty. (uint32_t)
                v_acc                     : Altitude uncertainty. (uint32_t)
                vel_acc                   : Speed uncertainty. (uint32_t)
                hdg_acc                   : Heading / track uncertainty (uint32_t)
                yaw                       : Yaw in earth frame from north. Use 0 if this GPS does not provide yaw. Use 65535 if this GPS is configured to provide yaw and is currently unable to provide it. Use 36000 for north. (uint16_t)

*/
    mavlink20.messages.gps_raw_int = function( ...moreargs ) {
     [ this.time_usec , this.fix_type , this.lat , this.lon , this.alt , this.eph , this.epv , this.vel , this.cog , this.satellites_visible , this.alt_ellipsoid , this.h_acc , this.v_acc , this.vel_acc , this.hdg_acc , this.yaw ] = moreargs;


    this._format = '<QiiiHHHHBBiIIIIH';
    this._id = mavlink20.MAVLINK_MSG_ID_GPS_RAW_INT;
    this.order_map = [0, 8, 1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15];
    this.len_map = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1];
    this.array_len_map = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
    this.crc_extra = 24;
    this._name = 'GPS_RAW_INT';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['time_usec', 'fix_type', 'lat', 'lon', 'alt', 'eph', 'epv', 'vel', 'cog', 'satellites_visible', 'alt_ellipsoid', 'h_acc', 'v_acc', 'vel_acc', 'hdg_acc', 'yaw'];

}

mavlink20.messages.gps_raw_int.prototype = new mavlink20.message;
mavlink20.messages.gps_raw_int.prototype.pack = function(mav) {
    var orderedfields = [ this.time_usec, this.lat, this.lon, this.alt, this.eph, this.epv, this.vel, this.cog, this.fix_type, this.satellites_visible, this.alt_ellipsoid, this.h_acc, this.v_acc, this.vel_acc, this.hdg_acc, this.yaw];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink20.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
The positioning status, as reported by GPS. This message is intended
to display status information about each satellite visible to the
receiver. See message GLOBAL_POSITION for the global position
estimate. This message can contain information for up to 20
satellites.

                satellites_visible        : Number of satellites visible (uint8_t)
                satellite_prn             : Global satellite ID (uint8_t)
                satellite_used            : 0: Satellite not used, 1: used for localization (uint8_t)
                satellite_elevation        : Elevation (0: right on top of receiver, 90: on the horizon) of satellite (uint8_t)
                satellite_azimuth         : Direction of satellite, 0: 0 deg, 255: 360 deg. (uint8_t)
                satellite_snr             : Signal to noise ratio of satellite (uint8_t)

*/
    mavlink20.messages.gps_status = function( ...moreargs ) {
     [ this.satellites_visible , this.satellite_prn , this.satellite_used , this.satellite_elevation , this.satellite_azimuth , this.satellite_snr ] = moreargs;


    this._format = '<B20s20s20s20s20s';
    this._id = mavlink20.MAVLINK_MSG_ID_GPS_STATUS;
    this.order_map = [0, 1, 2, 3, 4, 5];
    this.len_map = [1, 20, 20, 20, 20, 20];
    this.array_len_map = [0, 20, 20, 20, 20, 20];
    this.crc_extra = 23;
    this._name = 'GPS_STATUS';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['satellites_visible', 'satellite_prn', 'satellite_used', 'satellite_elevation', 'satellite_azimuth', 'satellite_snr'];

}

mavlink20.messages.gps_status.prototype = new mavlink20.message;
mavlink20.messages.gps_status.prototype.pack = function(mav) {
    var orderedfields = [ this.satellites_visible, this.satellite_prn, this.satellite_used, this.satellite_elevation, this.satellite_azimuth, this.satellite_snr];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink20.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
The RAW IMU readings for the usual 9DOF sensor setup. This message
should contain the scaled values to the described units

                time_boot_ms              : Timestamp (time since system boot). (uint32_t)
                xacc                      : X acceleration (int16_t)
                yacc                      : Y acceleration (int16_t)
                zacc                      : Z acceleration (int16_t)
                xgyro                     : Angular speed around X axis (int16_t)
                ygyro                     : Angular speed around Y axis (int16_t)
                zgyro                     : Angular speed around Z axis (int16_t)
                xmag                      : X Magnetic field (int16_t)
                ymag                      : Y Magnetic field (int16_t)
                zmag                      : Z Magnetic field (int16_t)
                temperature               : Temperature, 0: IMU does not provide temperature values. If the IMU is at 0C it must send 1 (0.01C). (int16_t)

*/
    mavlink20.messages.scaled_imu = function( ...moreargs ) {
     [ this.time_boot_ms , this.xacc , this.yacc , this.zacc , this.xgyro , this.ygyro , this.zgyro , this.xmag , this.ymag , this.zmag , this.temperature ] = moreargs;


    this._format = '<Ihhhhhhhhhh';
    this._id = mavlink20.MAVLINK_MSG_ID_SCALED_IMU;
    this.order_map = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10];
    this.len_map = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1];
    this.array_len_map = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
    this.crc_extra = 170;
    this._name = 'SCALED_IMU';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['time_boot_ms', 'xacc', 'yacc', 'zacc', 'xgyro', 'ygyro', 'zgyro', 'xmag', 'ymag', 'zmag', 'temperature'];

}

mavlink20.messages.scaled_imu.prototype = new mavlink20.message;
mavlink20.messages.scaled_imu.prototype.pack = function(mav) {
    var orderedfields = [ this.time_boot_ms, this.xacc, this.yacc, this.zacc, this.xgyro, this.ygyro, this.zgyro, this.xmag, this.ymag, this.zmag, this.temperature];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink20.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
The RAW IMU readings for a 9DOF sensor, which is identified by the id
(default IMU1). This message should always contain the true raw values
without any scaling to allow data capture and system debugging.

                time_usec                 : Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude of the number. (uint64_t)
                xacc                      : X acceleration (raw) (int16_t)
                yacc                      : Y acceleration (raw) (int16_t)
                zacc                      : Z acceleration (raw) (int16_t)
                xgyro                     : Angular speed around X axis (raw) (int16_t)
                ygyro                     : Angular speed around Y axis (raw) (int16_t)
                zgyro                     : Angular speed around Z axis (raw) (int16_t)
                xmag                      : X Magnetic field (raw) (int16_t)
                ymag                      : Y Magnetic field (raw) (int16_t)
                zmag                      : Z Magnetic field (raw) (int16_t)
                id                        : Id. Ids are numbered from 0 and map to IMUs numbered from 1 (e.g. IMU1 will have a message with id=0) (uint8_t)
                temperature               : Temperature, 0: IMU does not provide temperature values. If the IMU is at 0C it must send 1 (0.01C). (int16_t)

*/
    mavlink20.messages.raw_imu = function( ...moreargs ) {
     [ this.time_usec , this.xacc , this.yacc , this.zacc , this.xgyro , this.ygyro , this.zgyro , this.xmag , this.ymag , this.zmag , this.id , this.temperature ] = moreargs;


    this._format = '<QhhhhhhhhhBh';
    this._id = mavlink20.MAVLINK_MSG_ID_RAW_IMU;
    this.order_map = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11];
    this.len_map = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1];
    this.array_len_map = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
    this.crc_extra = 144;
    this._name = 'RAW_IMU';

    this._instance_field = 'id';
    this._instance_offset = 26;

    this.fieldnames = ['time_usec', 'xacc', 'yacc', 'zacc', 'xgyro', 'ygyro', 'zgyro', 'xmag', 'ymag', 'zmag', 'id', 'temperature'];

}

mavlink20.messages.raw_imu.prototype = new mavlink20.message;
mavlink20.messages.raw_imu.prototype.pack = function(mav) {
    var orderedfields = [ this.time_usec, this.xacc, this.yacc, this.zacc, this.xgyro, this.ygyro, this.zgyro, this.xmag, this.ymag, this.zmag, this.id, this.temperature];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink20.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
The RAW pressure readings for the typical setup of one absolute
pressure and one differential pressure sensor. The sensor values
should be the raw, UNSCALED ADC values.

                time_usec                 : Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude of the number. (uint64_t)
                press_abs                 : Absolute pressure (raw) (int16_t)
                press_diff1               : Differential pressure 1 (raw, 0 if nonexistent) (int16_t)
                press_diff2               : Differential pressure 2 (raw, 0 if nonexistent) (int16_t)
                temperature               : Raw Temperature measurement (raw) (int16_t)

*/
    mavlink20.messages.raw_pressure = function( ...moreargs ) {
     [ this.time_usec , this.press_abs , this.press_diff1 , this.press_diff2 , this.temperature ] = moreargs;


    this._format = '<Qhhhh';
    this._id = mavlink20.MAVLINK_MSG_ID_RAW_PRESSURE;
    this.order_map = [0, 1, 2, 3, 4];
    this.len_map = [1, 1, 1, 1, 1];
    this.array_len_map = [0, 0, 0, 0, 0];
    this.crc_extra = 67;
    this._name = 'RAW_PRESSURE';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['time_usec', 'press_abs', 'press_diff1', 'press_diff2', 'temperature'];

}

mavlink20.messages.raw_pressure.prototype = new mavlink20.message;
mavlink20.messages.raw_pressure.prototype.pack = function(mav) {
    var orderedfields = [ this.time_usec, this.press_abs, this.press_diff1, this.press_diff2, this.temperature];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink20.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
The pressure readings for the typical setup of one absolute and
differential pressure sensor. The units are as specified in each
field.

                time_boot_ms              : Timestamp (time since system boot). (uint32_t)
                press_abs                 : Absolute pressure (float)
                press_diff                : Differential pressure 1 (float)
                temperature               : Absolute pressure temperature (int16_t)
                temperature_press_diff        : Differential pressure temperature (0, if not available). Report values of 0 (or 1) as 1 cdegC. (int16_t)

*/
    mavlink20.messages.scaled_pressure = function( ...moreargs ) {
     [ this.time_boot_ms , this.press_abs , this.press_diff , this.temperature , this.temperature_press_diff ] = moreargs;


    this._format = '<Iffhh';
    this._id = mavlink20.MAVLINK_MSG_ID_SCALED_PRESSURE;
    this.order_map = [0, 1, 2, 3, 4];
    this.len_map = [1, 1, 1, 1, 1];
    this.array_len_map = [0, 0, 0, 0, 0];
    this.crc_extra = 115;
    this._name = 'SCALED_PRESSURE';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['time_boot_ms', 'press_abs', 'press_diff', 'temperature', 'temperature_press_diff'];

}

mavlink20.messages.scaled_pressure.prototype = new mavlink20.message;
mavlink20.messages.scaled_pressure.prototype.pack = function(mav) {
    var orderedfields = [ this.time_boot_ms, this.press_abs, this.press_diff, this.temperature, this.temperature_press_diff];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink20.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
The attitude in the aeronautical frame (right-handed, Z-down, X-front,
Y-right).

                time_boot_ms              : Timestamp (time since system boot). (uint32_t)
                roll                      : Roll angle (-pi..+pi) (float)
                pitch                     : Pitch angle (-pi..+pi) (float)
                yaw                       : Yaw angle (-pi..+pi) (float)
                rollspeed                 : Roll angular speed (float)
                pitchspeed                : Pitch angular speed (float)
                yawspeed                  : Yaw angular speed (float)

*/
    mavlink20.messages.attitude = function( ...moreargs ) {
     [ this.time_boot_ms , this.roll , this.pitch , this.yaw , this.rollspeed , this.pitchspeed , this.yawspeed ] = moreargs;


    this._format = '<Iffffff';
    this._id = mavlink20.MAVLINK_MSG_ID_ATTITUDE;
    this.order_map = [0, 1, 2, 3, 4, 5, 6];
    this.len_map = [1, 1, 1, 1, 1, 1, 1];
    this.array_len_map = [0, 0, 0, 0, 0, 0, 0];
    this.crc_extra = 39;
    this._name = 'ATTITUDE';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['time_boot_ms', 'roll', 'pitch', 'yaw', 'rollspeed', 'pitchspeed', 'yawspeed'];

}

mavlink20.messages.attitude.prototype = new mavlink20.message;
mavlink20.messages.attitude.prototype.pack = function(mav) {
    var orderedfields = [ this.time_boot_ms, this.roll, this.pitch, this.yaw, this.rollspeed, this.pitchspeed, this.yawspeed];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink20.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
The attitude in the aeronautical frame (right-handed, Z-down, X-front,
Y-right), expressed as quaternion. Quaternion order is w, x, y, z and
a zero rotation would be expressed as (1 0 0 0).

                time_boot_ms              : Timestamp (time since system boot). (uint32_t)
                q1                        : Quaternion component 1, w (1 in null-rotation) (float)
                q2                        : Quaternion component 2, x (0 in null-rotation) (float)
                q3                        : Quaternion component 3, y (0 in null-rotation) (float)
                q4                        : Quaternion component 4, z (0 in null-rotation) (float)
                rollspeed                 : Roll angular speed (float)
                pitchspeed                : Pitch angular speed (float)
                yawspeed                  : Yaw angular speed (float)
                repr_offset_q             : Rotation offset by which the attitude quaternion and angular speed vector should be rotated for user display (quaternion with [w, x, y, z] order, zero-rotation is [1, 0, 0, 0], send [0, 0, 0, 0] if field not supported). This field is intended for systems in which the reference attitude may change during flight. For example, tailsitters VTOLs rotate their reference attitude by 90 degrees between hover mode and fixed wing mode, thus repr_offset_q is equal to [1, 0, 0, 0] in hover mode and equal to [0.7071, 0, 0.7071, 0] in fixed wing mode. (float)

*/
    mavlink20.messages.attitude_quaternion = function( ...moreargs ) {
     [ this.time_boot_ms , this.q1 , this.q2 , this.q3 , this.q4 , this.rollspeed , this.pitchspeed , this.yawspeed , this.repr_offset_q ] = moreargs;


    this._format = '<Ifffffff4f';
    this._id = mavlink20.MAVLINK_MSG_ID_ATTITUDE_QUATERNION;
    this.order_map = [0, 1, 2, 3, 4, 5, 6, 7, 8];
    this.len_map = [1, 1, 1, 1, 1, 1, 1, 1, 4];
    this.array_len_map = [0, 0, 0, 0, 0, 0, 0, 0, 4];
    this.crc_extra = 246;
    this._name = 'ATTITUDE_QUATERNION';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['time_boot_ms', 'q1', 'q2', 'q3', 'q4', 'rollspeed', 'pitchspeed', 'yawspeed', 'repr_offset_q'];

}

mavlink20.messages.attitude_quaternion.prototype = new mavlink20.message;
mavlink20.messages.attitude_quaternion.prototype.pack = function(mav) {
    var orderedfields = [ this.time_boot_ms, this.q1, this.q2, this.q3, this.q4, this.rollspeed, this.pitchspeed, this.yawspeed, this.repr_offset_q];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink20.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
The filtered local position (e.g. fused computer vision and
accelerometers). Coordinate frame is right-handed, Z-axis down
(aeronautical frame, NED / north-east-down convention)

                time_boot_ms              : Timestamp (time since system boot). (uint32_t)
                x                         : X Position (float)
                y                         : Y Position (float)
                z                         : Z Position (float)
                vx                        : X Speed (float)
                vy                        : Y Speed (float)
                vz                        : Z Speed (float)

*/
    mavlink20.messages.local_position_ned = function( ...moreargs ) {
     [ this.time_boot_ms , this.x , this.y , this.z , this.vx , this.vy , this.vz ] = moreargs;


    this._format = '<Iffffff';
    this._id = mavlink20.MAVLINK_MSG_ID_LOCAL_POSITION_NED;
    this.order_map = [0, 1, 2, 3, 4, 5, 6];
    this.len_map = [1, 1, 1, 1, 1, 1, 1];
    this.array_len_map = [0, 0, 0, 0, 0, 0, 0];
    this.crc_extra = 185;
    this._name = 'LOCAL_POSITION_NED';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['time_boot_ms', 'x', 'y', 'z', 'vx', 'vy', 'vz'];

}

mavlink20.messages.local_position_ned.prototype = new mavlink20.message;
mavlink20.messages.local_position_ned.prototype.pack = function(mav) {
    var orderedfields = [ this.time_boot_ms, this.x, this.y, this.z, this.vx, this.vy, this.vz];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink20.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
The filtered global position (e.g. fused GPS and accelerometers). The
position is in GPS-frame (right-handed, Z-up). It                is
designed as scaled integer message since the resolution of float is
not sufficient.

                time_boot_ms              : Timestamp (time since system boot). (uint32_t)
                lat                       : Latitude, expressed (int32_t)
                lon                       : Longitude, expressed (int32_t)
                alt                       : Altitude (MSL). Note that virtually all GPS modules provide both WGS84 and MSL. (int32_t)
                relative_alt              : Altitude above ground (int32_t)
                vx                        : Ground X Speed (Latitude, positive north) (int16_t)
                vy                        : Ground Y Speed (Longitude, positive east) (int16_t)
                vz                        : Ground Z Speed (Altitude, positive down) (int16_t)
                hdg                       : Vehicle heading (yaw angle), 0.0..359.99 degrees. If unknown, set to: UINT16_MAX (uint16_t)

*/
    mavlink20.messages.global_position_int = function( ...moreargs ) {
     [ this.time_boot_ms , this.lat , this.lon , this.alt , this.relative_alt , this.vx , this.vy , this.vz , this.hdg ] = moreargs;


    this._format = '<IiiiihhhH';
    this._id = mavlink20.MAVLINK_MSG_ID_GLOBAL_POSITION_INT;
    this.order_map = [0, 1, 2, 3, 4, 5, 6, 7, 8];
    this.len_map = [1, 1, 1, 1, 1, 1, 1, 1, 1];
    this.array_len_map = [0, 0, 0, 0, 0, 0, 0, 0, 0];
    this.crc_extra = 104;
    this._name = 'GLOBAL_POSITION_INT';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['time_boot_ms', 'lat', 'lon', 'alt', 'relative_alt', 'vx', 'vy', 'vz', 'hdg'];

}

mavlink20.messages.global_position_int.prototype = new mavlink20.message;
mavlink20.messages.global_position_int.prototype.pack = function(mav) {
    var orderedfields = [ this.time_boot_ms, this.lat, this.lon, this.alt, this.relative_alt, this.vx, this.vy, this.vz, this.hdg];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink20.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
The scaled values of the RC channels received: (-100%) -10000, (0%) 0,
(100%) 10000. Channels that are inactive should be set to UINT16_MAX.

                time_boot_ms              : Timestamp (time since system boot). (uint32_t)
                port                      : Servo output port (set of 8 outputs = 1 port). Flight stacks running on Pixhawk should use: 0 = MAIN, 1 = AUX. (uint8_t)
                chan1_scaled              : RC channel 1 value scaled. (int16_t)
                chan2_scaled              : RC channel 2 value scaled. (int16_t)
                chan3_scaled              : RC channel 3 value scaled. (int16_t)
                chan4_scaled              : RC channel 4 value scaled. (int16_t)
                chan5_scaled              : RC channel 5 value scaled. (int16_t)
                chan6_scaled              : RC channel 6 value scaled. (int16_t)
                chan7_scaled              : RC channel 7 value scaled. (int16_t)
                chan8_scaled              : RC channel 8 value scaled. (int16_t)
                rssi                      : Receive signal strength indicator in device-dependent units/scale. Values: [0-254], 255: invalid/unknown. (uint8_t)

*/
    mavlink20.messages.rc_channels_scaled = function( ...moreargs ) {
     [ this.time_boot_ms , this.port , this.chan1_scaled , this.chan2_scaled , this.chan3_scaled , this.chan4_scaled , this.chan5_scaled , this.chan6_scaled , this.chan7_scaled , this.chan8_scaled , this.rssi ] = moreargs;


    this._format = '<IhhhhhhhhBB';
    this._id = mavlink20.MAVLINK_MSG_ID_RC_CHANNELS_SCALED;
    this.order_map = [0, 9, 1, 2, 3, 4, 5, 6, 7, 8, 10];
    this.len_map = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1];
    this.array_len_map = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
    this.crc_extra = 237;
    this._name = 'RC_CHANNELS_SCALED';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['time_boot_ms', 'port', 'chan1_scaled', 'chan2_scaled', 'chan3_scaled', 'chan4_scaled', 'chan5_scaled', 'chan6_scaled', 'chan7_scaled', 'chan8_scaled', 'rssi'];

}

mavlink20.messages.rc_channels_scaled.prototype = new mavlink20.message;
mavlink20.messages.rc_channels_scaled.prototype.pack = function(mav) {
    var orderedfields = [ this.time_boot_ms, this.chan1_scaled, this.chan2_scaled, this.chan3_scaled, this.chan4_scaled, this.chan5_scaled, this.chan6_scaled, this.chan7_scaled, this.chan8_scaled, this.port, this.rssi];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink20.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
The RAW values of the RC channels received. The standard PPM
modulation is as follows: 1000 microseconds: 0%, 2000 microseconds:
100%. A value of UINT16_MAX implies the channel is unused. Individual
receivers/transmitters might violate this specification.

                time_boot_ms              : Timestamp (time since system boot). (uint32_t)
                port                      : Servo output port (set of 8 outputs = 1 port). Flight stacks running on Pixhawk should use: 0 = MAIN, 1 = AUX. (uint8_t)
                chan1_raw                 : RC channel 1 value. (uint16_t)
                chan2_raw                 : RC channel 2 value. (uint16_t)
                chan3_raw                 : RC channel 3 value. (uint16_t)
                chan4_raw                 : RC channel 4 value. (uint16_t)
                chan5_raw                 : RC channel 5 value. (uint16_t)
                chan6_raw                 : RC channel 6 value. (uint16_t)
                chan7_raw                 : RC channel 7 value. (uint16_t)
                chan8_raw                 : RC channel 8 value. (uint16_t)
                rssi                      : Receive signal strength indicator in device-dependent units/scale. Values: [0-254], 255: invalid/unknown. (uint8_t)

*/
    mavlink20.messages.rc_channels_raw = function( ...moreargs ) {
     [ this.time_boot_ms , this.port , this.chan1_raw , this.chan2_raw , this.chan3_raw , this.chan4_raw , this.chan5_raw , this.chan6_raw , this.chan7_raw , this.chan8_raw , this.rssi ] = moreargs;


    this._format = '<IHHHHHHHHBB';
    this._id = mavlink20.MAVLINK_MSG_ID_RC_CHANNELS_RAW;
    this.order_map = [0, 9, 1, 2, 3, 4, 5, 6, 7, 8, 10];
    this.len_map = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1];
    this.array_len_map = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
    this.crc_extra = 244;
    this._name = 'RC_CHANNELS_RAW';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['time_boot_ms', 'port', 'chan1_raw', 'chan2_raw', 'chan3_raw', 'chan4_raw', 'chan5_raw', 'chan6_raw', 'chan7_raw', 'chan8_raw', 'rssi'];

}

mavlink20.messages.rc_channels_raw.prototype = new mavlink20.message;
mavlink20.messages.rc_channels_raw.prototype.pack = function(mav) {
    var orderedfields = [ this.time_boot_ms, this.chan1_raw, this.chan2_raw, this.chan3_raw, this.chan4_raw, this.chan5_raw, this.chan6_raw, this.chan7_raw, this.chan8_raw, this.port, this.rssi];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink20.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
Superseded by ACTUATOR_OUTPUT_STATUS. The RAW values of the servo
outputs (for RC input from the remote, use the RC_CHANNELS messages).
The standard PPM modulation is as follows: 1000 microseconds: 0%, 2000
microseconds: 100%.

                time_usec                 : Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude of the number. (uint32_t)
                port                      : Servo output port (set of 8 outputs = 1 port). Flight stacks running on Pixhawk should use: 0 = MAIN, 1 = AUX. (uint8_t)
                servo1_raw                : Servo output 1 value (uint16_t)
                servo2_raw                : Servo output 2 value (uint16_t)
                servo3_raw                : Servo output 3 value (uint16_t)
                servo4_raw                : Servo output 4 value (uint16_t)
                servo5_raw                : Servo output 5 value (uint16_t)
                servo6_raw                : Servo output 6 value (uint16_t)
                servo7_raw                : Servo output 7 value (uint16_t)
                servo8_raw                : Servo output 8 value (uint16_t)
                servo9_raw                : Servo output 9 value (uint16_t)
                servo10_raw               : Servo output 10 value (uint16_t)
                servo11_raw               : Servo output 11 value (uint16_t)
                servo12_raw               : Servo output 12 value (uint16_t)
                servo13_raw               : Servo output 13 value (uint16_t)
                servo14_raw               : Servo output 14 value (uint16_t)
                servo15_raw               : Servo output 15 value (uint16_t)
                servo16_raw               : Servo output 16 value (uint16_t)

*/
    mavlink20.messages.servo_output_raw = function( ...moreargs ) {
     [ this.time_usec , this.port , this.servo1_raw , this.servo2_raw , this.servo3_raw , this.servo4_raw , this.servo5_raw , this.servo6_raw , this.servo7_raw , this.servo8_raw , this.servo9_raw , this.servo10_raw , this.servo11_raw , this.servo12_raw , this.servo13_raw , this.servo14_raw , this.servo15_raw , this.servo16_raw ] = moreargs;


    this._format = '<IHHHHHHHHBHHHHHHHH';
    this._id = mavlink20.MAVLINK_MSG_ID_SERVO_OUTPUT_RAW;
    this.order_map = [0, 9, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17];
    this.len_map = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1];
    this.array_len_map = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
    this.crc_extra = 222;
    this._name = 'SERVO_OUTPUT_RAW';

    this._instance_field = 'port';
    this._instance_offset = 20;

    this.fieldnames = ['time_usec', 'port', 'servo1_raw', 'servo2_raw', 'servo3_raw', 'servo4_raw', 'servo5_raw', 'servo6_raw', 'servo7_raw', 'servo8_raw', 'servo9_raw', 'servo10_raw', 'servo11_raw', 'servo12_raw', 'servo13_raw', 'servo14_raw', 'servo15_raw', 'servo16_raw'];

}

mavlink20.messages.servo_output_raw.prototype = new mavlink20.message;
mavlink20.messages.servo_output_raw.prototype.pack = function(mav) {
    var orderedfields = [ this.time_usec, this.servo1_raw, this.servo2_raw, this.servo3_raw, this.servo4_raw, this.servo5_raw, this.servo6_raw, this.servo7_raw, this.servo8_raw, this.port, this.servo9_raw, this.servo10_raw, this.servo11_raw, this.servo12_raw, this.servo13_raw, this.servo14_raw, this.servo15_raw, this.servo16_raw];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink20.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
Request a partial list of mission items from the system/component.
https://mavlink.io/en/services/mission.html. If start and end index
are the same, just send one waypoint.

                target_system             : System ID (uint8_t)
                target_component          : Component ID (uint8_t)
                start_index               : Start index (int16_t)
                end_index                 : End index, -1 by default (-1: send list to end). Else a valid index of the list (int16_t)
                mission_type              : Mission type. (uint8_t)

*/
    mavlink20.messages.mission_request_partial_list = function( ...moreargs ) {
     [ this.target_system , this.target_component , this.start_index , this.end_index , this.mission_type ] = moreargs;


    this._format = '<hhBBB';
    this._id = mavlink20.MAVLINK_MSG_ID_MISSION_REQUEST_PARTIAL_LIST;
    this.order_map = [2, 3, 0, 1, 4];
    this.len_map = [1, 1, 1, 1, 1];
    this.array_len_map = [0, 0, 0, 0, 0];
    this.crc_extra = 212;
    this._name = 'MISSION_REQUEST_PARTIAL_LIST';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['target_system', 'target_component', 'start_index', 'end_index', 'mission_type'];

}

mavlink20.messages.mission_request_partial_list.prototype = new mavlink20.message;
mavlink20.messages.mission_request_partial_list.prototype.pack = function(mav) {
    var orderedfields = [ this.start_index, this.end_index, this.target_system, this.target_component, this.mission_type];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink20.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
This message is sent to the MAV to write a partial list. If start
index == end index, only one item will be transmitted / updated. If
the start index is NOT 0 and above the current list size, this request
should be REJECTED!

                target_system             : System ID (uint8_t)
                target_component          : Component ID (uint8_t)
                start_index               : Start index. Must be smaller / equal to the largest index of the current onboard list. (int16_t)
                end_index                 : End index, equal or greater than start index. (int16_t)
                mission_type              : Mission type. (uint8_t)

*/
    mavlink20.messages.mission_write_partial_list = function( ...moreargs ) {
     [ this.target_system , this.target_component , this.start_index , this.end_index , this.mission_type ] = moreargs;


    this._format = '<hhBBB';
    this._id = mavlink20.MAVLINK_MSG_ID_MISSION_WRITE_PARTIAL_LIST;
    this.order_map = [2, 3, 0, 1, 4];
    this.len_map = [1, 1, 1, 1, 1];
    this.array_len_map = [0, 0, 0, 0, 0];
    this.crc_extra = 9;
    this._name = 'MISSION_WRITE_PARTIAL_LIST';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['target_system', 'target_component', 'start_index', 'end_index', 'mission_type'];

}

mavlink20.messages.mission_write_partial_list.prototype = new mavlink20.message;
mavlink20.messages.mission_write_partial_list.prototype.pack = function(mav) {
    var orderedfields = [ this.start_index, this.end_index, this.target_system, this.target_component, this.mission_type];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink20.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
Message encoding a mission item. This message is emitted to announce
the presence of a mission item and to set a mission item on the
system. The mission item can be either in x, y, z meters (type: LOCAL)
or x:lat, y:lon, z:altitude. Local frame is Z-down, right handed
(NED), global frame is Z-up, right handed (ENU). NaN may be used to
indicate an optional/default value (e.g. to use the system's current
latitude or yaw rather than a specific value). See also
https://mavlink.io/en/services/mission.html.

                target_system             : System ID (uint8_t)
                target_component          : Component ID (uint8_t)
                seq                       : Sequence (uint16_t)
                frame                     : The coordinate system of the waypoint. (uint8_t)
                command                   : The scheduled action for the waypoint. (uint16_t)
                current                   : false:0, true:1 (uint8_t)
                autocontinue              : Autocontinue to next waypoint (uint8_t)
                param1                    : PARAM1, see MAV_CMD enum (float)
                param2                    : PARAM2, see MAV_CMD enum (float)
                param3                    : PARAM3, see MAV_CMD enum (float)
                param4                    : PARAM4, see MAV_CMD enum (float)
                x                         : PARAM5 / local: X coordinate, global: latitude (float)
                y                         : PARAM6 / local: Y coordinate, global: longitude (float)
                z                         : PARAM7 / local: Z coordinate, global: altitude (relative or absolute, depending on frame). (float)
                mission_type              : Mission type. (uint8_t)

*/
    mavlink20.messages.mission_item = function( ...moreargs ) {
     [ this.target_system , this.target_component , this.seq , this.frame , this.command , this.current , this.autocontinue , this.param1 , this.param2 , this.param3 , this.param4 , this.x , this.y , this.z , this.mission_type ] = moreargs;


    this._format = '<fffffffHHBBBBBB';
    this._id = mavlink20.MAVLINK_MSG_ID_MISSION_ITEM;
    this.order_map = [9, 10, 7, 11, 8, 12, 13, 0, 1, 2, 3, 4, 5, 6, 14];
    this.len_map = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1];
    this.array_len_map = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
    this.crc_extra = 254;
    this._name = 'MISSION_ITEM';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['target_system', 'target_component', 'seq', 'frame', 'command', 'current', 'autocontinue', 'param1', 'param2', 'param3', 'param4', 'x', 'y', 'z', 'mission_type'];

}

mavlink20.messages.mission_item.prototype = new mavlink20.message;
mavlink20.messages.mission_item.prototype.pack = function(mav) {
    var orderedfields = [ this.param1, this.param2, this.param3, this.param4, this.x, this.y, this.z, this.seq, this.command, this.target_system, this.target_component, this.frame, this.current, this.autocontinue, this.mission_type];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink20.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
Request the information of the mission item with the sequence number
seq. The response of the system to this message should be a
MISSION_ITEM message. https://mavlink.io/en/services/mission.html

                target_system             : System ID (uint8_t)
                target_component          : Component ID (uint8_t)
                seq                       : Sequence (uint16_t)
                mission_type              : Mission type. (uint8_t)

*/
    mavlink20.messages.mission_request = function( ...moreargs ) {
     [ this.target_system , this.target_component , this.seq , this.mission_type ] = moreargs;


    this._format = '<HBBB';
    this._id = mavlink20.MAVLINK_MSG_ID_MISSION_REQUEST;
    this.order_map = [1, 2, 0, 3];
    this.len_map = [1, 1, 1, 1];
    this.array_len_map = [0, 0, 0, 0];
    this.crc_extra = 230;
    this._name = 'MISSION_REQUEST';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['target_system', 'target_component', 'seq', 'mission_type'];

}

mavlink20.messages.mission_request.prototype = new mavlink20.message;
mavlink20.messages.mission_request.prototype.pack = function(mav) {
    var orderedfields = [ this.seq, this.target_system, this.target_component, this.mission_type];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink20.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
Set the mission item with sequence number seq as current item. This
means that the MAV will continue to this mission item on the shortest
path (not following the mission items in-between).

                target_system             : System ID (uint8_t)
                target_component          : Component ID (uint8_t)
                seq                       : Sequence (uint16_t)

*/
    mavlink20.messages.mission_set_current = function( ...moreargs ) {
     [ this.target_system , this.target_component , this.seq ] = moreargs;


    this._format = '<HBB';
    this._id = mavlink20.MAVLINK_MSG_ID_MISSION_SET_CURRENT;
    this.order_map = [1, 2, 0];
    this.len_map = [1, 1, 1];
    this.array_len_map = [0, 0, 0];
    this.crc_extra = 28;
    this._name = 'MISSION_SET_CURRENT';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['target_system', 'target_component', 'seq'];

}

mavlink20.messages.mission_set_current.prototype = new mavlink20.message;
mavlink20.messages.mission_set_current.prototype.pack = function(mav) {
    var orderedfields = [ this.seq, this.target_system, this.target_component];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink20.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
Message that announces the sequence number of the current active
mission item. The MAV will fly towards this mission item.

                seq                       : Sequence (uint16_t)
                total                     : Total number of mission items on vehicle (on last item, sequence == total). If the autopilot stores its home location as part of the mission this will be excluded from the total. 0: Not supported, UINT16_MAX if no mission is present on the vehicle. (uint16_t)
                mission_state             : Mission state machine state. MISSION_STATE_UNKNOWN if state reporting not supported. (uint8_t)
                mission_mode              : Vehicle is in a mode that can execute mission items or suspended. 0: Unknown, 1: In mission mode, 2: Suspended (not in mission mode). (uint8_t)

*/
    mavlink20.messages.mission_current = function( ...moreargs ) {
     [ this.seq , this.total , this.mission_state , this.mission_mode ] = moreargs;


    this._format = '<HHBB';
    this._id = mavlink20.MAVLINK_MSG_ID_MISSION_CURRENT;
    this.order_map = [0, 1, 2, 3];
    this.len_map = [1, 1, 1, 1];
    this.array_len_map = [0, 0, 0, 0];
    this.crc_extra = 28;
    this._name = 'MISSION_CURRENT';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['seq', 'total', 'mission_state', 'mission_mode'];

}

mavlink20.messages.mission_current.prototype = new mavlink20.message;
mavlink20.messages.mission_current.prototype.pack = function(mav) {
    var orderedfields = [ this.seq, this.total, this.mission_state, this.mission_mode];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink20.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
Request the overall list of mission items from the system/component.

                target_system             : System ID (uint8_t)
                target_component          : Component ID (uint8_t)
                mission_type              : Mission type. (uint8_t)

*/
    mavlink20.messages.mission_request_list = function( ...moreargs ) {
     [ this.target_system , this.target_component , this.mission_type ] = moreargs;


    this._format = '<BBB';
    this._id = mavlink20.MAVLINK_MSG_ID_MISSION_REQUEST_LIST;
    this.order_map = [0, 1, 2];
    this.len_map = [1, 1, 1];
    this.array_len_map = [0, 0, 0];
    this.crc_extra = 132;
    this._name = 'MISSION_REQUEST_LIST';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['target_system', 'target_component', 'mission_type'];

}

mavlink20.messages.mission_request_list.prototype = new mavlink20.message;
mavlink20.messages.mission_request_list.prototype.pack = function(mav) {
    var orderedfields = [ this.target_system, this.target_component, this.mission_type];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink20.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
This message is emitted as response to MISSION_REQUEST_LIST by the MAV
and to initiate a write transaction. The GCS can then request the
individual mission item based on the knowledge of the total number of
waypoints.

                target_system             : System ID (uint8_t)
                target_component          : Component ID (uint8_t)
                count                     : Number of mission items in the sequence (uint16_t)
                mission_type              : Mission type. (uint8_t)

*/
    mavlink20.messages.mission_count = function( ...moreargs ) {
     [ this.target_system , this.target_component , this.count , this.mission_type ] = moreargs;


    this._format = '<HBBB';
    this._id = mavlink20.MAVLINK_MSG_ID_MISSION_COUNT;
    this.order_map = [1, 2, 0, 3];
    this.len_map = [1, 1, 1, 1];
    this.array_len_map = [0, 0, 0, 0];
    this.crc_extra = 221;
    this._name = 'MISSION_COUNT';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['target_system', 'target_component', 'count', 'mission_type'];

}

mavlink20.messages.mission_count.prototype = new mavlink20.message;
mavlink20.messages.mission_count.prototype.pack = function(mav) {
    var orderedfields = [ this.count, this.target_system, this.target_component, this.mission_type];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink20.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
Delete all mission items at once.

                target_system             : System ID (uint8_t)
                target_component          : Component ID (uint8_t)
                mission_type              : Mission type. (uint8_t)

*/
    mavlink20.messages.mission_clear_all = function( ...moreargs ) {
     [ this.target_system , this.target_component , this.mission_type ] = moreargs;


    this._format = '<BBB';
    this._id = mavlink20.MAVLINK_MSG_ID_MISSION_CLEAR_ALL;
    this.order_map = [0, 1, 2];
    this.len_map = [1, 1, 1];
    this.array_len_map = [0, 0, 0];
    this.crc_extra = 232;
    this._name = 'MISSION_CLEAR_ALL';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['target_system', 'target_component', 'mission_type'];

}

mavlink20.messages.mission_clear_all.prototype = new mavlink20.message;
mavlink20.messages.mission_clear_all.prototype.pack = function(mav) {
    var orderedfields = [ this.target_system, this.target_component, this.mission_type];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink20.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
A certain mission item has been reached. The system will either hold
this position (or circle on the orbit) or (if the autocontinue on the
WP was set) continue to the next waypoint.

                seq                       : Sequence (uint16_t)

*/
    mavlink20.messages.mission_item_reached = function( ...moreargs ) {
     [ this.seq ] = moreargs;


    this._format = '<H';
    this._id = mavlink20.MAVLINK_MSG_ID_MISSION_ITEM_REACHED;
    this.order_map = [0];
    this.len_map = [1];
    this.array_len_map = [0];
    this.crc_extra = 11;
    this._name = 'MISSION_ITEM_REACHED';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['seq'];

}

mavlink20.messages.mission_item_reached.prototype = new mavlink20.message;
mavlink20.messages.mission_item_reached.prototype.pack = function(mav) {
    var orderedfields = [ this.seq];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink20.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
Acknowledgment message during waypoint handling. The type field states
if this message is a positive ack (type=0) or if an error happened
(type=non-zero).

                target_system             : System ID (uint8_t)
                target_component          : Component ID (uint8_t)
                type                      : Mission result. (uint8_t)
                mission_type              : Mission type. (uint8_t)

*/
    mavlink20.messages.mission_ack = function( ...moreargs ) {
     [ this.target_system , this.target_component , this.type , this.mission_type ] = moreargs;


    this._format = '<BBBB';
    this._id = mavlink20.MAVLINK_MSG_ID_MISSION_ACK;
    this.order_map = [0, 1, 2, 3];
    this.len_map = [1, 1, 1, 1];
    this.array_len_map = [0, 0, 0, 0];
    this.crc_extra = 153;
    this._name = 'MISSION_ACK';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['target_system', 'target_component', 'type', 'mission_type'];

}

mavlink20.messages.mission_ack.prototype = new mavlink20.message;
mavlink20.messages.mission_ack.prototype.pack = function(mav) {
    var orderedfields = [ this.target_system, this.target_component, this.type, this.mission_type];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink20.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
Sets the GPS co-ordinates of the vehicle local origin (0,0,0)
position. Vehicle should emit GPS_GLOBAL_ORIGIN irrespective of
whether the origin is changed. This enables transform between the
local coordinate frame and the global (GPS) coordinate frame, which
may be necessary when (for example) indoor and outdoor settings are
connected and the MAV should move from in- to outdoor.

                target_system             : System ID (uint8_t)
                latitude                  : Latitude (WGS84) (int32_t)
                longitude                 : Longitude (WGS84) (int32_t)
                altitude                  : Altitude (MSL). Positive for up. (int32_t)
                time_usec                 : Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude of the number. (uint64_t)

*/
    mavlink20.messages.set_gps_global_origin = function( ...moreargs ) {
     [ this.target_system , this.latitude , this.longitude , this.altitude , this.time_usec ] = moreargs;


    this._format = '<iiiBQ';
    this._id = mavlink20.MAVLINK_MSG_ID_SET_GPS_GLOBAL_ORIGIN;
    this.order_map = [3, 0, 1, 2, 4];
    this.len_map = [1, 1, 1, 1, 1];
    this.array_len_map = [0, 0, 0, 0, 0];
    this.crc_extra = 41;
    this._name = 'SET_GPS_GLOBAL_ORIGIN';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['target_system', 'latitude', 'longitude', 'altitude', 'time_usec'];

}

mavlink20.messages.set_gps_global_origin.prototype = new mavlink20.message;
mavlink20.messages.set_gps_global_origin.prototype.pack = function(mav) {
    var orderedfields = [ this.latitude, this.longitude, this.altitude, this.target_system, this.time_usec];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink20.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
Publishes the GPS co-ordinates of the vehicle local origin (0,0,0)
position. Emitted whenever a new GPS-Local position mapping is
requested or set - e.g. following SET_GPS_GLOBAL_ORIGIN message.

                latitude                  : Latitude (WGS84) (int32_t)
                longitude                 : Longitude (WGS84) (int32_t)
                altitude                  : Altitude (MSL). Positive for up. (int32_t)
                time_usec                 : Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude of the number. (uint64_t)

*/
    mavlink20.messages.gps_global_origin = function( ...moreargs ) {
     [ this.latitude , this.longitude , this.altitude , this.time_usec ] = moreargs;


    this._format = '<iiiQ';
    this._id = mavlink20.MAVLINK_MSG_ID_GPS_GLOBAL_ORIGIN;
    this.order_map = [0, 1, 2, 3];
    this.len_map = [1, 1, 1, 1];
    this.array_len_map = [0, 0, 0, 0];
    this.crc_extra = 39;
    this._name = 'GPS_GLOBAL_ORIGIN';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['latitude', 'longitude', 'altitude', 'time_usec'];

}

mavlink20.messages.gps_global_origin.prototype = new mavlink20.message;
mavlink20.messages.gps_global_origin.prototype.pack = function(mav) {
    var orderedfields = [ this.latitude, this.longitude, this.altitude, this.time_usec];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink20.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
Bind a RC channel to a parameter. The parameter should change
according to the RC channel value.

                target_system             : System ID (uint8_t)
                target_component          : Component ID (uint8_t)
                param_id                  : Onboard parameter id, terminated by NULL if the length is less than 16 human-readable chars and WITHOUT null termination (NULL) byte if the length is exactly 16 chars - applications have to provide 16+1 bytes storage if the ID is stored as string (char)
                param_index               : Parameter index. Send -1 to use the param ID field as identifier (else the param id will be ignored), send -2 to disable any existing map for this rc_channel_index. (int16_t)
                parameter_rc_channel_index        : Index of parameter RC channel. Not equal to the RC channel id. Typically corresponds to a potentiometer-knob on the RC. (uint8_t)
                param_value0              : Initial parameter value (float)
                scale                     : Scale, maps the RC range [-1, 1] to a parameter value (float)
                param_value_min           : Minimum param value. The protocol does not define if this overwrites an onboard minimum value. (Depends on implementation) (float)
                param_value_max           : Maximum param value. The protocol does not define if this overwrites an onboard maximum value. (Depends on implementation) (float)

*/
    mavlink20.messages.param_map_rc = function( ...moreargs ) {
     [ this.target_system , this.target_component , this.param_id , this.param_index , this.parameter_rc_channel_index , this.param_value0 , this.scale , this.param_value_min , this.param_value_max ] = moreargs;


    this._format = '<ffffhBB16sB';
    this._id = mavlink20.MAVLINK_MSG_ID_PARAM_MAP_RC;
    this.order_map = [5, 6, 7, 4, 8, 0, 1, 2, 3];
    this.len_map = [1, 1, 1, 1, 1, 1, 1, 1, 1];
    this.array_len_map = [0, 0, 0, 0, 0, 0, 0, 16, 0];
    this.crc_extra = 78;
    this._name = 'PARAM_MAP_RC';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['target_system', 'target_component', 'param_id', 'param_index', 'parameter_rc_channel_index', 'param_value0', 'scale', 'param_value_min', 'param_value_max'];

}

mavlink20.messages.param_map_rc.prototype = new mavlink20.message;
mavlink20.messages.param_map_rc.prototype.pack = function(mav) {
    var orderedfields = [ this.param_value0, this.scale, this.param_value_min, this.param_value_max, this.param_index, this.target_system, this.target_component, this.param_id, this.parameter_rc_channel_index];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink20.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
Request the information of the mission item with the sequence number
seq. The response of the system to this message should be a
MISSION_ITEM_INT message. https://mavlink.io/en/services/mission.html

                target_system             : System ID (uint8_t)
                target_component          : Component ID (uint8_t)
                seq                       : Sequence (uint16_t)
                mission_type              : Mission type. (uint8_t)

*/
    mavlink20.messages.mission_request_int = function( ...moreargs ) {
     [ this.target_system , this.target_component , this.seq , this.mission_type ] = moreargs;


    this._format = '<HBBB';
    this._id = mavlink20.MAVLINK_MSG_ID_MISSION_REQUEST_INT;
    this.order_map = [1, 2, 0, 3];
    this.len_map = [1, 1, 1, 1];
    this.array_len_map = [0, 0, 0, 0];
    this.crc_extra = 196;
    this._name = 'MISSION_REQUEST_INT';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['target_system', 'target_component', 'seq', 'mission_type'];

}

mavlink20.messages.mission_request_int.prototype = new mavlink20.message;
mavlink20.messages.mission_request_int.prototype.pack = function(mav) {
    var orderedfields = [ this.seq, this.target_system, this.target_component, this.mission_type];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink20.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
Set a safety zone (volume), which is defined by two corners of a cube.
This message can be used to tell the MAV which setpoints/waypoints to
accept and which to reject. Safety areas are often enforced by
national or competition regulations.

                target_system             : System ID (uint8_t)
                target_component          : Component ID (uint8_t)
                frame                     : Coordinate frame. Can be either global, GPS, right-handed with Z axis up or local, right handed, Z axis down. (uint8_t)
                p1x                       : x position 1 / Latitude 1 (float)
                p1y                       : y position 1 / Longitude 1 (float)
                p1z                       : z position 1 / Altitude 1 (float)
                p2x                       : x position 2 / Latitude 2 (float)
                p2y                       : y position 2 / Longitude 2 (float)
                p2z                       : z position 2 / Altitude 2 (float)

*/
    mavlink20.messages.safety_set_allowed_area = function( ...moreargs ) {
     [ this.target_system , this.target_component , this.frame , this.p1x , this.p1y , this.p1z , this.p2x , this.p2y , this.p2z ] = moreargs;


    this._format = '<ffffffBBB';
    this._id = mavlink20.MAVLINK_MSG_ID_SAFETY_SET_ALLOWED_AREA;
    this.order_map = [6, 7, 8, 0, 1, 2, 3, 4, 5];
    this.len_map = [1, 1, 1, 1, 1, 1, 1, 1, 1];
    this.array_len_map = [0, 0, 0, 0, 0, 0, 0, 0, 0];
    this.crc_extra = 15;
    this._name = 'SAFETY_SET_ALLOWED_AREA';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['target_system', 'target_component', 'frame', 'p1x', 'p1y', 'p1z', 'p2x', 'p2y', 'p2z'];

}

mavlink20.messages.safety_set_allowed_area.prototype = new mavlink20.message;
mavlink20.messages.safety_set_allowed_area.prototype.pack = function(mav) {
    var orderedfields = [ this.p1x, this.p1y, this.p1z, this.p2x, this.p2y, this.p2z, this.target_system, this.target_component, this.frame];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink20.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
Read out the safety zone the MAV currently assumes.

                frame                     : Coordinate frame. Can be either global, GPS, right-handed with Z axis up or local, right handed, Z axis down. (uint8_t)
                p1x                       : x position 1 / Latitude 1 (float)
                p1y                       : y position 1 / Longitude 1 (float)
                p1z                       : z position 1 / Altitude 1 (float)
                p2x                       : x position 2 / Latitude 2 (float)
                p2y                       : y position 2 / Longitude 2 (float)
                p2z                       : z position 2 / Altitude 2 (float)

*/
    mavlink20.messages.safety_allowed_area = function( ...moreargs ) {
     [ this.frame , this.p1x , this.p1y , this.p1z , this.p2x , this.p2y , this.p2z ] = moreargs;


    this._format = '<ffffffB';
    this._id = mavlink20.MAVLINK_MSG_ID_SAFETY_ALLOWED_AREA;
    this.order_map = [6, 0, 1, 2, 3, 4, 5];
    this.len_map = [1, 1, 1, 1, 1, 1, 1];
    this.array_len_map = [0, 0, 0, 0, 0, 0, 0];
    this.crc_extra = 3;
    this._name = 'SAFETY_ALLOWED_AREA';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['frame', 'p1x', 'p1y', 'p1z', 'p2x', 'p2y', 'p2z'];

}

mavlink20.messages.safety_allowed_area.prototype = new mavlink20.message;
mavlink20.messages.safety_allowed_area.prototype.pack = function(mav) {
    var orderedfields = [ this.p1x, this.p1y, this.p1z, this.p2x, this.p2y, this.p2z, this.frame];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink20.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
The attitude in the aeronautical frame (right-handed, Z-down, X-front,
Y-right), expressed as quaternion. Quaternion order is w, x, y, z and
a zero rotation would be expressed as (1 0 0 0).

                time_usec                 : Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude of the number. (uint64_t)
                q                         : Quaternion components, w, x, y, z (1 0 0 0 is the null-rotation) (float)
                rollspeed                 : Roll angular speed (float)
                pitchspeed                : Pitch angular speed (float)
                yawspeed                  : Yaw angular speed (float)
                covariance                : Row-major representation of a 3x3 attitude covariance matrix (states: roll, pitch, yaw; first three entries are the first ROW, next three entries are the second row, etc.). If unknown, assign NaN value to first element in the array. (float)

*/
    mavlink20.messages.attitude_quaternion_cov = function( ...moreargs ) {
     [ this.time_usec , this.q , this.rollspeed , this.pitchspeed , this.yawspeed , this.covariance ] = moreargs;


    this._format = '<Q4ffff9f';
    this._id = mavlink20.MAVLINK_MSG_ID_ATTITUDE_QUATERNION_COV;
    this.order_map = [0, 1, 2, 3, 4, 5];
    this.len_map = [1, 4, 1, 1, 1, 9];
    this.array_len_map = [0, 4, 0, 0, 0, 9];
    this.crc_extra = 167;
    this._name = 'ATTITUDE_QUATERNION_COV';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['time_usec', 'q', 'rollspeed', 'pitchspeed', 'yawspeed', 'covariance'];

}

mavlink20.messages.attitude_quaternion_cov.prototype = new mavlink20.message;
mavlink20.messages.attitude_quaternion_cov.prototype.pack = function(mav) {
    var orderedfields = [ this.time_usec, this.q, this.rollspeed, this.pitchspeed, this.yawspeed, this.covariance];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink20.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
The state of the fixed wing navigation and position controller.

                nav_roll                  : Current desired roll (float)
                nav_pitch                 : Current desired pitch (float)
                nav_bearing               : Current desired heading (int16_t)
                target_bearing            : Bearing to current waypoint/target (int16_t)
                wp_dist                   : Distance to active waypoint (uint16_t)
                alt_error                 : Current altitude error (float)
                aspd_error                : Current airspeed error (float)
                xtrack_error              : Current crosstrack error on x-y plane (float)

*/
    mavlink20.messages.nav_controller_output = function( ...moreargs ) {
     [ this.nav_roll , this.nav_pitch , this.nav_bearing , this.target_bearing , this.wp_dist , this.alt_error , this.aspd_error , this.xtrack_error ] = moreargs;


    this._format = '<fffffhhH';
    this._id = mavlink20.MAVLINK_MSG_ID_NAV_CONTROLLER_OUTPUT;
    this.order_map = [0, 1, 5, 6, 7, 2, 3, 4];
    this.len_map = [1, 1, 1, 1, 1, 1, 1, 1];
    this.array_len_map = [0, 0, 0, 0, 0, 0, 0, 0];
    this.crc_extra = 183;
    this._name = 'NAV_CONTROLLER_OUTPUT';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['nav_roll', 'nav_pitch', 'nav_bearing', 'target_bearing', 'wp_dist', 'alt_error', 'aspd_error', 'xtrack_error'];

}

mavlink20.messages.nav_controller_output.prototype = new mavlink20.message;
mavlink20.messages.nav_controller_output.prototype.pack = function(mav) {
    var orderedfields = [ this.nav_roll, this.nav_pitch, this.alt_error, this.aspd_error, this.xtrack_error, this.nav_bearing, this.target_bearing, this.wp_dist];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink20.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
The filtered global position (e.g. fused GPS and accelerometers). The
position is in GPS-frame (right-handed, Z-up). It  is designed as
scaled integer message since the resolution of float is not
sufficient. NOTE: This message is intended for onboard networks /
companion computers and higher-bandwidth links and optimized for
accuracy and completeness. Please use the GLOBAL_POSITION_INT message
for a minimal subset.

                time_usec                 : Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude of the number. (uint64_t)
                estimator_type            : Class id of the estimator this estimate originated from. (uint8_t)
                lat                       : Latitude (int32_t)
                lon                       : Longitude (int32_t)
                alt                       : Altitude in meters above MSL (int32_t)
                relative_alt              : Altitude above ground (int32_t)
                vx                        : Ground X Speed (Latitude) (float)
                vy                        : Ground Y Speed (Longitude) (float)
                vz                        : Ground Z Speed (Altitude) (float)
                covariance                : Row-major representation of a 6x6 position and velocity 6x6 cross-covariance matrix (states: lat, lon, alt, vx, vy, vz; first six entries are the first ROW, next six entries are the second row, etc.). If unknown, assign NaN value to first element in the array. (float)

*/
    mavlink20.messages.global_position_int_cov = function( ...moreargs ) {
     [ this.time_usec , this.estimator_type , this.lat , this.lon , this.alt , this.relative_alt , this.vx , this.vy , this.vz , this.covariance ] = moreargs;


    this._format = '<Qiiiifff36fB';
    this._id = mavlink20.MAVLINK_MSG_ID_GLOBAL_POSITION_INT_COV;
    this.order_map = [0, 9, 1, 2, 3, 4, 5, 6, 7, 8];
    this.len_map = [1, 1, 1, 1, 1, 1, 1, 1, 36, 1];
    this.array_len_map = [0, 0, 0, 0, 0, 0, 0, 0, 36, 0];
    this.crc_extra = 119;
    this._name = 'GLOBAL_POSITION_INT_COV';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['time_usec', 'estimator_type', 'lat', 'lon', 'alt', 'relative_alt', 'vx', 'vy', 'vz', 'covariance'];

}

mavlink20.messages.global_position_int_cov.prototype = new mavlink20.message;
mavlink20.messages.global_position_int_cov.prototype.pack = function(mav) {
    var orderedfields = [ this.time_usec, this.lat, this.lon, this.alt, this.relative_alt, this.vx, this.vy, this.vz, this.covariance, this.estimator_type];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink20.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
The filtered local position (e.g. fused computer vision and
accelerometers). Coordinate frame is right-handed, Z-axis down
(aeronautical frame, NED / north-east-down convention)

                time_usec                 : Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude of the number. (uint64_t)
                estimator_type            : Class id of the estimator this estimate originated from. (uint8_t)
                x                         : X Position (float)
                y                         : Y Position (float)
                z                         : Z Position (float)
                vx                        : X Speed (float)
                vy                        : Y Speed (float)
                vz                        : Z Speed (float)
                ax                        : X Acceleration (float)
                ay                        : Y Acceleration (float)
                az                        : Z Acceleration (float)
                covariance                : Row-major representation of position, velocity and acceleration 9x9 cross-covariance matrix upper right triangle (states: x, y, z, vx, vy, vz, ax, ay, az; first nine entries are the first ROW, next eight entries are the second row, etc.). If unknown, assign NaN value to first element in the array. (float)

*/
    mavlink20.messages.local_position_ned_cov = function( ...moreargs ) {
     [ this.time_usec , this.estimator_type , this.x , this.y , this.z , this.vx , this.vy , this.vz , this.ax , this.ay , this.az , this.covariance ] = moreargs;


    this._format = '<Qfffffffff45fB';
    this._id = mavlink20.MAVLINK_MSG_ID_LOCAL_POSITION_NED_COV;
    this.order_map = [0, 11, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10];
    this.len_map = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 45, 1];
    this.array_len_map = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 45, 0];
    this.crc_extra = 191;
    this._name = 'LOCAL_POSITION_NED_COV';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['time_usec', 'estimator_type', 'x', 'y', 'z', 'vx', 'vy', 'vz', 'ax', 'ay', 'az', 'covariance'];

}

mavlink20.messages.local_position_ned_cov.prototype = new mavlink20.message;
mavlink20.messages.local_position_ned_cov.prototype.pack = function(mav) {
    var orderedfields = [ this.time_usec, this.x, this.y, this.z, this.vx, this.vy, this.vz, this.ax, this.ay, this.az, this.covariance, this.estimator_type];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink20.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
The PPM values of the RC channels received. The standard PPM
modulation is as follows: 1000 microseconds: 0%, 2000 microseconds:
100%.  A value of UINT16_MAX implies the channel is unused. Individual
receivers/transmitters might violate this specification.

                time_boot_ms              : Timestamp (time since system boot). (uint32_t)
                chancount                 : Total number of RC channels being received. This can be larger than 18, indicating that more channels are available but not given in this message. This value should be 0 when no RC channels are available. (uint8_t)
                chan1_raw                 : RC channel 1 value. (uint16_t)
                chan2_raw                 : RC channel 2 value. (uint16_t)
                chan3_raw                 : RC channel 3 value. (uint16_t)
                chan4_raw                 : RC channel 4 value. (uint16_t)
                chan5_raw                 : RC channel 5 value. (uint16_t)
                chan6_raw                 : RC channel 6 value. (uint16_t)
                chan7_raw                 : RC channel 7 value. (uint16_t)
                chan8_raw                 : RC channel 8 value. (uint16_t)
                chan9_raw                 : RC channel 9 value. (uint16_t)
                chan10_raw                : RC channel 10 value. (uint16_t)
                chan11_raw                : RC channel 11 value. (uint16_t)
                chan12_raw                : RC channel 12 value. (uint16_t)
                chan13_raw                : RC channel 13 value. (uint16_t)
                chan14_raw                : RC channel 14 value. (uint16_t)
                chan15_raw                : RC channel 15 value. (uint16_t)
                chan16_raw                : RC channel 16 value. (uint16_t)
                chan17_raw                : RC channel 17 value. (uint16_t)
                chan18_raw                : RC channel 18 value. (uint16_t)
                rssi                      : Receive signal strength indicator in device-dependent units/scale. Values: [0-254], 255: invalid/unknown. (uint8_t)

*/
    mavlink20.messages.rc_channels = function( ...moreargs ) {
     [ this.time_boot_ms , this.chancount , this.chan1_raw , this.chan2_raw , this.chan3_raw , this.chan4_raw , this.chan5_raw , this.chan6_raw , this.chan7_raw , this.chan8_raw , this.chan9_raw , this.chan10_raw , this.chan11_raw , this.chan12_raw , this.chan13_raw , this.chan14_raw , this.chan15_raw , this.chan16_raw , this.chan17_raw , this.chan18_raw , this.rssi ] = moreargs;


    this._format = '<IHHHHHHHHHHHHHHHHHHBB';
    this._id = mavlink20.MAVLINK_MSG_ID_RC_CHANNELS;
    this.order_map = [0, 19, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 20];
    this.len_map = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1];
    this.array_len_map = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
    this.crc_extra = 118;
    this._name = 'RC_CHANNELS';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['time_boot_ms', 'chancount', 'chan1_raw', 'chan2_raw', 'chan3_raw', 'chan4_raw', 'chan5_raw', 'chan6_raw', 'chan7_raw', 'chan8_raw', 'chan9_raw', 'chan10_raw', 'chan11_raw', 'chan12_raw', 'chan13_raw', 'chan14_raw', 'chan15_raw', 'chan16_raw', 'chan17_raw', 'chan18_raw', 'rssi'];

}

mavlink20.messages.rc_channels.prototype = new mavlink20.message;
mavlink20.messages.rc_channels.prototype.pack = function(mav) {
    var orderedfields = [ this.time_boot_ms, this.chan1_raw, this.chan2_raw, this.chan3_raw, this.chan4_raw, this.chan5_raw, this.chan6_raw, this.chan7_raw, this.chan8_raw, this.chan9_raw, this.chan10_raw, this.chan11_raw, this.chan12_raw, this.chan13_raw, this.chan14_raw, this.chan15_raw, this.chan16_raw, this.chan17_raw, this.chan18_raw, this.chancount, this.rssi];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink20.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
Request a data stream.

                target_system             : The target requested to send the message stream. (uint8_t)
                target_component          : The target requested to send the message stream. (uint8_t)
                req_stream_id             : The ID of the requested data stream (uint8_t)
                req_message_rate          : The requested message rate (uint16_t)
                start_stop                : 1 to start sending, 0 to stop sending. (uint8_t)

*/
    mavlink20.messages.request_data_stream = function( ...moreargs ) {
     [ this.target_system , this.target_component , this.req_stream_id , this.req_message_rate , this.start_stop ] = moreargs;


    this._format = '<HBBBB';
    this._id = mavlink20.MAVLINK_MSG_ID_REQUEST_DATA_STREAM;
    this.order_map = [1, 2, 3, 0, 4];
    this.len_map = [1, 1, 1, 1, 1];
    this.array_len_map = [0, 0, 0, 0, 0];
    this.crc_extra = 148;
    this._name = 'REQUEST_DATA_STREAM';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['target_system', 'target_component', 'req_stream_id', 'req_message_rate', 'start_stop'];

}

mavlink20.messages.request_data_stream.prototype = new mavlink20.message;
mavlink20.messages.request_data_stream.prototype.pack = function(mav) {
    var orderedfields = [ this.req_message_rate, this.target_system, this.target_component, this.req_stream_id, this.start_stop];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink20.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
Data stream status information.

                stream_id                 : The ID of the requested data stream (uint8_t)
                message_rate              : The message rate (uint16_t)
                on_off                    : 1 stream is enabled, 0 stream is stopped. (uint8_t)

*/
    mavlink20.messages.data_stream = function( ...moreargs ) {
     [ this.stream_id , this.message_rate , this.on_off ] = moreargs;


    this._format = '<HBB';
    this._id = mavlink20.MAVLINK_MSG_ID_DATA_STREAM;
    this.order_map = [1, 0, 2];
    this.len_map = [1, 1, 1];
    this.array_len_map = [0, 0, 0];
    this.crc_extra = 21;
    this._name = 'DATA_STREAM';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['stream_id', 'message_rate', 'on_off'];

}

mavlink20.messages.data_stream.prototype = new mavlink20.message;
mavlink20.messages.data_stream.prototype.pack = function(mav) {
    var orderedfields = [ this.message_rate, this.stream_id, this.on_off];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink20.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
This message provides an API for manually controlling the vehicle
using standard joystick axes nomenclature, along with a joystick-like
input device. Unused axes can be disabled an buttons are also transmit
as boolean values of their

                target                    : The system to be controlled. (uint8_t)
                x                         : X-axis, normalized to the range [-1000,1000]. A value of INT16_MAX indicates that this axis is invalid. Generally corresponds to forward(1000)-backward(-1000) movement on a joystick and the pitch of a vehicle. (int16_t)
                y                         : Y-axis, normalized to the range [-1000,1000]. A value of INT16_MAX indicates that this axis is invalid. Generally corresponds to left(-1000)-right(1000) movement on a joystick and the roll of a vehicle. (int16_t)
                z                         : Z-axis, normalized to the range [-1000,1000]. A value of INT16_MAX indicates that this axis is invalid. Generally corresponds to a separate slider movement with maximum being 1000 and minimum being -1000 on a joystick and the thrust of a vehicle. Positive values are positive thrust, negative values are negative thrust. (int16_t)
                r                         : R-axis, normalized to the range [-1000,1000]. A value of INT16_MAX indicates that this axis is invalid. Generally corresponds to a twisting of the joystick, with counter-clockwise being 1000 and clockwise being -1000, and the yaw of a vehicle. (int16_t)
                buttons                   : A bitfield corresponding to the joystick buttons' current state, 1 for pressed, 0 for released. The lowest bit corresponds to Button 1. (uint16_t)

*/
    mavlink20.messages.manual_control = function( ...moreargs ) {
     [ this.target , this.x , this.y , this.z , this.r , this.buttons ] = moreargs;


    this._format = '<hhhhHB';
    this._id = mavlink20.MAVLINK_MSG_ID_MANUAL_CONTROL;
    this.order_map = [5, 0, 1, 2, 3, 4];
    this.len_map = [1, 1, 1, 1, 1, 1];
    this.array_len_map = [0, 0, 0, 0, 0, 0];
    this.crc_extra = 243;
    this._name = 'MANUAL_CONTROL';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['target', 'x', 'y', 'z', 'r', 'buttons'];

}

mavlink20.messages.manual_control.prototype = new mavlink20.message;
mavlink20.messages.manual_control.prototype.pack = function(mav) {
    var orderedfields = [ this.x, this.y, this.z, this.r, this.buttons, this.target];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink20.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
The RAW values of the RC channels sent to the MAV to override info
received from the RC radio. The standard PPM modulation is as follows:
1000 microseconds: 0%, 2000 microseconds: 100%. Individual
receivers/transmitters might violate this specification.  Note
carefully the semantic differences between the first 8 channels and
the subsequent channels

                target_system             : System ID (uint8_t)
                target_component          : Component ID (uint8_t)
                chan1_raw                 : RC channel 1 value. A value of UINT16_MAX means to ignore this field. A value of 0 means to release this channel back to the RC radio. (uint16_t)
                chan2_raw                 : RC channel 2 value. A value of UINT16_MAX means to ignore this field. A value of 0 means to release this channel back to the RC radio. (uint16_t)
                chan3_raw                 : RC channel 3 value. A value of UINT16_MAX means to ignore this field. A value of 0 means to release this channel back to the RC radio. (uint16_t)
                chan4_raw                 : RC channel 4 value. A value of UINT16_MAX means to ignore this field. A value of 0 means to release this channel back to the RC radio. (uint16_t)
                chan5_raw                 : RC channel 5 value. A value of UINT16_MAX means to ignore this field. A value of 0 means to release this channel back to the RC radio. (uint16_t)
                chan6_raw                 : RC channel 6 value. A value of UINT16_MAX means to ignore this field. A value of 0 means to release this channel back to the RC radio. (uint16_t)
                chan7_raw                 : RC channel 7 value. A value of UINT16_MAX means to ignore this field. A value of 0 means to release this channel back to the RC radio. (uint16_t)
                chan8_raw                 : RC channel 8 value. A value of UINT16_MAX means to ignore this field. A value of 0 means to release this channel back to the RC radio. (uint16_t)
                chan9_raw                 : RC channel 9 value. A value of 0 or UINT16_MAX means to ignore this field. A value of UINT16_MAX-1 means to release this channel back to the RC radio. (uint16_t)
                chan10_raw                : RC channel 10 value. A value of 0 or UINT16_MAX means to ignore this field. A value of UINT16_MAX-1 means to release this channel back to the RC radio. (uint16_t)
                chan11_raw                : RC channel 11 value. A value of 0 or UINT16_MAX means to ignore this field. A value of UINT16_MAX-1 means to release this channel back to the RC radio. (uint16_t)
                chan12_raw                : RC channel 12 value. A value of 0 or UINT16_MAX means to ignore this field. A value of UINT16_MAX-1 means to release this channel back to the RC radio. (uint16_t)
                chan13_raw                : RC channel 13 value. A value of 0 or UINT16_MAX means to ignore this field. A value of UINT16_MAX-1 means to release this channel back to the RC radio. (uint16_t)
                chan14_raw                : RC channel 14 value. A value of 0 or UINT16_MAX means to ignore this field. A value of UINT16_MAX-1 means to release this channel back to the RC radio. (uint16_t)
                chan15_raw                : RC channel 15 value. A value of 0 or UINT16_MAX means to ignore this field. A value of UINT16_MAX-1 means to release this channel back to the RC radio. (uint16_t)
                chan16_raw                : RC channel 16 value. A value of 0 or UINT16_MAX means to ignore this field. A value of UINT16_MAX-1 means to release this channel back to the RC radio. (uint16_t)
                chan17_raw                : RC channel 17 value. A value of 0 or UINT16_MAX means to ignore this field. A value of UINT16_MAX-1 means to release this channel back to the RC radio. (uint16_t)
                chan18_raw                : RC channel 18 value. A value of 0 or UINT16_MAX means to ignore this field. A value of UINT16_MAX-1 means to release this channel back to the RC radio. (uint16_t)

*/
    mavlink20.messages.rc_channels_override = function( ...moreargs ) {
     [ this.target_system , this.target_component , this.chan1_raw , this.chan2_raw , this.chan3_raw , this.chan4_raw , this.chan5_raw , this.chan6_raw , this.chan7_raw , this.chan8_raw , this.chan9_raw , this.chan10_raw , this.chan11_raw , this.chan12_raw , this.chan13_raw , this.chan14_raw , this.chan15_raw , this.chan16_raw , this.chan17_raw , this.chan18_raw ] = moreargs;


    this._format = '<HHHHHHHHBBHHHHHHHHHH';
    this._id = mavlink20.MAVLINK_MSG_ID_RC_CHANNELS_OVERRIDE;
    this.order_map = [8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19];
    this.len_map = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1];
    this.array_len_map = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
    this.crc_extra = 124;
    this._name = 'RC_CHANNELS_OVERRIDE';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['target_system', 'target_component', 'chan1_raw', 'chan2_raw', 'chan3_raw', 'chan4_raw', 'chan5_raw', 'chan6_raw', 'chan7_raw', 'chan8_raw', 'chan9_raw', 'chan10_raw', 'chan11_raw', 'chan12_raw', 'chan13_raw', 'chan14_raw', 'chan15_raw', 'chan16_raw', 'chan17_raw', 'chan18_raw'];

}

mavlink20.messages.rc_channels_override.prototype = new mavlink20.message;
mavlink20.messages.rc_channels_override.prototype.pack = function(mav) {
    var orderedfields = [ this.chan1_raw, this.chan2_raw, this.chan3_raw, this.chan4_raw, this.chan5_raw, this.chan6_raw, this.chan7_raw, this.chan8_raw, this.target_system, this.target_component, this.chan9_raw, this.chan10_raw, this.chan11_raw, this.chan12_raw, this.chan13_raw, this.chan14_raw, this.chan15_raw, this.chan16_raw, this.chan17_raw, this.chan18_raw];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink20.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
Message encoding a mission item. This message is emitted to announce
the presence of a mission item and to set a mission item on the
system. The mission item can be either in x, y, z meters (type: LOCAL)
or x:lat, y:lon, z:altitude. Local frame is Z-down, right handed
(NED), global frame is Z-up, right handed (ENU). NaN or INT32_MAX may
be used in float/integer params (respectively) to indicate
optional/default values (e.g. to use the component's current latitude,
yaw rather than a specific value). See also
https://mavlink.io/en/services/mission.html.

                target_system             : System ID (uint8_t)
                target_component          : Component ID (uint8_t)
                seq                       : Waypoint ID (sequence number). Starts at zero. Increases monotonically for each waypoint, no gaps in the sequence (0,1,2,3,4). (uint16_t)
                frame                     : The coordinate system of the waypoint. (uint8_t)
                command                   : The scheduled action for the waypoint. (uint16_t)
                current                   : false:0, true:1 (uint8_t)
                autocontinue              : Autocontinue to next waypoint (uint8_t)
                param1                    : PARAM1, see MAV_CMD enum (float)
                param2                    : PARAM2, see MAV_CMD enum (float)
                param3                    : PARAM3, see MAV_CMD enum (float)
                param4                    : PARAM4, see MAV_CMD enum (float)
                x                         : PARAM5 / local: x position in meters * 1e4, global: latitude in degrees * 10^7 (int32_t)
                y                         : PARAM6 / y position: local: x position in meters * 1e4, global: longitude in degrees *10^7 (int32_t)
                z                         : PARAM7 / z position: global: altitude in meters (relative or absolute, depending on frame. (float)
                mission_type              : Mission type. (uint8_t)

*/
    mavlink20.messages.mission_item_int = function( ...moreargs ) {
     [ this.target_system , this.target_component , this.seq , this.frame , this.command , this.current , this.autocontinue , this.param1 , this.param2 , this.param3 , this.param4 , this.x , this.y , this.z , this.mission_type ] = moreargs;


    this._format = '<ffffiifHHBBBBBB';
    this._id = mavlink20.MAVLINK_MSG_ID_MISSION_ITEM_INT;
    this.order_map = [9, 10, 7, 11, 8, 12, 13, 0, 1, 2, 3, 4, 5, 6, 14];
    this.len_map = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1];
    this.array_len_map = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
    this.crc_extra = 38;
    this._name = 'MISSION_ITEM_INT';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['target_system', 'target_component', 'seq', 'frame', 'command', 'current', 'autocontinue', 'param1', 'param2', 'param3', 'param4', 'x', 'y', 'z', 'mission_type'];

}

mavlink20.messages.mission_item_int.prototype = new mavlink20.message;
mavlink20.messages.mission_item_int.prototype.pack = function(mav) {
    var orderedfields = [ this.param1, this.param2, this.param3, this.param4, this.x, this.y, this.z, this.seq, this.command, this.target_system, this.target_component, this.frame, this.current, this.autocontinue, this.mission_type];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink20.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
Metrics typically displayed on a HUD for fixed wing aircraft.

                airspeed                  : Vehicle speed in form appropriate for vehicle type. For standard aircraft this is typically calibrated airspeed (CAS) or indicated airspeed (IAS) - either of which can be used by a pilot to estimate stall speed. (float)
                groundspeed               : Current ground speed. (float)
                heading                   : Current heading in compass units (0-360, 0=north). (int16_t)
                throttle                  : Current throttle setting (0 to 100). (uint16_t)
                alt                       : Current altitude (MSL). (float)
                climb                     : Current climb rate. (float)

*/
    mavlink20.messages.vfr_hud = function( ...moreargs ) {
     [ this.airspeed , this.groundspeed , this.heading , this.throttle , this.alt , this.climb ] = moreargs;


    this._format = '<ffffhH';
    this._id = mavlink20.MAVLINK_MSG_ID_VFR_HUD;
    this.order_map = [0, 1, 4, 5, 2, 3];
    this.len_map = [1, 1, 1, 1, 1, 1];
    this.array_len_map = [0, 0, 0, 0, 0, 0];
    this.crc_extra = 20;
    this._name = 'VFR_HUD';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['airspeed', 'groundspeed', 'heading', 'throttle', 'alt', 'climb'];

}

mavlink20.messages.vfr_hud.prototype = new mavlink20.message;
mavlink20.messages.vfr_hud.prototype.pack = function(mav) {
    var orderedfields = [ this.airspeed, this.groundspeed, this.alt, this.climb, this.heading, this.throttle];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink20.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
Message encoding a command with parameters as scaled integers. Scaling
depends on the actual command value. The command microservice is
documented at https://mavlink.io/en/services/command.html

                target_system             : System ID (uint8_t)
                target_component          : Component ID (uint8_t)
                frame                     : The coordinate system of the COMMAND. (uint8_t)
                command                   : The scheduled action for the mission item. (uint16_t)
                current                   : Not used. (uint8_t)
                autocontinue              : Not used (set 0). (uint8_t)
                param1                    : PARAM1, see MAV_CMD enum (float)
                param2                    : PARAM2, see MAV_CMD enum (float)
                param3                    : PARAM3, see MAV_CMD enum (float)
                param4                    : PARAM4, see MAV_CMD enum (float)
                x                         : PARAM5 / local: x position in meters * 1e4, global: latitude in degrees * 10^7 (int32_t)
                y                         : PARAM6 / local: y position in meters * 1e4, global: longitude in degrees * 10^7 (int32_t)
                z                         : PARAM7 / z position: global: altitude in meters (relative or absolute, depending on frame). (float)

*/
    mavlink20.messages.command_int = function( ...moreargs ) {
     [ this.target_system , this.target_component , this.frame , this.command , this.current , this.autocontinue , this.param1 , this.param2 , this.param3 , this.param4 , this.x , this.y , this.z ] = moreargs;


    this._format = '<ffffiifHBBBBB';
    this._id = mavlink20.MAVLINK_MSG_ID_COMMAND_INT;
    this.order_map = [8, 9, 10, 7, 11, 12, 0, 1, 2, 3, 4, 5, 6];
    this.len_map = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1];
    this.array_len_map = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
    this.crc_extra = 158;
    this._name = 'COMMAND_INT';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['target_system', 'target_component', 'frame', 'command', 'current', 'autocontinue', 'param1', 'param2', 'param3', 'param4', 'x', 'y', 'z'];

}

mavlink20.messages.command_int.prototype = new mavlink20.message;
mavlink20.messages.command_int.prototype.pack = function(mav) {
    var orderedfields = [ this.param1, this.param2, this.param3, this.param4, this.x, this.y, this.z, this.command, this.target_system, this.target_component, this.frame, this.current, this.autocontinue];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink20.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
Send a command with up to seven parameters to the MAV. The command
microservice is documented at
https://mavlink.io/en/services/command.html

                target_system             : System which should execute the command (uint8_t)
                target_component          : Component which should execute the command, 0 for all components (uint8_t)
                command                   : Command ID (of command to send). (uint16_t)
                confirmation              : 0: First transmission of this command. 1-255: Confirmation transmissions (e.g. for kill command) (uint8_t)
                param1                    : Parameter 1 (for the specific command). (float)
                param2                    : Parameter 2 (for the specific command). (float)
                param3                    : Parameter 3 (for the specific command). (float)
                param4                    : Parameter 4 (for the specific command). (float)
                param5                    : Parameter 5 (for the specific command). (float)
                param6                    : Parameter 6 (for the specific command). (float)
                param7                    : Parameter 7 (for the specific command). (float)

*/
    mavlink20.messages.command_long = function( ...moreargs ) {
     [ this.target_system , this.target_component , this.command , this.confirmation , this.param1 , this.param2 , this.param3 , this.param4 , this.param5 , this.param6 , this.param7 ] = moreargs;


    this._format = '<fffffffHBBB';
    this._id = mavlink20.MAVLINK_MSG_ID_COMMAND_LONG;
    this.order_map = [8, 9, 7, 10, 0, 1, 2, 3, 4, 5, 6];
    this.len_map = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1];
    this.array_len_map = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
    this.crc_extra = 152;
    this._name = 'COMMAND_LONG';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['target_system', 'target_component', 'command', 'confirmation', 'param1', 'param2', 'param3', 'param4', 'param5', 'param6', 'param7'];

}

mavlink20.messages.command_long.prototype = new mavlink20.message;
mavlink20.messages.command_long.prototype.pack = function(mav) {
    var orderedfields = [ this.param1, this.param2, this.param3, this.param4, this.param5, this.param6, this.param7, this.command, this.target_system, this.target_component, this.confirmation];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink20.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
Report status of a command. Includes feedback whether the command was
executed. The command microservice is documented at
https://mavlink.io/en/services/command.html

                command                   : Command ID (of acknowledged command). (uint16_t)
                result                    : Result of command. (uint8_t)
                progress                  : Also used as result_param1, it can be set with a enum containing the errors reasons of why the command was denied or the progress percentage or 255 if unknown the progress when result is MAV_RESULT_IN_PROGRESS. (uint8_t)
                result_param2             : Additional parameter of the result, example: which parameter of MAV_CMD_NAV_WAYPOINT caused it to be denied. (int32_t)
                target_system             : System which requested the command to be executed (uint8_t)
                target_component          : Component which requested the command to be executed (uint8_t)

*/
    mavlink20.messages.command_ack = function( ...moreargs ) {
     [ this.command , this.result , this.progress , this.result_param2 , this.target_system , this.target_component ] = moreargs;


    this._format = '<HBBiBB';
    this._id = mavlink20.MAVLINK_MSG_ID_COMMAND_ACK;
    this.order_map = [0, 1, 2, 3, 4, 5];
    this.len_map = [1, 1, 1, 1, 1, 1];
    this.array_len_map = [0, 0, 0, 0, 0, 0];
    this.crc_extra = 143;
    this._name = 'COMMAND_ACK';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['command', 'result', 'progress', 'result_param2', 'target_system', 'target_component'];

}

mavlink20.messages.command_ack.prototype = new mavlink20.message;
mavlink20.messages.command_ack.prototype.pack = function(mav) {
    var orderedfields = [ this.command, this.result, this.progress, this.result_param2, this.target_system, this.target_component];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink20.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
Setpoint in roll, pitch, yaw and thrust from the operator

                time_boot_ms              : Timestamp (time since system boot). (uint32_t)
                roll                      : Desired roll rate (float)
                pitch                     : Desired pitch rate (float)
                yaw                       : Desired yaw rate (float)
                thrust                    : Collective thrust, normalized to 0 .. 1 (float)
                mode_switch               : Flight mode switch position, 0.. 255 (uint8_t)
                manual_override_switch        : Override mode switch position, 0.. 255 (uint8_t)

*/
    mavlink20.messages.manual_setpoint = function( ...moreargs ) {
     [ this.time_boot_ms , this.roll , this.pitch , this.yaw , this.thrust , this.mode_switch , this.manual_override_switch ] = moreargs;


    this._format = '<IffffBB';
    this._id = mavlink20.MAVLINK_MSG_ID_MANUAL_SETPOINT;
    this.order_map = [0, 1, 2, 3, 4, 5, 6];
    this.len_map = [1, 1, 1, 1, 1, 1, 1];
    this.array_len_map = [0, 0, 0, 0, 0, 0, 0];
    this.crc_extra = 106;
    this._name = 'MANUAL_SETPOINT';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['time_boot_ms', 'roll', 'pitch', 'yaw', 'thrust', 'mode_switch', 'manual_override_switch'];

}

mavlink20.messages.manual_setpoint.prototype = new mavlink20.message;
mavlink20.messages.manual_setpoint.prototype.pack = function(mav) {
    var orderedfields = [ this.time_boot_ms, this.roll, this.pitch, this.yaw, this.thrust, this.mode_switch, this.manual_override_switch];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink20.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
Sets a desired vehicle attitude. Used by an external controller to
command the vehicle (manual controller or other system).

                time_boot_ms              : Timestamp (time since system boot). (uint32_t)
                target_system             : System ID (uint8_t)
                target_component          : Component ID (uint8_t)
                type_mask                 : Bitmap to indicate which dimensions should be ignored by the vehicle. (uint8_t)
                q                         : Attitude quaternion (w, x, y, z order, zero-rotation is 1, 0, 0, 0) (float)
                body_roll_rate            : Body roll rate (float)
                body_pitch_rate           : Body pitch rate (float)
                body_yaw_rate             : Body yaw rate (float)
                thrust                    : Collective thrust, normalized to 0 .. 1 (-1 .. 1 for vehicles capable of reverse trust) (float)

*/
    mavlink20.messages.set_attitude_target = function( ...moreargs ) {
     [ this.time_boot_ms , this.target_system , this.target_component , this.type_mask , this.q , this.body_roll_rate , this.body_pitch_rate , this.body_yaw_rate , this.thrust ] = moreargs;


    this._format = '<I4fffffBBB';
    this._id = mavlink20.MAVLINK_MSG_ID_SET_ATTITUDE_TARGET;
    this.order_map = [0, 6, 7, 8, 1, 2, 3, 4, 5];
    this.len_map = [1, 4, 1, 1, 1, 1, 1, 1, 1];
    this.array_len_map = [0, 4, 0, 0, 0, 0, 0, 0, 0];
    this.crc_extra = 49;
    this._name = 'SET_ATTITUDE_TARGET';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['time_boot_ms', 'target_system', 'target_component', 'type_mask', 'q', 'body_roll_rate', 'body_pitch_rate', 'body_yaw_rate', 'thrust'];

}

mavlink20.messages.set_attitude_target.prototype = new mavlink20.message;
mavlink20.messages.set_attitude_target.prototype.pack = function(mav) {
    var orderedfields = [ this.time_boot_ms, this.q, this.body_roll_rate, this.body_pitch_rate, this.body_yaw_rate, this.thrust, this.target_system, this.target_component, this.type_mask];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink20.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
Reports the current commanded attitude of the vehicle as specified by
the autopilot. This should match the commands sent in a
SET_ATTITUDE_TARGET message if the vehicle is being controlled this
way.

                time_boot_ms              : Timestamp (time since system boot). (uint32_t)
                type_mask                 : Bitmap to indicate which dimensions should be ignored by the vehicle. (uint8_t)
                q                         : Attitude quaternion (w, x, y, z order, zero-rotation is 1, 0, 0, 0) (float)
                body_roll_rate            : Body roll rate (float)
                body_pitch_rate           : Body pitch rate (float)
                body_yaw_rate             : Body yaw rate (float)
                thrust                    : Collective thrust, normalized to 0 .. 1 (-1 .. 1 for vehicles capable of reverse trust) (float)

*/
    mavlink20.messages.attitude_target = function( ...moreargs ) {
     [ this.time_boot_ms , this.type_mask , this.q , this.body_roll_rate , this.body_pitch_rate , this.body_yaw_rate , this.thrust ] = moreargs;


    this._format = '<I4fffffB';
    this._id = mavlink20.MAVLINK_MSG_ID_ATTITUDE_TARGET;
    this.order_map = [0, 6, 1, 2, 3, 4, 5];
    this.len_map = [1, 4, 1, 1, 1, 1, 1];
    this.array_len_map = [0, 4, 0, 0, 0, 0, 0];
    this.crc_extra = 22;
    this._name = 'ATTITUDE_TARGET';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['time_boot_ms', 'type_mask', 'q', 'body_roll_rate', 'body_pitch_rate', 'body_yaw_rate', 'thrust'];

}

mavlink20.messages.attitude_target.prototype = new mavlink20.message;
mavlink20.messages.attitude_target.prototype.pack = function(mav) {
    var orderedfields = [ this.time_boot_ms, this.q, this.body_roll_rate, this.body_pitch_rate, this.body_yaw_rate, this.thrust, this.type_mask];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink20.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
Sets a desired vehicle position in a local north-east-down coordinate
frame. Used by an external controller to command the vehicle (manual
controller or other system).

                time_boot_ms              : Timestamp (time since system boot). (uint32_t)
                target_system             : System ID (uint8_t)
                target_component          : Component ID (uint8_t)
                coordinate_frame          : Valid options are: MAV_FRAME_LOCAL_NED = 1, MAV_FRAME_LOCAL_OFFSET_NED = 7, MAV_FRAME_BODY_NED = 8, MAV_FRAME_BODY_OFFSET_NED = 9 (uint8_t)
                type_mask                 : Bitmap to indicate which dimensions should be ignored by the vehicle. (uint16_t)
                x                         : X Position in NED frame (float)
                y                         : Y Position in NED frame (float)
                z                         : Z Position in NED frame (note, altitude is negative in NED) (float)
                vx                        : X velocity in NED frame (float)
                vy                        : Y velocity in NED frame (float)
                vz                        : Z velocity in NED frame (float)
                afx                       : X acceleration or force (if bit 10 of type_mask is set) in NED frame in meter / s^2 or N (float)
                afy                       : Y acceleration or force (if bit 10 of type_mask is set) in NED frame in meter / s^2 or N (float)
                afz                       : Z acceleration or force (if bit 10 of type_mask is set) in NED frame in meter / s^2 or N (float)
                yaw                       : yaw setpoint (float)
                yaw_rate                  : yaw rate setpoint (float)

*/
    mavlink20.messages.set_position_target_local_ned = function( ...moreargs ) {
     [ this.time_boot_ms , this.target_system , this.target_component , this.coordinate_frame , this.type_mask , this.x , this.y , this.z , this.vx , this.vy , this.vz , this.afx , this.afy , this.afz , this.yaw , this.yaw_rate ] = moreargs;


    this._format = '<IfffffffffffHBBB';
    this._id = mavlink20.MAVLINK_MSG_ID_SET_POSITION_TARGET_LOCAL_NED;
    this.order_map = [0, 13, 14, 15, 12, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11];
    this.len_map = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1];
    this.array_len_map = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
    this.crc_extra = 143;
    this._name = 'SET_POSITION_TARGET_LOCAL_NED';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['time_boot_ms', 'target_system', 'target_component', 'coordinate_frame', 'type_mask', 'x', 'y', 'z', 'vx', 'vy', 'vz', 'afx', 'afy', 'afz', 'yaw', 'yaw_rate'];

}

mavlink20.messages.set_position_target_local_ned.prototype = new mavlink20.message;
mavlink20.messages.set_position_target_local_ned.prototype.pack = function(mav) {
    var orderedfields = [ this.time_boot_ms, this.x, this.y, this.z, this.vx, this.vy, this.vz, this.afx, this.afy, this.afz, this.yaw, this.yaw_rate, this.type_mask, this.target_system, this.target_component, this.coordinate_frame];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink20.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
Reports the current commanded vehicle position, velocity, and
acceleration as specified by the autopilot. This should match the
commands sent in SET_POSITION_TARGET_LOCAL_NED if the vehicle is being
controlled this way.

                time_boot_ms              : Timestamp (time since system boot). (uint32_t)
                coordinate_frame          : Valid options are: MAV_FRAME_LOCAL_NED = 1, MAV_FRAME_LOCAL_OFFSET_NED = 7, MAV_FRAME_BODY_NED = 8, MAV_FRAME_BODY_OFFSET_NED = 9 (uint8_t)
                type_mask                 : Bitmap to indicate which dimensions should be ignored by the vehicle. (uint16_t)
                x                         : X Position in NED frame (float)
                y                         : Y Position in NED frame (float)
                z                         : Z Position in NED frame (note, altitude is negative in NED) (float)
                vx                        : X velocity in NED frame (float)
                vy                        : Y velocity in NED frame (float)
                vz                        : Z velocity in NED frame (float)
                afx                       : X acceleration or force (if bit 10 of type_mask is set) in NED frame in meter / s^2 or N (float)
                afy                       : Y acceleration or force (if bit 10 of type_mask is set) in NED frame in meter / s^2 or N (float)
                afz                       : Z acceleration or force (if bit 10 of type_mask is set) in NED frame in meter / s^2 or N (float)
                yaw                       : yaw setpoint (float)
                yaw_rate                  : yaw rate setpoint (float)

*/
    mavlink20.messages.position_target_local_ned = function( ...moreargs ) {
     [ this.time_boot_ms , this.coordinate_frame , this.type_mask , this.x , this.y , this.z , this.vx , this.vy , this.vz , this.afx , this.afy , this.afz , this.yaw , this.yaw_rate ] = moreargs;


    this._format = '<IfffffffffffHB';
    this._id = mavlink20.MAVLINK_MSG_ID_POSITION_TARGET_LOCAL_NED;
    this.order_map = [0, 13, 12, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11];
    this.len_map = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1];
    this.array_len_map = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
    this.crc_extra = 140;
    this._name = 'POSITION_TARGET_LOCAL_NED';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['time_boot_ms', 'coordinate_frame', 'type_mask', 'x', 'y', 'z', 'vx', 'vy', 'vz', 'afx', 'afy', 'afz', 'yaw', 'yaw_rate'];

}

mavlink20.messages.position_target_local_ned.prototype = new mavlink20.message;
mavlink20.messages.position_target_local_ned.prototype.pack = function(mav) {
    var orderedfields = [ this.time_boot_ms, this.x, this.y, this.z, this.vx, this.vy, this.vz, this.afx, this.afy, this.afz, this.yaw, this.yaw_rate, this.type_mask, this.coordinate_frame];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink20.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
Sets a desired vehicle position, velocity, and/or acceleration in a
global coordinate system (WGS84). Used by an external controller to
command the vehicle (manual controller or other system).

                time_boot_ms              : Timestamp (time since system boot). The rationale for the timestamp in the setpoint is to allow the system to compensate for the transport delay of the setpoint. This allows the system to compensate processing latency. (uint32_t)
                target_system             : System ID (uint8_t)
                target_component          : Component ID (uint8_t)
                coordinate_frame          : Valid options are: MAV_FRAME_GLOBAL_INT = 5, MAV_FRAME_GLOBAL_RELATIVE_ALT_INT = 6, MAV_FRAME_GLOBAL_TERRAIN_ALT_INT = 11 (uint8_t)
                type_mask                 : Bitmap to indicate which dimensions should be ignored by the vehicle. (uint16_t)
                lat_int                   : X Position in WGS84 frame (int32_t)
                lon_int                   : Y Position in WGS84 frame (int32_t)
                alt                       : Altitude (MSL, Relative to home, or AGL - depending on frame) (float)
                vx                        : X velocity in NED frame (float)
                vy                        : Y velocity in NED frame (float)
                vz                        : Z velocity in NED frame (float)
                afx                       : X acceleration or force (if bit 10 of type_mask is set) in NED frame in meter / s^2 or N (float)
                afy                       : Y acceleration or force (if bit 10 of type_mask is set) in NED frame in meter / s^2 or N (float)
                afz                       : Z acceleration or force (if bit 10 of type_mask is set) in NED frame in meter / s^2 or N (float)
                yaw                       : yaw setpoint (float)
                yaw_rate                  : yaw rate setpoint (float)

*/
    mavlink20.messages.set_position_target_global_int = function( ...moreargs ) {
     [ this.time_boot_ms , this.target_system , this.target_component , this.coordinate_frame , this.type_mask , this.lat_int , this.lon_int , this.alt , this.vx , this.vy , this.vz , this.afx , this.afy , this.afz , this.yaw , this.yaw_rate ] = moreargs;


    this._format = '<IiifffffffffHBBB';
    this._id = mavlink20.MAVLINK_MSG_ID_SET_POSITION_TARGET_GLOBAL_INT;
    this.order_map = [0, 13, 14, 15, 12, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11];
    this.len_map = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1];
    this.array_len_map = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
    this.crc_extra = 5;
    this._name = 'SET_POSITION_TARGET_GLOBAL_INT';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['time_boot_ms', 'target_system', 'target_component', 'coordinate_frame', 'type_mask', 'lat_int', 'lon_int', 'alt', 'vx', 'vy', 'vz', 'afx', 'afy', 'afz', 'yaw', 'yaw_rate'];

}

mavlink20.messages.set_position_target_global_int.prototype = new mavlink20.message;
mavlink20.messages.set_position_target_global_int.prototype.pack = function(mav) {
    var orderedfields = [ this.time_boot_ms, this.lat_int, this.lon_int, this.alt, this.vx, this.vy, this.vz, this.afx, this.afy, this.afz, this.yaw, this.yaw_rate, this.type_mask, this.target_system, this.target_component, this.coordinate_frame];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink20.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
Reports the current commanded vehicle position, velocity, and
acceleration as specified by the autopilot. This should match the
commands sent in SET_POSITION_TARGET_GLOBAL_INT if the vehicle is
being controlled this way.

                time_boot_ms              : Timestamp (time since system boot). The rationale for the timestamp in the setpoint is to allow the system to compensate for the transport delay of the setpoint. This allows the system to compensate processing latency. (uint32_t)
                coordinate_frame          : Valid options are: MAV_FRAME_GLOBAL_INT = 5, MAV_FRAME_GLOBAL_RELATIVE_ALT_INT = 6, MAV_FRAME_GLOBAL_TERRAIN_ALT_INT = 11 (uint8_t)
                type_mask                 : Bitmap to indicate which dimensions should be ignored by the vehicle. (uint16_t)
                lat_int                   : X Position in WGS84 frame (int32_t)
                lon_int                   : Y Position in WGS84 frame (int32_t)
                alt                       : Altitude (MSL, AGL or relative to home altitude, depending on frame) (float)
                vx                        : X velocity in NED frame (float)
                vy                        : Y velocity in NED frame (float)
                vz                        : Z velocity in NED frame (float)
                afx                       : X acceleration or force (if bit 10 of type_mask is set) in NED frame in meter / s^2 or N (float)
                afy                       : Y acceleration or force (if bit 10 of type_mask is set) in NED frame in meter / s^2 or N (float)
                afz                       : Z acceleration or force (if bit 10 of type_mask is set) in NED frame in meter / s^2 or N (float)
                yaw                       : yaw setpoint (float)
                yaw_rate                  : yaw rate setpoint (float)

*/
    mavlink20.messages.position_target_global_int = function( ...moreargs ) {
     [ this.time_boot_ms , this.coordinate_frame , this.type_mask , this.lat_int , this.lon_int , this.alt , this.vx , this.vy , this.vz , this.afx , this.afy , this.afz , this.yaw , this.yaw_rate ] = moreargs;


    this._format = '<IiifffffffffHB';
    this._id = mavlink20.MAVLINK_MSG_ID_POSITION_TARGET_GLOBAL_INT;
    this.order_map = [0, 13, 12, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11];
    this.len_map = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1];
    this.array_len_map = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
    this.crc_extra = 150;
    this._name = 'POSITION_TARGET_GLOBAL_INT';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['time_boot_ms', 'coordinate_frame', 'type_mask', 'lat_int', 'lon_int', 'alt', 'vx', 'vy', 'vz', 'afx', 'afy', 'afz', 'yaw', 'yaw_rate'];

}

mavlink20.messages.position_target_global_int.prototype = new mavlink20.message;
mavlink20.messages.position_target_global_int.prototype.pack = function(mav) {
    var orderedfields = [ this.time_boot_ms, this.lat_int, this.lon_int, this.alt, this.vx, this.vy, this.vz, this.afx, this.afy, this.afz, this.yaw, this.yaw_rate, this.type_mask, this.coordinate_frame];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink20.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
The offset in X, Y, Z and yaw between the LOCAL_POSITION_NED messages
of MAV X and the global coordinate frame in NED coordinates.
Coordinate frame is right-handed, Z-axis down (aeronautical frame, NED
/ north-east-down convention)

                time_boot_ms              : Timestamp (time since system boot). (uint32_t)
                x                         : X Position (float)
                y                         : Y Position (float)
                z                         : Z Position (float)
                roll                      : Roll (float)
                pitch                     : Pitch (float)
                yaw                       : Yaw (float)

*/
    mavlink20.messages.local_position_ned_system_global_offset = function( ...moreargs ) {
     [ this.time_boot_ms , this.x , this.y , this.z , this.roll , this.pitch , this.yaw ] = moreargs;


    this._format = '<Iffffff';
    this._id = mavlink20.MAVLINK_MSG_ID_LOCAL_POSITION_NED_SYSTEM_GLOBAL_OFFSET;
    this.order_map = [0, 1, 2, 3, 4, 5, 6];
    this.len_map = [1, 1, 1, 1, 1, 1, 1];
    this.array_len_map = [0, 0, 0, 0, 0, 0, 0];
    this.crc_extra = 231;
    this._name = 'LOCAL_POSITION_NED_SYSTEM_GLOBAL_OFFSET';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['time_boot_ms', 'x', 'y', 'z', 'roll', 'pitch', 'yaw'];

}

mavlink20.messages.local_position_ned_system_global_offset.prototype = new mavlink20.message;
mavlink20.messages.local_position_ned_system_global_offset.prototype.pack = function(mav) {
    var orderedfields = [ this.time_boot_ms, this.x, this.y, this.z, this.roll, this.pitch, this.yaw];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink20.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
Sent from simulation to autopilot. This packet is useful for high
throughput applications such as hardware in the loop simulations.

                time_usec                 : Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude of the number. (uint64_t)
                roll                      : Roll angle (float)
                pitch                     : Pitch angle (float)
                yaw                       : Yaw angle (float)
                rollspeed                 : Body frame roll / phi angular speed (float)
                pitchspeed                : Body frame pitch / theta angular speed (float)
                yawspeed                  : Body frame yaw / psi angular speed (float)
                lat                       : Latitude (int32_t)
                lon                       : Longitude (int32_t)
                alt                       : Altitude (int32_t)
                vx                        : Ground X Speed (Latitude) (int16_t)
                vy                        : Ground Y Speed (Longitude) (int16_t)
                vz                        : Ground Z Speed (Altitude) (int16_t)
                xacc                      : X acceleration (int16_t)
                yacc                      : Y acceleration (int16_t)
                zacc                      : Z acceleration (int16_t)

*/
    mavlink20.messages.hil_state = function( ...moreargs ) {
     [ this.time_usec , this.roll , this.pitch , this.yaw , this.rollspeed , this.pitchspeed , this.yawspeed , this.lat , this.lon , this.alt , this.vx , this.vy , this.vz , this.xacc , this.yacc , this.zacc ] = moreargs;


    this._format = '<Qffffffiiihhhhhh';
    this._id = mavlink20.MAVLINK_MSG_ID_HIL_STATE;
    this.order_map = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15];
    this.len_map = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1];
    this.array_len_map = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
    this.crc_extra = 183;
    this._name = 'HIL_STATE';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['time_usec', 'roll', 'pitch', 'yaw', 'rollspeed', 'pitchspeed', 'yawspeed', 'lat', 'lon', 'alt', 'vx', 'vy', 'vz', 'xacc', 'yacc', 'zacc'];

}

mavlink20.messages.hil_state.prototype = new mavlink20.message;
mavlink20.messages.hil_state.prototype.pack = function(mav) {
    var orderedfields = [ this.time_usec, this.roll, this.pitch, this.yaw, this.rollspeed, this.pitchspeed, this.yawspeed, this.lat, this.lon, this.alt, this.vx, this.vy, this.vz, this.xacc, this.yacc, this.zacc];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink20.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
Sent from autopilot to simulation. Hardware in the loop control
outputs

                time_usec                 : Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude of the number. (uint64_t)
                roll_ailerons             : Control output -1 .. 1 (float)
                pitch_elevator            : Control output -1 .. 1 (float)
                yaw_rudder                : Control output -1 .. 1 (float)
                throttle                  : Throttle 0 .. 1 (float)
                aux1                      : Aux 1, -1 .. 1 (float)
                aux2                      : Aux 2, -1 .. 1 (float)
                aux3                      : Aux 3, -1 .. 1 (float)
                aux4                      : Aux 4, -1 .. 1 (float)
                mode                      : System mode. (uint8_t)
                nav_mode                  : Navigation mode (MAV_NAV_MODE) (uint8_t)

*/
    mavlink20.messages.hil_controls = function( ...moreargs ) {
     [ this.time_usec , this.roll_ailerons , this.pitch_elevator , this.yaw_rudder , this.throttle , this.aux1 , this.aux2 , this.aux3 , this.aux4 , this.mode , this.nav_mode ] = moreargs;


    this._format = '<QffffffffBB';
    this._id = mavlink20.MAVLINK_MSG_ID_HIL_CONTROLS;
    this.order_map = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10];
    this.len_map = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1];
    this.array_len_map = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
    this.crc_extra = 63;
    this._name = 'HIL_CONTROLS';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['time_usec', 'roll_ailerons', 'pitch_elevator', 'yaw_rudder', 'throttle', 'aux1', 'aux2', 'aux3', 'aux4', 'mode', 'nav_mode'];

}

mavlink20.messages.hil_controls.prototype = new mavlink20.message;
mavlink20.messages.hil_controls.prototype.pack = function(mav) {
    var orderedfields = [ this.time_usec, this.roll_ailerons, this.pitch_elevator, this.yaw_rudder, this.throttle, this.aux1, this.aux2, this.aux3, this.aux4, this.mode, this.nav_mode];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink20.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
Sent from simulation to autopilot. The RAW values of the RC channels
received. The standard PPM modulation is as follows: 1000
microseconds: 0%, 2000 microseconds: 100%. Individual
receivers/transmitters might violate this specification.

                time_usec                 : Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude of the number. (uint64_t)
                chan1_raw                 : RC channel 1 value (uint16_t)
                chan2_raw                 : RC channel 2 value (uint16_t)
                chan3_raw                 : RC channel 3 value (uint16_t)
                chan4_raw                 : RC channel 4 value (uint16_t)
                chan5_raw                 : RC channel 5 value (uint16_t)
                chan6_raw                 : RC channel 6 value (uint16_t)
                chan7_raw                 : RC channel 7 value (uint16_t)
                chan8_raw                 : RC channel 8 value (uint16_t)
                chan9_raw                 : RC channel 9 value (uint16_t)
                chan10_raw                : RC channel 10 value (uint16_t)
                chan11_raw                : RC channel 11 value (uint16_t)
                chan12_raw                : RC channel 12 value (uint16_t)
                rssi                      : Receive signal strength indicator in device-dependent units/scale. Values: [0-254], 255: invalid/unknown. (uint8_t)

*/
    mavlink20.messages.hil_rc_inputs_raw = function( ...moreargs ) {
     [ this.time_usec , this.chan1_raw , this.chan2_raw , this.chan3_raw , this.chan4_raw , this.chan5_raw , this.chan6_raw , this.chan7_raw , this.chan8_raw , this.chan9_raw , this.chan10_raw , this.chan11_raw , this.chan12_raw , this.rssi ] = moreargs;


    this._format = '<QHHHHHHHHHHHHB';
    this._id = mavlink20.MAVLINK_MSG_ID_HIL_RC_INPUTS_RAW;
    this.order_map = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13];
    this.len_map = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1];
    this.array_len_map = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
    this.crc_extra = 54;
    this._name = 'HIL_RC_INPUTS_RAW';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['time_usec', 'chan1_raw', 'chan2_raw', 'chan3_raw', 'chan4_raw', 'chan5_raw', 'chan6_raw', 'chan7_raw', 'chan8_raw', 'chan9_raw', 'chan10_raw', 'chan11_raw', 'chan12_raw', 'rssi'];

}

mavlink20.messages.hil_rc_inputs_raw.prototype = new mavlink20.message;
mavlink20.messages.hil_rc_inputs_raw.prototype.pack = function(mav) {
    var orderedfields = [ this.time_usec, this.chan1_raw, this.chan2_raw, this.chan3_raw, this.chan4_raw, this.chan5_raw, this.chan6_raw, this.chan7_raw, this.chan8_raw, this.chan9_raw, this.chan10_raw, this.chan11_raw, this.chan12_raw, this.rssi];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink20.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
Sent from autopilot to simulation. Hardware in the loop control
outputs (replacement for HIL_CONTROLS)

                time_usec                 : Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude of the number. (uint64_t)
                controls                  : Control outputs -1 .. 1. Channel assignment depends on the simulated hardware. (float)
                mode                      : System mode. Includes arming state. (uint8_t)
                flags                     : Flags as bitfield, 1: indicate simulation using lockstep. (uint64_t)

*/
    mavlink20.messages.hil_actuator_controls = function( ...moreargs ) {
     [ this.time_usec , this.controls , this.mode , this.flags ] = moreargs;


    this._format = '<QQ16fB';
    this._id = mavlink20.MAVLINK_MSG_ID_HIL_ACTUATOR_CONTROLS;
    this.order_map = [0, 2, 3, 1];
    this.len_map = [1, 1, 16, 1];
    this.array_len_map = [0, 0, 16, 0];
    this.crc_extra = 47;
    this._name = 'HIL_ACTUATOR_CONTROLS';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['time_usec', 'controls', 'mode', 'flags'];

}

mavlink20.messages.hil_actuator_controls.prototype = new mavlink20.message;
mavlink20.messages.hil_actuator_controls.prototype.pack = function(mav) {
    var orderedfields = [ this.time_usec, this.flags, this.controls, this.mode];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink20.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
Optical flow from a flow sensor (e.g. optical mouse sensor)

                time_usec                 : Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude of the number. (uint64_t)
                sensor_id                 : Sensor ID (uint8_t)
                flow_x                    : Flow in x-sensor direction (int16_t)
                flow_y                    : Flow in y-sensor direction (int16_t)
                flow_comp_m_x             : Flow in x-sensor direction, angular-speed compensated (float)
                flow_comp_m_y             : Flow in y-sensor direction, angular-speed compensated (float)
                quality                   : Optical flow quality / confidence. 0: bad, 255: maximum quality (uint8_t)
                ground_distance           : Ground distance. Positive value: distance known. Negative value: Unknown distance (float)
                flow_rate_x               : Flow rate about X axis (float)
                flow_rate_y               : Flow rate about Y axis (float)

*/
    mavlink20.messages.optical_flow = function( ...moreargs ) {
     [ this.time_usec , this.sensor_id , this.flow_x , this.flow_y , this.flow_comp_m_x , this.flow_comp_m_y , this.quality , this.ground_distance , this.flow_rate_x , this.flow_rate_y ] = moreargs;


    this._format = '<QfffhhBBff';
    this._id = mavlink20.MAVLINK_MSG_ID_OPTICAL_FLOW;
    this.order_map = [0, 6, 4, 5, 1, 2, 7, 3, 8, 9];
    this.len_map = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1];
    this.array_len_map = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
    this.crc_extra = 175;
    this._name = 'OPTICAL_FLOW';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['time_usec', 'sensor_id', 'flow_x', 'flow_y', 'flow_comp_m_x', 'flow_comp_m_y', 'quality', 'ground_distance', 'flow_rate_x', 'flow_rate_y'];

}

mavlink20.messages.optical_flow.prototype = new mavlink20.message;
mavlink20.messages.optical_flow.prototype.pack = function(mav) {
    var orderedfields = [ this.time_usec, this.flow_comp_m_x, this.flow_comp_m_y, this.ground_distance, this.flow_x, this.flow_y, this.sensor_id, this.quality, this.flow_rate_x, this.flow_rate_y];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink20.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
Global position/attitude estimate from a vision source.

                usec                      : Timestamp (UNIX time or since system boot) (uint64_t)
                x                         : Global X position (float)
                y                         : Global Y position (float)
                z                         : Global Z position (float)
                roll                      : Roll angle (float)
                pitch                     : Pitch angle (float)
                yaw                       : Yaw angle (float)
                covariance                : Row-major representation of pose 6x6 cross-covariance matrix upper right triangle (states: x_global, y_global, z_global, roll, pitch, yaw; first six entries are the first ROW, next five entries are the second ROW, etc.). If unknown, assign NaN value to first element in the array. (float)
                reset_counter             : Estimate reset counter. This should be incremented when the estimate resets in any of the dimensions (position, velocity, attitude, angular speed). This is designed to be used when e.g an external SLAM system detects a loop-closure and the estimate jumps. (uint8_t)

*/
    mavlink20.messages.global_vision_position_estimate = function( ...moreargs ) {
     [ this.usec , this.x , this.y , this.z , this.roll , this.pitch , this.yaw , this.covariance , this.reset_counter ] = moreargs;


    this._format = '<Qffffff21fB';
    this._id = mavlink20.MAVLINK_MSG_ID_GLOBAL_VISION_POSITION_ESTIMATE;
    this.order_map = [0, 1, 2, 3, 4, 5, 6, 7, 8];
    this.len_map = [1, 1, 1, 1, 1, 1, 1, 21, 1];
    this.array_len_map = [0, 0, 0, 0, 0, 0, 0, 21, 0];
    this.crc_extra = 102;
    this._name = 'GLOBAL_VISION_POSITION_ESTIMATE';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['usec', 'x', 'y', 'z', 'roll', 'pitch', 'yaw', 'covariance', 'reset_counter'];

}

mavlink20.messages.global_vision_position_estimate.prototype = new mavlink20.message;
mavlink20.messages.global_vision_position_estimate.prototype.pack = function(mav) {
    var orderedfields = [ this.usec, this.x, this.y, this.z, this.roll, this.pitch, this.yaw, this.covariance, this.reset_counter];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink20.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
Local position/attitude estimate from a vision source.

                usec                      : Timestamp (UNIX time or time since system boot) (uint64_t)
                x                         : Local X position (float)
                y                         : Local Y position (float)
                z                         : Local Z position (float)
                roll                      : Roll angle (float)
                pitch                     : Pitch angle (float)
                yaw                       : Yaw angle (float)
                covariance                : Row-major representation of pose 6x6 cross-covariance matrix upper right triangle (states: x, y, z, roll, pitch, yaw; first six entries are the first ROW, next five entries are the second ROW, etc.). If unknown, assign NaN value to first element in the array. (float)
                reset_counter             : Estimate reset counter. This should be incremented when the estimate resets in any of the dimensions (position, velocity, attitude, angular speed). This is designed to be used when e.g an external SLAM system detects a loop-closure and the estimate jumps. (uint8_t)

*/
    mavlink20.messages.vision_position_estimate = function( ...moreargs ) {
     [ this.usec , this.x , this.y , this.z , this.roll , this.pitch , this.yaw , this.covariance , this.reset_counter ] = moreargs;


    this._format = '<Qffffff21fB';
    this._id = mavlink20.MAVLINK_MSG_ID_VISION_POSITION_ESTIMATE;
    this.order_map = [0, 1, 2, 3, 4, 5, 6, 7, 8];
    this.len_map = [1, 1, 1, 1, 1, 1, 1, 21, 1];
    this.array_len_map = [0, 0, 0, 0, 0, 0, 0, 21, 0];
    this.crc_extra = 158;
    this._name = 'VISION_POSITION_ESTIMATE';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['usec', 'x', 'y', 'z', 'roll', 'pitch', 'yaw', 'covariance', 'reset_counter'];

}

mavlink20.messages.vision_position_estimate.prototype = new mavlink20.message;
mavlink20.messages.vision_position_estimate.prototype.pack = function(mav) {
    var orderedfields = [ this.usec, this.x, this.y, this.z, this.roll, this.pitch, this.yaw, this.covariance, this.reset_counter];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink20.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
Speed estimate from a vision source.

                usec                      : Timestamp (UNIX time or time since system boot) (uint64_t)
                x                         : Global X speed (float)
                y                         : Global Y speed (float)
                z                         : Global Z speed (float)
                covariance                : Row-major representation of 3x3 linear velocity covariance matrix (states: vx, vy, vz; 1st three entries - 1st row, etc.). If unknown, assign NaN value to first element in the array. (float)
                reset_counter             : Estimate reset counter. This should be incremented when the estimate resets in any of the dimensions (position, velocity, attitude, angular speed). This is designed to be used when e.g an external SLAM system detects a loop-closure and the estimate jumps. (uint8_t)

*/
    mavlink20.messages.vision_speed_estimate = function( ...moreargs ) {
     [ this.usec , this.x , this.y , this.z , this.covariance , this.reset_counter ] = moreargs;


    this._format = '<Qfff9fB';
    this._id = mavlink20.MAVLINK_MSG_ID_VISION_SPEED_ESTIMATE;
    this.order_map = [0, 1, 2, 3, 4, 5];
    this.len_map = [1, 1, 1, 1, 9, 1];
    this.array_len_map = [0, 0, 0, 0, 9, 0];
    this.crc_extra = 208;
    this._name = 'VISION_SPEED_ESTIMATE';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['usec', 'x', 'y', 'z', 'covariance', 'reset_counter'];

}

mavlink20.messages.vision_speed_estimate.prototype = new mavlink20.message;
mavlink20.messages.vision_speed_estimate.prototype.pack = function(mav) {
    var orderedfields = [ this.usec, this.x, this.y, this.z, this.covariance, this.reset_counter];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink20.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
Global position estimate from a Vicon motion system source.

                usec                      : Timestamp (UNIX time or time since system boot) (uint64_t)
                x                         : Global X position (float)
                y                         : Global Y position (float)
                z                         : Global Z position (float)
                roll                      : Roll angle (float)
                pitch                     : Pitch angle (float)
                yaw                       : Yaw angle (float)
                covariance                : Row-major representation of 6x6 pose cross-covariance matrix upper right triangle (states: x, y, z, roll, pitch, yaw; first six entries are the first ROW, next five entries are the second ROW, etc.). If unknown, assign NaN value to first element in the array. (float)

*/
    mavlink20.messages.vicon_position_estimate = function( ...moreargs ) {
     [ this.usec , this.x , this.y , this.z , this.roll , this.pitch , this.yaw , this.covariance ] = moreargs;


    this._format = '<Qffffff21f';
    this._id = mavlink20.MAVLINK_MSG_ID_VICON_POSITION_ESTIMATE;
    this.order_map = [0, 1, 2, 3, 4, 5, 6, 7];
    this.len_map = [1, 1, 1, 1, 1, 1, 1, 21];
    this.array_len_map = [0, 0, 0, 0, 0, 0, 0, 21];
    this.crc_extra = 56;
    this._name = 'VICON_POSITION_ESTIMATE';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['usec', 'x', 'y', 'z', 'roll', 'pitch', 'yaw', 'covariance'];

}

mavlink20.messages.vicon_position_estimate.prototype = new mavlink20.message;
mavlink20.messages.vicon_position_estimate.prototype.pack = function(mav) {
    var orderedfields = [ this.usec, this.x, this.y, this.z, this.roll, this.pitch, this.yaw, this.covariance];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink20.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
The IMU readings in SI units in NED body frame

                time_usec                 : Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude of the number. (uint64_t)
                xacc                      : X acceleration (float)
                yacc                      : Y acceleration (float)
                zacc                      : Z acceleration (float)
                xgyro                     : Angular speed around X axis (float)
                ygyro                     : Angular speed around Y axis (float)
                zgyro                     : Angular speed around Z axis (float)
                xmag                      : X Magnetic field (float)
                ymag                      : Y Magnetic field (float)
                zmag                      : Z Magnetic field (float)
                abs_pressure              : Absolute pressure (float)
                diff_pressure             : Differential pressure (float)
                pressure_alt              : Altitude calculated from pressure (float)
                temperature               : Temperature (float)
                fields_updated            : Bitmap for fields that have updated since last message, bit 0 = xacc, bit 12: temperature (uint16_t)
                id                        : Id. Ids are numbered from 0 and map to IMUs numbered from 1 (e.g. IMU1 will have a message with id=0) (uint8_t)

*/
    mavlink20.messages.highres_imu = function( ...moreargs ) {
     [ this.time_usec , this.xacc , this.yacc , this.zacc , this.xgyro , this.ygyro , this.zgyro , this.xmag , this.ymag , this.zmag , this.abs_pressure , this.diff_pressure , this.pressure_alt , this.temperature , this.fields_updated , this.id ] = moreargs;


    this._format = '<QfffffffffffffHB';
    this._id = mavlink20.MAVLINK_MSG_ID_HIGHRES_IMU;
    this.order_map = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15];
    this.len_map = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1];
    this.array_len_map = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
    this.crc_extra = 93;
    this._name = 'HIGHRES_IMU';

    this._instance_field = 'id';
    this._instance_offset = 62;

    this.fieldnames = ['time_usec', 'xacc', 'yacc', 'zacc', 'xgyro', 'ygyro', 'zgyro', 'xmag', 'ymag', 'zmag', 'abs_pressure', 'diff_pressure', 'pressure_alt', 'temperature', 'fields_updated', 'id'];

}

mavlink20.messages.highres_imu.prototype = new mavlink20.message;
mavlink20.messages.highres_imu.prototype.pack = function(mav) {
    var orderedfields = [ this.time_usec, this.xacc, this.yacc, this.zacc, this.xgyro, this.ygyro, this.zgyro, this.xmag, this.ymag, this.zmag, this.abs_pressure, this.diff_pressure, this.pressure_alt, this.temperature, this.fields_updated, this.id];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink20.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
Optical flow from an angular rate flow sensor (e.g. PX4FLOW or mouse
sensor)

                time_usec                 : Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude of the number. (uint64_t)
                sensor_id                 : Sensor ID (uint8_t)
                integration_time_us        : Integration time. Divide integrated_x and integrated_y by the integration time to obtain average flow. The integration time also indicates the. (uint32_t)
                integrated_x              : Flow around X axis (Sensor RH rotation about the X axis induces a positive flow. Sensor linear motion along the positive Y axis induces a negative flow.) (float)
                integrated_y              : Flow around Y axis (Sensor RH rotation about the Y axis induces a positive flow. Sensor linear motion along the positive X axis induces a positive flow.) (float)
                integrated_xgyro          : RH rotation around X axis (float)
                integrated_ygyro          : RH rotation around Y axis (float)
                integrated_zgyro          : RH rotation around Z axis (float)
                temperature               : Temperature (int16_t)
                quality                   : Optical flow quality / confidence. 0: no valid flow, 255: maximum quality (uint8_t)
                time_delta_distance_us        : Time since the distance was sampled. (uint32_t)
                distance                  : Distance to the center of the flow field. Positive value (including zero): distance known. Negative value: Unknown distance. (float)

*/
    mavlink20.messages.optical_flow_rad = function( ...moreargs ) {
     [ this.time_usec , this.sensor_id , this.integration_time_us , this.integrated_x , this.integrated_y , this.integrated_xgyro , this.integrated_ygyro , this.integrated_zgyro , this.temperature , this.quality , this.time_delta_distance_us , this.distance ] = moreargs;


    this._format = '<QIfffffIfhBB';
    this._id = mavlink20.MAVLINK_MSG_ID_OPTICAL_FLOW_RAD;
    this.order_map = [0, 10, 1, 2, 3, 4, 5, 6, 9, 11, 7, 8];
    this.len_map = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1];
    this.array_len_map = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
    this.crc_extra = 138;
    this._name = 'OPTICAL_FLOW_RAD';

    this._instance_field = 'sensor_id';
    this._instance_offset = 42;

    this.fieldnames = ['time_usec', 'sensor_id', 'integration_time_us', 'integrated_x', 'integrated_y', 'integrated_xgyro', 'integrated_ygyro', 'integrated_zgyro', 'temperature', 'quality', 'time_delta_distance_us', 'distance'];

}

mavlink20.messages.optical_flow_rad.prototype = new mavlink20.message;
mavlink20.messages.optical_flow_rad.prototype.pack = function(mav) {
    var orderedfields = [ this.time_usec, this.integration_time_us, this.integrated_x, this.integrated_y, this.integrated_xgyro, this.integrated_ygyro, this.integrated_zgyro, this.time_delta_distance_us, this.distance, this.temperature, this.sensor_id, this.quality];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink20.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
The IMU readings in SI units in NED body frame

                time_usec                 : Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude of the number. (uint64_t)
                xacc                      : X acceleration (float)
                yacc                      : Y acceleration (float)
                zacc                      : Z acceleration (float)
                xgyro                     : Angular speed around X axis in body frame (float)
                ygyro                     : Angular speed around Y axis in body frame (float)
                zgyro                     : Angular speed around Z axis in body frame (float)
                xmag                      : X Magnetic field (float)
                ymag                      : Y Magnetic field (float)
                zmag                      : Z Magnetic field (float)
                abs_pressure              : Absolute pressure (float)
                diff_pressure             : Differential pressure (airspeed) (float)
                pressure_alt              : Altitude calculated from pressure (float)
                temperature               : Temperature (float)
                fields_updated            : Bitmap for fields that have updated since last message, bit 0 = xacc, bit 12: temperature, bit 31: full reset of attitude/position/velocities/etc was performed in sim. (uint32_t)
                id                        : Sensor ID (zero indexed). Used for multiple sensor inputs (uint8_t)

*/
    mavlink20.messages.hil_sensor = function( ...moreargs ) {
     [ this.time_usec , this.xacc , this.yacc , this.zacc , this.xgyro , this.ygyro , this.zgyro , this.xmag , this.ymag , this.zmag , this.abs_pressure , this.diff_pressure , this.pressure_alt , this.temperature , this.fields_updated , this.id ] = moreargs;


    this._format = '<QfffffffffffffIB';
    this._id = mavlink20.MAVLINK_MSG_ID_HIL_SENSOR;
    this.order_map = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15];
    this.len_map = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1];
    this.array_len_map = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
    this.crc_extra = 108;
    this._name = 'HIL_SENSOR';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['time_usec', 'xacc', 'yacc', 'zacc', 'xgyro', 'ygyro', 'zgyro', 'xmag', 'ymag', 'zmag', 'abs_pressure', 'diff_pressure', 'pressure_alt', 'temperature', 'fields_updated', 'id'];

}

mavlink20.messages.hil_sensor.prototype = new mavlink20.message;
mavlink20.messages.hil_sensor.prototype.pack = function(mav) {
    var orderedfields = [ this.time_usec, this.xacc, this.yacc, this.zacc, this.xgyro, this.ygyro, this.zgyro, this.xmag, this.ymag, this.zmag, this.abs_pressure, this.diff_pressure, this.pressure_alt, this.temperature, this.fields_updated, this.id];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink20.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
Status of simulation environment, if used

                q1                        : True attitude quaternion component 1, w (1 in null-rotation) (float)
                q2                        : True attitude quaternion component 2, x (0 in null-rotation) (float)
                q3                        : True attitude quaternion component 3, y (0 in null-rotation) (float)
                q4                        : True attitude quaternion component 4, z (0 in null-rotation) (float)
                roll                      : Attitude roll expressed as Euler angles, not recommended except for human-readable outputs (float)
                pitch                     : Attitude pitch expressed as Euler angles, not recommended except for human-readable outputs (float)
                yaw                       : Attitude yaw expressed as Euler angles, not recommended except for human-readable outputs (float)
                xacc                      : X acceleration (float)
                yacc                      : Y acceleration (float)
                zacc                      : Z acceleration (float)
                xgyro                     : Angular speed around X axis (float)
                ygyro                     : Angular speed around Y axis (float)
                zgyro                     : Angular speed around Z axis (float)
                lat                       : Latitude (float)
                lon                       : Longitude (float)
                alt                       : Altitude (float)
                std_dev_horz              : Horizontal position standard deviation (float)
                std_dev_vert              : Vertical position standard deviation (float)
                vn                        : True velocity in north direction in earth-fixed NED frame (float)
                ve                        : True velocity in east direction in earth-fixed NED frame (float)
                vd                        : True velocity in down direction in earth-fixed NED frame (float)
                lat_int                   : Latitude (higher precision). If 0, recipients should use the lat field value (otherwise this field is preferred). (int32_t)
                lon_int                   : Longitude (higher precision). If 0, recipients should use the lon field value (otherwise this field is preferred). (int32_t)

*/
    mavlink20.messages.sim_state = function( ...moreargs ) {
     [ this.q1 , this.q2 , this.q3 , this.q4 , this.roll , this.pitch , this.yaw , this.xacc , this.yacc , this.zacc , this.xgyro , this.ygyro , this.zgyro , this.lat , this.lon , this.alt , this.std_dev_horz , this.std_dev_vert , this.vn , this.ve , this.vd , this.lat_int , this.lon_int ] = moreargs;


    this._format = '<fffffffffffffffffffffii';
    this._id = mavlink20.MAVLINK_MSG_ID_SIM_STATE;
    this.order_map = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22];
    this.len_map = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1];
    this.array_len_map = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
    this.crc_extra = 32;
    this._name = 'SIM_STATE';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['q1', 'q2', 'q3', 'q4', 'roll', 'pitch', 'yaw', 'xacc', 'yacc', 'zacc', 'xgyro', 'ygyro', 'zgyro', 'lat', 'lon', 'alt', 'std_dev_horz', 'std_dev_vert', 'vn', 've', 'vd', 'lat_int', 'lon_int'];

}

mavlink20.messages.sim_state.prototype = new mavlink20.message;
mavlink20.messages.sim_state.prototype.pack = function(mav) {
    var orderedfields = [ this.q1, this.q2, this.q3, this.q4, this.roll, this.pitch, this.yaw, this.xacc, this.yacc, this.zacc, this.xgyro, this.ygyro, this.zgyro, this.lat, this.lon, this.alt, this.std_dev_horz, this.std_dev_vert, this.vn, this.ve, this.vd, this.lat_int, this.lon_int];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink20.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
Status generated by radio and injected into MAVLink stream.

                rssi                      : Local (message sender) recieved signal strength indication in device-dependent units/scale. Values: [0-254], 255: invalid/unknown. (uint8_t)
                remrssi                   : Remote (message receiver) signal strength indication in device-dependent units/scale. Values: [0-254], 255: invalid/unknown. (uint8_t)
                txbuf                     : Remaining free transmitter buffer space. (uint8_t)
                noise                     : Local background noise level. These are device dependent RSSI values (scale as approx 2x dB on SiK radios). Values: [0-254], 255: invalid/unknown. (uint8_t)
                remnoise                  : Remote background noise level. These are device dependent RSSI values (scale as approx 2x dB on SiK radios). Values: [0-254], 255: invalid/unknown. (uint8_t)
                rxerrors                  : Count of radio packet receive errors (since boot). (uint16_t)
                fixed                     : Count of error corrected radio packets (since boot). (uint16_t)

*/
    mavlink20.messages.radio_status = function( ...moreargs ) {
     [ this.rssi , this.remrssi , this.txbuf , this.noise , this.remnoise , this.rxerrors , this.fixed ] = moreargs;


    this._format = '<HHBBBBB';
    this._id = mavlink20.MAVLINK_MSG_ID_RADIO_STATUS;
    this.order_map = [2, 3, 4, 5, 6, 0, 1];
    this.len_map = [1, 1, 1, 1, 1, 1, 1];
    this.array_len_map = [0, 0, 0, 0, 0, 0, 0];
    this.crc_extra = 185;
    this._name = 'RADIO_STATUS';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['rssi', 'remrssi', 'txbuf', 'noise', 'remnoise', 'rxerrors', 'fixed'];

}

mavlink20.messages.radio_status.prototype = new mavlink20.message;
mavlink20.messages.radio_status.prototype.pack = function(mav) {
    var orderedfields = [ this.rxerrors, this.fixed, this.rssi, this.remrssi, this.txbuf, this.noise, this.remnoise];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink20.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
File transfer message

                target_network            : Network ID (0 for broadcast) (uint8_t)
                target_system             : System ID (0 for broadcast) (uint8_t)
                target_component          : Component ID (0 for broadcast) (uint8_t)
                payload                   : Variable length payload. The length is defined by the remaining message length when subtracting the header and other fields.  The entire content of this block is opaque unless you understand any the encoding message_type.  The particular encoding used can be extension specific and might not always be documented as part of the mavlink specification. (uint8_t)

*/
    mavlink20.messages.file_transfer_protocol = function( ...moreargs ) {
     [ this.target_network , this.target_system , this.target_component , this.payload ] = moreargs;


    this._format = '<BBB251s';
    this._id = mavlink20.MAVLINK_MSG_ID_FILE_TRANSFER_PROTOCOL;
    this.order_map = [0, 1, 2, 3];
    this.len_map = [1, 1, 1, 251];
    this.array_len_map = [0, 0, 0, 251];
    this.crc_extra = 84;
    this._name = 'FILE_TRANSFER_PROTOCOL';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['target_network', 'target_system', 'target_component', 'payload'];

}

mavlink20.messages.file_transfer_protocol.prototype = new mavlink20.message;
mavlink20.messages.file_transfer_protocol.prototype.pack = function(mav) {
    var orderedfields = [ this.target_network, this.target_system, this.target_component, this.payload];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink20.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
Time synchronization message.

                tc1                       : Time sync timestamp 1 (int64_t)
                ts1                       : Time sync timestamp 2 (int64_t)

*/
    mavlink20.messages.timesync = function( ...moreargs ) {
     [ this.tc1 , this.ts1 ] = moreargs;


    this._format = '<qq';
    this._id = mavlink20.MAVLINK_MSG_ID_TIMESYNC;
    this.order_map = [0, 1];
    this.len_map = [1, 1];
    this.array_len_map = [0, 0];
    this.crc_extra = 34;
    this._name = 'TIMESYNC';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['tc1', 'ts1'];

}

mavlink20.messages.timesync.prototype = new mavlink20.message;
mavlink20.messages.timesync.prototype.pack = function(mav) {
    var orderedfields = [ this.tc1, this.ts1];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink20.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
Camera-IMU triggering and synchronisation message.

                time_usec                 : Timestamp for image frame (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude of the number. (uint64_t)
                seq                       : Image frame sequence (uint32_t)

*/
    mavlink20.messages.camera_trigger = function( ...moreargs ) {
     [ this.time_usec , this.seq ] = moreargs;


    this._format = '<QI';
    this._id = mavlink20.MAVLINK_MSG_ID_CAMERA_TRIGGER;
    this.order_map = [0, 1];
    this.len_map = [1, 1];
    this.array_len_map = [0, 0];
    this.crc_extra = 174;
    this._name = 'CAMERA_TRIGGER';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['time_usec', 'seq'];

}

mavlink20.messages.camera_trigger.prototype = new mavlink20.message;
mavlink20.messages.camera_trigger.prototype.pack = function(mav) {
    var orderedfields = [ this.time_usec, this.seq];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink20.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
The global position, as returned by the Global Positioning System
(GPS). This is                  NOT the global position estimate of
the sytem, but rather a RAW sensor value. See message GLOBAL_POSITION
for the global position estimate.

                time_usec                 : Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude of the number. (uint64_t)
                fix_type                  : 0-1: no fix, 2: 2D fix, 3: 3D fix. Some applications will not use the value of this field unless it is at least two, so always correctly fill in the fix. (uint8_t)
                lat                       : Latitude (WGS84) (int32_t)
                lon                       : Longitude (WGS84) (int32_t)
                alt                       : Altitude (MSL). Positive for up. (int32_t)
                eph                       : GPS HDOP horizontal dilution of position (unitless). If unknown, set to: UINT16_MAX (uint16_t)
                epv                       : GPS VDOP vertical dilution of position (unitless). If unknown, set to: UINT16_MAX (uint16_t)
                vel                       : GPS ground speed. If unknown, set to: 65535 (uint16_t)
                vn                        : GPS velocity in north direction in earth-fixed NED frame (int16_t)
                ve                        : GPS velocity in east direction in earth-fixed NED frame (int16_t)
                vd                        : GPS velocity in down direction in earth-fixed NED frame (int16_t)
                cog                       : Course over ground (NOT heading, but direction of movement), 0.0..359.99 degrees. If unknown, set to: 65535 (uint16_t)
                satellites_visible        : Number of satellites visible. If unknown, set to 255 (uint8_t)
                id                        : GPS ID (zero indexed). Used for multiple GPS inputs (uint8_t)
                yaw                       : Yaw of vehicle relative to Earth's North, zero means not available, use 36000 for north (uint16_t)

*/
    mavlink20.messages.hil_gps = function( ...moreargs ) {
     [ this.time_usec , this.fix_type , this.lat , this.lon , this.alt , this.eph , this.epv , this.vel , this.vn , this.ve , this.vd , this.cog , this.satellites_visible , this.id , this.yaw ] = moreargs;


    this._format = '<QiiiHHHhhhHBBBH';
    this._id = mavlink20.MAVLINK_MSG_ID_HIL_GPS;
    this.order_map = [0, 11, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14];
    this.len_map = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1];
    this.array_len_map = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
    this.crc_extra = 124;
    this._name = 'HIL_GPS';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['time_usec', 'fix_type', 'lat', 'lon', 'alt', 'eph', 'epv', 'vel', 'vn', 've', 'vd', 'cog', 'satellites_visible', 'id', 'yaw'];

}

mavlink20.messages.hil_gps.prototype = new mavlink20.message;
mavlink20.messages.hil_gps.prototype.pack = function(mav) {
    var orderedfields = [ this.time_usec, this.lat, this.lon, this.alt, this.eph, this.epv, this.vel, this.vn, this.ve, this.vd, this.cog, this.fix_type, this.satellites_visible, this.id, this.yaw];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink20.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
Simulated optical flow from a flow sensor (e.g. PX4FLOW or optical
mouse sensor)

                time_usec                 : Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude of the number. (uint64_t)
                sensor_id                 : Sensor ID (uint8_t)
                integration_time_us        : Integration time. Divide integrated_x and integrated_y by the integration time to obtain average flow. The integration time also indicates the. (uint32_t)
                integrated_x              : Flow in radians around X axis (Sensor RH rotation about the X axis induces a positive flow. Sensor linear motion along the positive Y axis induces a negative flow.) (float)
                integrated_y              : Flow in radians around Y axis (Sensor RH rotation about the Y axis induces a positive flow. Sensor linear motion along the positive X axis induces a positive flow.) (float)
                integrated_xgyro          : RH rotation around X axis (float)
                integrated_ygyro          : RH rotation around Y axis (float)
                integrated_zgyro          : RH rotation around Z axis (float)
                temperature               : Temperature (int16_t)
                quality                   : Optical flow quality / confidence. 0: no valid flow, 255: maximum quality (uint8_t)
                time_delta_distance_us        : Time since the distance was sampled. (uint32_t)
                distance                  : Distance to the center of the flow field. Positive value (including zero): distance known. Negative value: Unknown distance. (float)

*/
    mavlink20.messages.hil_optical_flow = function( ...moreargs ) {
     [ this.time_usec , this.sensor_id , this.integration_time_us , this.integrated_x , this.integrated_y , this.integrated_xgyro , this.integrated_ygyro , this.integrated_zgyro , this.temperature , this.quality , this.time_delta_distance_us , this.distance ] = moreargs;


    this._format = '<QIfffffIfhBB';
    this._id = mavlink20.MAVLINK_MSG_ID_HIL_OPTICAL_FLOW;
    this.order_map = [0, 10, 1, 2, 3, 4, 5, 6, 9, 11, 7, 8];
    this.len_map = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1];
    this.array_len_map = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
    this.crc_extra = 237;
    this._name = 'HIL_OPTICAL_FLOW';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['time_usec', 'sensor_id', 'integration_time_us', 'integrated_x', 'integrated_y', 'integrated_xgyro', 'integrated_ygyro', 'integrated_zgyro', 'temperature', 'quality', 'time_delta_distance_us', 'distance'];

}

mavlink20.messages.hil_optical_flow.prototype = new mavlink20.message;
mavlink20.messages.hil_optical_flow.prototype.pack = function(mav) {
    var orderedfields = [ this.time_usec, this.integration_time_us, this.integrated_x, this.integrated_y, this.integrated_xgyro, this.integrated_ygyro, this.integrated_zgyro, this.time_delta_distance_us, this.distance, this.temperature, this.sensor_id, this.quality];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink20.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
Sent from simulation to autopilot, avoids in contrast to HIL_STATE
singularities. This packet is useful for high throughput applications
such as hardware in the loop simulations.

                time_usec                 : Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude of the number. (uint64_t)
                attitude_quaternion        : Vehicle attitude expressed as normalized quaternion in w, x, y, z order (with 1 0 0 0 being the null-rotation) (float)
                rollspeed                 : Body frame roll / phi angular speed (float)
                pitchspeed                : Body frame pitch / theta angular speed (float)
                yawspeed                  : Body frame yaw / psi angular speed (float)
                lat                       : Latitude (int32_t)
                lon                       : Longitude (int32_t)
                alt                       : Altitude (int32_t)
                vx                        : Ground X Speed (Latitude) (int16_t)
                vy                        : Ground Y Speed (Longitude) (int16_t)
                vz                        : Ground Z Speed (Altitude) (int16_t)
                ind_airspeed              : Indicated airspeed (uint16_t)
                true_airspeed             : True airspeed (uint16_t)
                xacc                      : X acceleration (int16_t)
                yacc                      : Y acceleration (int16_t)
                zacc                      : Z acceleration (int16_t)

*/
    mavlink20.messages.hil_state_quaternion = function( ...moreargs ) {
     [ this.time_usec , this.attitude_quaternion , this.rollspeed , this.pitchspeed , this.yawspeed , this.lat , this.lon , this.alt , this.vx , this.vy , this.vz , this.ind_airspeed , this.true_airspeed , this.xacc , this.yacc , this.zacc ] = moreargs;


    this._format = '<Q4ffffiiihhhHHhhh';
    this._id = mavlink20.MAVLINK_MSG_ID_HIL_STATE_QUATERNION;
    this.order_map = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15];
    this.len_map = [1, 4, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1];
    this.array_len_map = [0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
    this.crc_extra = 4;
    this._name = 'HIL_STATE_QUATERNION';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['time_usec', 'attitude_quaternion', 'rollspeed', 'pitchspeed', 'yawspeed', 'lat', 'lon', 'alt', 'vx', 'vy', 'vz', 'ind_airspeed', 'true_airspeed', 'xacc', 'yacc', 'zacc'];

}

mavlink20.messages.hil_state_quaternion.prototype = new mavlink20.message;
mavlink20.messages.hil_state_quaternion.prototype.pack = function(mav) {
    var orderedfields = [ this.time_usec, this.attitude_quaternion, this.rollspeed, this.pitchspeed, this.yawspeed, this.lat, this.lon, this.alt, this.vx, this.vy, this.vz, this.ind_airspeed, this.true_airspeed, this.xacc, this.yacc, this.zacc];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink20.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
The RAW IMU readings for secondary 9DOF sensor setup. This message
should contain the scaled values to the described units

                time_boot_ms              : Timestamp (time since system boot). (uint32_t)
                xacc                      : X acceleration (int16_t)
                yacc                      : Y acceleration (int16_t)
                zacc                      : Z acceleration (int16_t)
                xgyro                     : Angular speed around X axis (int16_t)
                ygyro                     : Angular speed around Y axis (int16_t)
                zgyro                     : Angular speed around Z axis (int16_t)
                xmag                      : X Magnetic field (int16_t)
                ymag                      : Y Magnetic field (int16_t)
                zmag                      : Z Magnetic field (int16_t)
                temperature               : Temperature, 0: IMU does not provide temperature values. If the IMU is at 0C it must send 1 (0.01C). (int16_t)

*/
    mavlink20.messages.scaled_imu2 = function( ...moreargs ) {
     [ this.time_boot_ms , this.xacc , this.yacc , this.zacc , this.xgyro , this.ygyro , this.zgyro , this.xmag , this.ymag , this.zmag , this.temperature ] = moreargs;


    this._format = '<Ihhhhhhhhhh';
    this._id = mavlink20.MAVLINK_MSG_ID_SCALED_IMU2;
    this.order_map = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10];
    this.len_map = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1];
    this.array_len_map = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
    this.crc_extra = 76;
    this._name = 'SCALED_IMU2';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['time_boot_ms', 'xacc', 'yacc', 'zacc', 'xgyro', 'ygyro', 'zgyro', 'xmag', 'ymag', 'zmag', 'temperature'];

}

mavlink20.messages.scaled_imu2.prototype = new mavlink20.message;
mavlink20.messages.scaled_imu2.prototype.pack = function(mav) {
    var orderedfields = [ this.time_boot_ms, this.xacc, this.yacc, this.zacc, this.xgyro, this.ygyro, this.zgyro, this.xmag, this.ymag, this.zmag, this.temperature];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink20.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
Request a list of available logs. On some systems calling this may
stop on-board logging until LOG_REQUEST_END is called. If there are no
log files available this request shall be answered with one LOG_ENTRY
message with id = 0 and num_logs = 0.

                target_system             : System ID (uint8_t)
                target_component          : Component ID (uint8_t)
                start                     : First log id (0 for first available) (uint16_t)
                end                       : Last log id (0xffff for last available) (uint16_t)

*/
    mavlink20.messages.log_request_list = function( ...moreargs ) {
     [ this.target_system , this.target_component , this.start , this.end ] = moreargs;


    this._format = '<HHBB';
    this._id = mavlink20.MAVLINK_MSG_ID_LOG_REQUEST_LIST;
    this.order_map = [2, 3, 0, 1];
    this.len_map = [1, 1, 1, 1];
    this.array_len_map = [0, 0, 0, 0];
    this.crc_extra = 128;
    this._name = 'LOG_REQUEST_LIST';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['target_system', 'target_component', 'start', 'end'];

}

mavlink20.messages.log_request_list.prototype = new mavlink20.message;
mavlink20.messages.log_request_list.prototype.pack = function(mav) {
    var orderedfields = [ this.start, this.end, this.target_system, this.target_component];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink20.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
Reply to LOG_REQUEST_LIST

                id                        : Log id (uint16_t)
                num_logs                  : Total number of logs (uint16_t)
                last_log_num              : High log number (uint16_t)
                time_utc                  : UTC timestamp of log since 1970, or 0 if not available (uint32_t)
                size                      : Size of the log (may be approximate) (uint32_t)

*/
    mavlink20.messages.log_entry = function( ...moreargs ) {
     [ this.id , this.num_logs , this.last_log_num , this.time_utc , this.size ] = moreargs;


    this._format = '<IIHHH';
    this._id = mavlink20.MAVLINK_MSG_ID_LOG_ENTRY;
    this.order_map = [2, 3, 4, 0, 1];
    this.len_map = [1, 1, 1, 1, 1];
    this.array_len_map = [0, 0, 0, 0, 0];
    this.crc_extra = 56;
    this._name = 'LOG_ENTRY';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['id', 'num_logs', 'last_log_num', 'time_utc', 'size'];

}

mavlink20.messages.log_entry.prototype = new mavlink20.message;
mavlink20.messages.log_entry.prototype.pack = function(mav) {
    var orderedfields = [ this.time_utc, this.size, this.id, this.num_logs, this.last_log_num];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink20.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
Request a chunk of a log

                target_system             : System ID (uint8_t)
                target_component          : Component ID (uint8_t)
                id                        : Log id (from LOG_ENTRY reply) (uint16_t)
                ofs                       : Offset into the log (uint32_t)
                count                     : Number of bytes (uint32_t)

*/
    mavlink20.messages.log_request_data = function( ...moreargs ) {
     [ this.target_system , this.target_component , this.id , this.ofs , this.count ] = moreargs;


    this._format = '<IIHBB';
    this._id = mavlink20.MAVLINK_MSG_ID_LOG_REQUEST_DATA;
    this.order_map = [3, 4, 2, 0, 1];
    this.len_map = [1, 1, 1, 1, 1];
    this.array_len_map = [0, 0, 0, 0, 0];
    this.crc_extra = 116;
    this._name = 'LOG_REQUEST_DATA';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['target_system', 'target_component', 'id', 'ofs', 'count'];

}

mavlink20.messages.log_request_data.prototype = new mavlink20.message;
mavlink20.messages.log_request_data.prototype.pack = function(mav) {
    var orderedfields = [ this.ofs, this.count, this.id, this.target_system, this.target_component];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink20.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
Reply to LOG_REQUEST_DATA

                id                        : Log id (from LOG_ENTRY reply) (uint16_t)
                ofs                       : Offset into the log (uint32_t)
                count                     : Number of bytes (zero for end of log) (uint8_t)
                data                      : log data (uint8_t)

*/
    mavlink20.messages.log_data = function( ...moreargs ) {
     [ this.id , this.ofs , this.count , this.data ] = moreargs;


    this._format = '<IHB90s';
    this._id = mavlink20.MAVLINK_MSG_ID_LOG_DATA;
    this.order_map = [1, 0, 2, 3];
    this.len_map = [1, 1, 1, 90];
    this.array_len_map = [0, 0, 0, 90];
    this.crc_extra = 134;
    this._name = 'LOG_DATA';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['id', 'ofs', 'count', 'data'];

}

mavlink20.messages.log_data.prototype = new mavlink20.message;
mavlink20.messages.log_data.prototype.pack = function(mav) {
    var orderedfields = [ this.ofs, this.id, this.count, this.data];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink20.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
Erase all logs

                target_system             : System ID (uint8_t)
                target_component          : Component ID (uint8_t)

*/
    mavlink20.messages.log_erase = function( ...moreargs ) {
     [ this.target_system , this.target_component ] = moreargs;


    this._format = '<BB';
    this._id = mavlink20.MAVLINK_MSG_ID_LOG_ERASE;
    this.order_map = [0, 1];
    this.len_map = [1, 1];
    this.array_len_map = [0, 0];
    this.crc_extra = 237;
    this._name = 'LOG_ERASE';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['target_system', 'target_component'];

}

mavlink20.messages.log_erase.prototype = new mavlink20.message;
mavlink20.messages.log_erase.prototype.pack = function(mav) {
    var orderedfields = [ this.target_system, this.target_component];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink20.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
Stop log transfer and resume normal logging

                target_system             : System ID (uint8_t)
                target_component          : Component ID (uint8_t)

*/
    mavlink20.messages.log_request_end = function( ...moreargs ) {
     [ this.target_system , this.target_component ] = moreargs;


    this._format = '<BB';
    this._id = mavlink20.MAVLINK_MSG_ID_LOG_REQUEST_END;
    this.order_map = [0, 1];
    this.len_map = [1, 1];
    this.array_len_map = [0, 0];
    this.crc_extra = 203;
    this._name = 'LOG_REQUEST_END';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['target_system', 'target_component'];

}

mavlink20.messages.log_request_end.prototype = new mavlink20.message;
mavlink20.messages.log_request_end.prototype.pack = function(mav) {
    var orderedfields = [ this.target_system, this.target_component];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink20.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
Data for injecting into the onboard GPS (used for DGPS)

                target_system             : System ID (uint8_t)
                target_component          : Component ID (uint8_t)
                len                       : Data length (uint8_t)
                data                      : Raw data (110 is enough for 12 satellites of RTCMv2) (uint8_t)

*/
    mavlink20.messages.gps_inject_data = function( ...moreargs ) {
     [ this.target_system , this.target_component , this.len , this.data ] = moreargs;


    this._format = '<BBB110s';
    this._id = mavlink20.MAVLINK_MSG_ID_GPS_INJECT_DATA;
    this.order_map = [0, 1, 2, 3];
    this.len_map = [1, 1, 1, 110];
    this.array_len_map = [0, 0, 0, 110];
    this.crc_extra = 250;
    this._name = 'GPS_INJECT_DATA';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['target_system', 'target_component', 'len', 'data'];

}

mavlink20.messages.gps_inject_data.prototype = new mavlink20.message;
mavlink20.messages.gps_inject_data.prototype.pack = function(mav) {
    var orderedfields = [ this.target_system, this.target_component, this.len, this.data];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink20.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
Second GPS data.

                time_usec                 : Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude of the number. (uint64_t)
                fix_type                  : GPS fix type. (uint8_t)
                lat                       : Latitude (WGS84) (int32_t)
                lon                       : Longitude (WGS84) (int32_t)
                alt                       : Altitude (MSL). Positive for up. (int32_t)
                eph                       : GPS HDOP horizontal dilution of position (unitless). If unknown, set to: UINT16_MAX (uint16_t)
                epv                       : GPS VDOP vertical dilution of position (unitless). If unknown, set to: UINT16_MAX (uint16_t)
                vel                       : GPS ground speed. If unknown, set to: UINT16_MAX (uint16_t)
                cog                       : Course over ground (NOT heading, but direction of movement): 0.0..359.99 degrees. If unknown, set to: UINT16_MAX (uint16_t)
                satellites_visible        : Number of satellites visible. If unknown, set to 255 (uint8_t)
                dgps_numch                : Number of DGPS satellites (uint8_t)
                dgps_age                  : Age of DGPS info (uint32_t)
                yaw                       : Yaw in earth frame from north. Use 0 if this GPS does not provide yaw. Use 65535 if this GPS is configured to provide yaw and is currently unable to provide it. Use 36000 for north. (uint16_t)
                alt_ellipsoid             : Altitude (above WGS84, EGM96 ellipsoid). Positive for up. (int32_t)
                h_acc                     : Position uncertainty. (uint32_t)
                v_acc                     : Altitude uncertainty. (uint32_t)
                vel_acc                   : Speed uncertainty. (uint32_t)
                hdg_acc                   : Heading / track uncertainty (uint32_t)

*/
    mavlink20.messages.gps2_raw = function( ...moreargs ) {
     [ this.time_usec , this.fix_type , this.lat , this.lon , this.alt , this.eph , this.epv , this.vel , this.cog , this.satellites_visible , this.dgps_numch , this.dgps_age , this.yaw , this.alt_ellipsoid , this.h_acc , this.v_acc , this.vel_acc , this.hdg_acc ] = moreargs;


    this._format = '<QiiiIHHHHBBBHiIIII';
    this._id = mavlink20.MAVLINK_MSG_ID_GPS2_RAW;
    this.order_map = [0, 9, 1, 2, 3, 5, 6, 7, 8, 10, 11, 4, 12, 13, 14, 15, 16, 17];
    this.len_map = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1];
    this.array_len_map = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
    this.crc_extra = 87;
    this._name = 'GPS2_RAW';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['time_usec', 'fix_type', 'lat', 'lon', 'alt', 'eph', 'epv', 'vel', 'cog', 'satellites_visible', 'dgps_numch', 'dgps_age', 'yaw', 'alt_ellipsoid', 'h_acc', 'v_acc', 'vel_acc', 'hdg_acc'];

}

mavlink20.messages.gps2_raw.prototype = new mavlink20.message;
mavlink20.messages.gps2_raw.prototype.pack = function(mav) {
    var orderedfields = [ this.time_usec, this.lat, this.lon, this.alt, this.dgps_age, this.eph, this.epv, this.vel, this.cog, this.fix_type, this.satellites_visible, this.dgps_numch, this.yaw, this.alt_ellipsoid, this.h_acc, this.v_acc, this.vel_acc, this.hdg_acc];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink20.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
Power supply status

                Vcc                       : 5V rail voltage. (uint16_t)
                Vservo                    : Servo rail voltage. (uint16_t)
                flags                     : Bitmap of power supply status flags. (uint16_t)

*/
    mavlink20.messages.power_status = function( ...moreargs ) {
     [ this.Vcc , this.Vservo , this.flags ] = moreargs;


    this._format = '<HHH';
    this._id = mavlink20.MAVLINK_MSG_ID_POWER_STATUS;
    this.order_map = [0, 1, 2];
    this.len_map = [1, 1, 1];
    this.array_len_map = [0, 0, 0];
    this.crc_extra = 203;
    this._name = 'POWER_STATUS';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['Vcc', 'Vservo', 'flags'];

}

mavlink20.messages.power_status.prototype = new mavlink20.message;
mavlink20.messages.power_status.prototype.pack = function(mav) {
    var orderedfields = [ this.Vcc, this.Vservo, this.flags];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink20.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
Control a serial port. This can be used for raw access to an onboard
serial peripheral such as a GPS or telemetry radio. It is designed to
make it possible to update the devices firmware via MAVLink messages
or change the devices settings. A message with zero bytes can be used
to change just the baudrate.

                device                    : Serial control device type. (uint8_t)
                flags                     : Bitmap of serial control flags. (uint8_t)
                timeout                   : Timeout for reply data (uint16_t)
                baudrate                  : Baudrate of transfer. Zero means no change. (uint32_t)
                count                     : how many bytes in this transfer (uint8_t)
                data                      : serial data (uint8_t)

*/
    mavlink20.messages.serial_control = function( ...moreargs ) {
     [ this.device , this.flags , this.timeout , this.baudrate , this.count , this.data ] = moreargs;


    this._format = '<IHBBB70s';
    this._id = mavlink20.MAVLINK_MSG_ID_SERIAL_CONTROL;
    this.order_map = [2, 3, 1, 0, 4, 5];
    this.len_map = [1, 1, 1, 1, 1, 70];
    this.array_len_map = [0, 0, 0, 0, 0, 70];
    this.crc_extra = 220;
    this._name = 'SERIAL_CONTROL';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['device', 'flags', 'timeout', 'baudrate', 'count', 'data'];

}

mavlink20.messages.serial_control.prototype = new mavlink20.message;
mavlink20.messages.serial_control.prototype.pack = function(mav) {
    var orderedfields = [ this.baudrate, this.timeout, this.device, this.flags, this.count, this.data];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink20.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
RTK GPS data. Gives information on the relative baseline calculation
the GPS is reporting

                time_last_baseline_ms        : Time since boot of last baseline message received. (uint32_t)
                rtk_receiver_id           : Identification of connected RTK receiver. (uint8_t)
                wn                        : GPS Week Number of last baseline (uint16_t)
                tow                       : GPS Time of Week of last baseline (uint32_t)
                rtk_health                : GPS-specific health report for RTK data. (uint8_t)
                rtk_rate                  : Rate of baseline messages being received by GPS (uint8_t)
                nsats                     : Current number of sats used for RTK calculation. (uint8_t)
                baseline_coords_type        : Coordinate system of baseline (uint8_t)
                baseline_a_mm             : Current baseline in ECEF x or NED north component. (int32_t)
                baseline_b_mm             : Current baseline in ECEF y or NED east component. (int32_t)
                baseline_c_mm             : Current baseline in ECEF z or NED down component. (int32_t)
                accuracy                  : Current estimate of baseline accuracy. (uint32_t)
                iar_num_hypotheses        : Current number of integer ambiguity hypotheses. (int32_t)

*/
    mavlink20.messages.gps_rtk = function( ...moreargs ) {
     [ this.time_last_baseline_ms , this.rtk_receiver_id , this.wn , this.tow , this.rtk_health , this.rtk_rate , this.nsats , this.baseline_coords_type , this.baseline_a_mm , this.baseline_b_mm , this.baseline_c_mm , this.accuracy , this.iar_num_hypotheses ] = moreargs;


    this._format = '<IIiiiIiHBBBBB';
    this._id = mavlink20.MAVLINK_MSG_ID_GPS_RTK;
    this.order_map = [0, 8, 7, 1, 9, 10, 11, 12, 2, 3, 4, 5, 6];
    this.len_map = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1];
    this.array_len_map = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
    this.crc_extra = 25;
    this._name = 'GPS_RTK';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['time_last_baseline_ms', 'rtk_receiver_id', 'wn', 'tow', 'rtk_health', 'rtk_rate', 'nsats', 'baseline_coords_type', 'baseline_a_mm', 'baseline_b_mm', 'baseline_c_mm', 'accuracy', 'iar_num_hypotheses'];

}

mavlink20.messages.gps_rtk.prototype = new mavlink20.message;
mavlink20.messages.gps_rtk.prototype.pack = function(mav) {
    var orderedfields = [ this.time_last_baseline_ms, this.tow, this.baseline_a_mm, this.baseline_b_mm, this.baseline_c_mm, this.accuracy, this.iar_num_hypotheses, this.wn, this.rtk_receiver_id, this.rtk_health, this.rtk_rate, this.nsats, this.baseline_coords_type];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink20.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
RTK GPS data. Gives information on the relative baseline calculation
the GPS is reporting

                time_last_baseline_ms        : Time since boot of last baseline message received. (uint32_t)
                rtk_receiver_id           : Identification of connected RTK receiver. (uint8_t)
                wn                        : GPS Week Number of last baseline (uint16_t)
                tow                       : GPS Time of Week of last baseline (uint32_t)
                rtk_health                : GPS-specific health report for RTK data. (uint8_t)
                rtk_rate                  : Rate of baseline messages being received by GPS (uint8_t)
                nsats                     : Current number of sats used for RTK calculation. (uint8_t)
                baseline_coords_type        : Coordinate system of baseline (uint8_t)
                baseline_a_mm             : Current baseline in ECEF x or NED north component. (int32_t)
                baseline_b_mm             : Current baseline in ECEF y or NED east component. (int32_t)
                baseline_c_mm             : Current baseline in ECEF z or NED down component. (int32_t)
                accuracy                  : Current estimate of baseline accuracy. (uint32_t)
                iar_num_hypotheses        : Current number of integer ambiguity hypotheses. (int32_t)

*/
    mavlink20.messages.gps2_rtk = function( ...moreargs ) {
     [ this.time_last_baseline_ms , this.rtk_receiver_id , this.wn , this.tow , this.rtk_health , this.rtk_rate , this.nsats , this.baseline_coords_type , this.baseline_a_mm , this.baseline_b_mm , this.baseline_c_mm , this.accuracy , this.iar_num_hypotheses ] = moreargs;


    this._format = '<IIiiiIiHBBBBB';
    this._id = mavlink20.MAVLINK_MSG_ID_GPS2_RTK;
    this.order_map = [0, 8, 7, 1, 9, 10, 11, 12, 2, 3, 4, 5, 6];
    this.len_map = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1];
    this.array_len_map = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
    this.crc_extra = 226;
    this._name = 'GPS2_RTK';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['time_last_baseline_ms', 'rtk_receiver_id', 'wn', 'tow', 'rtk_health', 'rtk_rate', 'nsats', 'baseline_coords_type', 'baseline_a_mm', 'baseline_b_mm', 'baseline_c_mm', 'accuracy', 'iar_num_hypotheses'];

}

mavlink20.messages.gps2_rtk.prototype = new mavlink20.message;
mavlink20.messages.gps2_rtk.prototype.pack = function(mav) {
    var orderedfields = [ this.time_last_baseline_ms, this.tow, this.baseline_a_mm, this.baseline_b_mm, this.baseline_c_mm, this.accuracy, this.iar_num_hypotheses, this.wn, this.rtk_receiver_id, this.rtk_health, this.rtk_rate, this.nsats, this.baseline_coords_type];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink20.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
The RAW IMU readings for 3rd 9DOF sensor setup. This message should
contain the scaled values to the described units

                time_boot_ms              : Timestamp (time since system boot). (uint32_t)
                xacc                      : X acceleration (int16_t)
                yacc                      : Y acceleration (int16_t)
                zacc                      : Z acceleration (int16_t)
                xgyro                     : Angular speed around X axis (int16_t)
                ygyro                     : Angular speed around Y axis (int16_t)
                zgyro                     : Angular speed around Z axis (int16_t)
                xmag                      : X Magnetic field (int16_t)
                ymag                      : Y Magnetic field (int16_t)
                zmag                      : Z Magnetic field (int16_t)
                temperature               : Temperature, 0: IMU does not provide temperature values. If the IMU is at 0C it must send 1 (0.01C). (int16_t)

*/
    mavlink20.messages.scaled_imu3 = function( ...moreargs ) {
     [ this.time_boot_ms , this.xacc , this.yacc , this.zacc , this.xgyro , this.ygyro , this.zgyro , this.xmag , this.ymag , this.zmag , this.temperature ] = moreargs;


    this._format = '<Ihhhhhhhhhh';
    this._id = mavlink20.MAVLINK_MSG_ID_SCALED_IMU3;
    this.order_map = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10];
    this.len_map = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1];
    this.array_len_map = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
    this.crc_extra = 46;
    this._name = 'SCALED_IMU3';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['time_boot_ms', 'xacc', 'yacc', 'zacc', 'xgyro', 'ygyro', 'zgyro', 'xmag', 'ymag', 'zmag', 'temperature'];

}

mavlink20.messages.scaled_imu3.prototype = new mavlink20.message;
mavlink20.messages.scaled_imu3.prototype.pack = function(mav) {
    var orderedfields = [ this.time_boot_ms, this.xacc, this.yacc, this.zacc, this.xgyro, this.ygyro, this.zgyro, this.xmag, this.ymag, this.zmag, this.temperature];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink20.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
Handshake message to initiate, control and stop image streaming when
using the Image Transmission Protocol:
https://mavlink.io/en/services/image_transmission.html.

                type                      : Type of requested/acknowledged data. (uint8_t)
                size                      : total data size (set on ACK only). (uint32_t)
                width                     : Width of a matrix or image. (uint16_t)
                height                    : Height of a matrix or image. (uint16_t)
                packets                   : Number of packets being sent (set on ACK only). (uint16_t)
                payload                   : Payload size per packet (normally 253 byte, see DATA field size in message ENCAPSULATED_DATA) (set on ACK only). (uint8_t)
                jpg_quality               : JPEG quality. Values: [1-100]. (uint8_t)

*/
    mavlink20.messages.data_transmission_handshake = function( ...moreargs ) {
     [ this.type , this.size , this.width , this.height , this.packets , this.payload , this.jpg_quality ] = moreargs;


    this._format = '<IHHHBBB';
    this._id = mavlink20.MAVLINK_MSG_ID_DATA_TRANSMISSION_HANDSHAKE;
    this.order_map = [4, 0, 1, 2, 3, 5, 6];
    this.len_map = [1, 1, 1, 1, 1, 1, 1];
    this.array_len_map = [0, 0, 0, 0, 0, 0, 0];
    this.crc_extra = 29;
    this._name = 'DATA_TRANSMISSION_HANDSHAKE';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['type', 'size', 'width', 'height', 'packets', 'payload', 'jpg_quality'];

}

mavlink20.messages.data_transmission_handshake.prototype = new mavlink20.message;
mavlink20.messages.data_transmission_handshake.prototype.pack = function(mav) {
    var orderedfields = [ this.size, this.width, this.height, this.packets, this.type, this.payload, this.jpg_quality];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink20.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
Data packet for images sent using the Image Transmission Protocol:
https://mavlink.io/en/services/image_transmission.html.

                seqnr                     : sequence number (starting with 0 on every transmission) (uint16_t)
                data                      : image data bytes (uint8_t)

*/
    mavlink20.messages.encapsulated_data = function( ...moreargs ) {
     [ this.seqnr , this.data ] = moreargs;


    this._format = '<H253s';
    this._id = mavlink20.MAVLINK_MSG_ID_ENCAPSULATED_DATA;
    this.order_map = [0, 1];
    this.len_map = [1, 253];
    this.array_len_map = [0, 253];
    this.crc_extra = 223;
    this._name = 'ENCAPSULATED_DATA';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['seqnr', 'data'];

}

mavlink20.messages.encapsulated_data.prototype = new mavlink20.message;
mavlink20.messages.encapsulated_data.prototype.pack = function(mav) {
    var orderedfields = [ this.seqnr, this.data];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink20.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
Distance sensor information for an onboard rangefinder.

                time_boot_ms              : Timestamp (time since system boot). (uint32_t)
                min_distance              : Minimum distance the sensor can measure (uint16_t)
                max_distance              : Maximum distance the sensor can measure (uint16_t)
                current_distance          : Current distance reading (uint16_t)
                type                      : Type of distance sensor. (uint8_t)
                id                        : Onboard ID of the sensor (uint8_t)
                orientation               : Direction the sensor faces. downward-facing: ROTATION_PITCH_270, upward-facing: ROTATION_PITCH_90, backward-facing: ROTATION_PITCH_180, forward-facing: ROTATION_NONE, left-facing: ROTATION_YAW_90, right-facing: ROTATION_YAW_270 (uint8_t)
                covariance                : Measurement variance. Max standard deviation is 6cm. 255 if unknown. (uint8_t)
                horizontal_fov            : Horizontal Field of View (angle) where the distance measurement is valid and the field of view is known. Otherwise this is set to 0. (float)
                vertical_fov              : Vertical Field of View (angle) where the distance measurement is valid and the field of view is known. Otherwise this is set to 0. (float)
                quaternion                : Quaternion of the sensor orientation in vehicle body frame (w, x, y, z order, zero-rotation is 1, 0, 0, 0). Zero-rotation is along the vehicle body x-axis. This field is required if the orientation is set to MAV_SENSOR_ROTATION_CUSTOM. Set it to 0 if invalid." (float)
                signal_quality            : Signal quality of the sensor. Specific to each sensor type, representing the relation of the signal strength with the target reflectivity, distance, size or aspect, but normalised as a percentage. 0 = unknown/unset signal quality, 1 = invalid signal, 100 = perfect signal. (uint8_t)

*/
    mavlink20.messages.distance_sensor = function( ...moreargs ) {
     [ this.time_boot_ms , this.min_distance , this.max_distance , this.current_distance , this.type , this.id , this.orientation , this.covariance , this.horizontal_fov , this.vertical_fov , this.quaternion , this.signal_quality ] = moreargs;


    this._format = '<IHHHBBBBff4fB';
    this._id = mavlink20.MAVLINK_MSG_ID_DISTANCE_SENSOR;
    this.order_map = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11];
    this.len_map = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 4, 1];
    this.array_len_map = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0];
    this.crc_extra = 85;
    this._name = 'DISTANCE_SENSOR';

    this._instance_field = 'id';
    this._instance_offset = 11;

    this.fieldnames = ['time_boot_ms', 'min_distance', 'max_distance', 'current_distance', 'type', 'id', 'orientation', 'covariance', 'horizontal_fov', 'vertical_fov', 'quaternion', 'signal_quality'];

}

mavlink20.messages.distance_sensor.prototype = new mavlink20.message;
mavlink20.messages.distance_sensor.prototype.pack = function(mav) {
    var orderedfields = [ this.time_boot_ms, this.min_distance, this.max_distance, this.current_distance, this.type, this.id, this.orientation, this.covariance, this.horizontal_fov, this.vertical_fov, this.quaternion, this.signal_quality];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink20.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
Request for terrain data and terrain status. See terrain protocol
docs: https://mavlink.io/en/services/terrain.html

                lat                       : Latitude of SW corner of first grid (int32_t)
                lon                       : Longitude of SW corner of first grid (int32_t)
                grid_spacing              : Grid spacing (uint16_t)
                mask                      : Bitmask of requested 4x4 grids (row major 8x7 array of grids, 56 bits) (uint64_t)

*/
    mavlink20.messages.terrain_request = function( ...moreargs ) {
     [ this.lat , this.lon , this.grid_spacing , this.mask ] = moreargs;


    this._format = '<QiiH';
    this._id = mavlink20.MAVLINK_MSG_ID_TERRAIN_REQUEST;
    this.order_map = [1, 2, 3, 0];
    this.len_map = [1, 1, 1, 1];
    this.array_len_map = [0, 0, 0, 0];
    this.crc_extra = 6;
    this._name = 'TERRAIN_REQUEST';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['lat', 'lon', 'grid_spacing', 'mask'];

}

mavlink20.messages.terrain_request.prototype = new mavlink20.message;
mavlink20.messages.terrain_request.prototype.pack = function(mav) {
    var orderedfields = [ this.mask, this.lat, this.lon, this.grid_spacing];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink20.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
Terrain data sent from GCS. The lat/lon and grid_spacing must be the
same as a lat/lon from a TERRAIN_REQUEST. See terrain protocol docs:
https://mavlink.io/en/services/terrain.html

                lat                       : Latitude of SW corner of first grid (int32_t)
                lon                       : Longitude of SW corner of first grid (int32_t)
                grid_spacing              : Grid spacing (uint16_t)
                gridbit                   : bit within the terrain request mask (uint8_t)
                data                      : Terrain data MSL (int16_t)

*/
    mavlink20.messages.terrain_data = function( ...moreargs ) {
     [ this.lat , this.lon , this.grid_spacing , this.gridbit , this.data ] = moreargs;


    this._format = '<iiH16hB';
    this._id = mavlink20.MAVLINK_MSG_ID_TERRAIN_DATA;
    this.order_map = [0, 1, 2, 4, 3];
    this.len_map = [1, 1, 1, 16, 1];
    this.array_len_map = [0, 0, 0, 16, 0];
    this.crc_extra = 229;
    this._name = 'TERRAIN_DATA';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['lat', 'lon', 'grid_spacing', 'gridbit', 'data'];

}

mavlink20.messages.terrain_data.prototype = new mavlink20.message;
mavlink20.messages.terrain_data.prototype.pack = function(mav) {
    var orderedfields = [ this.lat, this.lon, this.grid_spacing, this.data, this.gridbit];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink20.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
Request that the vehicle report terrain height at the given location
(expected response is a TERRAIN_REPORT). Used by GCS to check if
vehicle has all terrain data needed for a mission.

                lat                       : Latitude (int32_t)
                lon                       : Longitude (int32_t)

*/
    mavlink20.messages.terrain_check = function( ...moreargs ) {
     [ this.lat , this.lon ] = moreargs;


    this._format = '<ii';
    this._id = mavlink20.MAVLINK_MSG_ID_TERRAIN_CHECK;
    this.order_map = [0, 1];
    this.len_map = [1, 1];
    this.array_len_map = [0, 0];
    this.crc_extra = 203;
    this._name = 'TERRAIN_CHECK';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['lat', 'lon'];

}

mavlink20.messages.terrain_check.prototype = new mavlink20.message;
mavlink20.messages.terrain_check.prototype.pack = function(mav) {
    var orderedfields = [ this.lat, this.lon];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink20.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
Streamed from drone to report progress of terrain map download
(initiated by TERRAIN_REQUEST), or sent as a response to a
TERRAIN_CHECK request. See terrain protocol docs:
https://mavlink.io/en/services/terrain.html

                lat                       : Latitude (int32_t)
                lon                       : Longitude (int32_t)
                spacing                   : grid spacing (zero if terrain at this location unavailable) (uint16_t)
                terrain_height            : Terrain height MSL (float)
                current_height            : Current vehicle height above lat/lon terrain height (float)
                pending                   : Number of 4x4 terrain blocks waiting to be received or read from disk (uint16_t)
                loaded                    : Number of 4x4 terrain blocks in memory (uint16_t)

*/
    mavlink20.messages.terrain_report = function( ...moreargs ) {
     [ this.lat , this.lon , this.spacing , this.terrain_height , this.current_height , this.pending , this.loaded ] = moreargs;


    this._format = '<iiffHHH';
    this._id = mavlink20.MAVLINK_MSG_ID_TERRAIN_REPORT;
    this.order_map = [0, 1, 4, 2, 3, 5, 6];
    this.len_map = [1, 1, 1, 1, 1, 1, 1];
    this.array_len_map = [0, 0, 0, 0, 0, 0, 0];
    this.crc_extra = 1;
    this._name = 'TERRAIN_REPORT';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['lat', 'lon', 'spacing', 'terrain_height', 'current_height', 'pending', 'loaded'];

}

mavlink20.messages.terrain_report.prototype = new mavlink20.message;
mavlink20.messages.terrain_report.prototype.pack = function(mav) {
    var orderedfields = [ this.lat, this.lon, this.terrain_height, this.current_height, this.spacing, this.pending, this.loaded];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink20.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
Barometer readings for 2nd barometer

                time_boot_ms              : Timestamp (time since system boot). (uint32_t)
                press_abs                 : Absolute pressure (float)
                press_diff                : Differential pressure (float)
                temperature               : Absolute pressure temperature (int16_t)
                temperature_press_diff        : Differential pressure temperature (0, if not available). Report values of 0 (or 1) as 1 cdegC. (int16_t)

*/
    mavlink20.messages.scaled_pressure2 = function( ...moreargs ) {
     [ this.time_boot_ms , this.press_abs , this.press_diff , this.temperature , this.temperature_press_diff ] = moreargs;


    this._format = '<Iffhh';
    this._id = mavlink20.MAVLINK_MSG_ID_SCALED_PRESSURE2;
    this.order_map = [0, 1, 2, 3, 4];
    this.len_map = [1, 1, 1, 1, 1];
    this.array_len_map = [0, 0, 0, 0, 0];
    this.crc_extra = 195;
    this._name = 'SCALED_PRESSURE2';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['time_boot_ms', 'press_abs', 'press_diff', 'temperature', 'temperature_press_diff'];

}

mavlink20.messages.scaled_pressure2.prototype = new mavlink20.message;
mavlink20.messages.scaled_pressure2.prototype.pack = function(mav) {
    var orderedfields = [ this.time_boot_ms, this.press_abs, this.press_diff, this.temperature, this.temperature_press_diff];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink20.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
Motion capture attitude and position

                time_usec                 : Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude of the number. (uint64_t)
                q                         : Attitude quaternion (w, x, y, z order, zero-rotation is 1, 0, 0, 0) (float)
                x                         : X position (NED) (float)
                y                         : Y position (NED) (float)
                z                         : Z position (NED) (float)
                covariance                : Row-major representation of a pose 6x6 cross-covariance matrix upper right triangle (states: x, y, z, roll, pitch, yaw; first six entries are the first ROW, next five entries are the second ROW, etc.). If unknown, assign NaN value to first element in the array. (float)

*/
    mavlink20.messages.att_pos_mocap = function( ...moreargs ) {
     [ this.time_usec , this.q , this.x , this.y , this.z , this.covariance ] = moreargs;


    this._format = '<Q4ffff21f';
    this._id = mavlink20.MAVLINK_MSG_ID_ATT_POS_MOCAP;
    this.order_map = [0, 1, 2, 3, 4, 5];
    this.len_map = [1, 4, 1, 1, 1, 21];
    this.array_len_map = [0, 4, 0, 0, 0, 21];
    this.crc_extra = 109;
    this._name = 'ATT_POS_MOCAP';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['time_usec', 'q', 'x', 'y', 'z', 'covariance'];

}

mavlink20.messages.att_pos_mocap.prototype = new mavlink20.message;
mavlink20.messages.att_pos_mocap.prototype.pack = function(mav) {
    var orderedfields = [ this.time_usec, this.q, this.x, this.y, this.z, this.covariance];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink20.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
Set the vehicle attitude and body angular rates.

                time_usec                 : Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude of the number. (uint64_t)
                group_mlx                 : Actuator group. The "_mlx" indicates this is a multi-instance message and a MAVLink parser should use this field to difference between instances. (uint8_t)
                target_system             : System ID (uint8_t)
                target_component          : Component ID (uint8_t)
                controls                  : Actuator controls. Normed to -1..+1 where 0 is neutral position. Throttle for single rotation direction motors is 0..1, negative range for reverse direction. Standard mapping for attitude controls (group 0): (index 0-7): roll, pitch, yaw, throttle, flaps, spoilers, airbrakes, landing gear. Load a pass-through mixer to repurpose them as generic outputs. (float)

*/
    mavlink20.messages.set_actuator_control_target = function( ...moreargs ) {
     [ this.time_usec , this.group_mlx , this.target_system , this.target_component , this.controls ] = moreargs;


    this._format = '<Q8fBBB';
    this._id = mavlink20.MAVLINK_MSG_ID_SET_ACTUATOR_CONTROL_TARGET;
    this.order_map = [0, 2, 3, 4, 1];
    this.len_map = [1, 8, 1, 1, 1];
    this.array_len_map = [0, 8, 0, 0, 0];
    this.crc_extra = 168;
    this._name = 'SET_ACTUATOR_CONTROL_TARGET';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['time_usec', 'group_mlx', 'target_system', 'target_component', 'controls'];

}

mavlink20.messages.set_actuator_control_target.prototype = new mavlink20.message;
mavlink20.messages.set_actuator_control_target.prototype.pack = function(mav) {
    var orderedfields = [ this.time_usec, this.controls, this.group_mlx, this.target_system, this.target_component];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink20.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
Set the vehicle attitude and body angular rates.

                time_usec                 : Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude of the number. (uint64_t)
                group_mlx                 : Actuator group. The "_mlx" indicates this is a multi-instance message and a MAVLink parser should use this field to difference between instances. (uint8_t)
                controls                  : Actuator controls. Normed to -1..+1 where 0 is neutral position. Throttle for single rotation direction motors is 0..1, negative range for reverse direction. Standard mapping for attitude controls (group 0): (index 0-7): roll, pitch, yaw, throttle, flaps, spoilers, airbrakes, landing gear. Load a pass-through mixer to repurpose them as generic outputs. (float)

*/
    mavlink20.messages.actuator_control_target = function( ...moreargs ) {
     [ this.time_usec , this.group_mlx , this.controls ] = moreargs;


    this._format = '<Q8fB';
    this._id = mavlink20.MAVLINK_MSG_ID_ACTUATOR_CONTROL_TARGET;
    this.order_map = [0, 2, 1];
    this.len_map = [1, 8, 1];
    this.array_len_map = [0, 8, 0];
    this.crc_extra = 181;
    this._name = 'ACTUATOR_CONTROL_TARGET';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['time_usec', 'group_mlx', 'controls'];

}

mavlink20.messages.actuator_control_target.prototype = new mavlink20.message;
mavlink20.messages.actuator_control_target.prototype.pack = function(mav) {
    var orderedfields = [ this.time_usec, this.controls, this.group_mlx];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink20.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
The current system altitude.

                time_usec                 : Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude of the number. (uint64_t)
                altitude_monotonic        : This altitude measure is initialized on system boot and monotonic (it is never reset, but represents the local altitude change). The only guarantee on this field is that it will never be reset and is consistent within a flight. The recommended value for this field is the uncorrected barometric altitude at boot time. This altitude will also drift and vary between flights. (float)
                altitude_amsl             : This altitude measure is strictly above mean sea level and might be non-monotonic (it might reset on events like GPS lock or when a new QNH value is set). It should be the altitude to which global altitude waypoints are compared to. Note that it is *not* the GPS altitude, however, most GPS modules already output MSL by default and not the WGS84 altitude. (float)
                altitude_local            : This is the local altitude in the local coordinate frame. It is not the altitude above home, but in reference to the coordinate origin (0, 0, 0). It is up-positive. (float)
                altitude_relative         : This is the altitude above the home position. It resets on each change of the current home position. (float)
                altitude_terrain          : This is the altitude above terrain. It might be fed by a terrain database or an altimeter. Values smaller than -1000 should be interpreted as unknown. (float)
                bottom_clearance          : This is not the altitude, but the clear space below the system according to the fused clearance estimate. It generally should max out at the maximum range of e.g. the laser altimeter. It is generally a moving target. A negative value indicates no measurement available. (float)

*/
    mavlink20.messages.altitude = function( ...moreargs ) {
     [ this.time_usec , this.altitude_monotonic , this.altitude_amsl , this.altitude_local , this.altitude_relative , this.altitude_terrain , this.bottom_clearance ] = moreargs;


    this._format = '<Qffffff';
    this._id = mavlink20.MAVLINK_MSG_ID_ALTITUDE;
    this.order_map = [0, 1, 2, 3, 4, 5, 6];
    this.len_map = [1, 1, 1, 1, 1, 1, 1];
    this.array_len_map = [0, 0, 0, 0, 0, 0, 0];
    this.crc_extra = 47;
    this._name = 'ALTITUDE';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['time_usec', 'altitude_monotonic', 'altitude_amsl', 'altitude_local', 'altitude_relative', 'altitude_terrain', 'bottom_clearance'];

}

mavlink20.messages.altitude.prototype = new mavlink20.message;
mavlink20.messages.altitude.prototype.pack = function(mav) {
    var orderedfields = [ this.time_usec, this.altitude_monotonic, this.altitude_amsl, this.altitude_local, this.altitude_relative, this.altitude_terrain, this.bottom_clearance];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink20.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
The autopilot is requesting a resource (file, binary, other type of
data)

                request_id                : Request ID. This ID should be re-used when sending back URI contents (uint8_t)
                uri_type                  : The type of requested URI. 0 = a file via URL. 1 = a UAVCAN binary (uint8_t)
                uri                       : The requested unique resource identifier (URI). It is not necessarily a straight domain name (depends on the URI type enum) (uint8_t)
                transfer_type             : The way the autopilot wants to receive the URI. 0 = MAVLink FTP. 1 = binary stream. (uint8_t)
                storage                   : The storage path the autopilot wants the URI to be stored in. Will only be valid if the transfer_type has a storage associated (e.g. MAVLink FTP). (uint8_t)

*/
    mavlink20.messages.resource_request = function( ...moreargs ) {
     [ this.request_id , this.uri_type , this.uri , this.transfer_type , this.storage ] = moreargs;


    this._format = '<BB120sB120s';
    this._id = mavlink20.MAVLINK_MSG_ID_RESOURCE_REQUEST;
    this.order_map = [0, 1, 2, 3, 4];
    this.len_map = [1, 1, 120, 1, 120];
    this.array_len_map = [0, 0, 120, 0, 120];
    this.crc_extra = 72;
    this._name = 'RESOURCE_REQUEST';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['request_id', 'uri_type', 'uri', 'transfer_type', 'storage'];

}

mavlink20.messages.resource_request.prototype = new mavlink20.message;
mavlink20.messages.resource_request.prototype.pack = function(mav) {
    var orderedfields = [ this.request_id, this.uri_type, this.uri, this.transfer_type, this.storage];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink20.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
Barometer readings for 3rd barometer

                time_boot_ms              : Timestamp (time since system boot). (uint32_t)
                press_abs                 : Absolute pressure (float)
                press_diff                : Differential pressure (float)
                temperature               : Absolute pressure temperature (int16_t)
                temperature_press_diff        : Differential pressure temperature (0, if not available). Report values of 0 (or 1) as 1 cdegC. (int16_t)

*/
    mavlink20.messages.scaled_pressure3 = function( ...moreargs ) {
     [ this.time_boot_ms , this.press_abs , this.press_diff , this.temperature , this.temperature_press_diff ] = moreargs;


    this._format = '<Iffhh';
    this._id = mavlink20.MAVLINK_MSG_ID_SCALED_PRESSURE3;
    this.order_map = [0, 1, 2, 3, 4];
    this.len_map = [1, 1, 1, 1, 1];
    this.array_len_map = [0, 0, 0, 0, 0];
    this.crc_extra = 131;
    this._name = 'SCALED_PRESSURE3';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['time_boot_ms', 'press_abs', 'press_diff', 'temperature', 'temperature_press_diff'];

}

mavlink20.messages.scaled_pressure3.prototype = new mavlink20.message;
mavlink20.messages.scaled_pressure3.prototype.pack = function(mav) {
    var orderedfields = [ this.time_boot_ms, this.press_abs, this.press_diff, this.temperature, this.temperature_press_diff];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink20.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
Current motion information from a designated system

                timestamp                 : Timestamp (time since system boot). (uint64_t)
                est_capabilities          : bit positions for tracker reporting capabilities (POS = 0, VEL = 1, ACCEL = 2, ATT + RATES = 3) (uint8_t)
                lat                       : Latitude (WGS84) (int32_t)
                lon                       : Longitude (WGS84) (int32_t)
                alt                       : Altitude (MSL) (float)
                vel                       : target velocity (0,0,0) for unknown (float)
                acc                       : linear target acceleration (0,0,0) for unknown (float)
                attitude_q                : (1 0 0 0 for unknown) (float)
                rates                     : (0 0 0 for unknown) (float)
                position_cov              : eph epv (float)
                custom_state              : button states or switches of a tracker device (uint64_t)

*/
    mavlink20.messages.follow_target = function( ...moreargs ) {
     [ this.timestamp , this.est_capabilities , this.lat , this.lon , this.alt , this.vel , this.acc , this.attitude_q , this.rates , this.position_cov , this.custom_state ] = moreargs;


    this._format = '<QQiif3f3f4f3f3fB';
    this._id = mavlink20.MAVLINK_MSG_ID_FOLLOW_TARGET;
    this.order_map = [0, 10, 2, 3, 4, 5, 6, 7, 8, 9, 1];
    this.len_map = [1, 1, 1, 1, 1, 3, 3, 4, 3, 3, 1];
    this.array_len_map = [0, 0, 0, 0, 0, 3, 3, 4, 3, 3, 0];
    this.crc_extra = 127;
    this._name = 'FOLLOW_TARGET';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['timestamp', 'est_capabilities', 'lat', 'lon', 'alt', 'vel', 'acc', 'attitude_q', 'rates', 'position_cov', 'custom_state'];

}

mavlink20.messages.follow_target.prototype = new mavlink20.message;
mavlink20.messages.follow_target.prototype.pack = function(mav) {
    var orderedfields = [ this.timestamp, this.custom_state, this.lat, this.lon, this.alt, this.vel, this.acc, this.attitude_q, this.rates, this.position_cov, this.est_capabilities];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink20.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
The smoothed, monotonic system state used to feed the control loops of
the system.

                time_usec                 : Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude of the number. (uint64_t)
                x_acc                     : X acceleration in body frame (float)
                y_acc                     : Y acceleration in body frame (float)
                z_acc                     : Z acceleration in body frame (float)
                x_vel                     : X velocity in body frame (float)
                y_vel                     : Y velocity in body frame (float)
                z_vel                     : Z velocity in body frame (float)
                x_pos                     : X position in local frame (float)
                y_pos                     : Y position in local frame (float)
                z_pos                     : Z position in local frame (float)
                airspeed                  : Airspeed, set to -1 if unknown (float)
                vel_variance              : Variance of body velocity estimate (float)
                pos_variance              : Variance in local position (float)
                q                         : The attitude, represented as Quaternion (float)
                roll_rate                 : Angular rate in roll axis (float)
                pitch_rate                : Angular rate in pitch axis (float)
                yaw_rate                  : Angular rate in yaw axis (float)

*/
    mavlink20.messages.control_system_state = function( ...moreargs ) {
     [ this.time_usec , this.x_acc , this.y_acc , this.z_acc , this.x_vel , this.y_vel , this.z_vel , this.x_pos , this.y_pos , this.z_pos , this.airspeed , this.vel_variance , this.pos_variance , this.q , this.roll_rate , this.pitch_rate , this.yaw_rate ] = moreargs;


    this._format = '<Qffffffffff3f3f4ffff';
    this._id = mavlink20.MAVLINK_MSG_ID_CONTROL_SYSTEM_STATE;
    this.order_map = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16];
    this.len_map = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 3, 4, 1, 1, 1];
    this.array_len_map = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 4, 0, 0, 0];
    this.crc_extra = 103;
    this._name = 'CONTROL_SYSTEM_STATE';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['time_usec', 'x_acc', 'y_acc', 'z_acc', 'x_vel', 'y_vel', 'z_vel', 'x_pos', 'y_pos', 'z_pos', 'airspeed', 'vel_variance', 'pos_variance', 'q', 'roll_rate', 'pitch_rate', 'yaw_rate'];

}

mavlink20.messages.control_system_state.prototype = new mavlink20.message;
mavlink20.messages.control_system_state.prototype.pack = function(mav) {
    var orderedfields = [ this.time_usec, this.x_acc, this.y_acc, this.z_acc, this.x_vel, this.y_vel, this.z_vel, this.x_pos, this.y_pos, this.z_pos, this.airspeed, this.vel_variance, this.pos_variance, this.q, this.roll_rate, this.pitch_rate, this.yaw_rate];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink20.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
Battery information

                id                        : Battery ID (uint8_t)
                battery_function          : Function of the battery (uint8_t)
                type                      : Type (chemistry) of the battery (uint8_t)
                temperature               : Temperature of the battery. INT16_MAX for unknown temperature. (int16_t)
                voltages                  : Battery voltage of cells 1 to 10 (see voltages_ext for cells 11-14). Cells in this field above the valid cell count for this battery should have the UINT16_MAX value. If individual cell voltages are unknown or not measured for this battery, then the overall battery voltage should be filled in cell 0, with all others set to UINT16_MAX. If the voltage of the battery is greater than (UINT16_MAX - 1), then cell 0 should be set to (UINT16_MAX - 1), and cell 1 to the remaining voltage. This can be extended to multiple cells if the total voltage is greater than 2 * (UINT16_MAX - 1). (uint16_t)
                current_battery           : Battery current, -1: autopilot does not measure the current (int16_t)
                current_consumed          : Consumed charge, -1: autopilot does not provide consumption estimate (int32_t)
                energy_consumed           : Consumed energy, -1: autopilot does not provide energy consumption estimate (int32_t)
                battery_remaining         : Remaining battery energy. Values: [0-100], -1: autopilot does not estimate the remaining battery. (int8_t)
                time_remaining            : Remaining battery time, 0: autopilot does not provide remaining battery time estimate (int32_t)
                charge_state              : State for extent of discharge, provided by autopilot for warning or external reactions (uint8_t)
                voltages_ext              : Battery voltages for cells 11 to 14. Cells above the valid cell count for this battery should have a value of 0, where zero indicates not supported (note, this is different than for the voltages field and allows empty byte truncation). If the measured value is 0 then 1 should be sent instead. (uint16_t)
                mode                      : Battery mode. Default (0) is that battery mode reporting is not supported or battery is in normal-use mode. (uint8_t)
                fault_bitmask             : Fault/health indications. These should be set when charge_state is MAV_BATTERY_CHARGE_STATE_FAILED or MAV_BATTERY_CHARGE_STATE_UNHEALTHY (if not, fault reporting is not supported). (uint32_t)

*/
    mavlink20.messages.battery_status = function( ...moreargs ) {
     [ this.id , this.battery_function , this.type , this.temperature , this.voltages , this.current_battery , this.current_consumed , this.energy_consumed , this.battery_remaining , this.time_remaining , this.charge_state , this.voltages_ext , this.mode , this.fault_bitmask ] = moreargs;


    this._format = '<iih10HhBBBbiB4HBI';
    this._id = mavlink20.MAVLINK_MSG_ID_BATTERY_STATUS;
    this.order_map = [5, 6, 7, 2, 3, 4, 0, 1, 8, 9, 10, 11, 12, 13];
    this.len_map = [1, 1, 1, 10, 1, 1, 1, 1, 1, 1, 1, 4, 1, 1];
    this.array_len_map = [0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0];
    this.crc_extra = 154;
    this._name = 'BATTERY_STATUS';

    this._instance_field = 'id';
    this._instance_offset = 32;

    this.fieldnames = ['id', 'battery_function', 'type', 'temperature', 'voltages', 'current_battery', 'current_consumed', 'energy_consumed', 'battery_remaining', 'time_remaining', 'charge_state', 'voltages_ext', 'mode', 'fault_bitmask'];

}

mavlink20.messages.battery_status.prototype = new mavlink20.message;
mavlink20.messages.battery_status.prototype.pack = function(mav) {
    var orderedfields = [ this.current_consumed, this.energy_consumed, this.temperature, this.voltages, this.current_battery, this.id, this.battery_function, this.type, this.battery_remaining, this.time_remaining, this.charge_state, this.voltages_ext, this.mode, this.fault_bitmask];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink20.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
Version and capability of autopilot software. This should be emitted
in response to a request with MAV_CMD_REQUEST_MESSAGE.

                capabilities              : Bitmap of capabilities (uint64_t)
                flight_sw_version         : Firmware version number (uint32_t)
                middleware_sw_version        : Middleware version number (uint32_t)
                os_sw_version             : Operating system version number (uint32_t)
                board_version             : HW / board version (last 8 bits should be silicon ID, if any). The first 16 bits of this field specify https://github.com/ardupilot/ardupilot/blob/master/Tools/AP_Bootloader/board_types.txt (uint32_t)
                flight_custom_version        : Custom version field, commonly the first 8 bytes of the git hash. This is not an unique identifier, but should allow to identify the commit using the main version number even for very large code bases. (uint8_t)
                middleware_custom_version        : Custom version field, commonly the first 8 bytes of the git hash. This is not an unique identifier, but should allow to identify the commit using the main version number even for very large code bases. (uint8_t)
                os_custom_version         : Custom version field, commonly the first 8 bytes of the git hash. This is not an unique identifier, but should allow to identify the commit using the main version number even for very large code bases. (uint8_t)
                vendor_id                 : ID of the board vendor (uint16_t)
                product_id                : ID of the product (uint16_t)
                uid                       : UID if provided by hardware (see uid2) (uint64_t)
                uid2                      : UID if provided by hardware (supersedes the uid field. If this is non-zero, use this field, otherwise use uid) (uint8_t)

*/
    mavlink20.messages.autopilot_version = function( ...moreargs ) {
     [ this.capabilities , this.flight_sw_version , this.middleware_sw_version , this.os_sw_version , this.board_version , this.flight_custom_version , this.middleware_custom_version , this.os_custom_version , this.vendor_id , this.product_id , this.uid , this.uid2 ] = moreargs;


    this._format = '<QQIIIIHH8s8s8s18s';
    this._id = mavlink20.MAVLINK_MSG_ID_AUTOPILOT_VERSION;
    this.order_map = [0, 2, 3, 4, 5, 8, 9, 10, 6, 7, 1, 11];
    this.len_map = [1, 1, 1, 1, 1, 1, 1, 1, 8, 8, 8, 18];
    this.array_len_map = [0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 8, 18];
    this.crc_extra = 178;
    this._name = 'AUTOPILOT_VERSION';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['capabilities', 'flight_sw_version', 'middleware_sw_version', 'os_sw_version', 'board_version', 'flight_custom_version', 'middleware_custom_version', 'os_custom_version', 'vendor_id', 'product_id', 'uid', 'uid2'];

}

mavlink20.messages.autopilot_version.prototype = new mavlink20.message;
mavlink20.messages.autopilot_version.prototype.pack = function(mav) {
    var orderedfields = [ this.capabilities, this.uid, this.flight_sw_version, this.middleware_sw_version, this.os_sw_version, this.board_version, this.vendor_id, this.product_id, this.flight_custom_version, this.middleware_custom_version, this.os_custom_version, this.uid2];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink20.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
The location of a landing target. See:
https://mavlink.io/en/services/landing_target.html

                time_usec                 : Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude of the number. (uint64_t)
                target_num                : The ID of the target if multiple targets are present (uint8_t)
                frame                     : Coordinate frame used for following fields. (uint8_t)
                angle_x                   : X-axis angular offset of the target from the center of the image (float)
                angle_y                   : Y-axis angular offset of the target from the center of the image (float)
                distance                  : Distance to the target from the vehicle (float)
                size_x                    : Size of target along x-axis (float)
                size_y                    : Size of target along y-axis (float)
                x                         : X Position of the landing target in MAV_FRAME (float)
                y                         : Y Position of the landing target in MAV_FRAME (float)
                z                         : Z Position of the landing target in MAV_FRAME (float)
                q                         : Quaternion of landing target orientation (w, x, y, z order, zero-rotation is 1, 0, 0, 0) (float)
                type                      : Type of landing target (uint8_t)
                position_valid            : Boolean indicating whether the position fields (x, y, z, q, type) contain valid target position information (valid: 1, invalid: 0). Default is 0 (invalid). (uint8_t)

*/
    mavlink20.messages.landing_target = function( ...moreargs ) {
     [ this.time_usec , this.target_num , this.frame , this.angle_x , this.angle_y , this.distance , this.size_x , this.size_y , this.x , this.y , this.z , this.q , this.type , this.position_valid ] = moreargs;


    this._format = '<QfffffBBfff4fBB';
    this._id = mavlink20.MAVLINK_MSG_ID_LANDING_TARGET;
    this.order_map = [0, 6, 7, 1, 2, 3, 4, 5, 8, 9, 10, 11, 12, 13];
    this.len_map = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 4, 1, 1];
    this.array_len_map = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0];
    this.crc_extra = 200;
    this._name = 'LANDING_TARGET';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['time_usec', 'target_num', 'frame', 'angle_x', 'angle_y', 'distance', 'size_x', 'size_y', 'x', 'y', 'z', 'q', 'type', 'position_valid'];

}

mavlink20.messages.landing_target.prototype = new mavlink20.message;
mavlink20.messages.landing_target.prototype.pack = function(mav) {
    var orderedfields = [ this.time_usec, this.angle_x, this.angle_y, this.distance, this.size_x, this.size_y, this.target_num, this.frame, this.x, this.y, this.z, this.q, this.type, this.position_valid];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink20.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
Status of geo-fencing. Sent in extended status stream when fencing
enabled.

                breach_status             : Breach status (0 if currently inside fence, 1 if outside). (uint8_t)
                breach_count              : Number of fence breaches. (uint16_t)
                breach_type               : Last breach type. (uint8_t)
                breach_time               : Time (since boot) of last breach. (uint32_t)
                breach_mitigation         : Active action to prevent fence breach (uint8_t)

*/
    mavlink20.messages.fence_status = function( ...moreargs ) {
     [ this.breach_status , this.breach_count , this.breach_type , this.breach_time , this.breach_mitigation ] = moreargs;


    this._format = '<IHBBB';
    this._id = mavlink20.MAVLINK_MSG_ID_FENCE_STATUS;
    this.order_map = [2, 1, 3, 0, 4];
    this.len_map = [1, 1, 1, 1, 1];
    this.array_len_map = [0, 0, 0, 0, 0];
    this.crc_extra = 189;
    this._name = 'FENCE_STATUS';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['breach_status', 'breach_count', 'breach_type', 'breach_time', 'breach_mitigation'];

}

mavlink20.messages.fence_status.prototype = new mavlink20.message;
mavlink20.messages.fence_status.prototype.pack = function(mav) {
    var orderedfields = [ this.breach_time, this.breach_count, this.breach_status, this.breach_type, this.breach_mitigation];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink20.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
Reports results of completed compass calibration. Sent until
MAG_CAL_ACK received.

                compass_id                : Compass being calibrated. (uint8_t)
                cal_mask                  : Bitmask of compasses being calibrated. (uint8_t)
                cal_status                : Calibration Status. (uint8_t)
                autosaved                 : 0=requires a MAV_CMD_DO_ACCEPT_MAG_CAL, 1=saved to parameters. (uint8_t)
                fitness                   : RMS milligauss residuals. (float)
                ofs_x                     : X offset. (float)
                ofs_y                     : Y offset. (float)
                ofs_z                     : Z offset. (float)
                diag_x                    : X diagonal (matrix 11). (float)
                diag_y                    : Y diagonal (matrix 22). (float)
                diag_z                    : Z diagonal (matrix 33). (float)
                offdiag_x                 : X off-diagonal (matrix 12 and 21). (float)
                offdiag_y                 : Y off-diagonal (matrix 13 and 31). (float)
                offdiag_z                 : Z off-diagonal (matrix 32 and 23). (float)
                orientation_confidence        : Confidence in orientation (higher is better). (float)
                old_orientation           : orientation before calibration. (uint8_t)
                new_orientation           : orientation after calibration. (uint8_t)
                scale_factor              : field radius correction factor (float)

*/
    mavlink20.messages.mag_cal_report = function( ...moreargs ) {
     [ this.compass_id , this.cal_mask , this.cal_status , this.autosaved , this.fitness , this.ofs_x , this.ofs_y , this.ofs_z , this.diag_x , this.diag_y , this.diag_z , this.offdiag_x , this.offdiag_y , this.offdiag_z , this.orientation_confidence , this.old_orientation , this.new_orientation , this.scale_factor ] = moreargs;


    this._format = '<ffffffffffBBBBfBBf';
    this._id = mavlink20.MAVLINK_MSG_ID_MAG_CAL_REPORT;
    this.order_map = [10, 11, 12, 13, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 14, 15, 16, 17];
    this.len_map = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1];
    this.array_len_map = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
    this.crc_extra = 36;
    this._name = 'MAG_CAL_REPORT';

    this._instance_field = 'compass_id';
    this._instance_offset = 40;

    this.fieldnames = ['compass_id', 'cal_mask', 'cal_status', 'autosaved', 'fitness', 'ofs_x', 'ofs_y', 'ofs_z', 'diag_x', 'diag_y', 'diag_z', 'offdiag_x', 'offdiag_y', 'offdiag_z', 'orientation_confidence', 'old_orientation', 'new_orientation', 'scale_factor'];

}

mavlink20.messages.mag_cal_report.prototype = new mavlink20.message;
mavlink20.messages.mag_cal_report.prototype.pack = function(mav) {
    var orderedfields = [ this.fitness, this.ofs_x, this.ofs_y, this.ofs_z, this.diag_x, this.diag_y, this.diag_z, this.offdiag_x, this.offdiag_y, this.offdiag_z, this.compass_id, this.cal_mask, this.cal_status, this.autosaved, this.orientation_confidence, this.old_orientation, this.new_orientation, this.scale_factor];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink20.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
EFI status output

                health                    : EFI health status (uint8_t)
                ecu_index                 : ECU index (float)
                rpm                       : RPM (float)
                fuel_consumed             : Fuel consumed (float)
                fuel_flow                 : Fuel flow rate (float)
                engine_load               : Engine load (float)
                throttle_position         : Throttle position (float)
                spark_dwell_time          : Spark dwell time (float)
                barometric_pressure        : Barometric pressure (float)
                intake_manifold_pressure        : Intake manifold pressure( (float)
                intake_manifold_temperature        : Intake manifold temperature (float)
                cylinder_head_temperature        : Cylinder head temperature (float)
                ignition_timing           : Ignition timing (Crank angle degrees) (float)
                injection_time            : Injection time (float)
                exhaust_gas_temperature        : Exhaust gas temperature (float)
                throttle_out              : Output throttle (float)
                pt_compensation           : Pressure/temperature compensation (float)
                ignition_voltage          : Supply voltage to EFI sparking system.  Zero in this value means "unknown", so if the supply voltage really is zero volts use 0.0001 instead. (float)
                fuel_pressure             : Fuel pressure. Zero in this value means "unknown", so if the fuel pressure really is zero kPa use 0.0001 instead. (float)

*/
    mavlink20.messages.efi_status = function( ...moreargs ) {
     [ this.health , this.ecu_index , this.rpm , this.fuel_consumed , this.fuel_flow , this.engine_load , this.throttle_position , this.spark_dwell_time , this.barometric_pressure , this.intake_manifold_pressure , this.intake_manifold_temperature , this.cylinder_head_temperature , this.ignition_timing , this.injection_time , this.exhaust_gas_temperature , this.throttle_out , this.pt_compensation , this.ignition_voltage , this.fuel_pressure ] = moreargs;


    this._format = '<ffffffffffffffffBff';
    this._id = mavlink20.MAVLINK_MSG_ID_EFI_STATUS;
    this.order_map = [16, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18];
    this.len_map = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1];
    this.array_len_map = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
    this.crc_extra = 208;
    this._name = 'EFI_STATUS';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['health', 'ecu_index', 'rpm', 'fuel_consumed', 'fuel_flow', 'engine_load', 'throttle_position', 'spark_dwell_time', 'barometric_pressure', 'intake_manifold_pressure', 'intake_manifold_temperature', 'cylinder_head_temperature', 'ignition_timing', 'injection_time', 'exhaust_gas_temperature', 'throttle_out', 'pt_compensation', 'ignition_voltage', 'fuel_pressure'];

}

mavlink20.messages.efi_status.prototype = new mavlink20.message;
mavlink20.messages.efi_status.prototype.pack = function(mav) {
    var orderedfields = [ this.ecu_index, this.rpm, this.fuel_consumed, this.fuel_flow, this.engine_load, this.throttle_position, this.spark_dwell_time, this.barometric_pressure, this.intake_manifold_pressure, this.intake_manifold_temperature, this.cylinder_head_temperature, this.ignition_timing, this.injection_time, this.exhaust_gas_temperature, this.throttle_out, this.pt_compensation, this.health, this.ignition_voltage, this.fuel_pressure];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink20.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
Estimator status message including flags, innovation test ratios and
estimated accuracies. The flags message is an integer bitmask
containing information on which EKF outputs are valid. See the
ESTIMATOR_STATUS_FLAGS enum definition for further information. The
innovation test ratios show the magnitude of the sensor innovation
divided by the innovation check threshold. Under normal operation the
innovation test ratios should be below 0.5 with occasional values up
to 1.0. Values greater than 1.0 should be rare under normal operation
and indicate that a measurement has been rejected by the filter. The
user should be notified if an innovation test ratio greater than 1.0
is recorded. Notifications for values in the range between 0.5 and 1.0
should be optional and controllable by the user.

                time_usec                 : Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude of the number. (uint64_t)
                flags                     : Bitmap indicating which EKF outputs are valid. (uint16_t)
                vel_ratio                 : Velocity innovation test ratio (float)
                pos_horiz_ratio           : Horizontal position innovation test ratio (float)
                pos_vert_ratio            : Vertical position innovation test ratio (float)
                mag_ratio                 : Magnetometer innovation test ratio (float)
                hagl_ratio                : Height above terrain innovation test ratio (float)
                tas_ratio                 : True airspeed innovation test ratio (float)
                pos_horiz_accuracy        : Horizontal position 1-STD accuracy relative to the EKF local origin (float)
                pos_vert_accuracy         : Vertical position 1-STD accuracy relative to the EKF local origin (float)

*/
    mavlink20.messages.estimator_status = function( ...moreargs ) {
     [ this.time_usec , this.flags , this.vel_ratio , this.pos_horiz_ratio , this.pos_vert_ratio , this.mag_ratio , this.hagl_ratio , this.tas_ratio , this.pos_horiz_accuracy , this.pos_vert_accuracy ] = moreargs;


    this._format = '<QffffffffH';
    this._id = mavlink20.MAVLINK_MSG_ID_ESTIMATOR_STATUS;
    this.order_map = [0, 9, 1, 2, 3, 4, 5, 6, 7, 8];
    this.len_map = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1];
    this.array_len_map = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
    this.crc_extra = 163;
    this._name = 'ESTIMATOR_STATUS';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['time_usec', 'flags', 'vel_ratio', 'pos_horiz_ratio', 'pos_vert_ratio', 'mag_ratio', 'hagl_ratio', 'tas_ratio', 'pos_horiz_accuracy', 'pos_vert_accuracy'];

}

mavlink20.messages.estimator_status.prototype = new mavlink20.message;
mavlink20.messages.estimator_status.prototype.pack = function(mav) {
    var orderedfields = [ this.time_usec, this.vel_ratio, this.pos_horiz_ratio, this.pos_vert_ratio, this.mag_ratio, this.hagl_ratio, this.tas_ratio, this.pos_horiz_accuracy, this.pos_vert_accuracy, this.flags];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink20.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
Wind covariance estimate from vehicle.

                time_usec                 : Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude of the number. (uint64_t)
                wind_x                    : Wind in X (NED) direction (float)
                wind_y                    : Wind in Y (NED) direction (float)
                wind_z                    : Wind in Z (NED) direction (float)
                var_horiz                 : Variability of the wind in XY. RMS of a 1 Hz lowpassed wind estimate. (float)
                var_vert                  : Variability of the wind in Z. RMS of a 1 Hz lowpassed wind estimate. (float)
                wind_alt                  : Altitude (MSL) that this measurement was taken at (float)
                horiz_accuracy            : Horizontal speed 1-STD accuracy (float)
                vert_accuracy             : Vertical speed 1-STD accuracy (float)

*/
    mavlink20.messages.wind_cov = function( ...moreargs ) {
     [ this.time_usec , this.wind_x , this.wind_y , this.wind_z , this.var_horiz , this.var_vert , this.wind_alt , this.horiz_accuracy , this.vert_accuracy ] = moreargs;


    this._format = '<Qffffffff';
    this._id = mavlink20.MAVLINK_MSG_ID_WIND_COV;
    this.order_map = [0, 1, 2, 3, 4, 5, 6, 7, 8];
    this.len_map = [1, 1, 1, 1, 1, 1, 1, 1, 1];
    this.array_len_map = [0, 0, 0, 0, 0, 0, 0, 0, 0];
    this.crc_extra = 105;
    this._name = 'WIND_COV';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['time_usec', 'wind_x', 'wind_y', 'wind_z', 'var_horiz', 'var_vert', 'wind_alt', 'horiz_accuracy', 'vert_accuracy'];

}

mavlink20.messages.wind_cov.prototype = new mavlink20.message;
mavlink20.messages.wind_cov.prototype.pack = function(mav) {
    var orderedfields = [ this.time_usec, this.wind_x, this.wind_y, this.wind_z, this.var_horiz, this.var_vert, this.wind_alt, this.horiz_accuracy, this.vert_accuracy];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink20.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
GPS sensor input message.  This is a raw sensor value sent by the GPS.
This is NOT the global position estimate of the system.

                time_usec                 : Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude of the number. (uint64_t)
                gps_id                    : ID of the GPS for multiple GPS inputs (uint8_t)
                ignore_flags              : Bitmap indicating which GPS input flags fields to ignore.  All other fields must be provided. (uint16_t)
                time_week_ms              : GPS time (from start of GPS week) (uint32_t)
                time_week                 : GPS week number (uint16_t)
                fix_type                  : 0-1: no fix, 2: 2D fix, 3: 3D fix. 4: 3D with DGPS. 5: 3D with RTK (uint8_t)
                lat                       : Latitude (WGS84) (int32_t)
                lon                       : Longitude (WGS84) (int32_t)
                alt                       : Altitude (MSL). Positive for up. (float)
                hdop                      : GPS HDOP horizontal dilution of position (unitless). If unknown, set to: UINT16_MAX (float)
                vdop                      : GPS VDOP vertical dilution of position (unitless). If unknown, set to: UINT16_MAX (float)
                vn                        : GPS velocity in north direction in earth-fixed NED frame (float)
                ve                        : GPS velocity in east direction in earth-fixed NED frame (float)
                vd                        : GPS velocity in down direction in earth-fixed NED frame (float)
                speed_accuracy            : GPS speed accuracy (float)
                horiz_accuracy            : GPS horizontal accuracy (float)
                vert_accuracy             : GPS vertical accuracy (float)
                satellites_visible        : Number of satellites visible. (uint8_t)
                yaw                       : Yaw of vehicle relative to Earth's North, zero means not available, use 36000 for north (uint16_t)

*/
    mavlink20.messages.gps_input = function( ...moreargs ) {
     [ this.time_usec , this.gps_id , this.ignore_flags , this.time_week_ms , this.time_week , this.fix_type , this.lat , this.lon , this.alt , this.hdop , this.vdop , this.vn , this.ve , this.vd , this.speed_accuracy , this.horiz_accuracy , this.vert_accuracy , this.satellites_visible , this.yaw ] = moreargs;


    this._format = '<QIiifffffffffHHBBBH';
    this._id = mavlink20.MAVLINK_MSG_ID_GPS_INPUT;
    this.order_map = [0, 15, 13, 1, 14, 16, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 17, 18];
    this.len_map = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1];
    this.array_len_map = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
    this.crc_extra = 151;
    this._name = 'GPS_INPUT';

    this._instance_field = 'gps_id';
    this._instance_offset = 60;

    this.fieldnames = ['time_usec', 'gps_id', 'ignore_flags', 'time_week_ms', 'time_week', 'fix_type', 'lat', 'lon', 'alt', 'hdop', 'vdop', 'vn', 've', 'vd', 'speed_accuracy', 'horiz_accuracy', 'vert_accuracy', 'satellites_visible', 'yaw'];

}

mavlink20.messages.gps_input.prototype = new mavlink20.message;
mavlink20.messages.gps_input.prototype.pack = function(mav) {
    var orderedfields = [ this.time_usec, this.time_week_ms, this.lat, this.lon, this.alt, this.hdop, this.vdop, this.vn, this.ve, this.vd, this.speed_accuracy, this.horiz_accuracy, this.vert_accuracy, this.ignore_flags, this.time_week, this.gps_id, this.fix_type, this.satellites_visible, this.yaw];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink20.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
RTCM message for injecting into the onboard GPS (used for DGPS)

                flags                     : LSB: 1 means message is fragmented, next 2 bits are the fragment ID, the remaining 5 bits are used for the sequence ID. Messages are only to be flushed to the GPS when the entire message has been reconstructed on the autopilot. The fragment ID specifies which order the fragments should be assembled into a buffer, while the sequence ID is used to detect a mismatch between different buffers. The buffer is considered fully reconstructed when either all 4 fragments are present, or all the fragments before the first fragment with a non full payload is received. This management is used to ensure that normal GPS operation doesn't corrupt RTCM data, and to recover from a unreliable transport delivery order. (uint8_t)
                len                       : data length (uint8_t)
                data                      : RTCM message (may be fragmented) (uint8_t)

*/
    mavlink20.messages.gps_rtcm_data = function( ...moreargs ) {
     [ this.flags , this.len , this.data ] = moreargs;


    this._format = '<BB180s';
    this._id = mavlink20.MAVLINK_MSG_ID_GPS_RTCM_DATA;
    this.order_map = [0, 1, 2];
    this.len_map = [1, 1, 180];
    this.array_len_map = [0, 0, 180];
    this.crc_extra = 35;
    this._name = 'GPS_RTCM_DATA';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['flags', 'len', 'data'];

}

mavlink20.messages.gps_rtcm_data.prototype = new mavlink20.message;
mavlink20.messages.gps_rtcm_data.prototype.pack = function(mav) {
    var orderedfields = [ this.flags, this.len, this.data];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink20.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
Message appropriate for high latency connections like Iridium

                base_mode                 : Bitmap of enabled system modes. (uint8_t)
                custom_mode               : A bitfield for use for autopilot-specific flags. (uint32_t)
                landed_state              : The landed state. Is set to MAV_LANDED_STATE_UNDEFINED if landed state is unknown. (uint8_t)
                roll                      : roll (int16_t)
                pitch                     : pitch (int16_t)
                heading                   : heading (uint16_t)
                throttle                  : throttle (percentage) (int8_t)
                heading_sp                : heading setpoint (int16_t)
                latitude                  : Latitude (int32_t)
                longitude                 : Longitude (int32_t)
                altitude_amsl             : Altitude above mean sea level (int16_t)
                altitude_sp               : Altitude setpoint relative to the home position (int16_t)
                airspeed                  : airspeed (uint8_t)
                airspeed_sp               : airspeed setpoint (uint8_t)
                groundspeed               : groundspeed (uint8_t)
                climb_rate                : climb rate (int8_t)
                gps_nsat                  : Number of satellites visible. If unknown, set to 255 (uint8_t)
                gps_fix_type              : GPS Fix type. (uint8_t)
                battery_remaining         : Remaining battery (percentage) (uint8_t)
                temperature               : Autopilot temperature (degrees C) (int8_t)
                temperature_air           : Air temperature (degrees C) from airspeed sensor (int8_t)
                failsafe                  : failsafe (each bit represents a failsafe where 0=ok, 1=failsafe active (bit0:RC, bit1:batt, bit2:GPS, bit3:GCS, bit4:fence) (uint8_t)
                wp_num                    : current waypoint number (uint8_t)
                wp_distance               : distance to target (uint16_t)

*/
    mavlink20.messages.high_latency = function( ...moreargs ) {
     [ this.base_mode , this.custom_mode , this.landed_state , this.roll , this.pitch , this.heading , this.throttle , this.heading_sp , this.latitude , this.longitude , this.altitude_amsl , this.altitude_sp , this.airspeed , this.airspeed_sp , this.groundspeed , this.climb_rate , this.gps_nsat , this.gps_fix_type , this.battery_remaining , this.temperature , this.temperature_air , this.failsafe , this.wp_num , this.wp_distance ] = moreargs;


    this._format = '<IiihhHhhhHBBbBBBbBBBbbBB';
    this._id = mavlink20.MAVLINK_MSG_ID_HIGH_LATENCY;
    this.order_map = [10, 0, 11, 3, 4, 5, 12, 6, 1, 2, 7, 8, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 9];
    this.len_map = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1];
    this.array_len_map = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
    this.crc_extra = 150;
    this._name = 'HIGH_LATENCY';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['base_mode', 'custom_mode', 'landed_state', 'roll', 'pitch', 'heading', 'throttle', 'heading_sp', 'latitude', 'longitude', 'altitude_amsl', 'altitude_sp', 'airspeed', 'airspeed_sp', 'groundspeed', 'climb_rate', 'gps_nsat', 'gps_fix_type', 'battery_remaining', 'temperature', 'temperature_air', 'failsafe', 'wp_num', 'wp_distance'];

}

mavlink20.messages.high_latency.prototype = new mavlink20.message;
mavlink20.messages.high_latency.prototype.pack = function(mav) {
    var orderedfields = [ this.custom_mode, this.latitude, this.longitude, this.roll, this.pitch, this.heading, this.heading_sp, this.altitude_amsl, this.altitude_sp, this.wp_distance, this.base_mode, this.landed_state, this.throttle, this.airspeed, this.airspeed_sp, this.groundspeed, this.climb_rate, this.gps_nsat, this.gps_fix_type, this.battery_remaining, this.temperature, this.temperature_air, this.failsafe, this.wp_num];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink20.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
Message appropriate for high latency connections like Iridium (version
2)

                timestamp                 : Timestamp (milliseconds since boot or Unix epoch) (uint32_t)
                type                      : Type of the MAV (quadrotor, helicopter, etc.) (uint8_t)
                autopilot                 : Autopilot type / class. Use MAV_AUTOPILOT_INVALID for components that are not flight controllers. (uint8_t)
                custom_mode               : A bitfield for use for autopilot-specific flags (2 byte version). (uint16_t)
                latitude                  : Latitude (int32_t)
                longitude                 : Longitude (int32_t)
                altitude                  : Altitude above mean sea level (int16_t)
                target_altitude           : Altitude setpoint (int16_t)
                heading                   : Heading (uint8_t)
                target_heading            : Heading setpoint (uint8_t)
                target_distance           : Distance to target waypoint or position (uint16_t)
                throttle                  : Throttle (uint8_t)
                airspeed                  : Airspeed (uint8_t)
                airspeed_sp               : Airspeed setpoint (uint8_t)
                groundspeed               : Groundspeed (uint8_t)
                windspeed                 : Windspeed (uint8_t)
                wind_heading              : Wind heading (uint8_t)
                eph                       : Maximum error horizontal position since last message (uint8_t)
                epv                       : Maximum error vertical position since last message (uint8_t)
                temperature_air           : Air temperature from airspeed sensor (int8_t)
                climb_rate                : Maximum climb rate magnitude since last message (int8_t)
                battery                   : Battery level (-1 if field not provided). (int8_t)
                wp_num                    : Current waypoint number (uint16_t)
                failure_flags             : Bitmap of failure flags. (uint16_t)
                custom0                   : Field for custom payload. (int8_t)
                custom1                   : Field for custom payload. (int8_t)
                custom2                   : Field for custom payload. (int8_t)

*/
    mavlink20.messages.high_latency2 = function( ...moreargs ) {
     [ this.timestamp , this.type , this.autopilot , this.custom_mode , this.latitude , this.longitude , this.altitude , this.target_altitude , this.heading , this.target_heading , this.target_distance , this.throttle , this.airspeed , this.airspeed_sp , this.groundspeed , this.windspeed , this.wind_heading , this.eph , this.epv , this.temperature_air , this.climb_rate , this.battery , this.wp_num , this.failure_flags , this.custom0 , this.custom1 , this.custom2 ] = moreargs;


    this._format = '<IiiHhhHHHBBBBBBBBBBBBbbbbbb';
    this._id = mavlink20.MAVLINK_MSG_ID_HIGH_LATENCY2;
    this.order_map = [0, 9, 10, 3, 1, 2, 4, 5, 11, 12, 6, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 7, 8, 24, 25, 26];
    this.len_map = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1];
    this.array_len_map = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
    this.crc_extra = 179;
    this._name = 'HIGH_LATENCY2';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['timestamp', 'type', 'autopilot', 'custom_mode', 'latitude', 'longitude', 'altitude', 'target_altitude', 'heading', 'target_heading', 'target_distance', 'throttle', 'airspeed', 'airspeed_sp', 'groundspeed', 'windspeed', 'wind_heading', 'eph', 'epv', 'temperature_air', 'climb_rate', 'battery', 'wp_num', 'failure_flags', 'custom0', 'custom1', 'custom2'];

}

mavlink20.messages.high_latency2.prototype = new mavlink20.message;
mavlink20.messages.high_latency2.prototype.pack = function(mav) {
    var orderedfields = [ this.timestamp, this.latitude, this.longitude, this.custom_mode, this.altitude, this.target_altitude, this.target_distance, this.wp_num, this.failure_flags, this.type, this.autopilot, this.heading, this.target_heading, this.throttle, this.airspeed, this.airspeed_sp, this.groundspeed, this.windspeed, this.wind_heading, this.eph, this.epv, this.temperature_air, this.climb_rate, this.battery, this.custom0, this.custom1, this.custom2];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink20.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
Vibration levels and accelerometer clipping

                time_usec                 : Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude of the number. (uint64_t)
                vibration_x               : Vibration levels on X-axis (float)
                vibration_y               : Vibration levels on Y-axis (float)
                vibration_z               : Vibration levels on Z-axis (float)
                clipping_0                : first accelerometer clipping count (uint32_t)
                clipping_1                : second accelerometer clipping count (uint32_t)
                clipping_2                : third accelerometer clipping count (uint32_t)

*/
    mavlink20.messages.vibration = function( ...moreargs ) {
     [ this.time_usec , this.vibration_x , this.vibration_y , this.vibration_z , this.clipping_0 , this.clipping_1 , this.clipping_2 ] = moreargs;


    this._format = '<QfffIII';
    this._id = mavlink20.MAVLINK_MSG_ID_VIBRATION;
    this.order_map = [0, 1, 2, 3, 4, 5, 6];
    this.len_map = [1, 1, 1, 1, 1, 1, 1];
    this.array_len_map = [0, 0, 0, 0, 0, 0, 0];
    this.crc_extra = 90;
    this._name = 'VIBRATION';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['time_usec', 'vibration_x', 'vibration_y', 'vibration_z', 'clipping_0', 'clipping_1', 'clipping_2'];

}

mavlink20.messages.vibration.prototype = new mavlink20.message;
mavlink20.messages.vibration.prototype.pack = function(mav) {
    var orderedfields = [ this.time_usec, this.vibration_x, this.vibration_y, this.vibration_z, this.clipping_0, this.clipping_1, this.clipping_2];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink20.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
This message can be requested by sending the MAV_CMD_GET_HOME_POSITION
command. The position the system will return to and land on. The
position is set automatically by the system during the takeoff in case
it was not explicitly set by the operator before or after. The global
and local positions encode the position in the respective coordinate
frames, while the q parameter encodes the orientation of the surface.
Under normal conditions it describes the heading and terrain slope,
which can be used by the aircraft to adjust the approach. The approach
3D vector describes the point to which the system should fly in normal
flight mode and then perform a landing sequence along the vector.

                latitude                  : Latitude (WGS84) (int32_t)
                longitude                 : Longitude (WGS84) (int32_t)
                altitude                  : Altitude (MSL). Positive for up. (int32_t)
                x                         : Local X position of this position in the local coordinate frame (float)
                y                         : Local Y position of this position in the local coordinate frame (float)
                z                         : Local Z position of this position in the local coordinate frame (float)
                q                         : World to surface normal and heading transformation of the takeoff position. Used to indicate the heading and slope of the ground (float)
                approach_x                : Local X position of the end of the approach vector. Multicopters should set this position based on their takeoff path. Grass-landing fixed wing aircraft should set it the same way as multicopters. Runway-landing fixed wing aircraft should set it to the opposite direction of the takeoff, assuming the takeoff happened from the threshold / touchdown zone. (float)
                approach_y                : Local Y position of the end of the approach vector. Multicopters should set this position based on their takeoff path. Grass-landing fixed wing aircraft should set it the same way as multicopters. Runway-landing fixed wing aircraft should set it to the opposite direction of the takeoff, assuming the takeoff happened from the threshold / touchdown zone. (float)
                approach_z                : Local Z position of the end of the approach vector. Multicopters should set this position based on their takeoff path. Grass-landing fixed wing aircraft should set it the same way as multicopters. Runway-landing fixed wing aircraft should set it to the opposite direction of the takeoff, assuming the takeoff happened from the threshold / touchdown zone. (float)
                time_usec                 : Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude of the number. (uint64_t)

*/
    mavlink20.messages.home_position = function( ...moreargs ) {
     [ this.latitude , this.longitude , this.altitude , this.x , this.y , this.z , this.q , this.approach_x , this.approach_y , this.approach_z , this.time_usec ] = moreargs;


    this._format = '<iiifff4ffffQ';
    this._id = mavlink20.MAVLINK_MSG_ID_HOME_POSITION;
    this.order_map = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10];
    this.len_map = [1, 1, 1, 1, 1, 1, 4, 1, 1, 1, 1];
    this.array_len_map = [0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0];
    this.crc_extra = 104;
    this._name = 'HOME_POSITION';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['latitude', 'longitude', 'altitude', 'x', 'y', 'z', 'q', 'approach_x', 'approach_y', 'approach_z', 'time_usec'];

}

mavlink20.messages.home_position.prototype = new mavlink20.message;
mavlink20.messages.home_position.prototype.pack = function(mav) {
    var orderedfields = [ this.latitude, this.longitude, this.altitude, this.x, this.y, this.z, this.q, this.approach_x, this.approach_y, this.approach_z, this.time_usec];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink20.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
The position the system will return to and land on. The position is
set automatically by the system during the takeoff in case it was not
explicitly set by the operator before or after. The global and local
positions encode the position in the respective coordinate frames,
while the q parameter encodes the orientation of the surface. Under
normal conditions it describes the heading and terrain slope, which
can be used by the aircraft to adjust the approach. The approach 3D
vector describes the point to which the system should fly in normal
flight mode and then perform a landing sequence along the vector.

                target_system             : System ID. (uint8_t)
                latitude                  : Latitude (WGS84) (int32_t)
                longitude                 : Longitude (WGS84) (int32_t)
                altitude                  : Altitude (MSL). Positive for up. (int32_t)
                x                         : Local X position of this position in the local coordinate frame (float)
                y                         : Local Y position of this position in the local coordinate frame (float)
                z                         : Local Z position of this position in the local coordinate frame (float)
                q                         : World to surface normal and heading transformation of the takeoff position. Used to indicate the heading and slope of the ground (float)
                approach_x                : Local X position of the end of the approach vector. Multicopters should set this position based on their takeoff path. Grass-landing fixed wing aircraft should set it the same way as multicopters. Runway-landing fixed wing aircraft should set it to the opposite direction of the takeoff, assuming the takeoff happened from the threshold / touchdown zone. (float)
                approach_y                : Local Y position of the end of the approach vector. Multicopters should set this position based on their takeoff path. Grass-landing fixed wing aircraft should set it the same way as multicopters. Runway-landing fixed wing aircraft should set it to the opposite direction of the takeoff, assuming the takeoff happened from the threshold / touchdown zone. (float)
                approach_z                : Local Z position of the end of the approach vector. Multicopters should set this position based on their takeoff path. Grass-landing fixed wing aircraft should set it the same way as multicopters. Runway-landing fixed wing aircraft should set it to the opposite direction of the takeoff, assuming the takeoff happened from the threshold / touchdown zone. (float)
                time_usec                 : Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude of the number. (uint64_t)

*/
    mavlink20.messages.set_home_position = function( ...moreargs ) {
     [ this.target_system , this.latitude , this.longitude , this.altitude , this.x , this.y , this.z , this.q , this.approach_x , this.approach_y , this.approach_z , this.time_usec ] = moreargs;


    this._format = '<iiifff4ffffBQ';
    this._id = mavlink20.MAVLINK_MSG_ID_SET_HOME_POSITION;
    this.order_map = [10, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 11];
    this.len_map = [1, 1, 1, 1, 1, 1, 4, 1, 1, 1, 1, 1];
    this.array_len_map = [0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0];
    this.crc_extra = 85;
    this._name = 'SET_HOME_POSITION';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['target_system', 'latitude', 'longitude', 'altitude', 'x', 'y', 'z', 'q', 'approach_x', 'approach_y', 'approach_z', 'time_usec'];

}

mavlink20.messages.set_home_position.prototype = new mavlink20.message;
mavlink20.messages.set_home_position.prototype.pack = function(mav) {
    var orderedfields = [ this.latitude, this.longitude, this.altitude, this.x, this.y, this.z, this.q, this.approach_x, this.approach_y, this.approach_z, this.target_system, this.time_usec];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink20.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
The interval between messages for a particular MAVLink message ID.
This message is the response to the MAV_CMD_GET_MESSAGE_INTERVAL
command. This interface replaces DATA_STREAM.

                message_id                : The ID of the requested MAVLink message. v1.0 is limited to 254 messages. (uint16_t)
                interval_us               : The interval between two messages. A value of -1 indicates this stream is disabled, 0 indicates it is not available, > 0 indicates the interval at which it is sent. (int32_t)

*/
    mavlink20.messages.message_interval = function( ...moreargs ) {
     [ this.message_id , this.interval_us ] = moreargs;


    this._format = '<iH';
    this._id = mavlink20.MAVLINK_MSG_ID_MESSAGE_INTERVAL;
    this.order_map = [1, 0];
    this.len_map = [1, 1];
    this.array_len_map = [0, 0];
    this.crc_extra = 95;
    this._name = 'MESSAGE_INTERVAL';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['message_id', 'interval_us'];

}

mavlink20.messages.message_interval.prototype = new mavlink20.message;
mavlink20.messages.message_interval.prototype.pack = function(mav) {
    var orderedfields = [ this.interval_us, this.message_id];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink20.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
Provides state for additional features

                vtol_state                : The VTOL state if applicable. Is set to MAV_VTOL_STATE_UNDEFINED if UAV is not in VTOL configuration. (uint8_t)
                landed_state              : The landed state. Is set to MAV_LANDED_STATE_UNDEFINED if landed state is unknown. (uint8_t)

*/
    mavlink20.messages.extended_sys_state = function( ...moreargs ) {
     [ this.vtol_state , this.landed_state ] = moreargs;


    this._format = '<BB';
    this._id = mavlink20.MAVLINK_MSG_ID_EXTENDED_SYS_STATE;
    this.order_map = [0, 1];
    this.len_map = [1, 1];
    this.array_len_map = [0, 0];
    this.crc_extra = 130;
    this._name = 'EXTENDED_SYS_STATE';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['vtol_state', 'landed_state'];

}

mavlink20.messages.extended_sys_state.prototype = new mavlink20.message;
mavlink20.messages.extended_sys_state.prototype.pack = function(mav) {
    var orderedfields = [ this.vtol_state, this.landed_state];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink20.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
The location and information of an ADSB vehicle

                ICAO_address              : ICAO address (uint32_t)
                lat                       : Latitude (int32_t)
                lon                       : Longitude (int32_t)
                altitude_type             : ADSB altitude type. (uint8_t)
                altitude                  : Altitude(ASL) (int32_t)
                heading                   : Course over ground (uint16_t)
                hor_velocity              : The horizontal velocity (uint16_t)
                ver_velocity              : The vertical velocity. Positive is up (int16_t)
                callsign                  : The callsign, 8+null (char)
                emitter_type              : ADSB emitter type. (uint8_t)
                tslc                      : Time since last communication in seconds (uint8_t)
                flags                     : Bitmap to indicate various statuses including valid data fields (uint16_t)
                squawk                    : Squawk code (uint16_t)

*/
    mavlink20.messages.adsb_vehicle = function( ...moreargs ) {
     [ this.ICAO_address , this.lat , this.lon , this.altitude_type , this.altitude , this.heading , this.hor_velocity , this.ver_velocity , this.callsign , this.emitter_type , this.tslc , this.flags , this.squawk ] = moreargs;


    this._format = '<IiiiHHhHHB9sBB';
    this._id = mavlink20.MAVLINK_MSG_ID_ADSB_VEHICLE;
    this.order_map = [0, 1, 2, 9, 3, 4, 5, 6, 10, 11, 12, 7, 8];
    this.len_map = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1];
    this.array_len_map = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0];
    this.crc_extra = 184;
    this._name = 'ADSB_VEHICLE';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['ICAO_address', 'lat', 'lon', 'altitude_type', 'altitude', 'heading', 'hor_velocity', 'ver_velocity', 'callsign', 'emitter_type', 'tslc', 'flags', 'squawk'];

}

mavlink20.messages.adsb_vehicle.prototype = new mavlink20.message;
mavlink20.messages.adsb_vehicle.prototype.pack = function(mav) {
    var orderedfields = [ this.ICAO_address, this.lat, this.lon, this.altitude, this.heading, this.hor_velocity, this.ver_velocity, this.flags, this.squawk, this.altitude_type, this.callsign, this.emitter_type, this.tslc];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink20.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
Information about a potential collision

                src                       : Collision data source (uint8_t)
                id                        : Unique identifier, domain based on src field (uint32_t)
                action                    : Action that is being taken to avoid this collision (uint8_t)
                threat_level              : How concerned the aircraft is about this collision (uint8_t)
                time_to_minimum_delta        : Estimated time until collision occurs (float)
                altitude_minimum_delta        : Closest vertical distance between vehicle and object (float)
                horizontal_minimum_delta        : Closest horizontal distance between vehicle and object (float)

*/
    mavlink20.messages.collision = function( ...moreargs ) {
     [ this.src , this.id , this.action , this.threat_level , this.time_to_minimum_delta , this.altitude_minimum_delta , this.horizontal_minimum_delta ] = moreargs;


    this._format = '<IfffBBB';
    this._id = mavlink20.MAVLINK_MSG_ID_COLLISION;
    this.order_map = [4, 0, 5, 6, 1, 2, 3];
    this.len_map = [1, 1, 1, 1, 1, 1, 1];
    this.array_len_map = [0, 0, 0, 0, 0, 0, 0];
    this.crc_extra = 81;
    this._name = 'COLLISION';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['src', 'id', 'action', 'threat_level', 'time_to_minimum_delta', 'altitude_minimum_delta', 'horizontal_minimum_delta'];

}

mavlink20.messages.collision.prototype = new mavlink20.message;
mavlink20.messages.collision.prototype.pack = function(mav) {
    var orderedfields = [ this.id, this.time_to_minimum_delta, this.altitude_minimum_delta, this.horizontal_minimum_delta, this.src, this.action, this.threat_level];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink20.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
Message implementing parts of the V2 payload specs in V1 frames for
transitional support.

                target_network            : Network ID (0 for broadcast) (uint8_t)
                target_system             : System ID (0 for broadcast) (uint8_t)
                target_component          : Component ID (0 for broadcast) (uint8_t)
                message_type              : A code that identifies the software component that understands this message (analogous to USB device classes or mime type strings). If this code is less than 32768, it is considered a 'registered' protocol extension and the corresponding entry should be added to https://github.com/mavlink/mavlink/definition_files/extension_message_ids.xml. Software creators can register blocks of message IDs as needed (useful for GCS specific metadata, etc...). Message_types greater than 32767 are considered local experiments and should not be checked in to any widely distributed codebase. (uint16_t)
                payload                   : Variable length payload. The length must be encoded in the payload as part of the message_type protocol, e.g. by including the length as payload data, or by terminating the payload data with a non-zero marker. This is required in order to reconstruct zero-terminated payloads that are (or otherwise would be) trimmed by MAVLink 2 empty-byte truncation. The entire content of the payload block is opaque unless you understand the encoding message_type. The particular encoding used can be extension specific and might not always be documented as part of the MAVLink specification. (uint8_t)

*/
    mavlink20.messages.v2_extension = function( ...moreargs ) {
     [ this.target_network , this.target_system , this.target_component , this.message_type , this.payload ] = moreargs;


    this._format = '<HBBB249s';
    this._id = mavlink20.MAVLINK_MSG_ID_V2_EXTENSION;
    this.order_map = [1, 2, 3, 0, 4];
    this.len_map = [1, 1, 1, 1, 249];
    this.array_len_map = [0, 0, 0, 0, 249];
    this.crc_extra = 8;
    this._name = 'V2_EXTENSION';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['target_network', 'target_system', 'target_component', 'message_type', 'payload'];

}

mavlink20.messages.v2_extension.prototype = new mavlink20.message;
mavlink20.messages.v2_extension.prototype.pack = function(mav) {
    var orderedfields = [ this.message_type, this.target_network, this.target_system, this.target_component, this.payload];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink20.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
Send raw controller memory. The use of this message is discouraged for
normal packets, but a quite efficient way for testing new messages and
getting experimental debug output.

                address                   : Starting address of the debug variables (uint16_t)
                ver                       : Version code of the type variable. 0=unknown, type ignored and assumed int16_t. 1=as below (uint8_t)
                type                      : Type code of the memory variables. for ver = 1: 0=16 x int16_t, 1=16 x uint16_t, 2=16 x Q15, 3=16 x 1Q14 (uint8_t)
                value                     : Memory contents at specified address (int8_t)

*/
    mavlink20.messages.memory_vect = function( ...moreargs ) {
     [ this.address , this.ver , this.type , this.value ] = moreargs;


    this._format = '<HBB32s';
    this._id = mavlink20.MAVLINK_MSG_ID_MEMORY_VECT;
    this.order_map = [0, 1, 2, 3];
    this.len_map = [1, 1, 1, 32];
    this.array_len_map = [0, 0, 0, 32];
    this.crc_extra = 204;
    this._name = 'MEMORY_VECT';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['address', 'ver', 'type', 'value'];

}

mavlink20.messages.memory_vect.prototype = new mavlink20.message;
mavlink20.messages.memory_vect.prototype.pack = function(mav) {
    var orderedfields = [ this.address, this.ver, this.type, this.value];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink20.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
To debug something using a named 3D vector.

                name                      : Name (char)
                time_usec                 : Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude of the number. (uint64_t)
                x                         : x (float)
                y                         : y (float)
                z                         : z (float)

*/
    mavlink20.messages.debug_vect = function( ...moreargs ) {
     [ this.name , this.time_usec , this.x , this.y , this.z ] = moreargs;


    this._format = '<Qfff10s';
    this._id = mavlink20.MAVLINK_MSG_ID_DEBUG_VECT;
    this.order_map = [4, 0, 1, 2, 3];
    this.len_map = [1, 1, 1, 1, 1];
    this.array_len_map = [0, 0, 0, 0, 10];
    this.crc_extra = 49;
    this._name = 'DEBUG_VECT';

    this._instance_field = 'name';
    this._instance_offset = 20;

    this.fieldnames = ['name', 'time_usec', 'x', 'y', 'z'];

}

mavlink20.messages.debug_vect.prototype = new mavlink20.message;
mavlink20.messages.debug_vect.prototype.pack = function(mav) {
    var orderedfields = [ this.time_usec, this.x, this.y, this.z, this.name];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink20.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
Send a key-value pair as float. The use of this message is discouraged
for normal packets, but a quite efficient way for testing new messages
and getting experimental debug output.

                time_boot_ms              : Timestamp (time since system boot). (uint32_t)
                name                      : Name of the debug variable (char)
                value                     : Floating point value (float)

*/
    mavlink20.messages.named_value_float = function( ...moreargs ) {
     [ this.time_boot_ms , this.name , this.value ] = moreargs;


    this._format = '<If10s';
    this._id = mavlink20.MAVLINK_MSG_ID_NAMED_VALUE_FLOAT;
    this.order_map = [0, 2, 1];
    this.len_map = [1, 1, 1];
    this.array_len_map = [0, 0, 10];
    this.crc_extra = 170;
    this._name = 'NAMED_VALUE_FLOAT';

    this._instance_field = 'name';
    this._instance_offset = 8;

    this.fieldnames = ['time_boot_ms', 'name', 'value'];

}

mavlink20.messages.named_value_float.prototype = new mavlink20.message;
mavlink20.messages.named_value_float.prototype.pack = function(mav) {
    var orderedfields = [ this.time_boot_ms, this.value, this.name];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink20.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
Send a key-value pair as integer. The use of this message is
discouraged for normal packets, but a quite efficient way for testing
new messages and getting experimental debug output.

                time_boot_ms              : Timestamp (time since system boot). (uint32_t)
                name                      : Name of the debug variable (char)
                value                     : Signed integer value (int32_t)

*/
    mavlink20.messages.named_value_int = function( ...moreargs ) {
     [ this.time_boot_ms , this.name , this.value ] = moreargs;


    this._format = '<Ii10s';
    this._id = mavlink20.MAVLINK_MSG_ID_NAMED_VALUE_INT;
    this.order_map = [0, 2, 1];
    this.len_map = [1, 1, 1];
    this.array_len_map = [0, 0, 10];
    this.crc_extra = 44;
    this._name = 'NAMED_VALUE_INT';

    this._instance_field = 'name';
    this._instance_offset = 8;

    this.fieldnames = ['time_boot_ms', 'name', 'value'];

}

mavlink20.messages.named_value_int.prototype = new mavlink20.message;
mavlink20.messages.named_value_int.prototype.pack = function(mav) {
    var orderedfields = [ this.time_boot_ms, this.value, this.name];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink20.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
Status text message. These messages are printed in yellow in the COMM
console of QGroundControl. WARNING: They consume quite some bandwidth,
so use only for important status and error messages. If implemented
wisely, these messages are buffered on the MCU and sent only at a
limited rate (e.g. 10 Hz).

                severity                  : Severity of status. Relies on the definitions within RFC-5424. (uint8_t)
                text                      : Status text message, without null termination character (char)
                id                        : Unique (opaque) identifier for this statustext message.  May be used to reassemble a logical long-statustext message from a sequence of chunks.  A value of zero indicates this is the only chunk in the sequence and the message can be emitted immediately. (uint16_t)
                chunk_seq                 : This chunk's sequence number; indexing is from zero.  Any null character in the text field is taken to mean this was the last chunk. (uint8_t)

*/
    mavlink20.messages.statustext = function( ...moreargs ) {
     [ this.severity , this.text , this.id , this.chunk_seq ] = moreargs;


    this._format = '<B50sHB';
    this._id = mavlink20.MAVLINK_MSG_ID_STATUSTEXT;
    this.order_map = [0, 1, 2, 3];
    this.len_map = [1, 1, 1, 1];
    this.array_len_map = [0, 50, 0, 0];
    this.crc_extra = 83;
    this._name = 'STATUSTEXT';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['severity', 'text', 'id', 'chunk_seq'];

}

mavlink20.messages.statustext.prototype = new mavlink20.message;
mavlink20.messages.statustext.prototype.pack = function(mav) {
    var orderedfields = [ this.severity, this.text, this.id, this.chunk_seq];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink20.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
Send a debug value. The index is used to discriminate between values.
These values show up in the plot of QGroundControl as DEBUG N.

                time_boot_ms              : Timestamp (time since system boot). (uint32_t)
                ind                       : index of debug variable (uint8_t)
                value                     : DEBUG value (float)

*/
    mavlink20.messages.debug = function( ...moreargs ) {
     [ this.time_boot_ms , this.ind , this.value ] = moreargs;


    this._format = '<IfB';
    this._id = mavlink20.MAVLINK_MSG_ID_DEBUG;
    this.order_map = [0, 2, 1];
    this.len_map = [1, 1, 1];
    this.array_len_map = [0, 0, 0];
    this.crc_extra = 46;
    this._name = 'DEBUG';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['time_boot_ms', 'ind', 'value'];

}

mavlink20.messages.debug.prototype = new mavlink20.message;
mavlink20.messages.debug.prototype.pack = function(mav) {
    var orderedfields = [ this.time_boot_ms, this.value, this.ind];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink20.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
Setup a MAVLink2 signing key. If called with secret_key of all zero
and zero initial_timestamp will disable signing

                target_system             : system id of the target (uint8_t)
                target_component          : component ID of the target (uint8_t)
                secret_key                : signing key (uint8_t)
                initial_timestamp         : initial timestamp (uint64_t)

*/
    mavlink20.messages.setup_signing = function( ...moreargs ) {
     [ this.target_system , this.target_component , this.secret_key , this.initial_timestamp ] = moreargs;


    this._format = '<QBB32s';
    this._id = mavlink20.MAVLINK_MSG_ID_SETUP_SIGNING;
    this.order_map = [1, 2, 3, 0];
    this.len_map = [1, 1, 1, 32];
    this.array_len_map = [0, 0, 0, 32];
    this.crc_extra = 71;
    this._name = 'SETUP_SIGNING';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['target_system', 'target_component', 'secret_key', 'initial_timestamp'];

}

mavlink20.messages.setup_signing.prototype = new mavlink20.message;
mavlink20.messages.setup_signing.prototype.pack = function(mav) {
    var orderedfields = [ this.initial_timestamp, this.target_system, this.target_component, this.secret_key];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink20.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
Report button state change.

                time_boot_ms              : Timestamp (time since system boot). (uint32_t)
                last_change_ms            : Time of last change of button state. (uint32_t)
                state                     : Bitmap for state of buttons. (uint8_t)

*/
    mavlink20.messages.button_change = function( ...moreargs ) {
     [ this.time_boot_ms , this.last_change_ms , this.state ] = moreargs;


    this._format = '<IIB';
    this._id = mavlink20.MAVLINK_MSG_ID_BUTTON_CHANGE;
    this.order_map = [0, 1, 2];
    this.len_map = [1, 1, 1];
    this.array_len_map = [0, 0, 0];
    this.crc_extra = 131;
    this._name = 'BUTTON_CHANGE';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['time_boot_ms', 'last_change_ms', 'state'];

}

mavlink20.messages.button_change.prototype = new mavlink20.message;
mavlink20.messages.button_change.prototype.pack = function(mav) {
    var orderedfields = [ this.time_boot_ms, this.last_change_ms, this.state];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink20.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
Control vehicle tone generation (buzzer).

                target_system             : System ID (uint8_t)
                target_component          : Component ID (uint8_t)
                tune                      : tune in board specific format (char)
                tune2                     : tune extension (appended to tune) (char)

*/
    mavlink20.messages.play_tune = function( ...moreargs ) {
     [ this.target_system , this.target_component , this.tune , this.tune2 ] = moreargs;


    this._format = '<BB30s200s';
    this._id = mavlink20.MAVLINK_MSG_ID_PLAY_TUNE;
    this.order_map = [0, 1, 2, 3];
    this.len_map = [1, 1, 1, 1];
    this.array_len_map = [0, 0, 30, 200];
    this.crc_extra = 187;
    this._name = 'PLAY_TUNE';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['target_system', 'target_component', 'tune', 'tune2'];

}

mavlink20.messages.play_tune.prototype = new mavlink20.message;
mavlink20.messages.play_tune.prototype.pack = function(mav) {
    var orderedfields = [ this.target_system, this.target_component, this.tune, this.tune2];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink20.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
Information about a camera. Can be requested with a
MAV_CMD_REQUEST_MESSAGE command.

                time_boot_ms              : Timestamp (time since system boot). (uint32_t)
                vendor_name               : Name of the camera vendor (uint8_t)
                model_name                : Name of the camera model (uint8_t)
                firmware_version          : Version of the camera firmware, encoded as: (Dev & 0xff) << 24 | (Patch & 0xff) << 16 | (Minor & 0xff) << 8 | (Major & 0xff). Use 0 if not known. (uint32_t)
                focal_length              : Focal length. Use NaN if not known. (float)
                sensor_size_h             : Image sensor size horizontal. Use NaN if not known. (float)
                sensor_size_v             : Image sensor size vertical. Use NaN if not known. (float)
                resolution_h              : Horizontal image resolution. Use 0 if not known. (uint16_t)
                resolution_v              : Vertical image resolution. Use 0 if not known. (uint16_t)
                lens_id                   : Reserved for a lens ID.  Use 0 if not known. (uint8_t)
                flags                     : Bitmap of camera capability flags. (uint32_t)
                cam_definition_version        : Camera definition version (iteration).  Use 0 if not known. (uint16_t)
                cam_definition_uri        : Camera definition URI (if any, otherwise only basic functions will be available). HTTP- (http://) and MAVLink FTP- (mavlinkftp://) formatted URIs are allowed (and both must be supported by any GCS that implements the Camera Protocol). The definition file may be xz compressed, which will be indicated by the file extension .xml.xz (a GCS that implements the protocol must support decompressing the file). The string needs to be zero terminated.  Use a zero-length string if not known. (char)
                gimbal_device_id          : Gimbal id of a gimbal associated with this camera. This is the component id of the gimbal device, or 1-6 for non mavlink gimbals. Use 0 if no gimbal is associated with the camera. (uint8_t)

*/
    mavlink20.messages.camera_information = function( ...moreargs ) {
     [ this.time_boot_ms , this.vendor_name , this.model_name , this.firmware_version , this.focal_length , this.sensor_size_h , this.sensor_size_v , this.resolution_h , this.resolution_v , this.lens_id , this.flags , this.cam_definition_version , this.cam_definition_uri , this.gimbal_device_id ] = moreargs;


    this._format = '<IIfffIHHH32s32sB140sB';
    this._id = mavlink20.MAVLINK_MSG_ID_CAMERA_INFORMATION;
    this.order_map = [0, 9, 10, 1, 2, 3, 4, 6, 7, 11, 5, 8, 12, 13];
    this.len_map = [1, 1, 1, 1, 1, 1, 1, 1, 1, 32, 32, 1, 1, 1];
    this.array_len_map = [0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 32, 0, 140, 0];
    this.crc_extra = 92;
    this._name = 'CAMERA_INFORMATION';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['time_boot_ms', 'vendor_name', 'model_name', 'firmware_version', 'focal_length', 'sensor_size_h', 'sensor_size_v', 'resolution_h', 'resolution_v', 'lens_id', 'flags', 'cam_definition_version', 'cam_definition_uri', 'gimbal_device_id'];

}

mavlink20.messages.camera_information.prototype = new mavlink20.message;
mavlink20.messages.camera_information.prototype.pack = function(mav) {
    var orderedfields = [ this.time_boot_ms, this.firmware_version, this.focal_length, this.sensor_size_h, this.sensor_size_v, this.flags, this.resolution_h, this.resolution_v, this.cam_definition_version, this.vendor_name, this.model_name, this.lens_id, this.cam_definition_uri, this.gimbal_device_id];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink20.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
Settings of a camera. Can be requested with a MAV_CMD_REQUEST_MESSAGE
command.

                time_boot_ms              : Timestamp (time since system boot). (uint32_t)
                mode_id                   : Camera mode (uint8_t)
                zoomLevel                 : Current zoom level as a percentage of the full range (0.0 to 100.0, NaN if not known) (float)
                focusLevel                : Current focus level as a percentage of the full range (0.0 to 100.0, NaN if not known) (float)

*/
    mavlink20.messages.camera_settings = function( ...moreargs ) {
     [ this.time_boot_ms , this.mode_id , this.zoomLevel , this.focusLevel ] = moreargs;


    this._format = '<IBff';
    this._id = mavlink20.MAVLINK_MSG_ID_CAMERA_SETTINGS;
    this.order_map = [0, 1, 2, 3];
    this.len_map = [1, 1, 1, 1];
    this.array_len_map = [0, 0, 0, 0];
    this.crc_extra = 146;
    this._name = 'CAMERA_SETTINGS';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['time_boot_ms', 'mode_id', 'zoomLevel', 'focusLevel'];

}

mavlink20.messages.camera_settings.prototype = new mavlink20.message;
mavlink20.messages.camera_settings.prototype.pack = function(mav) {
    var orderedfields = [ this.time_boot_ms, this.mode_id, this.zoomLevel, this.focusLevel];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink20.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
Information about a storage medium. This message is sent in response
to a request with MAV_CMD_REQUEST_MESSAGE and whenever the status of
the storage changes (STORAGE_STATUS). Use
MAV_CMD_REQUEST_MESSAGE.param2 to indicate the index/id of requested
storage: 0 for all, 1 for first, 2 for second, etc.

                time_boot_ms              : Timestamp (time since system boot). (uint32_t)
                storage_id                : Storage ID (1 for first, 2 for second, etc.) (uint8_t)
                storage_count             : Number of storage devices (uint8_t)
                status                    : Status of storage (uint8_t)
                total_capacity            : Total capacity. If storage is not ready (STORAGE_STATUS_READY) value will be ignored. (float)
                used_capacity             : Used capacity. If storage is not ready (STORAGE_STATUS_READY) value will be ignored. (float)
                available_capacity        : Available storage capacity. If storage is not ready (STORAGE_STATUS_READY) value will be ignored. (float)
                read_speed                : Read speed. (float)
                write_speed               : Write speed. (float)
                type                      : Type of storage (uint8_t)
                name                      : Textual storage name to be used in UI (microSD 1, Internal Memory, etc.) This is a NULL terminated string. If it is exactly 32 characters long, add a terminating NULL. If this string is empty, the generic type is shown to the user. (char)

*/
    mavlink20.messages.storage_information = function( ...moreargs ) {
     [ this.time_boot_ms , this.storage_id , this.storage_count , this.status , this.total_capacity , this.used_capacity , this.available_capacity , this.read_speed , this.write_speed , this.type , this.name ] = moreargs;


    this._format = '<IfffffBBBB32s';
    this._id = mavlink20.MAVLINK_MSG_ID_STORAGE_INFORMATION;
    this.order_map = [0, 6, 7, 8, 1, 2, 3, 4, 5, 9, 10];
    this.len_map = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1];
    this.array_len_map = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32];
    this.crc_extra = 179;
    this._name = 'STORAGE_INFORMATION';

    this._instance_field = 'storage_id';
    this._instance_offset = 24;

    this.fieldnames = ['time_boot_ms', 'storage_id', 'storage_count', 'status', 'total_capacity', 'used_capacity', 'available_capacity', 'read_speed', 'write_speed', 'type', 'name'];

}

mavlink20.messages.storage_information.prototype = new mavlink20.message;
mavlink20.messages.storage_information.prototype.pack = function(mav) {
    var orderedfields = [ this.time_boot_ms, this.total_capacity, this.used_capacity, this.available_capacity, this.read_speed, this.write_speed, this.storage_id, this.storage_count, this.status, this.type, this.name];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink20.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
Information about the status of a capture. Can be requested with a
MAV_CMD_REQUEST_MESSAGE command.

                time_boot_ms              : Timestamp (time since system boot). (uint32_t)
                image_status              : Current status of image capturing (0: idle, 1: capture in progress, 2: interval set but idle, 3: interval set and capture in progress) (uint8_t)
                video_status              : Current status of video capturing (0: idle, 1: capture in progress) (uint8_t)
                image_interval            : Image capture interval (float)
                recording_time_ms         : Time since recording started (uint32_t)
                available_capacity        : Available storage capacity. (float)
                image_count               : Total number of images captured ('forever', or until reset using MAV_CMD_STORAGE_FORMAT). (int32_t)

*/
    mavlink20.messages.camera_capture_status = function( ...moreargs ) {
     [ this.time_boot_ms , this.image_status , this.video_status , this.image_interval , this.recording_time_ms , this.available_capacity , this.image_count ] = moreargs;


    this._format = '<IfIfBBi';
    this._id = mavlink20.MAVLINK_MSG_ID_CAMERA_CAPTURE_STATUS;
    this.order_map = [0, 4, 5, 1, 2, 3, 6];
    this.len_map = [1, 1, 1, 1, 1, 1, 1];
    this.array_len_map = [0, 0, 0, 0, 0, 0, 0];
    this.crc_extra = 12;
    this._name = 'CAMERA_CAPTURE_STATUS';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['time_boot_ms', 'image_status', 'video_status', 'image_interval', 'recording_time_ms', 'available_capacity', 'image_count'];

}

mavlink20.messages.camera_capture_status.prototype = new mavlink20.message;
mavlink20.messages.camera_capture_status.prototype.pack = function(mav) {
    var orderedfields = [ this.time_boot_ms, this.image_interval, this.recording_time_ms, this.available_capacity, this.image_status, this.video_status, this.image_count];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink20.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
Information about a captured image. This is emitted every time a
message is captured. It may be re-requested using
MAV_CMD_REQUEST_MESSAGE, using param2 to indicate the sequence number
for the missing image.

                time_boot_ms              : Timestamp (time since system boot). (uint32_t)
                time_utc                  : Timestamp (time since UNIX epoch) in UTC. 0 for unknown. (uint64_t)
                camera_id                 : Deprecated/unused. Component IDs are used to differentiate multiple cameras. (uint8_t)
                lat                       : Latitude where image was taken (int32_t)
                lon                       : Longitude where capture was taken (int32_t)
                alt                       : Altitude (MSL) where image was taken (int32_t)
                relative_alt              : Altitude above ground (int32_t)
                q                         : Quaternion of camera orientation (w, x, y, z order, zero-rotation is 1, 0, 0, 0) (float)
                image_index               : Zero based index of this image (i.e. a new image will have index CAMERA_CAPTURE_STATUS.image count -1) (int32_t)
                capture_result            : Boolean indicating success (1) or failure (0) while capturing this image. (int8_t)
                file_url                  : URL of image taken. Either local storage or http://foo.jpg if camera provides an HTTP interface. (char)

*/
    mavlink20.messages.camera_image_captured = function( ...moreargs ) {
     [ this.time_boot_ms , this.time_utc , this.camera_id , this.lat , this.lon , this.alt , this.relative_alt , this.q , this.image_index , this.capture_result , this.file_url ] = moreargs;


    this._format = '<QIiiii4fiBb205s';
    this._id = mavlink20.MAVLINK_MSG_ID_CAMERA_IMAGE_CAPTURED;
    this.order_map = [1, 0, 8, 2, 3, 4, 5, 6, 7, 9, 10];
    this.len_map = [1, 1, 1, 1, 1, 1, 4, 1, 1, 1, 1];
    this.array_len_map = [0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 205];
    this.crc_extra = 133;
    this._name = 'CAMERA_IMAGE_CAPTURED';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['time_boot_ms', 'time_utc', 'camera_id', 'lat', 'lon', 'alt', 'relative_alt', 'q', 'image_index', 'capture_result', 'file_url'];

}

mavlink20.messages.camera_image_captured.prototype = new mavlink20.message;
mavlink20.messages.camera_image_captured.prototype.pack = function(mav) {
    var orderedfields = [ this.time_utc, this.time_boot_ms, this.lat, this.lon, this.alt, this.relative_alt, this.q, this.image_index, this.camera_id, this.capture_result, this.file_url];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink20.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
Information about flight since last arming.

                time_boot_ms              : Timestamp (time since system boot). (uint32_t)
                arming_time_utc           : Timestamp at arming (time since UNIX epoch) in UTC, 0 for unknown (uint64_t)
                takeoff_time_utc          : Timestamp at takeoff (time since UNIX epoch) in UTC, 0 for unknown (uint64_t)
                flight_uuid               : Universally unique identifier (UUID) of flight, should correspond to name of log files (uint64_t)

*/
    mavlink20.messages.flight_information = function( ...moreargs ) {
     [ this.time_boot_ms , this.arming_time_utc , this.takeoff_time_utc , this.flight_uuid ] = moreargs;


    this._format = '<QQQI';
    this._id = mavlink20.MAVLINK_MSG_ID_FLIGHT_INFORMATION;
    this.order_map = [3, 0, 1, 2];
    this.len_map = [1, 1, 1, 1];
    this.array_len_map = [0, 0, 0, 0];
    this.crc_extra = 49;
    this._name = 'FLIGHT_INFORMATION';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['time_boot_ms', 'arming_time_utc', 'takeoff_time_utc', 'flight_uuid'];

}

mavlink20.messages.flight_information.prototype = new mavlink20.message;
mavlink20.messages.flight_information.prototype.pack = function(mav) {
    var orderedfields = [ this.arming_time_utc, this.takeoff_time_utc, this.flight_uuid, this.time_boot_ms];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink20.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
Orientation of a mount

                time_boot_ms              : Timestamp (time since system boot). (uint32_t)
                roll                      : Roll in global frame (set to NaN for invalid). (float)
                pitch                     : Pitch in global frame (set to NaN for invalid). (float)
                yaw                       : Yaw relative to vehicle (set to NaN for invalid). (float)
                yaw_absolute              : Yaw in absolute frame relative to Earth's North, north is 0 (set to NaN for invalid). (float)

*/
    mavlink20.messages.mount_orientation = function( ...moreargs ) {
     [ this.time_boot_ms , this.roll , this.pitch , this.yaw , this.yaw_absolute ] = moreargs;


    this._format = '<Iffff';
    this._id = mavlink20.MAVLINK_MSG_ID_MOUNT_ORIENTATION;
    this.order_map = [0, 1, 2, 3, 4];
    this.len_map = [1, 1, 1, 1, 1];
    this.array_len_map = [0, 0, 0, 0, 0];
    this.crc_extra = 26;
    this._name = 'MOUNT_ORIENTATION';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['time_boot_ms', 'roll', 'pitch', 'yaw', 'yaw_absolute'];

}

mavlink20.messages.mount_orientation.prototype = new mavlink20.message;
mavlink20.messages.mount_orientation.prototype.pack = function(mav) {
    var orderedfields = [ this.time_boot_ms, this.roll, this.pitch, this.yaw, this.yaw_absolute];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink20.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
A message containing logged data (see also MAV_CMD_LOGGING_START)

                target_system             : system ID of the target (uint8_t)
                target_component          : component ID of the target (uint8_t)
                sequence                  : sequence number (can wrap) (uint16_t)
                length                    : data length (uint8_t)
                first_message_offset        : offset into data where first message starts. This can be used for recovery, when a previous message got lost (set to 255 if no start exists). (uint8_t)
                data                      : logged data (uint8_t)

*/
    mavlink20.messages.logging_data = function( ...moreargs ) {
     [ this.target_system , this.target_component , this.sequence , this.length , this.first_message_offset , this.data ] = moreargs;


    this._format = '<HBBBB249s';
    this._id = mavlink20.MAVLINK_MSG_ID_LOGGING_DATA;
    this.order_map = [1, 2, 0, 3, 4, 5];
    this.len_map = [1, 1, 1, 1, 1, 249];
    this.array_len_map = [0, 0, 0, 0, 0, 249];
    this.crc_extra = 193;
    this._name = 'LOGGING_DATA';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['target_system', 'target_component', 'sequence', 'length', 'first_message_offset', 'data'];

}

mavlink20.messages.logging_data.prototype = new mavlink20.message;
mavlink20.messages.logging_data.prototype.pack = function(mav) {
    var orderedfields = [ this.sequence, this.target_system, this.target_component, this.length, this.first_message_offset, this.data];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink20.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
A message containing logged data which requires a LOGGING_ACK to be
sent back

                target_system             : system ID of the target (uint8_t)
                target_component          : component ID of the target (uint8_t)
                sequence                  : sequence number (can wrap) (uint16_t)
                length                    : data length (uint8_t)
                first_message_offset        : offset into data where first message starts. This can be used for recovery, when a previous message got lost (set to 255 if no start exists). (uint8_t)
                data                      : logged data (uint8_t)

*/
    mavlink20.messages.logging_data_acked = function( ...moreargs ) {
     [ this.target_system , this.target_component , this.sequence , this.length , this.first_message_offset , this.data ] = moreargs;


    this._format = '<HBBBB249s';
    this._id = mavlink20.MAVLINK_MSG_ID_LOGGING_DATA_ACKED;
    this.order_map = [1, 2, 0, 3, 4, 5];
    this.len_map = [1, 1, 1, 1, 1, 249];
    this.array_len_map = [0, 0, 0, 0, 0, 249];
    this.crc_extra = 35;
    this._name = 'LOGGING_DATA_ACKED';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['target_system', 'target_component', 'sequence', 'length', 'first_message_offset', 'data'];

}

mavlink20.messages.logging_data_acked.prototype = new mavlink20.message;
mavlink20.messages.logging_data_acked.prototype.pack = function(mav) {
    var orderedfields = [ this.sequence, this.target_system, this.target_component, this.length, this.first_message_offset, this.data];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink20.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
An ack for a LOGGING_DATA_ACKED message

                target_system             : system ID of the target (uint8_t)
                target_component          : component ID of the target (uint8_t)
                sequence                  : sequence number (must match the one in LOGGING_DATA_ACKED) (uint16_t)

*/
    mavlink20.messages.logging_ack = function( ...moreargs ) {
     [ this.target_system , this.target_component , this.sequence ] = moreargs;


    this._format = '<HBB';
    this._id = mavlink20.MAVLINK_MSG_ID_LOGGING_ACK;
    this.order_map = [1, 2, 0];
    this.len_map = [1, 1, 1];
    this.array_len_map = [0, 0, 0];
    this.crc_extra = 14;
    this._name = 'LOGGING_ACK';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['target_system', 'target_component', 'sequence'];

}

mavlink20.messages.logging_ack.prototype = new mavlink20.message;
mavlink20.messages.logging_ack.prototype.pack = function(mav) {
    var orderedfields = [ this.sequence, this.target_system, this.target_component];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink20.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
Information about video stream. It may be requested using
MAV_CMD_REQUEST_MESSAGE, where param2 indicates the video stream id: 0
for all streams, 1 for first, 2 for second, etc.

                stream_id                 : Video Stream ID (1 for first, 2 for second, etc.) (uint8_t)
                count                     : Number of streams available. (uint8_t)
                type                      : Type of stream. (uint8_t)
                flags                     : Bitmap of stream status flags. (uint16_t)
                framerate                 : Frame rate. (float)
                resolution_h              : Horizontal resolution. (uint16_t)
                resolution_v              : Vertical resolution. (uint16_t)
                bitrate                   : Bit rate. (uint32_t)
                rotation                  : Video image rotation clockwise. (uint16_t)
                hfov                      : Horizontal Field of view. (uint16_t)
                name                      : Stream name. (char)
                uri                       : Video stream URI (TCP or RTSP URI ground station should connect to) or port number (UDP port ground station should listen to). (char)

*/
    mavlink20.messages.video_stream_information = function( ...moreargs ) {
     [ this.stream_id , this.count , this.type , this.flags , this.framerate , this.resolution_h , this.resolution_v , this.bitrate , this.rotation , this.hfov , this.name , this.uri ] = moreargs;


    this._format = '<fIHHHHHBBB32s160s';
    this._id = mavlink20.MAVLINK_MSG_ID_VIDEO_STREAM_INFORMATION;
    this.order_map = [7, 8, 9, 2, 0, 3, 4, 1, 5, 6, 10, 11];
    this.len_map = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1];
    this.array_len_map = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 160];
    this.crc_extra = 109;
    this._name = 'VIDEO_STREAM_INFORMATION';

    this._instance_field = 'stream_id';
    this._instance_offset = 18;

    this.fieldnames = ['stream_id', 'count', 'type', 'flags', 'framerate', 'resolution_h', 'resolution_v', 'bitrate', 'rotation', 'hfov', 'name', 'uri'];

}

mavlink20.messages.video_stream_information.prototype = new mavlink20.message;
mavlink20.messages.video_stream_information.prototype.pack = function(mav) {
    var orderedfields = [ this.framerate, this.bitrate, this.flags, this.resolution_h, this.resolution_v, this.rotation, this.hfov, this.stream_id, this.count, this.type, this.name, this.uri];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink20.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
Information about the status of a video stream. It may be requested
using MAV_CMD_REQUEST_MESSAGE.

                stream_id                 : Video Stream ID (1 for first, 2 for second, etc.) (uint8_t)
                flags                     : Bitmap of stream status flags (uint16_t)
                framerate                 : Frame rate (float)
                resolution_h              : Horizontal resolution (uint16_t)
                resolution_v              : Vertical resolution (uint16_t)
                bitrate                   : Bit rate (uint32_t)
                rotation                  : Video image rotation clockwise (uint16_t)
                hfov                      : Horizontal Field of view (uint16_t)

*/
    mavlink20.messages.video_stream_status = function( ...moreargs ) {
     [ this.stream_id , this.flags , this.framerate , this.resolution_h , this.resolution_v , this.bitrate , this.rotation , this.hfov ] = moreargs;


    this._format = '<fIHHHHHB';
    this._id = mavlink20.MAVLINK_MSG_ID_VIDEO_STREAM_STATUS;
    this.order_map = [7, 2, 0, 3, 4, 1, 5, 6];
    this.len_map = [1, 1, 1, 1, 1, 1, 1, 1];
    this.array_len_map = [0, 0, 0, 0, 0, 0, 0, 0];
    this.crc_extra = 59;
    this._name = 'VIDEO_STREAM_STATUS';

    this._instance_field = 'stream_id';
    this._instance_offset = 18;

    this.fieldnames = ['stream_id', 'flags', 'framerate', 'resolution_h', 'resolution_v', 'bitrate', 'rotation', 'hfov'];

}

mavlink20.messages.video_stream_status.prototype = new mavlink20.message;
mavlink20.messages.video_stream_status.prototype.pack = function(mav) {
    var orderedfields = [ this.framerate, this.bitrate, this.flags, this.resolution_h, this.resolution_v, this.rotation, this.hfov, this.stream_id];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink20.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
Information about the field of view of a camera. Can be requested with
a MAV_CMD_REQUEST_MESSAGE command.

                time_boot_ms              : Timestamp (time since system boot). (uint32_t)
                lat_camera                : Latitude of camera (INT32_MAX if unknown). (int32_t)
                lon_camera                : Longitude of camera (INT32_MAX if unknown). (int32_t)
                alt_camera                : Altitude (MSL) of camera (INT32_MAX if unknown). (int32_t)
                lat_image                 : Latitude of center of image (INT32_MAX if unknown, INT32_MIN if at infinity, not intersecting with horizon). (int32_t)
                lon_image                 : Longitude of center of image (INT32_MAX if unknown, INT32_MIN if at infinity, not intersecting with horizon). (int32_t)
                alt_image                 : Altitude (MSL) of center of image (INT32_MAX if unknown, INT32_MIN if at infinity, not intersecting with horizon). (int32_t)
                q                         : Quaternion of camera orientation (w, x, y, z order, zero-rotation is 1, 0, 0, 0) (float)
                hfov                      : Horizontal field of view (NaN if unknown). (float)
                vfov                      : Vertical field of view (NaN if unknown). (float)

*/
    mavlink20.messages.camera_fov_status = function( ...moreargs ) {
     [ this.time_boot_ms , this.lat_camera , this.lon_camera , this.alt_camera , this.lat_image , this.lon_image , this.alt_image , this.q , this.hfov , this.vfov ] = moreargs;


    this._format = '<Iiiiiii4fff';
    this._id = mavlink20.MAVLINK_MSG_ID_CAMERA_FOV_STATUS;
    this.order_map = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9];
    this.len_map = [1, 1, 1, 1, 1, 1, 1, 4, 1, 1];
    this.array_len_map = [0, 0, 0, 0, 0, 0, 0, 4, 0, 0];
    this.crc_extra = 22;
    this._name = 'CAMERA_FOV_STATUS';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['time_boot_ms', 'lat_camera', 'lon_camera', 'alt_camera', 'lat_image', 'lon_image', 'alt_image', 'q', 'hfov', 'vfov'];

}

mavlink20.messages.camera_fov_status.prototype = new mavlink20.message;
mavlink20.messages.camera_fov_status.prototype.pack = function(mav) {
    var orderedfields = [ this.time_boot_ms, this.lat_camera, this.lon_camera, this.alt_camera, this.lat_image, this.lon_image, this.alt_image, this.q, this.hfov, this.vfov];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink20.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
Camera tracking status, sent while in active tracking. Use
MAV_CMD_SET_MESSAGE_INTERVAL to define message interval.

                tracking_status           : Current tracking status (uint8_t)
                tracking_mode             : Current tracking mode (uint8_t)
                target_data               : Defines location of target data (uint8_t)
                point_x                   : Current tracked point x value if CAMERA_TRACKING_MODE_POINT (normalized 0..1, 0 is left, 1 is right), NAN if unknown (float)
                point_y                   : Current tracked point y value if CAMERA_TRACKING_MODE_POINT (normalized 0..1, 0 is top, 1 is bottom), NAN if unknown (float)
                radius                    : Current tracked radius if CAMERA_TRACKING_MODE_POINT (normalized 0..1, 0 is image left, 1 is image right), NAN if unknown (float)
                rec_top_x                 : Current tracked rectangle top x value if CAMERA_TRACKING_MODE_RECTANGLE (normalized 0..1, 0 is left, 1 is right), NAN if unknown (float)
                rec_top_y                 : Current tracked rectangle top y value if CAMERA_TRACKING_MODE_RECTANGLE (normalized 0..1, 0 is top, 1 is bottom), NAN if unknown (float)
                rec_bottom_x              : Current tracked rectangle bottom x value if CAMERA_TRACKING_MODE_RECTANGLE (normalized 0..1, 0 is left, 1 is right), NAN if unknown (float)
                rec_bottom_y              : Current tracked rectangle bottom y value if CAMERA_TRACKING_MODE_RECTANGLE (normalized 0..1, 0 is top, 1 is bottom), NAN if unknown (float)

*/
    mavlink20.messages.camera_tracking_image_status = function( ...moreargs ) {
     [ this.tracking_status , this.tracking_mode , this.target_data , this.point_x , this.point_y , this.radius , this.rec_top_x , this.rec_top_y , this.rec_bottom_x , this.rec_bottom_y ] = moreargs;


    this._format = '<fffffffBBB';
    this._id = mavlink20.MAVLINK_MSG_ID_CAMERA_TRACKING_IMAGE_STATUS;
    this.order_map = [7, 8, 9, 0, 1, 2, 3, 4, 5, 6];
    this.len_map = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1];
    this.array_len_map = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
    this.crc_extra = 126;
    this._name = 'CAMERA_TRACKING_IMAGE_STATUS';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['tracking_status', 'tracking_mode', 'target_data', 'point_x', 'point_y', 'radius', 'rec_top_x', 'rec_top_y', 'rec_bottom_x', 'rec_bottom_y'];

}

mavlink20.messages.camera_tracking_image_status.prototype = new mavlink20.message;
mavlink20.messages.camera_tracking_image_status.prototype.pack = function(mav) {
    var orderedfields = [ this.point_x, this.point_y, this.radius, this.rec_top_x, this.rec_top_y, this.rec_bottom_x, this.rec_bottom_y, this.tracking_status, this.tracking_mode, this.target_data];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink20.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
Camera tracking status, sent while in active tracking. Use
MAV_CMD_SET_MESSAGE_INTERVAL to define message interval.

                tracking_status           : Current tracking status (uint8_t)
                lat                       : Latitude of tracked object (int32_t)
                lon                       : Longitude of tracked object (int32_t)
                alt                       : Altitude of tracked object(AMSL, WGS84) (float)
                h_acc                     : Horizontal accuracy. NAN if unknown (float)
                v_acc                     : Vertical accuracy. NAN if unknown (float)
                vel_n                     : North velocity of tracked object. NAN if unknown (float)
                vel_e                     : East velocity of tracked object. NAN if unknown (float)
                vel_d                     : Down velocity of tracked object. NAN if unknown (float)
                vel_acc                   : Velocity accuracy. NAN if unknown (float)
                dist                      : Distance between camera and tracked object. NAN if unknown (float)
                hdg                       : Heading in radians, in NED. NAN if unknown (float)
                hdg_acc                   : Accuracy of heading, in NED. NAN if unknown (float)

*/
    mavlink20.messages.camera_tracking_geo_status = function( ...moreargs ) {
     [ this.tracking_status , this.lat , this.lon , this.alt , this.h_acc , this.v_acc , this.vel_n , this.vel_e , this.vel_d , this.vel_acc , this.dist , this.hdg , this.hdg_acc ] = moreargs;


    this._format = '<iiffffffffffB';
    this._id = mavlink20.MAVLINK_MSG_ID_CAMERA_TRACKING_GEO_STATUS;
    this.order_map = [12, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11];
    this.len_map = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1];
    this.array_len_map = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
    this.crc_extra = 18;
    this._name = 'CAMERA_TRACKING_GEO_STATUS';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['tracking_status', 'lat', 'lon', 'alt', 'h_acc', 'v_acc', 'vel_n', 'vel_e', 'vel_d', 'vel_acc', 'dist', 'hdg', 'hdg_acc'];

}

mavlink20.messages.camera_tracking_geo_status.prototype = new mavlink20.message;
mavlink20.messages.camera_tracking_geo_status.prototype.pack = function(mav) {
    var orderedfields = [ this.lat, this.lon, this.alt, this.h_acc, this.v_acc, this.vel_n, this.vel_e, this.vel_d, this.vel_acc, this.dist, this.hdg, this.hdg_acc, this.tracking_status];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink20.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
Information about a high level gimbal manager. This message should be
requested by a ground station using MAV_CMD_REQUEST_MESSAGE.

                time_boot_ms              : Timestamp (time since system boot). (uint32_t)
                cap_flags                 : Bitmap of gimbal capability flags. (uint32_t)
                gimbal_device_id          : Gimbal device ID that this gimbal manager is responsible for. Component ID of gimbal device (or 1-6 for non-MAVLink gimbal). (uint8_t)
                roll_min                  : Minimum hardware roll angle (positive: rolling to the right, negative: rolling to the left) (float)
                roll_max                  : Maximum hardware roll angle (positive: rolling to the right, negative: rolling to the left) (float)
                pitch_min                 : Minimum pitch angle (positive: up, negative: down) (float)
                pitch_max                 : Maximum pitch angle (positive: up, negative: down) (float)
                yaw_min                   : Minimum yaw angle (positive: to the right, negative: to the left) (float)
                yaw_max                   : Maximum yaw angle (positive: to the right, negative: to the left) (float)

*/
    mavlink20.messages.gimbal_manager_information = function( ...moreargs ) {
     [ this.time_boot_ms , this.cap_flags , this.gimbal_device_id , this.roll_min , this.roll_max , this.pitch_min , this.pitch_max , this.yaw_min , this.yaw_max ] = moreargs;


    this._format = '<IIffffffB';
    this._id = mavlink20.MAVLINK_MSG_ID_GIMBAL_MANAGER_INFORMATION;
    this.order_map = [0, 1, 8, 2, 3, 4, 5, 6, 7];
    this.len_map = [1, 1, 1, 1, 1, 1, 1, 1, 1];
    this.array_len_map = [0, 0, 0, 0, 0, 0, 0, 0, 0];
    this.crc_extra = 70;
    this._name = 'GIMBAL_MANAGER_INFORMATION';

    this._instance_field = 'gimbal_device_id';
    this._instance_offset = 32;

    this.fieldnames = ['time_boot_ms', 'cap_flags', 'gimbal_device_id', 'roll_min', 'roll_max', 'pitch_min', 'pitch_max', 'yaw_min', 'yaw_max'];

}

mavlink20.messages.gimbal_manager_information.prototype = new mavlink20.message;
mavlink20.messages.gimbal_manager_information.prototype.pack = function(mav) {
    var orderedfields = [ this.time_boot_ms, this.cap_flags, this.roll_min, this.roll_max, this.pitch_min, this.pitch_max, this.yaw_min, this.yaw_max, this.gimbal_device_id];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink20.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
Current status about a high level gimbal manager. This message should
be broadcast at a low regular rate (e.g. 5Hz).

                time_boot_ms              : Timestamp (time since system boot). (uint32_t)
                flags                     : High level gimbal manager flags currently applied. (uint32_t)
                gimbal_device_id          : Gimbal device ID that this gimbal manager is responsible for. Component ID of gimbal device (or 1-6 for non-MAVLink gimbal). (uint8_t)
                primary_control_sysid        : System ID of MAVLink component with primary control, 0 for none. (uint8_t)
                primary_control_compid        : Component ID of MAVLink component with primary control, 0 for none. (uint8_t)
                secondary_control_sysid        : System ID of MAVLink component with secondary control, 0 for none. (uint8_t)
                secondary_control_compid        : Component ID of MAVLink component with secondary control, 0 for none. (uint8_t)

*/
    mavlink20.messages.gimbal_manager_status = function( ...moreargs ) {
     [ this.time_boot_ms , this.flags , this.gimbal_device_id , this.primary_control_sysid , this.primary_control_compid , this.secondary_control_sysid , this.secondary_control_compid ] = moreargs;


    this._format = '<IIBBBBB';
    this._id = mavlink20.MAVLINK_MSG_ID_GIMBAL_MANAGER_STATUS;
    this.order_map = [0, 1, 2, 3, 4, 5, 6];
    this.len_map = [1, 1, 1, 1, 1, 1, 1];
    this.array_len_map = [0, 0, 0, 0, 0, 0, 0];
    this.crc_extra = 48;
    this._name = 'GIMBAL_MANAGER_STATUS';

    this._instance_field = 'gimbal_device_id';
    this._instance_offset = 8;

    this.fieldnames = ['time_boot_ms', 'flags', 'gimbal_device_id', 'primary_control_sysid', 'primary_control_compid', 'secondary_control_sysid', 'secondary_control_compid'];

}

mavlink20.messages.gimbal_manager_status.prototype = new mavlink20.message;
mavlink20.messages.gimbal_manager_status.prototype.pack = function(mav) {
    var orderedfields = [ this.time_boot_ms, this.flags, this.gimbal_device_id, this.primary_control_sysid, this.primary_control_compid, this.secondary_control_sysid, this.secondary_control_compid];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink20.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
High level message to control a gimbal's attitude. This message is to
be sent to the gimbal manager (e.g. from a ground station). Angles and
rates can be set to NaN according to use case.

                target_system             : System ID (uint8_t)
                target_component          : Component ID (uint8_t)
                flags                     : High level gimbal manager flags to use. (uint32_t)
                gimbal_device_id          : Component ID of gimbal device to address (or 1-6 for non-MAVLink gimbal), 0 for all gimbal device components. Send command multiple times for more than one gimbal (but not all gimbals). (uint8_t)
                q                         : Quaternion components, w, x, y, z (1 0 0 0 is the null-rotation, the frame is depends on whether the flag GIMBAL_MANAGER_FLAGS_YAW_LOCK is set) (float)
                angular_velocity_x        : X component of angular velocity, positive is rolling to the right, NaN to be ignored. (float)
                angular_velocity_y        : Y component of angular velocity, positive is pitching up, NaN to be ignored. (float)
                angular_velocity_z        : Z component of angular velocity, positive is yawing to the right, NaN to be ignored. (float)

*/
    mavlink20.messages.gimbal_manager_set_attitude = function( ...moreargs ) {
     [ this.target_system , this.target_component , this.flags , this.gimbal_device_id , this.q , this.angular_velocity_x , this.angular_velocity_y , this.angular_velocity_z ] = moreargs;


    this._format = '<I4ffffBBB';
    this._id = mavlink20.MAVLINK_MSG_ID_GIMBAL_MANAGER_SET_ATTITUDE;
    this.order_map = [5, 6, 0, 7, 1, 2, 3, 4];
    this.len_map = [1, 4, 1, 1, 1, 1, 1, 1];
    this.array_len_map = [0, 4, 0, 0, 0, 0, 0, 0];
    this.crc_extra = 123;
    this._name = 'GIMBAL_MANAGER_SET_ATTITUDE';

    this._instance_field = 'gimbal_device_id';
    this._instance_offset = 34;

    this.fieldnames = ['target_system', 'target_component', 'flags', 'gimbal_device_id', 'q', 'angular_velocity_x', 'angular_velocity_y', 'angular_velocity_z'];

}

mavlink20.messages.gimbal_manager_set_attitude.prototype = new mavlink20.message;
mavlink20.messages.gimbal_manager_set_attitude.prototype.pack = function(mav) {
    var orderedfields = [ this.flags, this.q, this.angular_velocity_x, this.angular_velocity_y, this.angular_velocity_z, this.target_system, this.target_component, this.gimbal_device_id];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink20.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
Information about a low level gimbal. This message should be requested
by the gimbal manager or a ground station using
MAV_CMD_REQUEST_MESSAGE. The maximum angles and rates are the limits
by hardware. However, the limits by software used are likely
different/smaller and dependent on mode/settings/etc..

                time_boot_ms              : Timestamp (time since system boot). (uint32_t)
                vendor_name               : Name of the gimbal vendor. (char)
                model_name                : Name of the gimbal model. (char)
                custom_name               : Custom name of the gimbal given to it by the user. (char)
                firmware_version          : Version of the gimbal firmware, encoded as: (Dev & 0xff) << 24 | (Patch & 0xff) << 16 | (Minor & 0xff) << 8 | (Major & 0xff). (uint32_t)
                hardware_version          : Version of the gimbal hardware, encoded as: (Dev & 0xff) << 24 | (Patch & 0xff) << 16 | (Minor & 0xff) << 8 | (Major & 0xff). (uint32_t)
                uid                       : UID of gimbal hardware (0 if unknown). (uint64_t)
                cap_flags                 : Bitmap of gimbal capability flags. (uint16_t)
                custom_cap_flags          : Bitmap for use for gimbal-specific capability flags. (uint16_t)
                roll_min                  : Minimum hardware roll angle (positive: rolling to the right, negative: rolling to the left). NAN if unknown. (float)
                roll_max                  : Maximum hardware roll angle (positive: rolling to the right, negative: rolling to the left). NAN if unknown. (float)
                pitch_min                 : Minimum hardware pitch angle (positive: up, negative: down). NAN if unknown. (float)
                pitch_max                 : Maximum hardware pitch angle (positive: up, negative: down). NAN if unknown. (float)
                yaw_min                   : Minimum hardware yaw angle (positive: to the right, negative: to the left). NAN if unknown. (float)
                yaw_max                   : Maximum hardware yaw angle (positive: to the right, negative: to the left). NAN if unknown. (float)
                gimbal_device_id          : This field is to be used if the gimbal manager and the gimbal device are the same component and hence have the same component ID. This field is then set to a number between 1-6. If the component ID is separate, this field is not required and must be set to 0. (uint8_t)

*/
    mavlink20.messages.gimbal_device_information = function( ...moreargs ) {
     [ this.time_boot_ms , this.vendor_name , this.model_name , this.custom_name , this.firmware_version , this.hardware_version , this.uid , this.cap_flags , this.custom_cap_flags , this.roll_min , this.roll_max , this.pitch_min , this.pitch_max , this.yaw_min , this.yaw_max , this.gimbal_device_id ] = moreargs;


    this._format = '<QIIIffffffHH32s32s32sB';
    this._id = mavlink20.MAVLINK_MSG_ID_GIMBAL_DEVICE_INFORMATION;
    this.order_map = [1, 12, 13, 14, 2, 3, 0, 10, 11, 4, 5, 6, 7, 8, 9, 15];
    this.len_map = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1];
    this.array_len_map = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 32, 32, 0];
    this.crc_extra = 74;
    this._name = 'GIMBAL_DEVICE_INFORMATION';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['time_boot_ms', 'vendor_name', 'model_name', 'custom_name', 'firmware_version', 'hardware_version', 'uid', 'cap_flags', 'custom_cap_flags', 'roll_min', 'roll_max', 'pitch_min', 'pitch_max', 'yaw_min', 'yaw_max', 'gimbal_device_id'];

}

mavlink20.messages.gimbal_device_information.prototype = new mavlink20.message;
mavlink20.messages.gimbal_device_information.prototype.pack = function(mav) {
    var orderedfields = [ this.uid, this.time_boot_ms, this.firmware_version, this.hardware_version, this.roll_min, this.roll_max, this.pitch_min, this.pitch_max, this.yaw_min, this.yaw_max, this.cap_flags, this.custom_cap_flags, this.vendor_name, this.model_name, this.custom_name, this.gimbal_device_id];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink20.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
Low level message to control a gimbal device's attitude.
This message is to be sent from the gimbal manager to the gimbal
device component.           The quaternion and angular velocities can
be set to NaN according to use case.           For the angles encoded
in the quaternion and the angular velocities holds:           If the
flag GIMBAL_DEVICE_FLAGS_YAW_IN_VEHICLE_FRAME is set, then they are
relative to the vehicle heading (vehicle frame).           If the flag
GIMBAL_DEVICE_FLAGS_YAW_IN_EARTH_FRAME is set, then they are relative
to absolute North (earth frame).           If neither of these flags
are set, then (for backwards compatibility) it holds:           If the
flag GIMBAL_DEVICE_FLAGS_YAW_LOCK is set, then they are relative to
absolute North (earth frame),           else they are relative to the
vehicle heading (vehicle frame).           Setting both
GIMBAL_DEVICE_FLAGS_YAW_IN_VEHICLE_FRAME and
GIMBAL_DEVICE_FLAGS_YAW_IN_EARTH_FRAME is not allowed.           These
rules are to ensure backwards compatibility.           New
implementations should always set either
GIMBAL_DEVICE_FLAGS_YAW_IN_VEHICLE_FRAME or
GIMBAL_DEVICE_FLAGS_YAW_IN_EARTH_FRAME.

                target_system             : System ID (uint8_t)
                target_component          : Component ID (uint8_t)
                flags                     : Low level gimbal flags. (uint16_t)
                q                         : Quaternion components, w, x, y, z (1 0 0 0 is the null-rotation). The frame is described in the message description. Set fields to NaN to be ignored. (float)
                angular_velocity_x        : X component of angular velocity (positive: rolling to the right). The frame is described in the message description. NaN to be ignored. (float)
                angular_velocity_y        : Y component of angular velocity (positive: pitching up). The frame is described in the message description. NaN to be ignored. (float)
                angular_velocity_z        : Z component of angular velocity (positive: yawing to the right). The frame is described in the message description. NaN to be ignored. (float)

*/
    mavlink20.messages.gimbal_device_set_attitude = function( ...moreargs ) {
     [ this.target_system , this.target_component , this.flags , this.q , this.angular_velocity_x , this.angular_velocity_y , this.angular_velocity_z ] = moreargs;


    this._format = '<4ffffHBB';
    this._id = mavlink20.MAVLINK_MSG_ID_GIMBAL_DEVICE_SET_ATTITUDE;
    this.order_map = [5, 6, 4, 0, 1, 2, 3];
    this.len_map = [4, 1, 1, 1, 1, 1, 1];
    this.array_len_map = [4, 0, 0, 0, 0, 0, 0];
    this.crc_extra = 99;
    this._name = 'GIMBAL_DEVICE_SET_ATTITUDE';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['target_system', 'target_component', 'flags', 'q', 'angular_velocity_x', 'angular_velocity_y', 'angular_velocity_z'];

}

mavlink20.messages.gimbal_device_set_attitude.prototype = new mavlink20.message;
mavlink20.messages.gimbal_device_set_attitude.prototype.pack = function(mav) {
    var orderedfields = [ this.q, this.angular_velocity_x, this.angular_velocity_y, this.angular_velocity_z, this.flags, this.target_system, this.target_component];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink20.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
Message reporting the status of a gimbal device.           This
message should be broadcast by a gimbal device component at a low
regular rate (e.g. 5 Hz).           For the angles encoded in the
quaternion and the angular velocities holds:           If the flag
GIMBAL_DEVICE_FLAGS_YAW_IN_VEHICLE_FRAME is set, then they are
relative to the vehicle heading (vehicle frame).           If the flag
GIMBAL_DEVICE_FLAGS_YAW_IN_EARTH_FRAME is set, then they are relative
to absolute North (earth frame).           If neither of these flags
are set, then (for backwards compatibility) it holds:           If the
flag GIMBAL_DEVICE_FLAGS_YAW_LOCK is set, then they are relative to
absolute North (earth frame),           else they are relative to the
vehicle heading (vehicle frame).           Other conditions of the
flags are not allowed.           The quaternion and angular velocities
in the other frame can be calculated from delta_yaw and
delta_yaw_velocity as           q_earth = q_delta_yaw * q_vehicle and
w_earth = w_delta_yaw_velocity + w_vehicle (if not NaN).           If
neither the GIMBAL_DEVICE_FLAGS_YAW_IN_VEHICLE_FRAME nor the
GIMBAL_DEVICE_FLAGS_YAW_IN_EARTH_FRAME flag is set,           then
(for backwards compatibility) the data in the delta_yaw and
delta_yaw_velocity fields are to be ignored.           New
implementations should always set either
GIMBAL_DEVICE_FLAGS_YAW_IN_VEHICLE_FRAME or
GIMBAL_DEVICE_FLAGS_YAW_IN_EARTH_FRAME,           and always should
set delta_yaw and delta_yaw_velocity either to the proper value or
NaN.

                target_system             : System ID (uint8_t)
                target_component          : Component ID (uint8_t)
                time_boot_ms              : Timestamp (time since system boot). (uint32_t)
                flags                     : Current gimbal flags set. (uint16_t)
                q                         : Quaternion components, w, x, y, z (1 0 0 0 is the null-rotation). The frame is described in the message description. (float)
                angular_velocity_x        : X component of angular velocity (positive: rolling to the right). The frame is described in the message description. NaN if unknown. (float)
                angular_velocity_y        : Y component of angular velocity (positive: pitching up). The frame is described in the message description. NaN if unknown. (float)
                angular_velocity_z        : Z component of angular velocity (positive: yawing to the right). The frame is described in the message description. NaN if unknown. (float)
                failure_flags             : Failure flags (0 for no failure) (uint32_t)
                delta_yaw                 : Yaw angle relating the quaternions in earth and body frames (see message description). NaN if unknown. (float)
                delta_yaw_velocity        : Yaw angular velocity relating the angular velocities in earth and body frames (see message description). NaN if unknown. (float)
                gimbal_device_id          : This field is to be used if the gimbal manager and the gimbal device are the same component and hence have the same component ID. This field is then set a number between 1-6. If the component ID is separate, this field is not required and must be set to 0. (uint8_t)

*/
    mavlink20.messages.gimbal_device_attitude_status = function( ...moreargs ) {
     [ this.target_system , this.target_component , this.time_boot_ms , this.flags , this.q , this.angular_velocity_x , this.angular_velocity_y , this.angular_velocity_z , this.failure_flags , this.delta_yaw , this.delta_yaw_velocity , this.gimbal_device_id ] = moreargs;


    this._format = '<I4ffffIHBBffB';
    this._id = mavlink20.MAVLINK_MSG_ID_GIMBAL_DEVICE_ATTITUDE_STATUS;
    this.order_map = [7, 8, 0, 6, 1, 2, 3, 4, 5, 9, 10, 11];
    this.len_map = [1, 4, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1];
    this.array_len_map = [0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
    this.crc_extra = 137;
    this._name = 'GIMBAL_DEVICE_ATTITUDE_STATUS';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['target_system', 'target_component', 'time_boot_ms', 'flags', 'q', 'angular_velocity_x', 'angular_velocity_y', 'angular_velocity_z', 'failure_flags', 'delta_yaw', 'delta_yaw_velocity', 'gimbal_device_id'];

}

mavlink20.messages.gimbal_device_attitude_status.prototype = new mavlink20.message;
mavlink20.messages.gimbal_device_attitude_status.prototype.pack = function(mav) {
    var orderedfields = [ this.time_boot_ms, this.q, this.angular_velocity_x, this.angular_velocity_y, this.angular_velocity_z, this.failure_flags, this.flags, this.target_system, this.target_component, this.delta_yaw, this.delta_yaw_velocity, this.gimbal_device_id];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink20.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
Low level message containing autopilot state relevant for a gimbal
device. This message is to be sent from the autopilot to the gimbal
device component. The data of this message are for the gimbal device's
estimator corrections, in particular horizon compensation, as well as
indicates autopilot control intentions, e.g. feed forward angular
control in the z-axis.

                target_system             : System ID (uint8_t)
                target_component          : Component ID (uint8_t)
                time_boot_us              : Timestamp (time since system boot). (uint64_t)
                q                         : Quaternion components of autopilot attitude: w, x, y, z (1 0 0 0 is the null-rotation, Hamilton convention). (float)
                q_estimated_delay_us        : Estimated delay of the attitude data. 0 if unknown. (uint32_t)
                vx                        : X Speed in NED (North, East, Down). NAN if unknown. (float)
                vy                        : Y Speed in NED (North, East, Down). NAN if unknown. (float)
                vz                        : Z Speed in NED (North, East, Down). NAN if unknown. (float)
                v_estimated_delay_us        : Estimated delay of the speed data. 0 if unknown. (uint32_t)
                feed_forward_angular_velocity_z        : Feed forward Z component of angular velocity (positive: yawing to the right). NaN to be ignored. This is to indicate if the autopilot is actively yawing. (float)
                estimator_status          : Bitmap indicating which estimator outputs are valid. (uint16_t)
                landed_state              : The landed state. Is set to MAV_LANDED_STATE_UNDEFINED if landed state is unknown. (uint8_t)
                angular_velocity_z        : Z component of angular velocity in NED (North, East, Down). NaN if unknown. (float)

*/
    mavlink20.messages.autopilot_state_for_gimbal_device = function( ...moreargs ) {
     [ this.target_system , this.target_component , this.time_boot_us , this.q , this.q_estimated_delay_us , this.vx , this.vy , this.vz , this.v_estimated_delay_us , this.feed_forward_angular_velocity_z , this.estimator_status , this.landed_state , this.angular_velocity_z ] = moreargs;


    this._format = '<Q4fIfffIfHBBBf';
    this._id = mavlink20.MAVLINK_MSG_ID_AUTOPILOT_STATE_FOR_GIMBAL_DEVICE;
    this.order_map = [9, 10, 0, 1, 2, 3, 4, 5, 6, 7, 8, 11, 12];
    this.len_map = [1, 4, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1];
    this.array_len_map = [0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
    this.crc_extra = 210;
    this._name = 'AUTOPILOT_STATE_FOR_GIMBAL_DEVICE';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['target_system', 'target_component', 'time_boot_us', 'q', 'q_estimated_delay_us', 'vx', 'vy', 'vz', 'v_estimated_delay_us', 'feed_forward_angular_velocity_z', 'estimator_status', 'landed_state', 'angular_velocity_z'];

}

mavlink20.messages.autopilot_state_for_gimbal_device.prototype = new mavlink20.message;
mavlink20.messages.autopilot_state_for_gimbal_device.prototype.pack = function(mav) {
    var orderedfields = [ this.time_boot_us, this.q, this.q_estimated_delay_us, this.vx, this.vy, this.vz, this.v_estimated_delay_us, this.feed_forward_angular_velocity_z, this.estimator_status, this.target_system, this.target_component, this.landed_state, this.angular_velocity_z];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink20.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
Set gimbal manager pitch and yaw angles (high rate message). This
message is to be sent to the gimbal manager (e.g. from a ground
station) and will be ignored by gimbal devices. Angles and rates can
be set to NaN according to use case. Use
MAV_CMD_DO_GIMBAL_MANAGER_PITCHYAW for low-rate adjustments that
require confirmation.

                target_system             : System ID (uint8_t)
                target_component          : Component ID (uint8_t)
                flags                     : High level gimbal manager flags to use. (uint32_t)
                gimbal_device_id          : Component ID of gimbal device to address (or 1-6 for non-MAVLink gimbal), 0 for all gimbal device components. Send command multiple times for more than one gimbal (but not all gimbals). (uint8_t)
                pitch                     : Pitch angle (positive: up, negative: down, NaN to be ignored). (float)
                yaw                       : Yaw angle (positive: to the right, negative: to the left, NaN to be ignored). (float)
                pitch_rate                : Pitch angular rate (positive: up, negative: down, NaN to be ignored). (float)
                yaw_rate                  : Yaw angular rate (positive: to the right, negative: to the left, NaN to be ignored). (float)

*/
    mavlink20.messages.gimbal_manager_set_pitchyaw = function( ...moreargs ) {
     [ this.target_system , this.target_component , this.flags , this.gimbal_device_id , this.pitch , this.yaw , this.pitch_rate , this.yaw_rate ] = moreargs;


    this._format = '<IffffBBB';
    this._id = mavlink20.MAVLINK_MSG_ID_GIMBAL_MANAGER_SET_PITCHYAW;
    this.order_map = [5, 6, 0, 7, 1, 2, 3, 4];
    this.len_map = [1, 1, 1, 1, 1, 1, 1, 1];
    this.array_len_map = [0, 0, 0, 0, 0, 0, 0, 0];
    this.crc_extra = 1;
    this._name = 'GIMBAL_MANAGER_SET_PITCHYAW';

    this._instance_field = 'gimbal_device_id';
    this._instance_offset = 22;

    this.fieldnames = ['target_system', 'target_component', 'flags', 'gimbal_device_id', 'pitch', 'yaw', 'pitch_rate', 'yaw_rate'];

}

mavlink20.messages.gimbal_manager_set_pitchyaw.prototype = new mavlink20.message;
mavlink20.messages.gimbal_manager_set_pitchyaw.prototype.pack = function(mav) {
    var orderedfields = [ this.flags, this.pitch, this.yaw, this.pitch_rate, this.yaw_rate, this.target_system, this.target_component, this.gimbal_device_id];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink20.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
High level message to control a gimbal manually. The angles or angular
rates are unitless; the actual rates will depend on internal gimbal
manager settings/configuration (e.g. set by parameters). This message
is to be sent to the gimbal manager (e.g. from a ground station).
Angles and rates can be set to NaN according to use case.

                target_system             : System ID (uint8_t)
                target_component          : Component ID (uint8_t)
                flags                     : High level gimbal manager flags. (uint32_t)
                gimbal_device_id          : Component ID of gimbal device to address (or 1-6 for non-MAVLink gimbal), 0 for all gimbal device components. Send command multiple times for more than one gimbal (but not all gimbals). (uint8_t)
                pitch                     : Pitch angle unitless (-1..1, positive: up, negative: down, NaN to be ignored). (float)
                yaw                       : Yaw angle unitless (-1..1, positive: to the right, negative: to the left, NaN to be ignored). (float)
                pitch_rate                : Pitch angular rate unitless (-1..1, positive: up, negative: down, NaN to be ignored). (float)
                yaw_rate                  : Yaw angular rate unitless (-1..1, positive: to the right, negative: to the left, NaN to be ignored). (float)

*/
    mavlink20.messages.gimbal_manager_set_manual_control = function( ...moreargs ) {
     [ this.target_system , this.target_component , this.flags , this.gimbal_device_id , this.pitch , this.yaw , this.pitch_rate , this.yaw_rate ] = moreargs;


    this._format = '<IffffBBB';
    this._id = mavlink20.MAVLINK_MSG_ID_GIMBAL_MANAGER_SET_MANUAL_CONTROL;
    this.order_map = [5, 6, 0, 7, 1, 2, 3, 4];
    this.len_map = [1, 1, 1, 1, 1, 1, 1, 1];
    this.array_len_map = [0, 0, 0, 0, 0, 0, 0, 0];
    this.crc_extra = 20;
    this._name = 'GIMBAL_MANAGER_SET_MANUAL_CONTROL';

    this._instance_field = 'gimbal_device_id';
    this._instance_offset = 22;

    this.fieldnames = ['target_system', 'target_component', 'flags', 'gimbal_device_id', 'pitch', 'yaw', 'pitch_rate', 'yaw_rate'];

}

mavlink20.messages.gimbal_manager_set_manual_control.prototype = new mavlink20.message;
mavlink20.messages.gimbal_manager_set_manual_control.prototype.pack = function(mav) {
    var orderedfields = [ this.flags, this.pitch, this.yaw, this.pitch_rate, this.yaw_rate, this.target_system, this.target_component, this.gimbal_device_id];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink20.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
Configure WiFi AP SSID, password, and mode. This message is re-emitted
as an acknowledgement by the AP. The message may also be explicitly
requested using MAV_CMD_REQUEST_MESSAGE

                ssid                      : Name of Wi-Fi network (SSID). Blank to leave it unchanged when setting. Current SSID when sent back as a response. (char)
                password                  : Password. Blank for an open AP. MD5 hash when message is sent back as a response. (char)

*/
    mavlink20.messages.wifi_config_ap = function( ...moreargs ) {
     [ this.ssid , this.password ] = moreargs;


    this._format = '<32s64s';
    this._id = mavlink20.MAVLINK_MSG_ID_WIFI_CONFIG_AP;
    this.order_map = [0, 1];
    this.len_map = [1, 1];
    this.array_len_map = [32, 64];
    this.crc_extra = 19;
    this._name = 'WIFI_CONFIG_AP';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['ssid', 'password'];

}

mavlink20.messages.wifi_config_ap.prototype = new mavlink20.message;
mavlink20.messages.wifi_config_ap.prototype.pack = function(mav) {
    var orderedfields = [ this.ssid, this.password];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink20.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
The location and information of an AIS vessel

                MMSI                      : Mobile Marine Service Identifier, 9 decimal digits (uint32_t)
                lat                       : Latitude (int32_t)
                lon                       : Longitude (int32_t)
                COG                       : Course over ground (uint16_t)
                heading                   : True heading (uint16_t)
                velocity                  : Speed over ground (uint16_t)
                turn_rate                 : Turn rate (int8_t)
                navigational_status        : Navigational status (uint8_t)
                type                      : Type of vessels (uint8_t)
                dimension_bow             : Distance from lat/lon location to bow (uint16_t)
                dimension_stern           : Distance from lat/lon location to stern (uint16_t)
                dimension_port            : Distance from lat/lon location to port side (uint8_t)
                dimension_starboard        : Distance from lat/lon location to starboard side (uint8_t)
                callsign                  : The vessel callsign (char)
                name                      : The vessel name (char)
                tslc                      : Time since last communication in seconds (uint16_t)
                flags                     : Bitmask to indicate various statuses including valid data fields (uint16_t)

*/
    mavlink20.messages.ais_vessel = function( ...moreargs ) {
     [ this.MMSI , this.lat , this.lon , this.COG , this.heading , this.velocity , this.turn_rate , this.navigational_status , this.type , this.dimension_bow , this.dimension_stern , this.dimension_port , this.dimension_starboard , this.callsign , this.name , this.tslc , this.flags ] = moreargs;


    this._format = '<IiiHHHHHHHbBBBB7s20s';
    this._id = mavlink20.MAVLINK_MSG_ID_AIS_VESSEL;
    this.order_map = [0, 1, 2, 3, 4, 5, 10, 11, 12, 6, 7, 13, 14, 15, 16, 8, 9];
    this.len_map = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1];
    this.array_len_map = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 20];
    this.crc_extra = 243;
    this._name = 'AIS_VESSEL';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['MMSI', 'lat', 'lon', 'COG', 'heading', 'velocity', 'turn_rate', 'navigational_status', 'type', 'dimension_bow', 'dimension_stern', 'dimension_port', 'dimension_starboard', 'callsign', 'name', 'tslc', 'flags'];

}

mavlink20.messages.ais_vessel.prototype = new mavlink20.message;
mavlink20.messages.ais_vessel.prototype.pack = function(mav) {
    var orderedfields = [ this.MMSI, this.lat, this.lon, this.COG, this.heading, this.velocity, this.dimension_bow, this.dimension_stern, this.tslc, this.flags, this.turn_rate, this.navigational_status, this.type, this.dimension_port, this.dimension_starboard, this.callsign, this.name];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink20.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
General status information of an UAVCAN node. Please refer to the
definition of the UAVCAN message "uavcan.protocol.NodeStatus" for the
background information. The UAVCAN specification is available at
http://uavcan.org.

                time_usec                 : Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude of the number. (uint64_t)
                uptime_sec                : Time since the start-up of the node. (uint32_t)
                health                    : Generalized node health status. (uint8_t)
                mode                      : Generalized operating mode. (uint8_t)
                sub_mode                  : Not used currently. (uint8_t)
                vendor_specific_status_code        : Vendor-specific status information. (uint16_t)

*/
    mavlink20.messages.uavcan_node_status = function( ...moreargs ) {
     [ this.time_usec , this.uptime_sec , this.health , this.mode , this.sub_mode , this.vendor_specific_status_code ] = moreargs;


    this._format = '<QIHBBB';
    this._id = mavlink20.MAVLINK_MSG_ID_UAVCAN_NODE_STATUS;
    this.order_map = [0, 1, 3, 4, 5, 2];
    this.len_map = [1, 1, 1, 1, 1, 1];
    this.array_len_map = [0, 0, 0, 0, 0, 0];
    this.crc_extra = 28;
    this._name = 'UAVCAN_NODE_STATUS';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['time_usec', 'uptime_sec', 'health', 'mode', 'sub_mode', 'vendor_specific_status_code'];

}

mavlink20.messages.uavcan_node_status.prototype = new mavlink20.message;
mavlink20.messages.uavcan_node_status.prototype.pack = function(mav) {
    var orderedfields = [ this.time_usec, this.uptime_sec, this.vendor_specific_status_code, this.health, this.mode, this.sub_mode];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink20.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
General information describing a particular UAVCAN node. Please refer
to the definition of the UAVCAN service "uavcan.protocol.GetNodeInfo"
for the background information. This message should be emitted by the
system whenever a new node appears online, or an existing node
reboots. Additionally, it can be emitted upon request from the other
end of the MAVLink channel (see MAV_CMD_UAVCAN_GET_NODE_INFO). It is
also not prohibited to emit this message unconditionally at a low
frequency. The UAVCAN specification is available at http://uavcan.org.

                time_usec                 : Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude of the number. (uint64_t)
                uptime_sec                : Time since the start-up of the node. (uint32_t)
                name                      : Node name string. For example, "sapog.px4.io". (char)
                hw_version_major          : Hardware major version number. (uint8_t)
                hw_version_minor          : Hardware minor version number. (uint8_t)
                hw_unique_id              : Hardware unique 128-bit ID. (uint8_t)
                sw_version_major          : Software major version number. (uint8_t)
                sw_version_minor          : Software minor version number. (uint8_t)
                sw_vcs_commit             : Version control system (VCS) revision identifier (e.g. git short commit hash). Zero if unknown. (uint32_t)

*/
    mavlink20.messages.uavcan_node_info = function( ...moreargs ) {
     [ this.time_usec , this.uptime_sec , this.name , this.hw_version_major , this.hw_version_minor , this.hw_unique_id , this.sw_version_major , this.sw_version_minor , this.sw_vcs_commit ] = moreargs;


    this._format = '<QII80sBB16sBB';
    this._id = mavlink20.MAVLINK_MSG_ID_UAVCAN_NODE_INFO;
    this.order_map = [0, 1, 3, 4, 5, 6, 7, 8, 2];
    this.len_map = [1, 1, 1, 1, 1, 1, 16, 1, 1];
    this.array_len_map = [0, 0, 0, 80, 0, 0, 16, 0, 0];
    this.crc_extra = 95;
    this._name = 'UAVCAN_NODE_INFO';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['time_usec', 'uptime_sec', 'name', 'hw_version_major', 'hw_version_minor', 'hw_unique_id', 'sw_version_major', 'sw_version_minor', 'sw_vcs_commit'];

}

mavlink20.messages.uavcan_node_info.prototype = new mavlink20.message;
mavlink20.messages.uavcan_node_info.prototype.pack = function(mav) {
    var orderedfields = [ this.time_usec, this.uptime_sec, this.sw_vcs_commit, this.name, this.hw_version_major, this.hw_version_minor, this.hw_unique_id, this.sw_version_major, this.sw_version_minor];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink20.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
Request to read the value of a parameter with either the param_id
string id or param_index. PARAM_EXT_VALUE should be emitted in
response.

                target_system             : System ID (uint8_t)
                target_component          : Component ID (uint8_t)
                param_id                  : Parameter id, terminated by NULL if the length is less than 16 human-readable chars and WITHOUT null termination (NULL) byte if the length is exactly 16 chars - applications have to provide 16+1 bytes storage if the ID is stored as string (char)
                param_index               : Parameter index. Set to -1 to use the Parameter ID field as identifier (else param_id will be ignored) (int16_t)

*/
    mavlink20.messages.param_ext_request_read = function( ...moreargs ) {
     [ this.target_system , this.target_component , this.param_id , this.param_index ] = moreargs;


    this._format = '<hBB16s';
    this._id = mavlink20.MAVLINK_MSG_ID_PARAM_EXT_REQUEST_READ;
    this.order_map = [1, 2, 3, 0];
    this.len_map = [1, 1, 1, 1];
    this.array_len_map = [0, 0, 0, 16];
    this.crc_extra = 243;
    this._name = 'PARAM_EXT_REQUEST_READ';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['target_system', 'target_component', 'param_id', 'param_index'];

}

mavlink20.messages.param_ext_request_read.prototype = new mavlink20.message;
mavlink20.messages.param_ext_request_read.prototype.pack = function(mav) {
    var orderedfields = [ this.param_index, this.target_system, this.target_component, this.param_id];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink20.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
Request all parameters of this component. All parameters should be
emitted in response as PARAM_EXT_VALUE.

                target_system             : System ID (uint8_t)
                target_component          : Component ID (uint8_t)

*/
    mavlink20.messages.param_ext_request_list = function( ...moreargs ) {
     [ this.target_system , this.target_component ] = moreargs;


    this._format = '<BB';
    this._id = mavlink20.MAVLINK_MSG_ID_PARAM_EXT_REQUEST_LIST;
    this.order_map = [0, 1];
    this.len_map = [1, 1];
    this.array_len_map = [0, 0];
    this.crc_extra = 88;
    this._name = 'PARAM_EXT_REQUEST_LIST';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['target_system', 'target_component'];

}

mavlink20.messages.param_ext_request_list.prototype = new mavlink20.message;
mavlink20.messages.param_ext_request_list.prototype.pack = function(mav) {
    var orderedfields = [ this.target_system, this.target_component];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink20.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
Emit the value of a parameter. The inclusion of param_count and
param_index in the message allows the recipient to keep track of
received parameters and allows them to re-request missing parameters
after a loss or timeout.

                param_id                  : Parameter id, terminated by NULL if the length is less than 16 human-readable chars and WITHOUT null termination (NULL) byte if the length is exactly 16 chars - applications have to provide 16+1 bytes storage if the ID is stored as string (char)
                param_value               : Parameter value (char)
                param_type                : Parameter type. (uint8_t)
                param_count               : Total number of parameters (uint16_t)
                param_index               : Index of this parameter (uint16_t)

*/
    mavlink20.messages.param_ext_value = function( ...moreargs ) {
     [ this.param_id , this.param_value , this.param_type , this.param_count , this.param_index ] = moreargs;


    this._format = '<HH16s128sB';
    this._id = mavlink20.MAVLINK_MSG_ID_PARAM_EXT_VALUE;
    this.order_map = [2, 3, 4, 0, 1];
    this.len_map = [1, 1, 1, 1, 1];
    this.array_len_map = [0, 0, 16, 128, 0];
    this.crc_extra = 243;
    this._name = 'PARAM_EXT_VALUE';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['param_id', 'param_value', 'param_type', 'param_count', 'param_index'];

}

mavlink20.messages.param_ext_value.prototype = new mavlink20.message;
mavlink20.messages.param_ext_value.prototype.pack = function(mav) {
    var orderedfields = [ this.param_count, this.param_index, this.param_id, this.param_value, this.param_type];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink20.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
Set a parameter value. In order to deal with message loss (and
retransmission of PARAM_EXT_SET), when setting a parameter value and
the new value is the same as the current value, you will immediately
get a PARAM_ACK_ACCEPTED response. If the current state is
PARAM_ACK_IN_PROGRESS, you will accordingly receive a
PARAM_ACK_IN_PROGRESS in response.

                target_system             : System ID (uint8_t)
                target_component          : Component ID (uint8_t)
                param_id                  : Parameter id, terminated by NULL if the length is less than 16 human-readable chars and WITHOUT null termination (NULL) byte if the length is exactly 16 chars - applications have to provide 16+1 bytes storage if the ID is stored as string (char)
                param_value               : Parameter value (char)
                param_type                : Parameter type. (uint8_t)

*/
    mavlink20.messages.param_ext_set = function( ...moreargs ) {
     [ this.target_system , this.target_component , this.param_id , this.param_value , this.param_type ] = moreargs;


    this._format = '<BB16s128sB';
    this._id = mavlink20.MAVLINK_MSG_ID_PARAM_EXT_SET;
    this.order_map = [0, 1, 2, 3, 4];
    this.len_map = [1, 1, 1, 1, 1];
    this.array_len_map = [0, 0, 16, 128, 0];
    this.crc_extra = 78;
    this._name = 'PARAM_EXT_SET';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['target_system', 'target_component', 'param_id', 'param_value', 'param_type'];

}

mavlink20.messages.param_ext_set.prototype = new mavlink20.message;
mavlink20.messages.param_ext_set.prototype.pack = function(mav) {
    var orderedfields = [ this.target_system, this.target_component, this.param_id, this.param_value, this.param_type];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink20.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
Response from a PARAM_EXT_SET message.

                param_id                  : Parameter id, terminated by NULL if the length is less than 16 human-readable chars and WITHOUT null termination (NULL) byte if the length is exactly 16 chars - applications have to provide 16+1 bytes storage if the ID is stored as string (char)
                param_value               : Parameter value (new value if PARAM_ACK_ACCEPTED, current value otherwise) (char)
                param_type                : Parameter type. (uint8_t)
                param_result              : Result code. (uint8_t)

*/
    mavlink20.messages.param_ext_ack = function( ...moreargs ) {
     [ this.param_id , this.param_value , this.param_type , this.param_result ] = moreargs;


    this._format = '<16s128sBB';
    this._id = mavlink20.MAVLINK_MSG_ID_PARAM_EXT_ACK;
    this.order_map = [0, 1, 2, 3];
    this.len_map = [1, 1, 1, 1];
    this.array_len_map = [16, 128, 0, 0];
    this.crc_extra = 132;
    this._name = 'PARAM_EXT_ACK';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['param_id', 'param_value', 'param_type', 'param_result'];

}

mavlink20.messages.param_ext_ack.prototype = new mavlink20.message;
mavlink20.messages.param_ext_ack.prototype.pack = function(mav) {
    var orderedfields = [ this.param_id, this.param_value, this.param_type, this.param_result];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink20.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
Obstacle distances in front of the sensor, starting from the left in
increment degrees to the right

                time_usec                 : Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude of the number. (uint64_t)
                sensor_type               : Class id of the distance sensor type. (uint8_t)
                distances                 : Distance of obstacles around the vehicle with index 0 corresponding to north + angle_offset, unless otherwise specified in the frame. A value of 0 is valid and means that the obstacle is practically touching the sensor. A value of max_distance +1 means no obstacle is present. A value of UINT16_MAX for unknown/not used. In a array element, one unit corresponds to 1cm. (uint16_t)
                increment                 : Angular width in degrees of each array element. Increment direction is clockwise. This field is ignored if increment_f is non-zero. (uint8_t)
                min_distance              : Minimum distance the sensor can measure. (uint16_t)
                max_distance              : Maximum distance the sensor can measure. (uint16_t)
                increment_f               : Angular width in degrees of each array element as a float. If non-zero then this value is used instead of the uint8_t increment field. Positive is clockwise direction, negative is counter-clockwise. (float)
                angle_offset              : Relative angle offset of the 0-index element in the distances array. Value of 0 corresponds to forward. Positive is clockwise direction, negative is counter-clockwise. (float)
                frame                     : Coordinate frame of reference for the yaw rotation and offset of the sensor data. Defaults to MAV_FRAME_GLOBAL, which is north aligned. For body-mounted sensors use MAV_FRAME_BODY_FRD, which is vehicle front aligned. (uint8_t)

*/
    mavlink20.messages.obstacle_distance = function( ...moreargs ) {
     [ this.time_usec , this.sensor_type , this.distances , this.increment , this.min_distance , this.max_distance , this.increment_f , this.angle_offset , this.frame ] = moreargs;


    this._format = '<Q72HHHBBffB';
    this._id = mavlink20.MAVLINK_MSG_ID_OBSTACLE_DISTANCE;
    this.order_map = [0, 4, 1, 5, 2, 3, 6, 7, 8];
    this.len_map = [1, 72, 1, 1, 1, 1, 1, 1, 1];
    this.array_len_map = [0, 72, 0, 0, 0, 0, 0, 0, 0];
    this.crc_extra = 23;
    this._name = 'OBSTACLE_DISTANCE';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['time_usec', 'sensor_type', 'distances', 'increment', 'min_distance', 'max_distance', 'increment_f', 'angle_offset', 'frame'];

}

mavlink20.messages.obstacle_distance.prototype = new mavlink20.message;
mavlink20.messages.obstacle_distance.prototype.pack = function(mav) {
    var orderedfields = [ this.time_usec, this.distances, this.min_distance, this.max_distance, this.sensor_type, this.increment, this.increment_f, this.angle_offset, this.frame];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink20.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
Odometry message to communicate odometry information with an external
interface. Fits ROS REP 147 standard for aerial vehicles
(http://www.ros.org/reps/rep-0147.html).

                time_usec                 : Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude of the number. (uint64_t)
                frame_id                  : Coordinate frame of reference for the pose data. (uint8_t)
                child_frame_id            : Coordinate frame of reference for the velocity in free space (twist) data. (uint8_t)
                x                         : X Position (float)
                y                         : Y Position (float)
                z                         : Z Position (float)
                q                         : Quaternion components, w, x, y, z (1 0 0 0 is the null-rotation) (float)
                vx                        : X linear speed (float)
                vy                        : Y linear speed (float)
                vz                        : Z linear speed (float)
                rollspeed                 : Roll angular speed (float)
                pitchspeed                : Pitch angular speed (float)
                yawspeed                  : Yaw angular speed (float)
                pose_covariance           : Row-major representation of a 6x6 pose cross-covariance matrix upper right triangle (states: x, y, z, roll, pitch, yaw; first six entries are the first ROW, next five entries are the second ROW, etc.). If unknown, assign NaN value to first element in the array. (float)
                velocity_covariance        : Row-major representation of a 6x6 velocity cross-covariance matrix upper right triangle (states: vx, vy, vz, rollspeed, pitchspeed, yawspeed; first six entries are the first ROW, next five entries are the second ROW, etc.). If unknown, assign NaN value to first element in the array. (float)
                reset_counter             : Estimate reset counter. This should be incremented when the estimate resets in any of the dimensions (position, velocity, attitude, angular speed). This is designed to be used when e.g an external SLAM system detects a loop-closure and the estimate jumps. (uint8_t)
                estimator_type            : Type of estimator that is providing the odometry. (uint8_t)
                quality                   : Optional odometry quality metric as a percentage. -1 = odometry has failed, 0 = unknown/unset quality, 1 = worst quality, 100 = best quality (int8_t)

*/
    mavlink20.messages.odometry = function( ...moreargs ) {
     [ this.time_usec , this.frame_id , this.child_frame_id , this.x , this.y , this.z , this.q , this.vx , this.vy , this.vz , this.rollspeed , this.pitchspeed , this.yawspeed , this.pose_covariance , this.velocity_covariance , this.reset_counter , this.estimator_type , this.quality ] = moreargs;


    this._format = '<Qfff4fffffff21f21fBBBBb';
    this._id = mavlink20.MAVLINK_MSG_ID_ODOMETRY;
    this.order_map = [0, 13, 14, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 15, 16, 17];
    this.len_map = [1, 1, 1, 1, 4, 1, 1, 1, 1, 1, 1, 21, 21, 1, 1, 1, 1, 1];
    this.array_len_map = [0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 21, 21, 0, 0, 0, 0, 0];
    this.crc_extra = 91;
    this._name = 'ODOMETRY';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['time_usec', 'frame_id', 'child_frame_id', 'x', 'y', 'z', 'q', 'vx', 'vy', 'vz', 'rollspeed', 'pitchspeed', 'yawspeed', 'pose_covariance', 'velocity_covariance', 'reset_counter', 'estimator_type', 'quality'];

}

mavlink20.messages.odometry.prototype = new mavlink20.message;
mavlink20.messages.odometry.prototype.pack = function(mav) {
    var orderedfields = [ this.time_usec, this.x, this.y, this.z, this.q, this.vx, this.vy, this.vz, this.rollspeed, this.pitchspeed, this.yawspeed, this.pose_covariance, this.velocity_covariance, this.frame_id, this.child_frame_id, this.reset_counter, this.estimator_type, this.quality];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink20.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
Status of the Iridium SBD link.

                timestamp                 : Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude of the number. (uint64_t)
                last_heartbeat            : Timestamp of the last successful sbd session. The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude of the number. (uint64_t)
                failed_sessions           : Number of failed SBD sessions. (uint16_t)
                successful_sessions        : Number of successful SBD sessions. (uint16_t)
                signal_quality            : Signal quality equal to the number of bars displayed on the ISU signal strength indicator. Range is 0 to 5, where 0 indicates no signal and 5 indicates maximum signal strength. (uint8_t)
                ring_pending              : 1: Ring call pending, 0: No call pending. (uint8_t)
                tx_session_pending        : 1: Transmission session pending, 0: No transmission session pending. (uint8_t)
                rx_session_pending        : 1: Receiving session pending, 0: No receiving session pending. (uint8_t)

*/
    mavlink20.messages.isbd_link_status = function( ...moreargs ) {
     [ this.timestamp , this.last_heartbeat , this.failed_sessions , this.successful_sessions , this.signal_quality , this.ring_pending , this.tx_session_pending , this.rx_session_pending ] = moreargs;


    this._format = '<QQHHBBBB';
    this._id = mavlink20.MAVLINK_MSG_ID_ISBD_LINK_STATUS;
    this.order_map = [0, 1, 2, 3, 4, 5, 6, 7];
    this.len_map = [1, 1, 1, 1, 1, 1, 1, 1];
    this.array_len_map = [0, 0, 0, 0, 0, 0, 0, 0];
    this.crc_extra = 225;
    this._name = 'ISBD_LINK_STATUS';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['timestamp', 'last_heartbeat', 'failed_sessions', 'successful_sessions', 'signal_quality', 'ring_pending', 'tx_session_pending', 'rx_session_pending'];

}

mavlink20.messages.isbd_link_status.prototype = new mavlink20.message;
mavlink20.messages.isbd_link_status.prototype.pack = function(mav) {
    var orderedfields = [ this.timestamp, this.last_heartbeat, this.failed_sessions, this.successful_sessions, this.signal_quality, this.ring_pending, this.tx_session_pending, this.rx_session_pending];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink20.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
RPM sensor data message.

                index                     : Index of this RPM sensor (0-indexed) (uint8_t)
                frequency                 : Indicated rate (float)

*/
    mavlink20.messages.raw_rpm = function( ...moreargs ) {
     [ this.index , this.frequency ] = moreargs;


    this._format = '<fB';
    this._id = mavlink20.MAVLINK_MSG_ID_RAW_RPM;
    this.order_map = [1, 0];
    this.len_map = [1, 1];
    this.array_len_map = [0, 0];
    this.crc_extra = 199;
    this._name = 'RAW_RPM';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['index', 'frequency'];

}

mavlink20.messages.raw_rpm.prototype = new mavlink20.message;
mavlink20.messages.raw_rpm.prototype.pack = function(mav) {
    var orderedfields = [ this.frequency, this.index];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink20.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
The global position resulting from GPS and sensor fusion.

                time                      : Time of applicability of position (microseconds since UNIX epoch). (uint64_t)
                uas_id                    : Unique UAS ID. (uint8_t)
                lat                       : Latitude (WGS84) (int32_t)
                lon                       : Longitude (WGS84) (int32_t)
                alt                       : Altitude (WGS84) (int32_t)
                relative_alt              : Altitude above ground (int32_t)
                vx                        : Ground X speed (latitude, positive north) (int16_t)
                vy                        : Ground Y speed (longitude, positive east) (int16_t)
                vz                        : Ground Z speed (altitude, positive down) (int16_t)
                h_acc                     : Horizontal position uncertainty (standard deviation) (uint16_t)
                v_acc                     : Altitude uncertainty (standard deviation) (uint16_t)
                vel_acc                   : Speed uncertainty (standard deviation) (uint16_t)
                next_lat                  : Next waypoint, latitude (WGS84) (int32_t)
                next_lon                  : Next waypoint, longitude (WGS84) (int32_t)
                next_alt                  : Next waypoint, altitude (WGS84) (int32_t)
                update_rate               : Time until next update. Set to 0 if unknown or in data driven mode. (uint16_t)
                flight_state              : Flight state (uint8_t)
                flags                     : Bitwise OR combination of the data available flags. (uint8_t)

*/
    mavlink20.messages.utm_global_position = function( ...moreargs ) {
     [ this.time , this.uas_id , this.lat , this.lon , this.alt , this.relative_alt , this.vx , this.vy , this.vz , this.h_acc , this.v_acc , this.vel_acc , this.next_lat , this.next_lon , this.next_alt , this.update_rate , this.flight_state , this.flags ] = moreargs;


    this._format = '<QiiiiiiihhhHHHH18sBB';
    this._id = mavlink20.MAVLINK_MSG_ID_UTM_GLOBAL_POSITION;
    this.order_map = [0, 15, 1, 2, 3, 4, 8, 9, 10, 11, 12, 13, 5, 6, 7, 14, 16, 17];
    this.len_map = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 18, 1, 1];
    this.array_len_map = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 0, 0];
    this.crc_extra = 99;
    this._name = 'UTM_GLOBAL_POSITION';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['time', 'uas_id', 'lat', 'lon', 'alt', 'relative_alt', 'vx', 'vy', 'vz', 'h_acc', 'v_acc', 'vel_acc', 'next_lat', 'next_lon', 'next_alt', 'update_rate', 'flight_state', 'flags'];

}

mavlink20.messages.utm_global_position.prototype = new mavlink20.message;
mavlink20.messages.utm_global_position.prototype.pack = function(mav) {
    var orderedfields = [ this.time, this.lat, this.lon, this.alt, this.relative_alt, this.next_lat, this.next_lon, this.next_alt, this.vx, this.vy, this.vz, this.h_acc, this.v_acc, this.vel_acc, this.update_rate, this.uas_id, this.flight_state, this.flags];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink20.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
Large debug/prototyping array. The message uses the maximum available
payload for data. The array_id and name fields are used to
discriminate between messages in code and in user interfaces
(respectively). Do not use in production code.

                time_usec                 : Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude of the number. (uint64_t)
                name                      : Name, for human-friendly display in a Ground Control Station (char)
                array_id                  : Unique ID used to discriminate between arrays (uint16_t)
                data                      : data (float)

*/
    mavlink20.messages.debug_float_array = function( ...moreargs ) {
     [ this.time_usec , this.name , this.array_id , this.data ] = moreargs;


    this._format = '<QH10s58f';
    this._id = mavlink20.MAVLINK_MSG_ID_DEBUG_FLOAT_ARRAY;
    this.order_map = [0, 2, 1, 3];
    this.len_map = [1, 1, 1, 58];
    this.array_len_map = [0, 0, 10, 58];
    this.crc_extra = 232;
    this._name = 'DEBUG_FLOAT_ARRAY';

    this._instance_field = 'array_id';
    this._instance_offset = 8;

    this.fieldnames = ['time_usec', 'name', 'array_id', 'data'];

}

mavlink20.messages.debug_float_array.prototype = new mavlink20.message;
mavlink20.messages.debug_float_array.prototype.pack = function(mav) {
    var orderedfields = [ this.time_usec, this.array_id, this.name, this.data];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink20.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
Smart Battery information (static/infrequent update). Use for updates
from: smart battery to flight stack, flight stack to GCS. Use
BATTERY_STATUS for smart battery frequent updates.

                id                        : Battery ID (uint8_t)
                battery_function          : Function of the battery (uint8_t)
                type                      : Type (chemistry) of the battery (uint8_t)
                capacity_full_specification        : Capacity when full according to manufacturer, -1: field not provided. (int32_t)
                capacity_full             : Capacity when full (accounting for battery degradation), -1: field not provided. (int32_t)
                cycle_count               : Charge/discharge cycle count. UINT16_MAX: field not provided. (uint16_t)
                serial_number             : Serial number in ASCII characters, 0 terminated. All 0: field not provided. (char)
                device_name               : Static device name in ASCII characters, 0 terminated. All 0: field not provided. Encode as manufacturer name then product name separated using an underscore. (char)
                weight                    : Battery weight. 0: field not provided. (uint16_t)
                discharge_minimum_voltage        : Minimum per-cell voltage when discharging. If not supplied set to UINT16_MAX value. (uint16_t)
                charging_minimum_voltage        : Minimum per-cell voltage when charging. If not supplied set to UINT16_MAX value. (uint16_t)
                resting_minimum_voltage        : Minimum per-cell voltage when resting. If not supplied set to UINT16_MAX value. (uint16_t)
                charging_maximum_voltage        : Maximum per-cell voltage when charged. 0: field not provided. (uint16_t)
                cells_in_series           : Number of battery cells in series. 0: field not provided. (uint8_t)
                discharge_maximum_current        : Maximum pack discharge current. 0: field not provided. (uint32_t)
                discharge_maximum_burst_current        : Maximum pack discharge burst current. 0: field not provided. (uint32_t)
                manufacture_date          : Manufacture date (DD/MM/YYYY) in ASCII characters, 0 terminated. All 0: field not provided. (char)

*/
    mavlink20.messages.smart_battery_info = function( ...moreargs ) {
     [ this.id , this.battery_function , this.type , this.capacity_full_specification , this.capacity_full , this.cycle_count , this.serial_number , this.device_name , this.weight , this.discharge_minimum_voltage , this.charging_minimum_voltage , this.resting_minimum_voltage , this.charging_maximum_voltage , this.cells_in_series , this.discharge_maximum_current , this.discharge_maximum_burst_current , this.manufacture_date ] = moreargs;


    this._format = '<iiHHHHHBBB16s50sHBII11s';
    this._id = mavlink20.MAVLINK_MSG_ID_SMART_BATTERY_INFO;
    this.order_map = [7, 8, 9, 0, 1, 2, 10, 11, 3, 4, 5, 6, 12, 13, 14, 15, 16];
    this.len_map = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1];
    this.array_len_map = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 50, 0, 0, 0, 0, 11];
    this.crc_extra = 75;
    this._name = 'SMART_BATTERY_INFO';

    this._instance_field = 'id';
    this._instance_offset = 18;

    this.fieldnames = ['id', 'battery_function', 'type', 'capacity_full_specification', 'capacity_full', 'cycle_count', 'serial_number', 'device_name', 'weight', 'discharge_minimum_voltage', 'charging_minimum_voltage', 'resting_minimum_voltage', 'charging_maximum_voltage', 'cells_in_series', 'discharge_maximum_current', 'discharge_maximum_burst_current', 'manufacture_date'];

}

mavlink20.messages.smart_battery_info.prototype = new mavlink20.message;
mavlink20.messages.smart_battery_info.prototype.pack = function(mav) {
    var orderedfields = [ this.capacity_full_specification, this.capacity_full, this.cycle_count, this.weight, this.discharge_minimum_voltage, this.charging_minimum_voltage, this.resting_minimum_voltage, this.id, this.battery_function, this.type, this.serial_number, this.device_name, this.charging_maximum_voltage, this.cells_in_series, this.discharge_maximum_current, this.discharge_maximum_burst_current, this.manufacture_date];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink20.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
Telemetry of power generation system. Alternator or mechanical
generator.

                status                    : Status flags. (uint64_t)
                generator_speed           : Speed of electrical generator or alternator. UINT16_MAX: field not provided. (uint16_t)
                battery_current           : Current into/out of battery. Positive for out. Negative for in. NaN: field not provided. (float)
                load_current              : Current going to the UAV. If battery current not available this is the DC current from the generator. Positive for out. Negative for in. NaN: field not provided (float)
                power_generated           : The power being generated. NaN: field not provided (float)
                bus_voltage               : Voltage of the bus seen at the generator, or battery bus if battery bus is controlled by generator and at a different voltage to main bus. (float)
                rectifier_temperature        : The temperature of the rectifier or power converter. INT16_MAX: field not provided. (int16_t)
                bat_current_setpoint        : The target battery current. Positive for out. Negative for in. NaN: field not provided (float)
                generator_temperature        : The temperature of the mechanical motor, fuel cell core or generator. INT16_MAX: field not provided. (int16_t)
                runtime                   : Seconds this generator has run since it was rebooted. UINT32_MAX: field not provided. (uint32_t)
                time_until_maintenance        : Seconds until this generator requires maintenance.  A negative value indicates maintenance is past-due. INT32_MAX: field not provided. (int32_t)

*/
    mavlink20.messages.generator_status = function( ...moreargs ) {
     [ this.status , this.generator_speed , this.battery_current , this.load_current , this.power_generated , this.bus_voltage , this.rectifier_temperature , this.bat_current_setpoint , this.generator_temperature , this.runtime , this.time_until_maintenance ] = moreargs;


    this._format = '<QfffffIiHhh';
    this._id = mavlink20.MAVLINK_MSG_ID_GENERATOR_STATUS;
    this.order_map = [0, 8, 1, 2, 3, 4, 9, 5, 10, 6, 7];
    this.len_map = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1];
    this.array_len_map = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
    this.crc_extra = 117;
    this._name = 'GENERATOR_STATUS';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['status', 'generator_speed', 'battery_current', 'load_current', 'power_generated', 'bus_voltage', 'rectifier_temperature', 'bat_current_setpoint', 'generator_temperature', 'runtime', 'time_until_maintenance'];

}

mavlink20.messages.generator_status.prototype = new mavlink20.message;
mavlink20.messages.generator_status.prototype.pack = function(mav) {
    var orderedfields = [ this.status, this.battery_current, this.load_current, this.power_generated, this.bus_voltage, this.bat_current_setpoint, this.runtime, this.time_until_maintenance, this.generator_speed, this.rectifier_temperature, this.generator_temperature];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink20.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
The raw values of the actuator outputs (e.g. on Pixhawk, from MAIN,
AUX ports). This message supersedes SERVO_OUTPUT_RAW.

                time_usec                 : Timestamp (since system boot). (uint64_t)
                active                    : Active outputs (uint32_t)
                actuator                  : Servo / motor output array values. Zero values indicate unused channels. (float)

*/
    mavlink20.messages.actuator_output_status = function( ...moreargs ) {
     [ this.time_usec , this.active , this.actuator ] = moreargs;


    this._format = '<QI32f';
    this._id = mavlink20.MAVLINK_MSG_ID_ACTUATOR_OUTPUT_STATUS;
    this.order_map = [0, 1, 2];
    this.len_map = [1, 1, 32];
    this.array_len_map = [0, 0, 32];
    this.crc_extra = 251;
    this._name = 'ACTUATOR_OUTPUT_STATUS';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['time_usec', 'active', 'actuator'];

}

mavlink20.messages.actuator_output_status.prototype = new mavlink20.message;
mavlink20.messages.actuator_output_status.prototype.pack = function(mav) {
    var orderedfields = [ this.time_usec, this.active, this.actuator];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink20.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
Reports the on/off state of relays, as controlled by
MAV_CMD_DO_SET_RELAY.

                time_boot_ms              : Timestamp (time since system boot). (uint32_t)
                on                        : Relay states.  Relay instance numbers are represented as individual bits in this mask by offset. (uint16_t)
                present                   : Relay present.  Relay instance numbers are represented as individual bits in this mask by offset.  Bits will be true if a relay instance is configured. (uint16_t)

*/
    mavlink20.messages.relay_status = function( ...moreargs ) {
     [ this.time_boot_ms , this.on , this.present ] = moreargs;


    this._format = '<IHH';
    this._id = mavlink20.MAVLINK_MSG_ID_RELAY_STATUS;
    this.order_map = [0, 1, 2];
    this.len_map = [1, 1, 1];
    this.array_len_map = [0, 0, 0];
    this.crc_extra = 199;
    this._name = 'RELAY_STATUS';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['time_boot_ms', 'on', 'present'];

}

mavlink20.messages.relay_status.prototype = new mavlink20.message;
mavlink20.messages.relay_status.prototype.pack = function(mav) {
    var orderedfields = [ this.time_boot_ms, this.on, this.present];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink20.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
Message for transporting "arbitrary" variable-length data from one
component to another (broadcast is not forbidden, but discouraged).
The encoding of the data is usually extension specific, i.e.
determined by the source, and is usually not documented as part of the
MAVLink specification.

                target_system             : System ID (can be 0 for broadcast, but this is discouraged) (uint8_t)
                target_component          : Component ID (can be 0 for broadcast, but this is discouraged) (uint8_t)
                payload_type              : A code that identifies the content of the payload (0 for unknown, which is the default). If this code is less than 32768, it is a 'registered' payload type and the corresponding code should be added to the MAV_TUNNEL_PAYLOAD_TYPE enum. Software creators can register blocks of types as needed. Codes greater than 32767 are considered local experiments and should not be checked in to any widely distributed codebase. (uint16_t)
                payload_length            : Length of the data transported in payload (uint8_t)
                payload                   : Variable length payload. The payload length is defined by payload_length. The entire content of this block is opaque unless you understand the encoding specified by payload_type. (uint8_t)

*/
    mavlink20.messages.tunnel = function( ...moreargs ) {
     [ this.target_system , this.target_component , this.payload_type , this.payload_length , this.payload ] = moreargs;


    this._format = '<HBBB128s';
    this._id = mavlink20.MAVLINK_MSG_ID_TUNNEL;
    this.order_map = [1, 2, 0, 3, 4];
    this.len_map = [1, 1, 1, 1, 128];
    this.array_len_map = [0, 0, 0, 0, 128];
    this.crc_extra = 147;
    this._name = 'TUNNEL';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['target_system', 'target_component', 'payload_type', 'payload_length', 'payload'];

}

mavlink20.messages.tunnel.prototype = new mavlink20.message;
mavlink20.messages.tunnel.prototype.pack = function(mav) {
    var orderedfields = [ this.payload_type, this.target_system, this.target_component, this.payload_length, this.payload];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink20.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
A forwarded CAN frame as requested by MAV_CMD_CAN_FORWARD.

                target_system             : System ID. (uint8_t)
                target_component          : Component ID. (uint8_t)
                bus                       : bus number (uint8_t)
                len                       : Frame length (uint8_t)
                id                        : Frame ID (uint32_t)
                data                      : Frame data (uint8_t)

*/
    mavlink20.messages.can_frame = function( ...moreargs ) {
     [ this.target_system , this.target_component , this.bus , this.len , this.id , this.data ] = moreargs;


    this._format = '<IBBBB8s';
    this._id = mavlink20.MAVLINK_MSG_ID_CAN_FRAME;
    this.order_map = [1, 2, 3, 4, 0, 5];
    this.len_map = [1, 1, 1, 1, 1, 8];
    this.array_len_map = [0, 0, 0, 0, 0, 8];
    this.crc_extra = 132;
    this._name = 'CAN_FRAME';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['target_system', 'target_component', 'bus', 'len', 'id', 'data'];

}

mavlink20.messages.can_frame.prototype = new mavlink20.message;
mavlink20.messages.can_frame.prototype.pack = function(mav) {
    var orderedfields = [ this.id, this.target_system, this.target_component, this.bus, this.len, this.data];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink20.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
A forwarded CANFD frame as requested by MAV_CMD_CAN_FORWARD. These are
separated from CAN_FRAME as they need different handling (eg. TAO
handling)

                target_system             : System ID. (uint8_t)
                target_component          : Component ID. (uint8_t)
                bus                       : bus number (uint8_t)
                len                       : Frame length (uint8_t)
                id                        : Frame ID (uint32_t)
                data                      : Frame data (uint8_t)

*/
    mavlink20.messages.canfd_frame = function( ...moreargs ) {
     [ this.target_system , this.target_component , this.bus , this.len , this.id , this.data ] = moreargs;


    this._format = '<IBBBB64s';
    this._id = mavlink20.MAVLINK_MSG_ID_CANFD_FRAME;
    this.order_map = [1, 2, 3, 4, 0, 5];
    this.len_map = [1, 1, 1, 1, 1, 64];
    this.array_len_map = [0, 0, 0, 0, 0, 64];
    this.crc_extra = 4;
    this._name = 'CANFD_FRAME';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['target_system', 'target_component', 'bus', 'len', 'id', 'data'];

}

mavlink20.messages.canfd_frame.prototype = new mavlink20.message;
mavlink20.messages.canfd_frame.prototype.pack = function(mav) {
    var orderedfields = [ this.id, this.target_system, this.target_component, this.bus, this.len, this.data];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink20.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
Modify the filter of what CAN messages to forward over the mavlink.
This can be used to make CAN forwarding work well on low bandwith
links. The filtering is applied on bits 8 to 24 of the CAN id (2nd and
3rd bytes) which corresponds to the DroneCAN message ID for DroneCAN.
Filters with more than 16 IDs can be constructed by sending multiple
CAN_FILTER_MODIFY messages.

                target_system             : System ID. (uint8_t)
                target_component          : Component ID. (uint8_t)
                bus                       : bus number (uint8_t)
                operation                 : what operation to perform on the filter list. See CAN_FILTER_OP enum. (uint8_t)
                num_ids                   : number of IDs in filter list (uint8_t)
                ids                       : filter IDs, length num_ids (uint16_t)

*/
    mavlink20.messages.can_filter_modify = function( ...moreargs ) {
     [ this.target_system , this.target_component , this.bus , this.operation , this.num_ids , this.ids ] = moreargs;


    this._format = '<16HBBBBB';
    this._id = mavlink20.MAVLINK_MSG_ID_CAN_FILTER_MODIFY;
    this.order_map = [1, 2, 3, 4, 5, 0];
    this.len_map = [16, 1, 1, 1, 1, 1];
    this.array_len_map = [16, 0, 0, 0, 0, 0];
    this.crc_extra = 8;
    this._name = 'CAN_FILTER_MODIFY';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['target_system', 'target_component', 'bus', 'operation', 'num_ids', 'ids'];

}

mavlink20.messages.can_filter_modify.prototype = new mavlink20.message;
mavlink20.messages.can_filter_modify.prototype.pack = function(mav) {
    var orderedfields = [ this.ids, this.target_system, this.target_component, this.bus, this.operation, this.num_ids];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink20.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
Cumulative distance traveled for each reported wheel.

                time_usec                 : Timestamp (synced to UNIX time or since system boot). (uint64_t)
                count                     : Number of wheels reported. (uint8_t)
                distance                  : Distance reported by individual wheel encoders. Forward rotations increase values, reverse rotations decrease them. Not all wheels will necessarily have wheel encoders; the mapping of encoders to wheel positions must be agreed/understood by the endpoints. (double)

*/
    mavlink20.messages.wheel_distance = function( ...moreargs ) {
     [ this.time_usec , this.count , this.distance ] = moreargs;


    this._format = '<Q16dB';
    this._id = mavlink20.MAVLINK_MSG_ID_WHEEL_DISTANCE;
    this.order_map = [0, 2, 1];
    this.len_map = [1, 16, 1];
    this.array_len_map = [0, 16, 0];
    this.crc_extra = 113;
    this._name = 'WHEEL_DISTANCE';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['time_usec', 'count', 'distance'];

}

mavlink20.messages.wheel_distance.prototype = new mavlink20.message;
mavlink20.messages.wheel_distance.prototype.pack = function(mav) {
    var orderedfields = [ this.time_usec, this.distance, this.count];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink20.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
Winch status.

                time_usec                 : Timestamp (synced to UNIX time or since system boot). (uint64_t)
                line_length               : Length of line released. NaN if unknown (float)
                speed                     : Speed line is being released or retracted. Positive values if being released, negative values if being retracted, NaN if unknown (float)
                tension                   : Tension on the line. NaN if unknown (float)
                voltage                   : Voltage of the battery supplying the winch. NaN if unknown (float)
                current                   : Current draw from the winch. NaN if unknown (float)
                temperature               : Temperature of the motor. INT16_MAX if unknown (int16_t)
                status                    : Status flags (uint32_t)

*/
    mavlink20.messages.winch_status = function( ...moreargs ) {
     [ this.time_usec , this.line_length , this.speed , this.tension , this.voltage , this.current , this.temperature , this.status ] = moreargs;


    this._format = '<QfffffIh';
    this._id = mavlink20.MAVLINK_MSG_ID_WINCH_STATUS;
    this.order_map = [0, 1, 2, 3, 4, 5, 7, 6];
    this.len_map = [1, 1, 1, 1, 1, 1, 1, 1];
    this.array_len_map = [0, 0, 0, 0, 0, 0, 0, 0];
    this.crc_extra = 117;
    this._name = 'WINCH_STATUS';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['time_usec', 'line_length', 'speed', 'tension', 'voltage', 'current', 'temperature', 'status'];

}

mavlink20.messages.winch_status.prototype = new mavlink20.message;
mavlink20.messages.winch_status.prototype.pack = function(mav) {
    var orderedfields = [ this.time_usec, this.line_length, this.speed, this.tension, this.voltage, this.current, this.status, this.temperature];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink20.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
Data for filling the OpenDroneID Basic ID message. This and the below
messages are primarily meant for feeding data to/from an OpenDroneID
implementation. E.g. https://github.com/opendroneid/opendroneid-
core-c. These messages are compatible with the ASTM F3411 Remote ID
standard and the ASD-STAN prEN 4709-002 Direct Remote ID standard.
Additional information and usage of these messages is documented at
https://mavlink.io/en/services/opendroneid.html.

                target_system             : System ID (0 for broadcast). (uint8_t)
                target_component          : Component ID (0 for broadcast). (uint8_t)
                id_or_mac                 : Only used for drone ID data received from other UAs. See detailed description at https://mavlink.io/en/services/opendroneid.html. (uint8_t)
                id_type                   : Indicates the format for the uas_id field of this message. (uint8_t)
                ua_type                   : Indicates the type of UA (Unmanned Aircraft). (uint8_t)
                uas_id                    : UAS (Unmanned Aircraft System) ID following the format specified by id_type. Shall be filled with nulls in the unused portion of the field. (uint8_t)

*/
    mavlink20.messages.open_drone_id_basic_id = function( ...moreargs ) {
     [ this.target_system , this.target_component , this.id_or_mac , this.id_type , this.ua_type , this.uas_id ] = moreargs;


    this._format = '<BB20sBB20s';
    this._id = mavlink20.MAVLINK_MSG_ID_OPEN_DRONE_ID_BASIC_ID;
    this.order_map = [0, 1, 2, 3, 4, 5];
    this.len_map = [1, 1, 20, 1, 1, 20];
    this.array_len_map = [0, 0, 20, 0, 0, 20];
    this.crc_extra = 114;
    this._name = 'OPEN_DRONE_ID_BASIC_ID';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['target_system', 'target_component', 'id_or_mac', 'id_type', 'ua_type', 'uas_id'];

}

mavlink20.messages.open_drone_id_basic_id.prototype = new mavlink20.message;
mavlink20.messages.open_drone_id_basic_id.prototype.pack = function(mav) {
    var orderedfields = [ this.target_system, this.target_component, this.id_or_mac, this.id_type, this.ua_type, this.uas_id];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink20.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
Data for filling the OpenDroneID Location message. The float data
types are 32-bit IEEE 754. The Location message provides the location,
altitude, direction and speed of the aircraft.

                target_system             : System ID (0 for broadcast). (uint8_t)
                target_component          : Component ID (0 for broadcast). (uint8_t)
                id_or_mac                 : Only used for drone ID data received from other UAs. See detailed description at https://mavlink.io/en/services/opendroneid.html. (uint8_t)
                status                    : Indicates whether the unmanned aircraft is on the ground or in the air. (uint8_t)
                direction                 : Direction over ground (not heading, but direction of movement) measured clockwise from true North: 0 - 35999 centi-degrees. If unknown: 36100 centi-degrees. (uint16_t)
                speed_horizontal          : Ground speed. Positive only. If unknown: 25500 cm/s. If speed is larger than 25425 cm/s, use 25425 cm/s. (uint16_t)
                speed_vertical            : The vertical speed. Up is positive. If unknown: 6300 cm/s. If speed is larger than 6200 cm/s, use 6200 cm/s. If lower than -6200 cm/s, use -6200 cm/s. (int16_t)
                latitude                  : Current latitude of the unmanned aircraft. If unknown: 0 (both Lat/Lon). (int32_t)
                longitude                 : Current longitude of the unmanned aircraft. If unknown: 0 (both Lat/Lon). (int32_t)
                altitude_barometric        : The altitude calculated from the barometric pressue. Reference is against 29.92inHg or 1013.2mb. If unknown: -1000 m. (float)
                altitude_geodetic         : The geodetic altitude as defined by WGS84. If unknown: -1000 m. (float)
                height_reference          : Indicates the reference point for the height field. (uint8_t)
                height                    : The current height of the unmanned aircraft above the take-off location or the ground as indicated by height_reference. If unknown: -1000 m. (float)
                horizontal_accuracy        : The accuracy of the horizontal position. (uint8_t)
                vertical_accuracy         : The accuracy of the vertical position. (uint8_t)
                barometer_accuracy        : The accuracy of the barometric altitude. (uint8_t)
                speed_accuracy            : The accuracy of the horizontal and vertical speed. (uint8_t)
                timestamp                 : Seconds after the full hour with reference to UTC time. Typically the GPS outputs a time-of-week value in milliseconds. First convert that to UTC and then convert for this field using ((float) (time_week_ms % (60*60*1000))) / 1000. If unknown: 0xFFFF. (float)
                timestamp_accuracy        : The accuracy of the timestamps. (uint8_t)

*/
    mavlink20.messages.open_drone_id_location = function( ...moreargs ) {
     [ this.target_system , this.target_component , this.id_or_mac , this.status , this.direction , this.speed_horizontal , this.speed_vertical , this.latitude , this.longitude , this.altitude_barometric , this.altitude_geodetic , this.height_reference , this.height , this.horizontal_accuracy , this.vertical_accuracy , this.barometer_accuracy , this.speed_accuracy , this.timestamp , this.timestamp_accuracy ] = moreargs;


    this._format = '<iiffffHHhBB20sBBBBBBB';
    this._id = mavlink20.MAVLINK_MSG_ID_OPEN_DRONE_ID_LOCATION;
    this.order_map = [9, 10, 11, 12, 6, 7, 8, 0, 1, 2, 3, 13, 4, 14, 15, 16, 17, 5, 18];
    this.len_map = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 20, 1, 1, 1, 1, 1, 1, 1];
    this.array_len_map = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 0, 0, 0, 0, 0, 0, 0];
    this.crc_extra = 254;
    this._name = 'OPEN_DRONE_ID_LOCATION';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['target_system', 'target_component', 'id_or_mac', 'status', 'direction', 'speed_horizontal', 'speed_vertical', 'latitude', 'longitude', 'altitude_barometric', 'altitude_geodetic', 'height_reference', 'height', 'horizontal_accuracy', 'vertical_accuracy', 'barometer_accuracy', 'speed_accuracy', 'timestamp', 'timestamp_accuracy'];

}

mavlink20.messages.open_drone_id_location.prototype = new mavlink20.message;
mavlink20.messages.open_drone_id_location.prototype.pack = function(mav) {
    var orderedfields = [ this.latitude, this.longitude, this.altitude_barometric, this.altitude_geodetic, this.height, this.timestamp, this.direction, this.speed_horizontal, this.speed_vertical, this.target_system, this.target_component, this.id_or_mac, this.status, this.height_reference, this.horizontal_accuracy, this.vertical_accuracy, this.barometer_accuracy, this.speed_accuracy, this.timestamp_accuracy];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink20.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
Data for filling the OpenDroneID Authentication message. The
Authentication Message defines a field that can provide a means of
authenticity for the identity of the UAS (Unmanned Aircraft System).
The Authentication message can have two different formats. For data
page 0, the fields PageCount, Length and TimeStamp are present and
AuthData is only 17 bytes. For data page 1 through 15, PageCount,
Length and TimeStamp are not present and the size of AuthData is 23
bytes.

                target_system             : System ID (0 for broadcast). (uint8_t)
                target_component          : Component ID (0 for broadcast). (uint8_t)
                id_or_mac                 : Only used for drone ID data received from other UAs. See detailed description at https://mavlink.io/en/services/opendroneid.html. (uint8_t)
                authentication_type        : Indicates the type of authentication. (uint8_t)
                data_page                 : Allowed range is 0 - 15. (uint8_t)
                last_page_index           : This field is only present for page 0. Allowed range is 0 - 15. See the description of struct ODID_Auth_data at https://github.com/opendroneid/opendroneid-core-c/blob/master/libopendroneid/opendroneid.h. (uint8_t)
                length                    : This field is only present for page 0. Total bytes of authentication_data from all data pages. See the description of struct ODID_Auth_data at https://github.com/opendroneid/opendroneid-core-c/blob/master/libopendroneid/opendroneid.h. (uint8_t)
                timestamp                 : This field is only present for page 0. 32 bit Unix Timestamp in seconds since 00:00:00 01/01/2019. (uint32_t)
                authentication_data        : Opaque authentication data. For page 0, the size is only 17 bytes. For other pages, the size is 23 bytes. Shall be filled with nulls in the unused portion of the field. (uint8_t)

*/
    mavlink20.messages.open_drone_id_authentication = function( ...moreargs ) {
     [ this.target_system , this.target_component , this.id_or_mac , this.authentication_type , this.data_page , this.last_page_index , this.length , this.timestamp , this.authentication_data ] = moreargs;


    this._format = '<IBB20sBBBB23s';
    this._id = mavlink20.MAVLINK_MSG_ID_OPEN_DRONE_ID_AUTHENTICATION;
    this.order_map = [1, 2, 3, 4, 5, 6, 7, 0, 8];
    this.len_map = [1, 1, 1, 20, 1, 1, 1, 1, 23];
    this.array_len_map = [0, 0, 0, 20, 0, 0, 0, 0, 23];
    this.crc_extra = 140;
    this._name = 'OPEN_DRONE_ID_AUTHENTICATION';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['target_system', 'target_component', 'id_or_mac', 'authentication_type', 'data_page', 'last_page_index', 'length', 'timestamp', 'authentication_data'];

}

mavlink20.messages.open_drone_id_authentication.prototype = new mavlink20.message;
mavlink20.messages.open_drone_id_authentication.prototype.pack = function(mav) {
    var orderedfields = [ this.timestamp, this.target_system, this.target_component, this.id_or_mac, this.authentication_type, this.data_page, this.last_page_index, this.length, this.authentication_data];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink20.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
Data for filling the OpenDroneID Self ID message. The Self ID Message
is an opportunity for the operator to (optionally) declare their
identity and purpose of the flight. This message can provide
additional information that could reduce the threat profile of a UA
(Unmanned Aircraft) flying in a particular area or manner. This
message can also be used to provide optional additional clarification
in an emergency/remote ID system failure situation.

                target_system             : System ID (0 for broadcast). (uint8_t)
                target_component          : Component ID (0 for broadcast). (uint8_t)
                id_or_mac                 : Only used for drone ID data received from other UAs. See detailed description at https://mavlink.io/en/services/opendroneid.html. (uint8_t)
                description_type          : Indicates the type of the description field. (uint8_t)
                description               : Text description or numeric value expressed as ASCII characters. Shall be filled with nulls in the unused portion of the field. (char)

*/
    mavlink20.messages.open_drone_id_self_id = function( ...moreargs ) {
     [ this.target_system , this.target_component , this.id_or_mac , this.description_type , this.description ] = moreargs;


    this._format = '<BB20sB23s';
    this._id = mavlink20.MAVLINK_MSG_ID_OPEN_DRONE_ID_SELF_ID;
    this.order_map = [0, 1, 2, 3, 4];
    this.len_map = [1, 1, 20, 1, 1];
    this.array_len_map = [0, 0, 20, 0, 23];
    this.crc_extra = 249;
    this._name = 'OPEN_DRONE_ID_SELF_ID';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['target_system', 'target_component', 'id_or_mac', 'description_type', 'description'];

}

mavlink20.messages.open_drone_id_self_id.prototype = new mavlink20.message;
mavlink20.messages.open_drone_id_self_id.prototype.pack = function(mav) {
    var orderedfields = [ this.target_system, this.target_component, this.id_or_mac, this.description_type, this.description];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink20.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
Data for filling the OpenDroneID System message. The System Message
contains general system information including the operator
location/altitude and possible aircraft group and/or category/class
information.

                target_system             : System ID (0 for broadcast). (uint8_t)
                target_component          : Component ID (0 for broadcast). (uint8_t)
                id_or_mac                 : Only used for drone ID data received from other UAs. See detailed description at https://mavlink.io/en/services/opendroneid.html. (uint8_t)
                operator_location_type        : Specifies the operator location type. (uint8_t)
                classification_type        : Specifies the classification type of the UA. (uint8_t)
                operator_latitude         : Latitude of the operator. If unknown: 0 (both Lat/Lon). (int32_t)
                operator_longitude        : Longitude of the operator. If unknown: 0 (both Lat/Lon). (int32_t)
                area_count                : Number of aircraft in the area, group or formation (default 1). (uint16_t)
                area_radius               : Radius of the cylindrical area of the group or formation (default 0). (uint16_t)
                area_ceiling              : Area Operations Ceiling relative to WGS84. If unknown: -1000 m. (float)
                area_floor                : Area Operations Floor relative to WGS84. If unknown: -1000 m. (float)
                category_eu               : When classification_type is MAV_ODID_CLASSIFICATION_TYPE_EU, specifies the category of the UA. (uint8_t)
                class_eu                  : When classification_type is MAV_ODID_CLASSIFICATION_TYPE_EU, specifies the class of the UA. (uint8_t)
                operator_altitude_geo        : Geodetic altitude of the operator relative to WGS84. If unknown: -1000 m. (float)
                timestamp                 : 32 bit Unix Timestamp in seconds since 00:00:00 01/01/2019. (uint32_t)

*/
    mavlink20.messages.open_drone_id_system = function( ...moreargs ) {
     [ this.target_system , this.target_component , this.id_or_mac , this.operator_location_type , this.classification_type , this.operator_latitude , this.operator_longitude , this.area_count , this.area_radius , this.area_ceiling , this.area_floor , this.category_eu , this.class_eu , this.operator_altitude_geo , this.timestamp ] = moreargs;


    this._format = '<iifffIHHBB20sBBBB';
    this._id = mavlink20.MAVLINK_MSG_ID_OPEN_DRONE_ID_SYSTEM;
    this.order_map = [8, 9, 10, 11, 12, 0, 1, 6, 7, 2, 3, 13, 14, 4, 5];
    this.len_map = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 20, 1, 1, 1, 1];
    this.array_len_map = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 0, 0, 0, 0];
    this.crc_extra = 77;
    this._name = 'OPEN_DRONE_ID_SYSTEM';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['target_system', 'target_component', 'id_or_mac', 'operator_location_type', 'classification_type', 'operator_latitude', 'operator_longitude', 'area_count', 'area_radius', 'area_ceiling', 'area_floor', 'category_eu', 'class_eu', 'operator_altitude_geo', 'timestamp'];

}

mavlink20.messages.open_drone_id_system.prototype = new mavlink20.message;
mavlink20.messages.open_drone_id_system.prototype.pack = function(mav) {
    var orderedfields = [ this.operator_latitude, this.operator_longitude, this.area_ceiling, this.area_floor, this.operator_altitude_geo, this.timestamp, this.area_count, this.area_radius, this.target_system, this.target_component, this.id_or_mac, this.operator_location_type, this.classification_type, this.category_eu, this.class_eu];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink20.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
Data for filling the OpenDroneID Operator ID message, which contains
the CAA (Civil Aviation Authority) issued operator ID.

                target_system             : System ID (0 for broadcast). (uint8_t)
                target_component          : Component ID (0 for broadcast). (uint8_t)
                id_or_mac                 : Only used for drone ID data received from other UAs. See detailed description at https://mavlink.io/en/services/opendroneid.html. (uint8_t)
                operator_id_type          : Indicates the type of the operator_id field. (uint8_t)
                operator_id               : Text description or numeric value expressed as ASCII characters. Shall be filled with nulls in the unused portion of the field. (char)

*/
    mavlink20.messages.open_drone_id_operator_id = function( ...moreargs ) {
     [ this.target_system , this.target_component , this.id_or_mac , this.operator_id_type , this.operator_id ] = moreargs;


    this._format = '<BB20sB20s';
    this._id = mavlink20.MAVLINK_MSG_ID_OPEN_DRONE_ID_OPERATOR_ID;
    this.order_map = [0, 1, 2, 3, 4];
    this.len_map = [1, 1, 20, 1, 1];
    this.array_len_map = [0, 0, 20, 0, 20];
    this.crc_extra = 49;
    this._name = 'OPEN_DRONE_ID_OPERATOR_ID';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['target_system', 'target_component', 'id_or_mac', 'operator_id_type', 'operator_id'];

}

mavlink20.messages.open_drone_id_operator_id.prototype = new mavlink20.message;
mavlink20.messages.open_drone_id_operator_id.prototype.pack = function(mav) {
    var orderedfields = [ this.target_system, this.target_component, this.id_or_mac, this.operator_id_type, this.operator_id];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink20.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
Status from the transmitter telling the flight controller if the
remote ID system is ready for arming.

                status                    : Status level indicating if arming is allowed. (uint8_t)
                error                     : Text error message, should be empty if status is good to arm. Fill with nulls in unused portion. (char)

*/
    mavlink20.messages.open_drone_id_arm_status = function( ...moreargs ) {
     [ this.status , this.error ] = moreargs;


    this._format = '<B50s';
    this._id = mavlink20.MAVLINK_MSG_ID_OPEN_DRONE_ID_ARM_STATUS;
    this.order_map = [0, 1];
    this.len_map = [1, 1];
    this.array_len_map = [0, 50];
    this.crc_extra = 139;
    this._name = 'OPEN_DRONE_ID_ARM_STATUS';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['status', 'error'];

}

mavlink20.messages.open_drone_id_arm_status.prototype = new mavlink20.message;
mavlink20.messages.open_drone_id_arm_status.prototype.pack = function(mav) {
    var orderedfields = [ this.status, this.error];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink20.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
An OpenDroneID message pack is a container for multiple encoded
OpenDroneID messages (i.e. not in the format given for the above
message descriptions but after encoding into the compressed
OpenDroneID byte format). Used e.g. when transmitting on Bluetooth 5.0
Long Range/Extended Advertising or on WiFi Neighbor Aware Networking
or on WiFi Beacon.

                target_system             : System ID (0 for broadcast). (uint8_t)
                target_component          : Component ID (0 for broadcast). (uint8_t)
                id_or_mac                 : Only used for drone ID data received from other UAs. See detailed description at https://mavlink.io/en/services/opendroneid.html. (uint8_t)
                single_message_size        : This field must currently always be equal to 25 (bytes), since all encoded OpenDroneID messages are specificed to have this length. (uint8_t)
                msg_pack_size             : Number of encoded messages in the pack (not the number of bytes). Allowed range is 1 - 9. (uint8_t)
                messages                  : Concatenation of encoded OpenDroneID messages. Shall be filled with nulls in the unused portion of the field. (uint8_t)

*/
    mavlink20.messages.open_drone_id_message_pack = function( ...moreargs ) {
     [ this.target_system , this.target_component , this.id_or_mac , this.single_message_size , this.msg_pack_size , this.messages ] = moreargs;


    this._format = '<BB20sBB225s';
    this._id = mavlink20.MAVLINK_MSG_ID_OPEN_DRONE_ID_MESSAGE_PACK;
    this.order_map = [0, 1, 2, 3, 4, 5];
    this.len_map = [1, 1, 20, 1, 1, 225];
    this.array_len_map = [0, 0, 20, 0, 0, 225];
    this.crc_extra = 94;
    this._name = 'OPEN_DRONE_ID_MESSAGE_PACK';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['target_system', 'target_component', 'id_or_mac', 'single_message_size', 'msg_pack_size', 'messages'];

}

mavlink20.messages.open_drone_id_message_pack.prototype = new mavlink20.message;
mavlink20.messages.open_drone_id_message_pack.prototype.pack = function(mav) {
    var orderedfields = [ this.target_system, this.target_component, this.id_or_mac, this.single_message_size, this.msg_pack_size, this.messages];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink20.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
Update the data in the OPEN_DRONE_ID_SYSTEM message with new location
information. This can be sent to update the location information for
the operator when no other information in the SYSTEM message has
changed. This message allows for efficient operation on radio links
which have limited uplink bandwidth while meeting requirements for
update frequency of the operator location.

                target_system             : System ID (0 for broadcast). (uint8_t)
                target_component          : Component ID (0 for broadcast). (uint8_t)
                operator_latitude         : Latitude of the operator. If unknown: 0 (both Lat/Lon). (int32_t)
                operator_longitude        : Longitude of the operator. If unknown: 0 (both Lat/Lon). (int32_t)
                operator_altitude_geo        : Geodetic altitude of the operator relative to WGS84. If unknown: -1000 m. (float)
                timestamp                 : 32 bit Unix Timestamp in seconds since 00:00:00 01/01/2019. (uint32_t)

*/
    mavlink20.messages.open_drone_id_system_update = function( ...moreargs ) {
     [ this.target_system , this.target_component , this.operator_latitude , this.operator_longitude , this.operator_altitude_geo , this.timestamp ] = moreargs;


    this._format = '<iifIBB';
    this._id = mavlink20.MAVLINK_MSG_ID_OPEN_DRONE_ID_SYSTEM_UPDATE;
    this.order_map = [4, 5, 0, 1, 2, 3];
    this.len_map = [1, 1, 1, 1, 1, 1];
    this.array_len_map = [0, 0, 0, 0, 0, 0];
    this.crc_extra = 7;
    this._name = 'OPEN_DRONE_ID_SYSTEM_UPDATE';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['target_system', 'target_component', 'operator_latitude', 'operator_longitude', 'operator_altitude_geo', 'timestamp'];

}

mavlink20.messages.open_drone_id_system_update.prototype = new mavlink20.message;
mavlink20.messages.open_drone_id_system_update.prototype.pack = function(mav) {
    var orderedfields = [ this.operator_latitude, this.operator_longitude, this.operator_altitude_geo, this.timestamp, this.target_system, this.target_component];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink20.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
Temperature and humidity from hygrometer.

                id                        : Hygrometer ID (uint8_t)
                temperature               : Temperature (int16_t)
                humidity                  : Humidity (uint16_t)

*/
    mavlink20.messages.hygrometer_sensor = function( ...moreargs ) {
     [ this.id , this.temperature , this.humidity ] = moreargs;


    this._format = '<hHB';
    this._id = mavlink20.MAVLINK_MSG_ID_HYGROMETER_SENSOR;
    this.order_map = [2, 0, 1];
    this.len_map = [1, 1, 1];
    this.array_len_map = [0, 0, 0];
    this.crc_extra = 20;
    this._name = 'HYGROMETER_SENSOR';

    this._instance_field = 'id';
    this._instance_offset = 4;

    this.fieldnames = ['id', 'temperature', 'humidity'];

}

mavlink20.messages.hygrometer_sensor.prototype = new mavlink20.message;
mavlink20.messages.hygrometer_sensor.prototype.pack = function(mav) {
    var orderedfields = [ this.temperature, this.humidity, this.id];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink20.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
Static data to configure the ADS-B transponder (send within 10 sec of
a POR and every 10 sec thereafter)

                ICAO                      : Vehicle address (24 bit) (uint32_t)
                callsign                  : Vehicle identifier (8 characters, null terminated, valid characters are A-Z, 0-9, " " only) (char)
                emitterType               : Transmitting vehicle type. See ADSB_EMITTER_TYPE enum (uint8_t)
                aircraftSize              : Aircraft length and width encoding (table 2-35 of DO-282B) (uint8_t)
                gpsOffsetLat              : GPS antenna lateral offset (table 2-36 of DO-282B) (uint8_t)
                gpsOffsetLon              : GPS antenna longitudinal offset from nose [if non-zero, take position (in meters) divide by 2 and add one] (table 2-37 DO-282B) (uint8_t)
                stallSpeed                : Aircraft stall speed in cm/s (uint16_t)
                rfSelect                  : ADS-B transponder reciever and transmit enable flags (uint8_t)

*/
    mavlink20.messages.uavionix_adsb_out_cfg = function( ...moreargs ) {
     [ this.ICAO , this.callsign , this.emitterType , this.aircraftSize , this.gpsOffsetLat , this.gpsOffsetLon , this.stallSpeed , this.rfSelect ] = moreargs;


    this._format = '<IH9sBBBBB';
    this._id = mavlink20.MAVLINK_MSG_ID_UAVIONIX_ADSB_OUT_CFG;
    this.order_map = [0, 2, 3, 4, 5, 6, 1, 7];
    this.len_map = [1, 1, 1, 1, 1, 1, 1, 1];
    this.array_len_map = [0, 0, 9, 0, 0, 0, 0, 0];
    this.crc_extra = 209;
    this._name = 'UAVIONIX_ADSB_OUT_CFG';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['ICAO', 'callsign', 'emitterType', 'aircraftSize', 'gpsOffsetLat', 'gpsOffsetLon', 'stallSpeed', 'rfSelect'];

}

mavlink20.messages.uavionix_adsb_out_cfg.prototype = new mavlink20.message;
mavlink20.messages.uavionix_adsb_out_cfg.prototype.pack = function(mav) {
    var orderedfields = [ this.ICAO, this.stallSpeed, this.callsign, this.emitterType, this.aircraftSize, this.gpsOffsetLat, this.gpsOffsetLon, this.rfSelect];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink20.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
Dynamic data used to generate ADS-B out transponder data (send at 5Hz)

                utcTime                   : UTC time in seconds since GPS epoch (Jan 6, 1980). If unknown set to UINT32_MAX (uint32_t)
                gpsLat                    : Latitude WGS84 (deg * 1E7). If unknown set to INT32_MAX (int32_t)
                gpsLon                    : Longitude WGS84 (deg * 1E7). If unknown set to INT32_MAX (int32_t)
                gpsAlt                    : Altitude (WGS84). UP +ve. If unknown set to INT32_MAX (int32_t)
                gpsFix                    : 0-1: no fix, 2: 2D fix, 3: 3D fix, 4: DGPS, 5: RTK (uint8_t)
                numSats                   : Number of satellites visible. If unknown set to UINT8_MAX (uint8_t)
                baroAltMSL                : Barometric pressure altitude (MSL) relative to a standard atmosphere of 1013.2 mBar and NOT bar corrected altitude (m * 1E-3). (up +ve). If unknown set to INT32_MAX (int32_t)
                accuracyHor               : Horizontal accuracy in mm (m * 1E-3). If unknown set to UINT32_MAX (uint32_t)
                accuracyVert              : Vertical accuracy in cm. If unknown set to UINT16_MAX (uint16_t)
                accuracyVel               : Velocity accuracy in mm/s (m * 1E-3). If unknown set to UINT16_MAX (uint16_t)
                velVert                   : GPS vertical speed in cm/s. If unknown set to INT16_MAX (int16_t)
                velNS                     : North-South velocity over ground in cm/s North +ve. If unknown set to INT16_MAX (int16_t)
                VelEW                     : East-West velocity over ground in cm/s East +ve. If unknown set to INT16_MAX (int16_t)
                emergencyStatus           : Emergency status (uint8_t)
                state                     : ADS-B transponder dynamic input state flags (uint16_t)
                squawk                    : Mode A code (typically 1200 [0x04B0] for VFR) (uint16_t)

*/
    mavlink20.messages.uavionix_adsb_out_dynamic = function( ...moreargs ) {
     [ this.utcTime , this.gpsLat , this.gpsLon , this.gpsAlt , this.gpsFix , this.numSats , this.baroAltMSL , this.accuracyHor , this.accuracyVert , this.accuracyVel , this.velVert , this.velNS , this.VelEW , this.emergencyStatus , this.state , this.squawk ] = moreargs;


    this._format = '<IiiiiIHHhhhHHBBB';
    this._id = mavlink20.MAVLINK_MSG_ID_UAVIONIX_ADSB_OUT_DYNAMIC;
    this.order_map = [0, 1, 2, 3, 13, 14, 4, 5, 6, 7, 8, 9, 10, 15, 11, 12];
    this.len_map = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1];
    this.array_len_map = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
    this.crc_extra = 186;
    this._name = 'UAVIONIX_ADSB_OUT_DYNAMIC';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['utcTime', 'gpsLat', 'gpsLon', 'gpsAlt', 'gpsFix', 'numSats', 'baroAltMSL', 'accuracyHor', 'accuracyVert', 'accuracyVel', 'velVert', 'velNS', 'VelEW', 'emergencyStatus', 'state', 'squawk'];

}

mavlink20.messages.uavionix_adsb_out_dynamic.prototype = new mavlink20.message;
mavlink20.messages.uavionix_adsb_out_dynamic.prototype.pack = function(mav) {
    var orderedfields = [ this.utcTime, this.gpsLat, this.gpsLon, this.gpsAlt, this.baroAltMSL, this.accuracyHor, this.accuracyVert, this.accuracyVel, this.velVert, this.velNS, this.VelEW, this.state, this.squawk, this.gpsFix, this.numSats, this.emergencyStatus];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink20.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
Transceiver heartbeat with health report (updated every 10s)

                rfHealth                  : ADS-B transponder messages (uint8_t)

*/
    mavlink20.messages.uavionix_adsb_transceiver_health_report = function( ...moreargs ) {
     [ this.rfHealth ] = moreargs;


    this._format = '<B';
    this._id = mavlink20.MAVLINK_MSG_ID_UAVIONIX_ADSB_TRANSCEIVER_HEALTH_REPORT;
    this.order_map = [0];
    this.len_map = [1];
    this.array_len_map = [0];
    this.crc_extra = 4;
    this._name = 'UAVIONIX_ADSB_TRANSCEIVER_HEALTH_REPORT';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['rfHealth'];

}

mavlink20.messages.uavionix_adsb_transceiver_health_report.prototype = new mavlink20.message;
mavlink20.messages.uavionix_adsb_transceiver_health_report.prototype.pack = function(mav) {
    var orderedfields = [ this.rfHealth];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink20.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
Aircraft Registration.

                registration              : Aircraft Registration (ASCII string A-Z, 0-9 only), e.g. "N8644B ". Trailing spaces (0x20) only. This is null-terminated. (char)

*/
    mavlink20.messages.uavionix_adsb_out_cfg_registration = function( ...moreargs ) {
     [ this.registration ] = moreargs;


    this._format = '<9s';
    this._id = mavlink20.MAVLINK_MSG_ID_UAVIONIX_ADSB_OUT_CFG_REGISTRATION;
    this.order_map = [0];
    this.len_map = [1];
    this.array_len_map = [9];
    this.crc_extra = 133;
    this._name = 'UAVIONIX_ADSB_OUT_CFG_REGISTRATION';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['registration'];

}

mavlink20.messages.uavionix_adsb_out_cfg_registration.prototype = new mavlink20.message;
mavlink20.messages.uavionix_adsb_out_cfg_registration.prototype.pack = function(mav) {
    var orderedfields = [ this.registration];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink20.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
Flight Identification for ADSB-Out vehicles.

                flight_id                 : Flight Identification: 8 ASCII characters, '0' through '9', 'A' through 'Z' or space. Spaces (0x20) used as a trailing pad character, or when call sign is unavailable. Reflects Control message setting. This is null-terminated. (char)

*/
    mavlink20.messages.uavionix_adsb_out_cfg_flightid = function( ...moreargs ) {
     [ this.flight_id ] = moreargs;


    this._format = '<9s';
    this._id = mavlink20.MAVLINK_MSG_ID_UAVIONIX_ADSB_OUT_CFG_FLIGHTID;
    this.order_map = [0];
    this.len_map = [1];
    this.array_len_map = [9];
    this.crc_extra = 103;
    this._name = 'UAVIONIX_ADSB_OUT_CFG_FLIGHTID';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['flight_id'];

}

mavlink20.messages.uavionix_adsb_out_cfg_flightid.prototype = new mavlink20.message;
mavlink20.messages.uavionix_adsb_out_cfg_flightid.prototype.pack = function(mav) {
    var orderedfields = [ this.flight_id];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink20.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
Request messages.

                ReqMessageId              : Message ID to request. Supports any message in this 10000-10099 range (uint32_t)

*/
    mavlink20.messages.uavionix_adsb_get = function( ...moreargs ) {
     [ this.ReqMessageId ] = moreargs;


    this._format = '<I';
    this._id = mavlink20.MAVLINK_MSG_ID_UAVIONIX_ADSB_GET;
    this.order_map = [0];
    this.len_map = [1];
    this.array_len_map = [0];
    this.crc_extra = 193;
    this._name = 'UAVIONIX_ADSB_GET';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['ReqMessageId'];

}

mavlink20.messages.uavionix_adsb_get.prototype = new mavlink20.message;
mavlink20.messages.uavionix_adsb_get.prototype.pack = function(mav) {
    var orderedfields = [ this.ReqMessageId];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink20.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
Control message with all data sent in UCP control message.

                state                     : ADS-B transponder control state flags (uint8_t)
                baroAltMSL                : Barometric pressure altitude (MSL) relative to a standard atmosphere of 1013.2 mBar and NOT bar corrected altitude (m * 1E-3). (up +ve). If unknown set to INT32_MAX (int32_t)
                squawk                    : Mode A code (typically 1200 [0x04B0] for VFR) (uint16_t)
                emergencyStatus           : Emergency status (uint8_t)
                flight_id                 : Flight Identification: 8 ASCII characters, '0' through '9', 'A' through 'Z' or space. Spaces (0x20) used as a trailing pad character, or when call sign is unavailable. (char)
                x_bit                     : X-Bit enable (military transponders only) (uint8_t)

*/
    mavlink20.messages.uavionix_adsb_out_control = function( ...moreargs ) {
     [ this.state , this.baroAltMSL , this.squawk , this.emergencyStatus , this.flight_id , this.x_bit ] = moreargs;


    this._format = '<iHBB8sB';
    this._id = mavlink20.MAVLINK_MSG_ID_UAVIONIX_ADSB_OUT_CONTROL;
    this.order_map = [2, 0, 1, 3, 4, 5];
    this.len_map = [1, 1, 1, 1, 1, 1];
    this.array_len_map = [0, 0, 0, 0, 8, 0];
    this.crc_extra = 71;
    this._name = 'UAVIONIX_ADSB_OUT_CONTROL';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['state', 'baroAltMSL', 'squawk', 'emergencyStatus', 'flight_id', 'x_bit'];

}

mavlink20.messages.uavionix_adsb_out_control.prototype = new mavlink20.message;
mavlink20.messages.uavionix_adsb_out_control.prototype.pack = function(mav) {
    var orderedfields = [ this.baroAltMSL, this.squawk, this.state, this.emergencyStatus, this.flight_id, this.x_bit];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink20.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
Status message with information from UCP Heartbeat and Status
messages.

                state                     : ADS-B transponder status state flags (uint8_t)
                squawk                    : Mode A code (typically 1200 [0x04B0] for VFR) (uint16_t)
                NIC_NACp                  : Integrity and Accuracy of traffic reported as a 4-bit value for each field (NACp 7:4, NIC 3:0) and encoded by Containment Radius (HPL) and Estimated Position Uncertainty (HFOM), respectively (uint8_t)
                boardTemp                 : Board temperature in C (uint8_t)
                fault                     : ADS-B transponder fault flags (uint8_t)
                flight_id                 : Flight Identification: 8 ASCII characters, '0' through '9', 'A' through 'Z' or space. Spaces (0x20) used as a trailing pad character, or when call sign is unavailable. (char)

*/
    mavlink20.messages.uavionix_adsb_out_status = function( ...moreargs ) {
     [ this.state , this.squawk , this.NIC_NACp , this.boardTemp , this.fault , this.flight_id ] = moreargs;


    this._format = '<HBBBB8s';
    this._id = mavlink20.MAVLINK_MSG_ID_UAVIONIX_ADSB_OUT_STATUS;
    this.order_map = [1, 0, 2, 3, 4, 5];
    this.len_map = [1, 1, 1, 1, 1, 1];
    this.array_len_map = [0, 0, 0, 0, 0, 8];
    this.crc_extra = 240;
    this._name = 'UAVIONIX_ADSB_OUT_STATUS';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['state', 'squawk', 'NIC_NACp', 'boardTemp', 'fault', 'flight_id'];

}

mavlink20.messages.uavionix_adsb_out_status.prototype = new mavlink20.message;
mavlink20.messages.uavionix_adsb_out_status.prototype.pack = function(mav) {
    var orderedfields = [ this.squawk, this.state, this.NIC_NACp, this.boardTemp, this.fault, this.flight_id];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink20.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
ICAROUS heartbeat

                status                    : See the FMS_STATE enum. (uint8_t)

*/
    mavlink20.messages.icarous_heartbeat = function( ...moreargs ) {
     [ this.status ] = moreargs;


    this._format = '<B';
    this._id = mavlink20.MAVLINK_MSG_ID_ICAROUS_HEARTBEAT;
    this.order_map = [0];
    this.len_map = [1];
    this.array_len_map = [0];
    this.crc_extra = 227;
    this._name = 'ICAROUS_HEARTBEAT';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['status'];

}

mavlink20.messages.icarous_heartbeat.prototype = new mavlink20.message;
mavlink20.messages.icarous_heartbeat.prototype.pack = function(mav) {
    var orderedfields = [ this.status];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink20.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
Kinematic multi bands (track) output from Daidalus

                numBands                  : Number of track bands (int8_t)
                type1                     : See the TRACK_BAND_TYPES enum. (uint8_t)
                min1                      : min angle (degrees) (float)
                max1                      : max angle (degrees) (float)
                type2                     : See the TRACK_BAND_TYPES enum. (uint8_t)
                min2                      : min angle (degrees) (float)
                max2                      : max angle (degrees) (float)
                type3                     : See the TRACK_BAND_TYPES enum. (uint8_t)
                min3                      : min angle (degrees) (float)
                max3                      : max angle (degrees) (float)
                type4                     : See the TRACK_BAND_TYPES enum. (uint8_t)
                min4                      : min angle (degrees) (float)
                max4                      : max angle (degrees) (float)
                type5                     : See the TRACK_BAND_TYPES enum. (uint8_t)
                min5                      : min angle (degrees) (float)
                max5                      : max angle (degrees) (float)

*/
    mavlink20.messages.icarous_kinematic_bands = function( ...moreargs ) {
     [ this.numBands , this.type1 , this.min1 , this.max1 , this.type2 , this.min2 , this.max2 , this.type3 , this.min3 , this.max3 , this.type4 , this.min4 , this.max4 , this.type5 , this.min5 , this.max5 ] = moreargs;


    this._format = '<ffffffffffbBBBBB';
    this._id = mavlink20.MAVLINK_MSG_ID_ICAROUS_KINEMATIC_BANDS;
    this.order_map = [10, 11, 0, 1, 12, 2, 3, 13, 4, 5, 14, 6, 7, 15, 8, 9];
    this.len_map = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1];
    this.array_len_map = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
    this.crc_extra = 239;
    this._name = 'ICAROUS_KINEMATIC_BANDS';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['numBands', 'type1', 'min1', 'max1', 'type2', 'min2', 'max2', 'type3', 'min3', 'max3', 'type4', 'min4', 'max4', 'type5', 'min5', 'max5'];

}

mavlink20.messages.icarous_kinematic_bands.prototype = new mavlink20.message;
mavlink20.messages.icarous_kinematic_bands.prototype.pack = function(mav) {
    var orderedfields = [ this.min1, this.max1, this.min2, this.max2, this.min3, this.max3, this.min4, this.max4, this.min5, this.max5, this.numBands, this.type1, this.type2, this.type3, this.type4, this.type5];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink20.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
Composite EFI and Governor data from Loweheiser equipment.  This
message is created by the EFI unit based on its own data and data
received from a governor attached to that EFI unit.

                volt_batt                 : Generator Battery voltage. (float)
                curr_batt                 : Generator Battery current. (float)
                curr_gen                  : Current being produced by generator. (float)
                curr_rot                  : Load current being consumed by the UAV (sum of curr_gen and curr_batt) (float)
                fuel_level                : Generator fuel remaining in litres. (float)
                throttle                  : Throttle Output. (float)
                runtime                   : Seconds this generator has run since it was rebooted. (uint32_t)
                until_maintenance         : Seconds until this generator requires maintenance.  A negative value indicates maintenance is past due. (int32_t)
                rectifier_temp            : The Temperature of the rectifier. (float)
                generator_temp            : The temperature of the mechanical motor, fuel cell core or generator. (float)
                efi_batt                  : EFI Supply Voltage. (float)
                efi_rpm                   : Motor RPM. (float)
                efi_pw                    : Injector pulse-width in miliseconds. (float)
                efi_fuel_flow             : Fuel flow rate in litres/hour. (float)
                efi_fuel_consumed         : Fuel consumed. (float)
                efi_baro                  : Atmospheric pressure. (float)
                efi_mat                   : Manifold Air Temperature. (float)
                efi_clt                   : Cylinder Head Temperature. (float)
                efi_tps                   : Throttle Position. (float)
                efi_exhaust_gas_temperature        : Exhaust gas temperature. (float)
                efi_index                 : EFI index. (uint8_t)
                generator_status          : Generator status. (uint16_t)
                efi_status                : EFI status. (uint16_t)

*/
    mavlink20.messages.loweheiser_gov_efi = function( ...moreargs ) {
     [ this.volt_batt , this.curr_batt , this.curr_gen , this.curr_rot , this.fuel_level , this.throttle , this.runtime , this.until_maintenance , this.rectifier_temp , this.generator_temp , this.efi_batt , this.efi_rpm , this.efi_pw , this.efi_fuel_flow , this.efi_fuel_consumed , this.efi_baro , this.efi_mat , this.efi_clt , this.efi_tps , this.efi_exhaust_gas_temperature , this.efi_index , this.generator_status , this.efi_status ] = moreargs;


    this._format = '<ffffffIiffffffffffffHHB';
    this._id = mavlink20.MAVLINK_MSG_ID_LOWEHEISER_GOV_EFI;
    this.order_map = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 22, 20, 21];
    this.len_map = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1];
    this.array_len_map = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
    this.crc_extra = 195;
    this._name = 'LOWEHEISER_GOV_EFI';

    this._instance_field = 'efi_index';
    this._instance_offset = 84;

    this.fieldnames = ['volt_batt', 'curr_batt', 'curr_gen', 'curr_rot', 'fuel_level', 'throttle', 'runtime', 'until_maintenance', 'rectifier_temp', 'generator_temp', 'efi_batt', 'efi_rpm', 'efi_pw', 'efi_fuel_flow', 'efi_fuel_consumed', 'efi_baro', 'efi_mat', 'efi_clt', 'efi_tps', 'efi_exhaust_gas_temperature', 'efi_index', 'generator_status', 'efi_status'];

}

mavlink20.messages.loweheiser_gov_efi.prototype = new mavlink20.message;
mavlink20.messages.loweheiser_gov_efi.prototype.pack = function(mav) {
    var orderedfields = [ this.volt_batt, this.curr_batt, this.curr_gen, this.curr_rot, this.fuel_level, this.throttle, this.runtime, this.until_maintenance, this.rectifier_temp, this.generator_temp, this.efi_batt, this.efi_rpm, this.efi_pw, this.efi_fuel_flow, this.efi_fuel_consumed, this.efi_baro, this.efi_mat, this.efi_clt, this.efi_tps, this.efi_exhaust_gas_temperature, this.generator_status, this.efi_status, this.efi_index];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink20.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
Raw RC Data

                rc_raw                    :  (uint8_t)

*/
    mavlink20.messages.cubepilot_raw_rc = function( ...moreargs ) {
     [ this.rc_raw ] = moreargs;


    this._format = '<32s';
    this._id = mavlink20.MAVLINK_MSG_ID_CUBEPILOT_RAW_RC;
    this.order_map = [0];
    this.len_map = [32];
    this.array_len_map = [32];
    this.crc_extra = 246;
    this._name = 'CUBEPILOT_RAW_RC';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['rc_raw'];

}

mavlink20.messages.cubepilot_raw_rc.prototype = new mavlink20.message;
mavlink20.messages.cubepilot_raw_rc.prototype.pack = function(mav) {
    var orderedfields = [ this.rc_raw];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink20.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
Information about video stream

                camera_id                 : Video Stream ID (1 for first, 2 for second, etc.) (uint8_t)
                status                    : Number of streams available. (uint8_t)
                framerate                 : Frame rate. (float)
                resolution_h              : Horizontal resolution. (uint16_t)
                resolution_v              : Vertical resolution. (uint16_t)
                bitrate                   : Bit rate. (uint32_t)
                rotation                  : Video image rotation clockwise. (uint16_t)
                uri                       : Video stream URI (TCP or RTSP URI ground station should connect to) or port number (UDP port ground station should listen to). (char)

*/
    mavlink20.messages.herelink_video_stream_information = function( ...moreargs ) {
     [ this.camera_id , this.status , this.framerate , this.resolution_h , this.resolution_v , this.bitrate , this.rotation , this.uri ] = moreargs;


    this._format = '<fIHHHBB230s';
    this._id = mavlink20.MAVLINK_MSG_ID_HERELINK_VIDEO_STREAM_INFORMATION;
    this.order_map = [5, 6, 0, 2, 3, 1, 4, 7];
    this.len_map = [1, 1, 1, 1, 1, 1, 1, 1];
    this.array_len_map = [0, 0, 0, 0, 0, 0, 0, 230];
    this.crc_extra = 181;
    this._name = 'HERELINK_VIDEO_STREAM_INFORMATION';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['camera_id', 'status', 'framerate', 'resolution_h', 'resolution_v', 'bitrate', 'rotation', 'uri'];

}

mavlink20.messages.herelink_video_stream_information.prototype = new mavlink20.message;
mavlink20.messages.herelink_video_stream_information.prototype.pack = function(mav) {
    var orderedfields = [ this.framerate, this.bitrate, this.resolution_h, this.resolution_v, this.rotation, this.camera_id, this.status, this.uri];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink20.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
Herelink Telemetry

                rssi                      :  (uint8_t)
                snr                       :  (int16_t)
                rf_freq                   :  (uint32_t)
                link_bw                   :  (uint32_t)
                link_rate                 :  (uint32_t)
                cpu_temp                  :  (int16_t)
                board_temp                :  (int16_t)

*/
    mavlink20.messages.herelink_telem = function( ...moreargs ) {
     [ this.rssi , this.snr , this.rf_freq , this.link_bw , this.link_rate , this.cpu_temp , this.board_temp ] = moreargs;


    this._format = '<IIIhhhB';
    this._id = mavlink20.MAVLINK_MSG_ID_HERELINK_TELEM;
    this.order_map = [6, 3, 0, 1, 2, 4, 5];
    this.len_map = [1, 1, 1, 1, 1, 1, 1];
    this.array_len_map = [0, 0, 0, 0, 0, 0, 0];
    this.crc_extra = 62;
    this._name = 'HERELINK_TELEM';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['rssi', 'snr', 'rf_freq', 'link_bw', 'link_rate', 'cpu_temp', 'board_temp'];

}

mavlink20.messages.herelink_telem.prototype = new mavlink20.message;
mavlink20.messages.herelink_telem.prototype.pack = function(mav) {
    var orderedfields = [ this.rf_freq, this.link_bw, this.link_rate, this.snr, this.cpu_temp, this.board_temp, this.rssi];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink20.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
Start firmware update with encapsulated data.

                target_system             : System ID. (uint8_t)
                target_component          : Component ID. (uint8_t)
                size                      : FW Size. (uint32_t)
                crc                       : FW CRC. (uint32_t)

*/
    mavlink20.messages.cubepilot_firmware_update_start = function( ...moreargs ) {
     [ this.target_system , this.target_component , this.size , this.crc ] = moreargs;


    this._format = '<IIBB';
    this._id = mavlink20.MAVLINK_MSG_ID_CUBEPILOT_FIRMWARE_UPDATE_START;
    this.order_map = [2, 3, 0, 1];
    this.len_map = [1, 1, 1, 1];
    this.array_len_map = [0, 0, 0, 0];
    this.crc_extra = 240;
    this._name = 'CUBEPILOT_FIRMWARE_UPDATE_START';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['target_system', 'target_component', 'size', 'crc'];

}

mavlink20.messages.cubepilot_firmware_update_start.prototype = new mavlink20.message;
mavlink20.messages.cubepilot_firmware_update_start.prototype.pack = function(mav) {
    var orderedfields = [ this.size, this.crc, this.target_system, this.target_component];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink20.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
offset response to encapsulated data.

                target_system             : System ID. (uint8_t)
                target_component          : Component ID. (uint8_t)
                offset                    : FW Offset. (uint32_t)

*/
    mavlink20.messages.cubepilot_firmware_update_resp = function( ...moreargs ) {
     [ this.target_system , this.target_component , this.offset ] = moreargs;


    this._format = '<IBB';
    this._id = mavlink20.MAVLINK_MSG_ID_CUBEPILOT_FIRMWARE_UPDATE_RESP;
    this.order_map = [1, 2, 0];
    this.len_map = [1, 1, 1];
    this.array_len_map = [0, 0, 0];
    this.crc_extra = 152;
    this._name = 'CUBEPILOT_FIRMWARE_UPDATE_RESP';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['target_system', 'target_component', 'offset'];

}

mavlink20.messages.cubepilot_firmware_update_resp.prototype = new mavlink20.message;
mavlink20.messages.cubepilot_firmware_update_resp.prototype.pack = function(mav) {
    var orderedfields = [ this.offset, this.target_system, this.target_component];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink20.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
Authorization package

                login                     : Login (char)
                password                  : Password (char)

*/
    mavlink20.messages.airlink_auth = function( ...moreargs ) {
     [ this.login , this.password ] = moreargs;


    this._format = '<50s50s';
    this._id = mavlink20.MAVLINK_MSG_ID_AIRLINK_AUTH;
    this.order_map = [0, 1];
    this.len_map = [1, 1];
    this.array_len_map = [50, 50];
    this.crc_extra = 13;
    this._name = 'AIRLINK_AUTH';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['login', 'password'];

}

mavlink20.messages.airlink_auth.prototype = new mavlink20.message;
mavlink20.messages.airlink_auth.prototype.pack = function(mav) {
    var orderedfields = [ this.login, this.password];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink20.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
Response to the authorization request

                resp_type                 : Response type (uint8_t)

*/
    mavlink20.messages.airlink_auth_response = function( ...moreargs ) {
     [ this.resp_type ] = moreargs;


    this._format = '<B';
    this._id = mavlink20.MAVLINK_MSG_ID_AIRLINK_AUTH_RESPONSE;
    this.order_map = [0];
    this.len_map = [1];
    this.array_len_map = [0];
    this.crc_extra = 239;
    this._name = 'AIRLINK_AUTH_RESPONSE';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['resp_type'];

}

mavlink20.messages.airlink_auth_response.prototype = new mavlink20.message;
mavlink20.messages.airlink_auth_response.prototype.pack = function(mav) {
    var orderedfields = [ this.resp_type];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink20.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


/* 
The heartbeat message shows that a system or component is present and
responding. The type and autopilot fields (along with the message
component id), allow the receiving system to treat further messages
from this system appropriately (e.g. by laying out the user interface
based on the autopilot). This microservice is documented at
https://mavlink.io/en/services/heartbeat.html

                type                      : Vehicle or component type. For a flight controller component the vehicle type (quadrotor, helicopter, etc.). For other components the component type (e.g. camera, gimbal, etc.). This should be used in preference to component id for identifying the component type. (uint8_t)
                autopilot                 : Autopilot type / class. Use MAV_AUTOPILOT_INVALID for components that are not flight controllers. (uint8_t)
                base_mode                 : System mode bitmap. (uint8_t)
                custom_mode               : A bitfield for use for autopilot-specific flags (uint32_t)
                system_status             : System status flag. (uint8_t)
                mavlink_version           : MAVLink version, not writable by user, gets added by protocol because of magic data type: uint8_t_mavlink_version (uint8_t)

*/
    mavlink20.messages.heartbeat = function( ...moreargs ) {
     [ this.type , this.autopilot , this.base_mode , this.custom_mode , this.system_status , this.mavlink_version ] = moreargs;


    this._format = '<IBBBBB';
    this._id = mavlink20.MAVLINK_MSG_ID_HEARTBEAT;
    this.order_map = [1, 2, 3, 0, 4, 5];
    this.len_map = [1, 1, 1, 1, 1, 1];
    this.array_len_map = [0, 0, 0, 0, 0, 0];
    this.crc_extra = 50;
    this._name = 'HEARTBEAT';

    this._instance_field = undefined;
    this._instance_offset = -1;

    this.fieldnames = ['type', 'autopilot', 'base_mode', 'custom_mode', 'system_status', 'mavlink_version'];

}

mavlink20.messages.heartbeat.prototype = new mavlink20.message;
mavlink20.messages.heartbeat.prototype.pack = function(mav) {
    var orderedfields = [ this.custom_mode, this.type, this.autopilot, this.base_mode, this.system_status, this.mavlink_version];
    var j = jspack.Pack(this._format, orderedfields);
    if (j === false ) throw new Error("jspack unable to handle this packet");
    return mavlink20.message.prototype.pack.call(this, mav, this.crc_extra, j );
}


mavlink20.map = {
        150: { format: '<fiiffffffhhh', type: mavlink20.messages.sensor_offsets, order_map: [9, 10, 11, 0, 1, 2, 3, 4, 5, 6, 7, 8], crc_extra: 134 },
        151: { format: '<hhhBB', type: mavlink20.messages.set_mag_offsets, order_map: [3, 4, 0, 1, 2], crc_extra: 219 },
        152: { format: '<HHI', type: mavlink20.messages.meminfo, order_map: [0, 1, 2], crc_extra: 208 },
        153: { format: '<HHHHHH', type: mavlink20.messages.ap_adc, order_map: [0, 1, 2, 3, 4, 5], crc_extra: 188 },
        154: { format: '<fHBBBBBBBBB', type: mavlink20.messages.digicam_configure, order_map: [2, 3, 4, 1, 5, 6, 7, 8, 9, 10, 0], crc_extra: 84 },
        155: { format: '<fBBBBbBBBB', type: mavlink20.messages.digicam_control, order_map: [1, 2, 3, 4, 5, 6, 7, 8, 9, 0], crc_extra: 22 },
        156: { format: '<BBBBBB', type: mavlink20.messages.mount_configure, order_map: [0, 1, 2, 3, 4, 5], crc_extra: 19 },
        157: { format: '<iiiBBB', type: mavlink20.messages.mount_control, order_map: [3, 4, 0, 1, 2, 5], crc_extra: 21 },
        158: { format: '<iiiBBB', type: mavlink20.messages.mount_status, order_map: [3, 4, 0, 1, 2, 5], crc_extra: 134 },
        160: { format: '<ffBBBB', type: mavlink20.messages.fence_point, order_map: [2, 3, 4, 5, 0, 1], crc_extra: 78 },
        161: { format: '<BBB', type: mavlink20.messages.fence_fetch_point, order_map: [0, 1, 2], crc_extra: 68 },
        163: { format: '<fffffff', type: mavlink20.messages.ahrs, order_map: [0, 1, 2, 3, 4, 5, 6], crc_extra: 127 },
        164: { format: '<fffffffffii', type: mavlink20.messages.simstate, order_map: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10], crc_extra: 154 },
        165: { format: '<HB', type: mavlink20.messages.hwstatus, order_map: [0, 1], crc_extra: 21 },
        166: { format: '<HHBBBBB', type: mavlink20.messages.radio, order_map: [2, 3, 4, 5, 6, 0, 1], crc_extra: 21 },
        167: { format: '<IIIIHBBBB', type: mavlink20.messages.limits_status, order_map: [5, 0, 1, 2, 3, 4, 6, 7, 8], crc_extra: 144 },
        168: { format: '<fff', type: mavlink20.messages.wind, order_map: [0, 1, 2], crc_extra: 1 },
        169: { format: '<BB16s', type: mavlink20.messages.data16, order_map: [0, 1, 2], crc_extra: 234 },
        170: { format: '<BB32s', type: mavlink20.messages.data32, order_map: [0, 1, 2], crc_extra: 73 },
        171: { format: '<BB64s', type: mavlink20.messages.data64, order_map: [0, 1, 2], crc_extra: 181 },
        172: { format: '<BB96s', type: mavlink20.messages.data96, order_map: [0, 1, 2], crc_extra: 22 },
        173: { format: '<ff', type: mavlink20.messages.rangefinder, order_map: [0, 1], crc_extra: 83 },
        174: { format: '<ffffffffffff', type: mavlink20.messages.airspeed_autocal, order_map: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], crc_extra: 167 },
        175: { format: '<iihhHBBBBB', type: mavlink20.messages.rally_point, order_map: [5, 6, 7, 8, 0, 1, 2, 3, 4, 9], crc_extra: 138 },
        176: { format: '<BBB', type: mavlink20.messages.rally_fetch_point, order_map: [0, 1, 2], crc_extra: 234 },
        177: { format: '<ffffHH', type: mavlink20.messages.compassmot_status, order_map: [4, 0, 5, 1, 2, 3], crc_extra: 240 },
        178: { format: '<ffffii', type: mavlink20.messages.ahrs2, order_map: [0, 1, 2, 3, 4, 5], crc_extra: 47 },
        179: { format: '<QffffHBBB', type: mavlink20.messages.camera_status, order_map: [0, 6, 7, 5, 8, 1, 2, 3, 4], crc_extra: 189 },
        180: { format: '<QiiffffffHBBBH', type: mavlink20.messages.camera_feedback, order_map: [0, 10, 11, 9, 1, 2, 3, 4, 5, 6, 7, 8, 12, 13], crc_extra: 52 },
        181: { format: '<Hh', type: mavlink20.messages.battery2, order_map: [0, 1], crc_extra: 174 },
        182: { format: '<ffffiiffff', type: mavlink20.messages.ahrs3, order_map: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9], crc_extra: 229 },
        183: { format: '<BB', type: mavlink20.messages.autopilot_version_request, order_map: [0, 1], crc_extra: 85 },
        184: { format: '<IBB200s', type: mavlink20.messages.remote_log_data_block, order_map: [1, 2, 0, 3], crc_extra: 159 },
        185: { format: '<IBBB', type: mavlink20.messages.remote_log_block_status, order_map: [1, 2, 0, 3], crc_extra: 186 },
        186: { format: '<BBBBB24s', type: mavlink20.messages.led_control, order_map: [0, 1, 2, 3, 4, 5], crc_extra: 72 },
        191: { format: '<fffBBBBB10s', type: mavlink20.messages.mag_cal_progress, order_map: [3, 4, 5, 6, 7, 8, 0, 1, 2], crc_extra: 92 },
        193: { format: '<fffffHf', type: mavlink20.messages.ekf_status_report, order_map: [5, 0, 1, 2, 3, 4, 6], crc_extra: 71 },
        194: { format: '<ffffffBff', type: mavlink20.messages.pid_tuning, order_map: [6, 0, 1, 2, 3, 4, 5, 7, 8], crc_extra: 98 },
        195: { format: '<iiiiiifffB', type: mavlink20.messages.deepstall, order_map: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9], crc_extra: 120 },
        200: { format: '<ffffffffffBB', type: mavlink20.messages.gimbal_report, order_map: [10, 11, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9], crc_extra: 134 },
        201: { format: '<fffBB', type: mavlink20.messages.gimbal_control, order_map: [3, 4, 0, 1, 2], crc_extra: 205 },
        214: { format: '<hhhBB', type: mavlink20.messages.gimbal_torque_cmd_report, order_map: [3, 4, 0, 1, 2], crc_extra: 69 },
        215: { format: '<BBB', type: mavlink20.messages.gopro_heartbeat, order_map: [0, 1, 2], crc_extra: 101 },
        216: { format: '<BBB', type: mavlink20.messages.gopro_get_request, order_map: [0, 1, 2], crc_extra: 50 },
        217: { format: '<BB4s', type: mavlink20.messages.gopro_get_response, order_map: [0, 1, 2], crc_extra: 202 },
        218: { format: '<BBB4s', type: mavlink20.messages.gopro_set_request, order_map: [0, 1, 2, 3], crc_extra: 17 },
        219: { format: '<BB', type: mavlink20.messages.gopro_set_response, order_map: [0, 1], crc_extra: 162 },
        226: { format: '<ff', type: mavlink20.messages.rpm, order_map: [0, 1], crc_extra: 207 },
        11000: { format: '<IBBBBB40sBBB', type: mavlink20.messages.device_op_read, order_map: [1, 2, 0, 3, 4, 5, 6, 7, 8, 9], crc_extra: 134 },
        11001: { format: '<IBBB128sB', type: mavlink20.messages.device_op_read_reply, order_map: [0, 1, 2, 3, 4, 5], crc_extra: 15 },
        11002: { format: '<IBBBBB40sBB128sB', type: mavlink20.messages.device_op_write, order_map: [1, 2, 0, 3, 4, 5, 6, 7, 8, 9, 10], crc_extra: 234 },
        11003: { format: '<IB', type: mavlink20.messages.device_op_write_reply, order_map: [0, 1], crc_extra: 64 },
        11004: { format: '<IIBBBB220s', type: mavlink20.messages.secure_command, order_map: [2, 3, 0, 1, 4, 5, 6], crc_extra: 11 },
        11005: { format: '<IIBB220s', type: mavlink20.messages.secure_command_reply, order_map: [0, 1, 2, 3, 4], crc_extra: 93 },
        11010: { format: '<ffffffffffffB', type: mavlink20.messages.adap_tuning, order_map: [12, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], crc_extra: 46 },
        11011: { format: '<QQ3f3ff', type: mavlink20.messages.vision_position_delta, order_map: [0, 1, 2, 3, 4], crc_extra: 106 },
        11020: { format: '<Qff', type: mavlink20.messages.aoa_ssa, order_map: [0, 1, 2], crc_extra: 205 },
        11030: { format: '<4H4H4H4H4H4s', type: mavlink20.messages.esc_telemetry_1_to_4, order_map: [5, 0, 1, 2, 3, 4], crc_extra: 144 },
        11031: { format: '<4H4H4H4H4H4s', type: mavlink20.messages.esc_telemetry_5_to_8, order_map: [5, 0, 1, 2, 3, 4], crc_extra: 133 },
        11032: { format: '<4H4H4H4H4H4s', type: mavlink20.messages.esc_telemetry_9_to_12, order_map: [5, 0, 1, 2, 3, 4], crc_extra: 85 },
        11033: { format: '<IfffBBBB16sB', type: mavlink20.messages.osd_param_config, order_map: [4, 5, 0, 6, 7, 8, 9, 1, 2, 3], crc_extra: 195 },
        11034: { format: '<IB', type: mavlink20.messages.osd_param_config_reply, order_map: [0, 1], crc_extra: 79 },
        11035: { format: '<IBBBB', type: mavlink20.messages.osd_param_show_config, order_map: [1, 2, 0, 3, 4], crc_extra: 128 },
        11036: { format: '<IfffB16sB', type: mavlink20.messages.osd_param_show_config_reply, order_map: [0, 4, 5, 6, 1, 2, 3], crc_extra: 177 },
        11037: { format: '<IfffffHBB', type: mavlink20.messages.obstacle_distance_3d, order_map: [0, 7, 8, 6, 1, 2, 3, 4, 5], crc_extra: 130 },
        11038: { format: '<IiiffffffBB', type: mavlink20.messages.water_depth, order_map: [0, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8], crc_extra: 47 },
        11039: { format: '<hHHHB', type: mavlink20.messages.mcu_status, order_map: [4, 0, 1, 2, 3], crc_extra: 142 },
        11040: { format: '<4H4H4H4H4H4s', type: mavlink20.messages.esc_telemetry_13_to_16, order_map: [5, 0, 1, 2, 3, 4], crc_extra: 132 },
        11041: { format: '<4H4H4H4H4H4s', type: mavlink20.messages.esc_telemetry_17_to_20, order_map: [5, 0, 1, 2, 3, 4], crc_extra: 208 },
        11042: { format: '<4H4H4H4H4H4s', type: mavlink20.messages.esc_telemetry_21_to_24, order_map: [5, 0, 1, 2, 3, 4], crc_extra: 201 },
        11043: { format: '<4H4H4H4H4H4s', type: mavlink20.messages.esc_telemetry_25_to_28, order_map: [5, 0, 1, 2, 3, 4], crc_extra: 193 },
        11044: { format: '<4H4H4H4H4H4s', type: mavlink20.messages.esc_telemetry_29_to_32, order_map: [5, 0, 1, 2, 3, 4], crc_extra: 189 },
        1: { format: '<IIIHHhHHHHHHb', type: mavlink20.messages.sys_status, order_map: [0, 1, 2, 3, 4, 5, 12, 6, 7, 8, 9, 10, 11], crc_extra: 124 },
        2: { format: '<QI', type: mavlink20.messages.system_time, order_map: [0, 1], crc_extra: 137 },
        4: { format: '<QIBB', type: mavlink20.messages.ping, order_map: [0, 1, 2, 3], crc_extra: 237 },
        5: { format: '<BBB25s', type: mavlink20.messages.change_operator_control, order_map: [0, 1, 2, 3], crc_extra: 217 },
        6: { format: '<BBB', type: mavlink20.messages.change_operator_control_ack, order_map: [0, 1, 2], crc_extra: 104 },
        7: { format: '<32s', type: mavlink20.messages.auth_key, order_map: [0], crc_extra: 119 },
        11: { format: '<IBB', type: mavlink20.messages.set_mode, order_map: [1, 2, 0], crc_extra: 89 },
        20: { format: '<hBB16s', type: mavlink20.messages.param_request_read, order_map: [1, 2, 3, 0], crc_extra: 214 },
        21: { format: '<BB', type: mavlink20.messages.param_request_list, order_map: [0, 1], crc_extra: 159 },
        22: { format: '<fHH16sB', type: mavlink20.messages.param_value, order_map: [3, 0, 4, 1, 2], crc_extra: 220 },
        23: { format: '<fBB16sB', type: mavlink20.messages.param_set, order_map: [1, 2, 3, 0, 4], crc_extra: 168 },
        24: { format: '<QiiiHHHHBBiIIIIH', type: mavlink20.messages.gps_raw_int, order_map: [0, 8, 1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15], crc_extra: 24 },
        25: { format: '<B20s20s20s20s20s', type: mavlink20.messages.gps_status, order_map: [0, 1, 2, 3, 4, 5], crc_extra: 23 },
        26: { format: '<Ihhhhhhhhhh', type: mavlink20.messages.scaled_imu, order_map: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10], crc_extra: 170 },
        27: { format: '<QhhhhhhhhhBh', type: mavlink20.messages.raw_imu, order_map: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], crc_extra: 144 },
        28: { format: '<Qhhhh', type: mavlink20.messages.raw_pressure, order_map: [0, 1, 2, 3, 4], crc_extra: 67 },
        29: { format: '<Iffhh', type: mavlink20.messages.scaled_pressure, order_map: [0, 1, 2, 3, 4], crc_extra: 115 },
        30: { format: '<Iffffff', type: mavlink20.messages.attitude, order_map: [0, 1, 2, 3, 4, 5, 6], crc_extra: 39 },
        31: { format: '<Ifffffff4f', type: mavlink20.messages.attitude_quaternion, order_map: [0, 1, 2, 3, 4, 5, 6, 7, 8], crc_extra: 246 },
        32: { format: '<Iffffff', type: mavlink20.messages.local_position_ned, order_map: [0, 1, 2, 3, 4, 5, 6], crc_extra: 185 },
        33: { format: '<IiiiihhhH', type: mavlink20.messages.global_position_int, order_map: [0, 1, 2, 3, 4, 5, 6, 7, 8], crc_extra: 104 },
        34: { format: '<IhhhhhhhhBB', type: mavlink20.messages.rc_channels_scaled, order_map: [0, 9, 1, 2, 3, 4, 5, 6, 7, 8, 10], crc_extra: 237 },
        35: { format: '<IHHHHHHHHBB', type: mavlink20.messages.rc_channels_raw, order_map: [0, 9, 1, 2, 3, 4, 5, 6, 7, 8, 10], crc_extra: 244 },
        36: { format: '<IHHHHHHHHBHHHHHHHH', type: mavlink20.messages.servo_output_raw, order_map: [0, 9, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17], crc_extra: 222 },
        37: { format: '<hhBBB', type: mavlink20.messages.mission_request_partial_list, order_map: [2, 3, 0, 1, 4], crc_extra: 212 },
        38: { format: '<hhBBB', type: mavlink20.messages.mission_write_partial_list, order_map: [2, 3, 0, 1, 4], crc_extra: 9 },
        39: { format: '<fffffffHHBBBBBB', type: mavlink20.messages.mission_item, order_map: [9, 10, 7, 11, 8, 12, 13, 0, 1, 2, 3, 4, 5, 6, 14], crc_extra: 254 },
        40: { format: '<HBBB', type: mavlink20.messages.mission_request, order_map: [1, 2, 0, 3], crc_extra: 230 },
        41: { format: '<HBB', type: mavlink20.messages.mission_set_current, order_map: [1, 2, 0], crc_extra: 28 },
        42: { format: '<HHBB', type: mavlink20.messages.mission_current, order_map: [0, 1, 2, 3], crc_extra: 28 },
        43: { format: '<BBB', type: mavlink20.messages.mission_request_list, order_map: [0, 1, 2], crc_extra: 132 },
        44: { format: '<HBBB', type: mavlink20.messages.mission_count, order_map: [1, 2, 0, 3], crc_extra: 221 },
        45: { format: '<BBB', type: mavlink20.messages.mission_clear_all, order_map: [0, 1, 2], crc_extra: 232 },
        46: { format: '<H', type: mavlink20.messages.mission_item_reached, order_map: [0], crc_extra: 11 },
        47: { format: '<BBBB', type: mavlink20.messages.mission_ack, order_map: [0, 1, 2, 3], crc_extra: 153 },
        48: { format: '<iiiBQ', type: mavlink20.messages.set_gps_global_origin, order_map: [3, 0, 1, 2, 4], crc_extra: 41 },
        49: { format: '<iiiQ', type: mavlink20.messages.gps_global_origin, order_map: [0, 1, 2, 3], crc_extra: 39 },
        50: { format: '<ffffhBB16sB', type: mavlink20.messages.param_map_rc, order_map: [5, 6, 7, 4, 8, 0, 1, 2, 3], crc_extra: 78 },
        51: { format: '<HBBB', type: mavlink20.messages.mission_request_int, order_map: [1, 2, 0, 3], crc_extra: 196 },
        54: { format: '<ffffffBBB', type: mavlink20.messages.safety_set_allowed_area, order_map: [6, 7, 8, 0, 1, 2, 3, 4, 5], crc_extra: 15 },
        55: { format: '<ffffffB', type: mavlink20.messages.safety_allowed_area, order_map: [6, 0, 1, 2, 3, 4, 5], crc_extra: 3 },
        61: { format: '<Q4ffff9f', type: mavlink20.messages.attitude_quaternion_cov, order_map: [0, 1, 2, 3, 4, 5], crc_extra: 167 },
        62: { format: '<fffffhhH', type: mavlink20.messages.nav_controller_output, order_map: [0, 1, 5, 6, 7, 2, 3, 4], crc_extra: 183 },
        63: { format: '<Qiiiifff36fB', type: mavlink20.messages.global_position_int_cov, order_map: [0, 9, 1, 2, 3, 4, 5, 6, 7, 8], crc_extra: 119 },
        64: { format: '<Qfffffffff45fB', type: mavlink20.messages.local_position_ned_cov, order_map: [0, 11, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10], crc_extra: 191 },
        65: { format: '<IHHHHHHHHHHHHHHHHHHBB', type: mavlink20.messages.rc_channels, order_map: [0, 19, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 20], crc_extra: 118 },
        66: { format: '<HBBBB', type: mavlink20.messages.request_data_stream, order_map: [1, 2, 3, 0, 4], crc_extra: 148 },
        67: { format: '<HBB', type: mavlink20.messages.data_stream, order_map: [1, 0, 2], crc_extra: 21 },
        69: { format: '<hhhhHB', type: mavlink20.messages.manual_control, order_map: [5, 0, 1, 2, 3, 4], crc_extra: 243 },
        70: { format: '<HHHHHHHHBBHHHHHHHHHH', type: mavlink20.messages.rc_channels_override, order_map: [8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19], crc_extra: 124 },
        73: { format: '<ffffiifHHBBBBBB', type: mavlink20.messages.mission_item_int, order_map: [9, 10, 7, 11, 8, 12, 13, 0, 1, 2, 3, 4, 5, 6, 14], crc_extra: 38 },
        74: { format: '<ffffhH', type: mavlink20.messages.vfr_hud, order_map: [0, 1, 4, 5, 2, 3], crc_extra: 20 },
        75: { format: '<ffffiifHBBBBB', type: mavlink20.messages.command_int, order_map: [8, 9, 10, 7, 11, 12, 0, 1, 2, 3, 4, 5, 6], crc_extra: 158 },
        76: { format: '<fffffffHBBB', type: mavlink20.messages.command_long, order_map: [8, 9, 7, 10, 0, 1, 2, 3, 4, 5, 6], crc_extra: 152 },
        77: { format: '<HBBiBB', type: mavlink20.messages.command_ack, order_map: [0, 1, 2, 3, 4, 5], crc_extra: 143 },
        81: { format: '<IffffBB', type: mavlink20.messages.manual_setpoint, order_map: [0, 1, 2, 3, 4, 5, 6], crc_extra: 106 },
        82: { format: '<I4fffffBBB', type: mavlink20.messages.set_attitude_target, order_map: [0, 6, 7, 8, 1, 2, 3, 4, 5], crc_extra: 49 },
        83: { format: '<I4fffffB', type: mavlink20.messages.attitude_target, order_map: [0, 6, 1, 2, 3, 4, 5], crc_extra: 22 },
        84: { format: '<IfffffffffffHBBB', type: mavlink20.messages.set_position_target_local_ned, order_map: [0, 13, 14, 15, 12, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], crc_extra: 143 },
        85: { format: '<IfffffffffffHB', type: mavlink20.messages.position_target_local_ned, order_map: [0, 13, 12, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], crc_extra: 140 },
        86: { format: '<IiifffffffffHBBB', type: mavlink20.messages.set_position_target_global_int, order_map: [0, 13, 14, 15, 12, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], crc_extra: 5 },
        87: { format: '<IiifffffffffHB', type: mavlink20.messages.position_target_global_int, order_map: [0, 13, 12, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], crc_extra: 150 },
        89: { format: '<Iffffff', type: mavlink20.messages.local_position_ned_system_global_offset, order_map: [0, 1, 2, 3, 4, 5, 6], crc_extra: 231 },
        90: { format: '<Qffffffiiihhhhhh', type: mavlink20.messages.hil_state, order_map: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], crc_extra: 183 },
        91: { format: '<QffffffffBB', type: mavlink20.messages.hil_controls, order_map: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10], crc_extra: 63 },
        92: { format: '<QHHHHHHHHHHHHB', type: mavlink20.messages.hil_rc_inputs_raw, order_map: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13], crc_extra: 54 },
        93: { format: '<QQ16fB', type: mavlink20.messages.hil_actuator_controls, order_map: [0, 2, 3, 1], crc_extra: 47 },
        100: { format: '<QfffhhBBff', type: mavlink20.messages.optical_flow, order_map: [0, 6, 4, 5, 1, 2, 7, 3, 8, 9], crc_extra: 175 },
        101: { format: '<Qffffff21fB', type: mavlink20.messages.global_vision_position_estimate, order_map: [0, 1, 2, 3, 4, 5, 6, 7, 8], crc_extra: 102 },
        102: { format: '<Qffffff21fB', type: mavlink20.messages.vision_position_estimate, order_map: [0, 1, 2, 3, 4, 5, 6, 7, 8], crc_extra: 158 },
        103: { format: '<Qfff9fB', type: mavlink20.messages.vision_speed_estimate, order_map: [0, 1, 2, 3, 4, 5], crc_extra: 208 },
        104: { format: '<Qffffff21f', type: mavlink20.messages.vicon_position_estimate, order_map: [0, 1, 2, 3, 4, 5, 6, 7], crc_extra: 56 },
        105: { format: '<QfffffffffffffHB', type: mavlink20.messages.highres_imu, order_map: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], crc_extra: 93 },
        106: { format: '<QIfffffIfhBB', type: mavlink20.messages.optical_flow_rad, order_map: [0, 10, 1, 2, 3, 4, 5, 6, 9, 11, 7, 8], crc_extra: 138 },
        107: { format: '<QfffffffffffffIB', type: mavlink20.messages.hil_sensor, order_map: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], crc_extra: 108 },
        108: { format: '<fffffffffffffffffffffii', type: mavlink20.messages.sim_state, order_map: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22], crc_extra: 32 },
        109: { format: '<HHBBBBB', type: mavlink20.messages.radio_status, order_map: [2, 3, 4, 5, 6, 0, 1], crc_extra: 185 },
        110: { format: '<BBB251s', type: mavlink20.messages.file_transfer_protocol, order_map: [0, 1, 2, 3], crc_extra: 84 },
        111: { format: '<qq', type: mavlink20.messages.timesync, order_map: [0, 1], crc_extra: 34 },
        112: { format: '<QI', type: mavlink20.messages.camera_trigger, order_map: [0, 1], crc_extra: 174 },
        113: { format: '<QiiiHHHhhhHBBBH', type: mavlink20.messages.hil_gps, order_map: [0, 11, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14], crc_extra: 124 },
        114: { format: '<QIfffffIfhBB', type: mavlink20.messages.hil_optical_flow, order_map: [0, 10, 1, 2, 3, 4, 5, 6, 9, 11, 7, 8], crc_extra: 237 },
        115: { format: '<Q4ffffiiihhhHHhhh', type: mavlink20.messages.hil_state_quaternion, order_map: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], crc_extra: 4 },
        116: { format: '<Ihhhhhhhhhh', type: mavlink20.messages.scaled_imu2, order_map: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10], crc_extra: 76 },
        117: { format: '<HHBB', type: mavlink20.messages.log_request_list, order_map: [2, 3, 0, 1], crc_extra: 128 },
        118: { format: '<IIHHH', type: mavlink20.messages.log_entry, order_map: [2, 3, 4, 0, 1], crc_extra: 56 },
        119: { format: '<IIHBB', type: mavlink20.messages.log_request_data, order_map: [3, 4, 2, 0, 1], crc_extra: 116 },
        120: { format: '<IHB90s', type: mavlink20.messages.log_data, order_map: [1, 0, 2, 3], crc_extra: 134 },
        121: { format: '<BB', type: mavlink20.messages.log_erase, order_map: [0, 1], crc_extra: 237 },
        122: { format: '<BB', type: mavlink20.messages.log_request_end, order_map: [0, 1], crc_extra: 203 },
        123: { format: '<BBB110s', type: mavlink20.messages.gps_inject_data, order_map: [0, 1, 2, 3], crc_extra: 250 },
        124: { format: '<QiiiIHHHHBBBHiIIII', type: mavlink20.messages.gps2_raw, order_map: [0, 9, 1, 2, 3, 5, 6, 7, 8, 10, 11, 4, 12, 13, 14, 15, 16, 17], crc_extra: 87 },
        125: { format: '<HHH', type: mavlink20.messages.power_status, order_map: [0, 1, 2], crc_extra: 203 },
        126: { format: '<IHBBB70s', type: mavlink20.messages.serial_control, order_map: [2, 3, 1, 0, 4, 5], crc_extra: 220 },
        127: { format: '<IIiiiIiHBBBBB', type: mavlink20.messages.gps_rtk, order_map: [0, 8, 7, 1, 9, 10, 11, 12, 2, 3, 4, 5, 6], crc_extra: 25 },
        128: { format: '<IIiiiIiHBBBBB', type: mavlink20.messages.gps2_rtk, order_map: [0, 8, 7, 1, 9, 10, 11, 12, 2, 3, 4, 5, 6], crc_extra: 226 },
        129: { format: '<Ihhhhhhhhhh', type: mavlink20.messages.scaled_imu3, order_map: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10], crc_extra: 46 },
        130: { format: '<IHHHBBB', type: mavlink20.messages.data_transmission_handshake, order_map: [4, 0, 1, 2, 3, 5, 6], crc_extra: 29 },
        131: { format: '<H253s', type: mavlink20.messages.encapsulated_data, order_map: [0, 1], crc_extra: 223 },
        132: { format: '<IHHHBBBBff4fB', type: mavlink20.messages.distance_sensor, order_map: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], crc_extra: 85 },
        133: { format: '<QiiH', type: mavlink20.messages.terrain_request, order_map: [1, 2, 3, 0], crc_extra: 6 },
        134: { format: '<iiH16hB', type: mavlink20.messages.terrain_data, order_map: [0, 1, 2, 4, 3], crc_extra: 229 },
        135: { format: '<ii', type: mavlink20.messages.terrain_check, order_map: [0, 1], crc_extra: 203 },
        136: { format: '<iiffHHH', type: mavlink20.messages.terrain_report, order_map: [0, 1, 4, 2, 3, 5, 6], crc_extra: 1 },
        137: { format: '<Iffhh', type: mavlink20.messages.scaled_pressure2, order_map: [0, 1, 2, 3, 4], crc_extra: 195 },
        138: { format: '<Q4ffff21f', type: mavlink20.messages.att_pos_mocap, order_map: [0, 1, 2, 3, 4, 5], crc_extra: 109 },
        139: { format: '<Q8fBBB', type: mavlink20.messages.set_actuator_control_target, order_map: [0, 2, 3, 4, 1], crc_extra: 168 },
        140: { format: '<Q8fB', type: mavlink20.messages.actuator_control_target, order_map: [0, 2, 1], crc_extra: 181 },
        141: { format: '<Qffffff', type: mavlink20.messages.altitude, order_map: [0, 1, 2, 3, 4, 5, 6], crc_extra: 47 },
        142: { format: '<BB120sB120s', type: mavlink20.messages.resource_request, order_map: [0, 1, 2, 3, 4], crc_extra: 72 },
        143: { format: '<Iffhh', type: mavlink20.messages.scaled_pressure3, order_map: [0, 1, 2, 3, 4], crc_extra: 131 },
        144: { format: '<QQiif3f3f4f3f3fB', type: mavlink20.messages.follow_target, order_map: [0, 10, 2, 3, 4, 5, 6, 7, 8, 9, 1], crc_extra: 127 },
        146: { format: '<Qffffffffff3f3f4ffff', type: mavlink20.messages.control_system_state, order_map: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16], crc_extra: 103 },
        147: { format: '<iih10HhBBBbiB4HBI', type: mavlink20.messages.battery_status, order_map: [5, 6, 7, 2, 3, 4, 0, 1, 8, 9, 10, 11, 12, 13], crc_extra: 154 },
        148: { format: '<QQIIIIHH8s8s8s18s', type: mavlink20.messages.autopilot_version, order_map: [0, 2, 3, 4, 5, 8, 9, 10, 6, 7, 1, 11], crc_extra: 178 },
        149: { format: '<QfffffBBfff4fBB', type: mavlink20.messages.landing_target, order_map: [0, 6, 7, 1, 2, 3, 4, 5, 8, 9, 10, 11, 12, 13], crc_extra: 200 },
        162: { format: '<IHBBB', type: mavlink20.messages.fence_status, order_map: [2, 1, 3, 0, 4], crc_extra: 189 },
        192: { format: '<ffffffffffBBBBfBBf', type: mavlink20.messages.mag_cal_report, order_map: [10, 11, 12, 13, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 14, 15, 16, 17], crc_extra: 36 },
        225: { format: '<ffffffffffffffffBff', type: mavlink20.messages.efi_status, order_map: [16, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18], crc_extra: 208 },
        230: { format: '<QffffffffH', type: mavlink20.messages.estimator_status, order_map: [0, 9, 1, 2, 3, 4, 5, 6, 7, 8], crc_extra: 163 },
        231: { format: '<Qffffffff', type: mavlink20.messages.wind_cov, order_map: [0, 1, 2, 3, 4, 5, 6, 7, 8], crc_extra: 105 },
        232: { format: '<QIiifffffffffHHBBBH', type: mavlink20.messages.gps_input, order_map: [0, 15, 13, 1, 14, 16, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 17, 18], crc_extra: 151 },
        233: { format: '<BB180s', type: mavlink20.messages.gps_rtcm_data, order_map: [0, 1, 2], crc_extra: 35 },
        234: { format: '<IiihhHhhhHBBbBBBbBBBbbBB', type: mavlink20.messages.high_latency, order_map: [10, 0, 11, 3, 4, 5, 12, 6, 1, 2, 7, 8, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 9], crc_extra: 150 },
        235: { format: '<IiiHhhHHHBBBBBBBBBBBBbbbbbb', type: mavlink20.messages.high_latency2, order_map: [0, 9, 10, 3, 1, 2, 4, 5, 11, 12, 6, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 7, 8, 24, 25, 26], crc_extra: 179 },
        241: { format: '<QfffIII', type: mavlink20.messages.vibration, order_map: [0, 1, 2, 3, 4, 5, 6], crc_extra: 90 },
        242: { format: '<iiifff4ffffQ', type: mavlink20.messages.home_position, order_map: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10], crc_extra: 104 },
        243: { format: '<iiifff4ffffBQ', type: mavlink20.messages.set_home_position, order_map: [10, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 11], crc_extra: 85 },
        244: { format: '<iH', type: mavlink20.messages.message_interval, order_map: [1, 0], crc_extra: 95 },
        245: { format: '<BB', type: mavlink20.messages.extended_sys_state, order_map: [0, 1], crc_extra: 130 },
        246: { format: '<IiiiHHhHHB9sBB', type: mavlink20.messages.adsb_vehicle, order_map: [0, 1, 2, 9, 3, 4, 5, 6, 10, 11, 12, 7, 8], crc_extra: 184 },
        247: { format: '<IfffBBB', type: mavlink20.messages.collision, order_map: [4, 0, 5, 6, 1, 2, 3], crc_extra: 81 },
        248: { format: '<HBBB249s', type: mavlink20.messages.v2_extension, order_map: [1, 2, 3, 0, 4], crc_extra: 8 },
        249: { format: '<HBB32s', type: mavlink20.messages.memory_vect, order_map: [0, 1, 2, 3], crc_extra: 204 },
        250: { format: '<Qfff10s', type: mavlink20.messages.debug_vect, order_map: [4, 0, 1, 2, 3], crc_extra: 49 },
        251: { format: '<If10s', type: mavlink20.messages.named_value_float, order_map: [0, 2, 1], crc_extra: 170 },
        252: { format: '<Ii10s', type: mavlink20.messages.named_value_int, order_map: [0, 2, 1], crc_extra: 44 },
        253: { format: '<B50sHB', type: mavlink20.messages.statustext, order_map: [0, 1, 2, 3], crc_extra: 83 },
        254: { format: '<IfB', type: mavlink20.messages.debug, order_map: [0, 2, 1], crc_extra: 46 },
        256: { format: '<QBB32s', type: mavlink20.messages.setup_signing, order_map: [1, 2, 3, 0], crc_extra: 71 },
        257: { format: '<IIB', type: mavlink20.messages.button_change, order_map: [0, 1, 2], crc_extra: 131 },
        258: { format: '<BB30s200s', type: mavlink20.messages.play_tune, order_map: [0, 1, 2, 3], crc_extra: 187 },
        259: { format: '<IIfffIHHH32s32sB140sB', type: mavlink20.messages.camera_information, order_map: [0, 9, 10, 1, 2, 3, 4, 6, 7, 11, 5, 8, 12, 13], crc_extra: 92 },
        260: { format: '<IBff', type: mavlink20.messages.camera_settings, order_map: [0, 1, 2, 3], crc_extra: 146 },
        261: { format: '<IfffffBBBB32s', type: mavlink20.messages.storage_information, order_map: [0, 6, 7, 8, 1, 2, 3, 4, 5, 9, 10], crc_extra: 179 },
        262: { format: '<IfIfBBi', type: mavlink20.messages.camera_capture_status, order_map: [0, 4, 5, 1, 2, 3, 6], crc_extra: 12 },
        263: { format: '<QIiiii4fiBb205s', type: mavlink20.messages.camera_image_captured, order_map: [1, 0, 8, 2, 3, 4, 5, 6, 7, 9, 10], crc_extra: 133 },
        264: { format: '<QQQI', type: mavlink20.messages.flight_information, order_map: [3, 0, 1, 2], crc_extra: 49 },
        265: { format: '<Iffff', type: mavlink20.messages.mount_orientation, order_map: [0, 1, 2, 3, 4], crc_extra: 26 },
        266: { format: '<HBBBB249s', type: mavlink20.messages.logging_data, order_map: [1, 2, 0, 3, 4, 5], crc_extra: 193 },
        267: { format: '<HBBBB249s', type: mavlink20.messages.logging_data_acked, order_map: [1, 2, 0, 3, 4, 5], crc_extra: 35 },
        268: { format: '<HBB', type: mavlink20.messages.logging_ack, order_map: [1, 2, 0], crc_extra: 14 },
        269: { format: '<fIHHHHHBBB32s160s', type: mavlink20.messages.video_stream_information, order_map: [7, 8, 9, 2, 0, 3, 4, 1, 5, 6, 10, 11], crc_extra: 109 },
        270: { format: '<fIHHHHHB', type: mavlink20.messages.video_stream_status, order_map: [7, 2, 0, 3, 4, 1, 5, 6], crc_extra: 59 },
        271: { format: '<Iiiiiii4fff', type: mavlink20.messages.camera_fov_status, order_map: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9], crc_extra: 22 },
        275: { format: '<fffffffBBB', type: mavlink20.messages.camera_tracking_image_status, order_map: [7, 8, 9, 0, 1, 2, 3, 4, 5, 6], crc_extra: 126 },
        276: { format: '<iiffffffffffB', type: mavlink20.messages.camera_tracking_geo_status, order_map: [12, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], crc_extra: 18 },
        280: { format: '<IIffffffB', type: mavlink20.messages.gimbal_manager_information, order_map: [0, 1, 8, 2, 3, 4, 5, 6, 7], crc_extra: 70 },
        281: { format: '<IIBBBBB', type: mavlink20.messages.gimbal_manager_status, order_map: [0, 1, 2, 3, 4, 5, 6], crc_extra: 48 },
        282: { format: '<I4ffffBBB', type: mavlink20.messages.gimbal_manager_set_attitude, order_map: [5, 6, 0, 7, 1, 2, 3, 4], crc_extra: 123 },
        283: { format: '<QIIIffffffHH32s32s32sB', type: mavlink20.messages.gimbal_device_information, order_map: [1, 12, 13, 14, 2, 3, 0, 10, 11, 4, 5, 6, 7, 8, 9, 15], crc_extra: 74 },
        284: { format: '<4ffffHBB', type: mavlink20.messages.gimbal_device_set_attitude, order_map: [5, 6, 4, 0, 1, 2, 3], crc_extra: 99 },
        285: { format: '<I4ffffIHBBffB', type: mavlink20.messages.gimbal_device_attitude_status, order_map: [7, 8, 0, 6, 1, 2, 3, 4, 5, 9, 10, 11], crc_extra: 137 },
        286: { format: '<Q4fIfffIfHBBBf', type: mavlink20.messages.autopilot_state_for_gimbal_device, order_map: [9, 10, 0, 1, 2, 3, 4, 5, 6, 7, 8, 11, 12], crc_extra: 210 },
        287: { format: '<IffffBBB', type: mavlink20.messages.gimbal_manager_set_pitchyaw, order_map: [5, 6, 0, 7, 1, 2, 3, 4], crc_extra: 1 },
        288: { format: '<IffffBBB', type: mavlink20.messages.gimbal_manager_set_manual_control, order_map: [5, 6, 0, 7, 1, 2, 3, 4], crc_extra: 20 },
        299: { format: '<32s64s', type: mavlink20.messages.wifi_config_ap, order_map: [0, 1], crc_extra: 19 },
        301: { format: '<IiiHHHHHHHbBBBB7s20s', type: mavlink20.messages.ais_vessel, order_map: [0, 1, 2, 3, 4, 5, 10, 11, 12, 6, 7, 13, 14, 15, 16, 8, 9], crc_extra: 243 },
        310: { format: '<QIHBBB', type: mavlink20.messages.uavcan_node_status, order_map: [0, 1, 3, 4, 5, 2], crc_extra: 28 },
        311: { format: '<QII80sBB16sBB', type: mavlink20.messages.uavcan_node_info, order_map: [0, 1, 3, 4, 5, 6, 7, 8, 2], crc_extra: 95 },
        320: { format: '<hBB16s', type: mavlink20.messages.param_ext_request_read, order_map: [1, 2, 3, 0], crc_extra: 243 },
        321: { format: '<BB', type: mavlink20.messages.param_ext_request_list, order_map: [0, 1], crc_extra: 88 },
        322: { format: '<HH16s128sB', type: mavlink20.messages.param_ext_value, order_map: [2, 3, 4, 0, 1], crc_extra: 243 },
        323: { format: '<BB16s128sB', type: mavlink20.messages.param_ext_set, order_map: [0, 1, 2, 3, 4], crc_extra: 78 },
        324: { format: '<16s128sBB', type: mavlink20.messages.param_ext_ack, order_map: [0, 1, 2, 3], crc_extra: 132 },
        330: { format: '<Q72HHHBBffB', type: mavlink20.messages.obstacle_distance, order_map: [0, 4, 1, 5, 2, 3, 6, 7, 8], crc_extra: 23 },
        331: { format: '<Qfff4fffffff21f21fBBBBb', type: mavlink20.messages.odometry, order_map: [0, 13, 14, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 15, 16, 17], crc_extra: 91 },
        335: { format: '<QQHHBBBB', type: mavlink20.messages.isbd_link_status, order_map: [0, 1, 2, 3, 4, 5, 6, 7], crc_extra: 225 },
        339: { format: '<fB', type: mavlink20.messages.raw_rpm, order_map: [1, 0], crc_extra: 199 },
        340: { format: '<QiiiiiiihhhHHHH18sBB', type: mavlink20.messages.utm_global_position, order_map: [0, 15, 1, 2, 3, 4, 8, 9, 10, 11, 12, 13, 5, 6, 7, 14, 16, 17], crc_extra: 99 },
        350: { format: '<QH10s58f', type: mavlink20.messages.debug_float_array, order_map: [0, 2, 1, 3], crc_extra: 232 },
        370: { format: '<iiHHHHHBBB16s50sHBII11s', type: mavlink20.messages.smart_battery_info, order_map: [7, 8, 9, 0, 1, 2, 10, 11, 3, 4, 5, 6, 12, 13, 14, 15, 16], crc_extra: 75 },
        373: { format: '<QfffffIiHhh', type: mavlink20.messages.generator_status, order_map: [0, 8, 1, 2, 3, 4, 9, 5, 10, 6, 7], crc_extra: 117 },
        375: { format: '<QI32f', type: mavlink20.messages.actuator_output_status, order_map: [0, 1, 2], crc_extra: 251 },
        376: { format: '<IHH', type: mavlink20.messages.relay_status, order_map: [0, 1, 2], crc_extra: 199 },
        385: { format: '<HBBB128s', type: mavlink20.messages.tunnel, order_map: [1, 2, 0, 3, 4], crc_extra: 147 },
        386: { format: '<IBBBB8s', type: mavlink20.messages.can_frame, order_map: [1, 2, 3, 4, 0, 5], crc_extra: 132 },
        387: { format: '<IBBBB64s', type: mavlink20.messages.canfd_frame, order_map: [1, 2, 3, 4, 0, 5], crc_extra: 4 },
        388: { format: '<16HBBBBB', type: mavlink20.messages.can_filter_modify, order_map: [1, 2, 3, 4, 5, 0], crc_extra: 8 },
        9000: { format: '<Q16dB', type: mavlink20.messages.wheel_distance, order_map: [0, 2, 1], crc_extra: 113 },
        9005: { format: '<QfffffIh', type: mavlink20.messages.winch_status, order_map: [0, 1, 2, 3, 4, 5, 7, 6], crc_extra: 117 },
        12900: { format: '<BB20sBB20s', type: mavlink20.messages.open_drone_id_basic_id, order_map: [0, 1, 2, 3, 4, 5], crc_extra: 114 },
        12901: { format: '<iiffffHHhBB20sBBBBBBB', type: mavlink20.messages.open_drone_id_location, order_map: [9, 10, 11, 12, 6, 7, 8, 0, 1, 2, 3, 13, 4, 14, 15, 16, 17, 5, 18], crc_extra: 254 },
        12902: { format: '<IBB20sBBBB23s', type: mavlink20.messages.open_drone_id_authentication, order_map: [1, 2, 3, 4, 5, 6, 7, 0, 8], crc_extra: 140 },
        12903: { format: '<BB20sB23s', type: mavlink20.messages.open_drone_id_self_id, order_map: [0, 1, 2, 3, 4], crc_extra: 249 },
        12904: { format: '<iifffIHHBB20sBBBB', type: mavlink20.messages.open_drone_id_system, order_map: [8, 9, 10, 11, 12, 0, 1, 6, 7, 2, 3, 13, 14, 4, 5], crc_extra: 77 },
        12905: { format: '<BB20sB20s', type: mavlink20.messages.open_drone_id_operator_id, order_map: [0, 1, 2, 3, 4], crc_extra: 49 },
        12918: { format: '<B50s', type: mavlink20.messages.open_drone_id_arm_status, order_map: [0, 1], crc_extra: 139 },
        12915: { format: '<BB20sBB225s', type: mavlink20.messages.open_drone_id_message_pack, order_map: [0, 1, 2, 3, 4, 5], crc_extra: 94 },
        12919: { format: '<iifIBB', type: mavlink20.messages.open_drone_id_system_update, order_map: [4, 5, 0, 1, 2, 3], crc_extra: 7 },
        12920: { format: '<hHB', type: mavlink20.messages.hygrometer_sensor, order_map: [2, 0, 1], crc_extra: 20 },
        10001: { format: '<IH9sBBBBB', type: mavlink20.messages.uavionix_adsb_out_cfg, order_map: [0, 2, 3, 4, 5, 6, 1, 7], crc_extra: 209 },
        10002: { format: '<IiiiiIHHhhhHHBBB', type: mavlink20.messages.uavionix_adsb_out_dynamic, order_map: [0, 1, 2, 3, 13, 14, 4, 5, 6, 7, 8, 9, 10, 15, 11, 12], crc_extra: 186 },
        10003: { format: '<B', type: mavlink20.messages.uavionix_adsb_transceiver_health_report, order_map: [0], crc_extra: 4 },
        10004: { format: '<9s', type: mavlink20.messages.uavionix_adsb_out_cfg_registration, order_map: [0], crc_extra: 133 },
        10005: { format: '<9s', type: mavlink20.messages.uavionix_adsb_out_cfg_flightid, order_map: [0], crc_extra: 103 },
        10006: { format: '<I', type: mavlink20.messages.uavionix_adsb_get, order_map: [0], crc_extra: 193 },
        10007: { format: '<iHBB8sB', type: mavlink20.messages.uavionix_adsb_out_control, order_map: [2, 0, 1, 3, 4, 5], crc_extra: 71 },
        10008: { format: '<HBBBB8s', type: mavlink20.messages.uavionix_adsb_out_status, order_map: [1, 0, 2, 3, 4, 5], crc_extra: 240 },
        42000: { format: '<B', type: mavlink20.messages.icarous_heartbeat, order_map: [0], crc_extra: 227 },
        42001: { format: '<ffffffffffbBBBBB', type: mavlink20.messages.icarous_kinematic_bands, order_map: [10, 11, 0, 1, 12, 2, 3, 13, 4, 5, 14, 6, 7, 15, 8, 9], crc_extra: 239 },
        10151: { format: '<ffffffIiffffffffffffHHB', type: mavlink20.messages.loweheiser_gov_efi, order_map: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 22, 20, 21], crc_extra: 195 },
        50001: { format: '<32s', type: mavlink20.messages.cubepilot_raw_rc, order_map: [0], crc_extra: 246 },
        50002: { format: '<fIHHHBB230s', type: mavlink20.messages.herelink_video_stream_information, order_map: [5, 6, 0, 2, 3, 1, 4, 7], crc_extra: 181 },
        50003: { format: '<IIIhhhB', type: mavlink20.messages.herelink_telem, order_map: [6, 3, 0, 1, 2, 4, 5], crc_extra: 62 },
        50004: { format: '<IIBB', type: mavlink20.messages.cubepilot_firmware_update_start, order_map: [2, 3, 0, 1], crc_extra: 240 },
        50005: { format: '<IBB', type: mavlink20.messages.cubepilot_firmware_update_resp, order_map: [1, 2, 0], crc_extra: 152 },
        52000: { format: '<50s50s', type: mavlink20.messages.airlink_auth, order_map: [0, 1], crc_extra: 13 },
        52001: { format: '<B', type: mavlink20.messages.airlink_auth_response, order_map: [0], crc_extra: 239 },
        0: { format: '<IBBBBB', type: mavlink20.messages.heartbeat, order_map: [1, 2, 3, 0, 4, 5], crc_extra: 50 },
}


// Special mavlink message to capture malformed data packets for debugging
mavlink20.messages.bad_data = function(data, reason) {
    this._id = mavlink20.MAVLINK_MSG_ID_BAD_DATA;
    this._data = data;
    this._reason = reason;
    this._msgbuf = data;
}
mavlink20.messages.bad_data.prototype = new mavlink20.message;

//  MAVLink signing state class
MAVLinkSigning = function MAVLinkSigning(object){ 
        this.secret_key = new Buffer.from([]) ; //new Buffer.from([ 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42 ]) // secret key must be a Buffer obj of 32 length 
        this.timestamp = 1 
        this.link_id = 0 
        this.sign_outgoing = false // todo false this 
        this.allow_unsigned_callback = undefined 
        this.stream_timestamps = {} 
        this.sig_count = 0 
        this.badsig_count = 0 
        this.goodsig_count = 0 
        this.unsigned_count = 0 
        this.reject_count = 0 
} 

/* MAVLink protocol handling class */
MAVLink20Processor = function(logger, srcSystem, srcComponent) {

    this.logger = logger;

    this.seq = 0;
    this.buf = new Buffer.from([]);
    this.bufInError = new Buffer.from([]);
   
    this.srcSystem = (typeof srcSystem === 'undefined') ? 0 : srcSystem;
    this.srcComponent =  (typeof srcComponent === 'undefined') ? 0 : srcComponent;

    this.have_prefix_error = false;

    // The first packet we expect is a valid header, 6 bytes.
    this.protocol_marker = 253;   
    this.expected_length = mavlink20.HEADER_LEN;
    this.little_endian = true;

    this.crc_extra = true;
    this.sort_fields = true;
    this.total_packets_sent = 0;
    this.total_bytes_sent = 0;
    this.total_packets_received = 0;
    this.total_bytes_received = 0;
    this.total_receive_errors = 0;
    this.startup_time = Date.now();

    // optional , but when used we store signing state in this object: 
    this.signing = new MAVLinkSigning();
}

// Implements EventEmitter
util.inherits(MAVLink20Processor, events.EventEmitter);

// If the logger exists, this function will add a message to it.
// Assumes the logger is a winston object.
MAVLink20Processor.prototype.log = function(message) {
    if(this.logger) {
        this.logger.info(message);
    }
}

MAVLink20Processor.prototype.log = function(level, message) {
    if(this.logger) {
        this.logger.log(level, message);
    }
}

MAVLink20Processor.prototype.send = function(mavmsg) {
    buf = mavmsg.pack(this);
    this.file.write(buf);
    this.seq = (this.seq + 1) % 256;
    this.total_packets_sent +=1;
    this.total_bytes_sent += buf.length;
}

// return number of bytes needed for next parsing stage
MAVLink20Processor.prototype.bytes_needed = function() {
    ret = this.expected_length - this.buf.length;
    return ( ret <= 0 ) ? 1 : ret;
}

// add data to the local buffer
MAVLink20Processor.prototype.pushBuffer = function(data) {
    if(data) {
        this.buf = Buffer.concat([this.buf, data]);   // python calls this self.buf.extend(c) 
        this.total_bytes_received += data.length;
    }
}

// Decode prefix.  Elides the prefix.
MAVLink20Processor.prototype.parsePrefix = function() {

    // Test for a message prefix.
    if( this.buf.length >= 1 && this.buf[0] != this.protocol_marker ) {

        // Strip the offending initial byte and throw an error.
        var badPrefix = this.buf[0];
        this.bufInError = this.buf.slice(0,1);
        this.buf = this.buf.slice(1);
        this.expected_length = mavlink20.HEADER_LEN; //initially we 'expect' at least the length of the header, later parseLength corrects for this. 
        throw new Error("Bad prefix ("+badPrefix+")");
    }

}

// Determine the length.  Leaves buffer untouched.
// Although the 'len' of a packet is available as of the second byte, the third byte with 'incompat_flags' lets
//  us know if we have signing enabled, which affects the real-world length by the signature-block length of 13 bytes.
// once successful, 'this.expected_length' is correctly set for the whole packet.
MAVLink20Processor.prototype.parseLength = function() {
    
    if( this.buf.length >= 3 ) { 
        var unpacked = jspack.Unpack('BBB', this.buf.slice(0, 3)); 
        var magic = unpacked[0]; // stx ie fd or fe etc 
        this.expected_length = unpacked[1] + mavlink20.HEADER_LEN + 2 // length of message + header + CRC (ie non-signed length) 
        this.incompat_flags = unpacked[2];  
        // mavlink2 only..  in mavlink1, incompat_flags var above is actually the 'seq', but for this test its ok. 
        if ((magic == mavlink20.PROTOCOL_MARKER_V2 ) && ( this.incompat_flags & mavlink20.MAVLINK_IFLAG_SIGNED )){ 
            this.expected_length += mavlink20.MAVLINK_SIGNATURE_BLOCK_LEN; 
        } 
    }

}

// input some data bytes, possibly returning a new message - python equiv function is called parse_char / __parse_char_legacy 
MAVLink20Processor.prototype.parseChar = function(c) {

    var m = null;

    try {

        this.pushBuffer(c);
        this.parsePrefix();
        this.parseLength();
        m = this.parsePayload();

    } catch(e) {

        this.log('error', e.message);
        this.total_receive_errors += 1;
        m = new mavlink20.messages.bad_data(this.bufInError, e.message);
        this.bufInError = new Buffer.from([]);
        
    }

    // emit a packet-specific message as well as a generic message, user/s can choose to use either or both of these.
    if(null != m) {
        this.emit(m._name, m);
        this.emit('message', m);
    }

    return m;

}

// continuation of python's  __parse_char_legacy 
MAVLink20Processor.prototype.parsePayload = function() {

    var m = null;

    // tip: this.expected_length and this.incompat_flags both already set correctly by parseLength(..) above 

    // If we have enough bytes to try and read it, read it.  
    //  shortest packet is header+checksum(2) with no payload, so we need at least that many 
    //  but once we have a longer 'expected length' we have to read all of it. 
    if(( this.expected_length >= mavlink20.HEADER_LEN+2) && (this.buf.length >= this.expected_length) ) { 

        // Slice off the expected packet length, reset expectation to be to find a header.
        var mbuf = this.buf.slice(0, this.expected_length);

        // TODO: slicing off the buffer should depend on the error produced by the decode() function
        // - if we find a well formed message, cut-off the expected_length 
        // - if the message is not well formed (correct prefix by accident), cut-off 1 char only
        this.buf = this.buf.slice(this.expected_length);
        this.expected_length = mavlink20.HEADER_LEN; // after attempting a parse, we'll next expect to find just a header. 

        try {
            m = this.decode(mbuf);
            this.total_packets_received += 1;
        }
        catch(e) {
            // Set buffer in question and re-throw to generic error handling
            this.bufInError = mbuf;
            throw e;
        }
    }

    return m;

}

// input some data bytes, possibly returning an array of new messages
MAVLink20Processor.prototype.parseBuffer = function(s) {
    
    // Get a message, if one is available in the stream.
    var m = this.parseChar(s);

    // No messages available, bail.
    if ( null === m ) {
        return null;
    }
    
    // While more valid messages can be read from the existing buffer, add
    // them to the array of new messages and return them.
    var ret = [m];
    while(true) {
        m = this.parseChar();
        if ( null === m ) {
            // No more messages left.
            return ret;
        }
        ret.push(m);
    }

}

// from Buffer to ArrayBuffer 
function toArrayBuffer(buf) { 
    var ab = new ArrayBuffer(buf.length); 
    var view = new Uint8Array(ab); 
    for (var i = 0; i < buf.length; ++i) { 
        view[i] = buf[i]; 
    } 
    return ab; 
} 
// and back 
function toBuffer(ab) { 
    var buf = Buffer.alloc(ab.byteLength); 
    var view = new Uint8Array(ab); 
    for (var i = 0; i < buf.length; ++i) { 
        buf[i] = view[i]; 
    } 
    return buf; 
} 
 
//check signature on incoming message , many of the comments in this file come from the python impl
MAVLink20Processor.prototype.check_signature = function(msgbuf, srcSystem, srcComponent) { 

        //if (isinstance(msgbuf, array.array)){ 
        //    msgbuf = msgbuf.tostring() 
        //} 
        if ( Buffer.isBuffer(msgbuf) ) { 
            msgbuf = toArrayBuffer(msgbuf); 
        } 
 
        //timestamp_buf = msgbuf[-12:-6] 
        var timestamp_buf= msgbuf.slice(-12,-6);  
 
        //link_id = msgbuf[-13] 
        var link_id= new Buffer.from(msgbuf.slice(-13,-12)); // just a single byte really, but returned as a buffer 
        link_id = link_id[0]; // get the first byte.
 
        //self.mav_sign_unpacker = jspack.Unpack('<IH') 
        // (tlow, thigh) = self.mav_sign_unpacker.unpack(timestamp_buf) 

        // I means unsigned 4bytes, H means unsigned 2 bytes
        var t = jspack.Unpack('<IH',new Buffer.from(timestamp_buf))  
        const [tlow, thigh]  = t; 
 
        // due to js not being able to shift numbers  more than 32, we'll use this instead.. 
        // js stores all its numbers as a 64bit float with 53 bits of mantissa, so have room for 48 ok. 
        function shift(number, shift) { 
            return number * Math.pow(2, shift); 
        } 
        var thigh_shifted = shift(thigh,32);  
        var timestamp = tlow + thigh_shifted 
 
        // see if the timestamp is acceptable 
 
         // we'll use a STRING containing these three things in it as a unique key eg: '0,1,1' 
        stream_key = new Array(link_id,srcSystem,srcComponent).toString(); 
 
        if (stream_key in this.signing.stream_timestamps){ 
            if (timestamp <= this.signing.stream_timestamps[stream_key]){ 
                //# reject old timestamp 
                //console.log('old timestamp')  
                return false 
            } 
        }else{ 
            //# a new stream has appeared. Accept the timestamp if it is at most 
            //# one minute behind our current timestamp 
            if (timestamp + 6000*1000 < this.signing.timestamp){ 
                //console.log('bad new stream ', timestamp/(100.0*1000*60*60*24*365), this.signing.timestamp/(100.0*1000*60*60*24*365))  
                return false 
            } 
            this.signing.stream_timestamps[stream_key] = timestamp; 
            //console.log('new stream',this.signing.stream_timestamps)  
        } 
 
         //   h = hashlib.new('sha256') 
         //   h.update(this.signing.secret_key) 
         //   h.update(msgbuf[:-6]) 
        var crypto= require('crypto'); 
        var h =  crypto.createHash('sha256'); 
 
        // just the last 6 of 13 available are the actual sig . ie excluding the linkid(1) and timestamp(6) 
        var sigpart = msgbuf.slice(-6); 
        sigpart = new Buffer.from(sigpart); 
        // not sig part 0- end-minus-6 
        var notsigpart = msgbuf.slice(0,-6);  
        notsigpart = new Buffer.from(notsigpart); 

        h.update(this.signing.secret_key); // secret is already a Buffer 
        //var tmp = h.copy().digest(); 
        h.update(notsigpart);  
        //var tmp2 = h.copy().digest() 
        var hashDigest = h.digest(); 
        sig1 = hashDigest.slice(0,6) 
 
        //sig1 = str(h.digest())[:6] 
        //sig2 = str(msgbuf)[-6:] 

        // can't just compare sigs, need a full buffer compare like this... 
        //if (sig1 != sigpart){  
        if (Buffer.compare(sig1,sigpart)){  
            //console.log('sig mismatch',sig1,sigpart)  
            return false 
        } 
        //# the timestamp we next send with is the max of the received timestamp and 
        //# our current timestamp 
        this.signing.timestamp = Math.max(this.signing.timestamp, timestamp) 
        return true
} 

/* decode a buffer as a MAVLink message */
MAVLink20Processor.prototype.decode = function(msgbuf) {

    var magic, incompat_flags, compat_flags, mlen, seq, srcSystem, srcComponent, unpacked, msgId, signature_len; 

    // decode the header
    try {
        unpacked = jspack.Unpack('cBBBBBBHB', msgbuf.slice(0, 10));  // the H in here causes msgIDlow to takeup 2 bytes, the rest 1 
        magic = unpacked[0];
        mlen = unpacked[1];
        incompat_flags = unpacked[2];
        compat_flags = unpacked[3];
        seq = unpacked[4];
        srcSystem = unpacked[5];
        srcComponent = unpacked[6];
        var msgIDlow = ((unpacked[7] & 0xFF) << 8) | ((unpacked[7] >> 8) & 0xFF); // first-two msgid bytes 
        var msgIDhigh = unpacked[8];   // the 3rd msgid byte 
        msgId = msgIDlow | (msgIDhigh<<16);  // combined result. 0 - 16777215  24bit number 
        }
    catch(e) {
        throw new Error('Unable to unpack MAVLink header: ' + e.message);
    }

    //  TODO allow full parsing of 1.0 inside the 2.0 parser, this is just a start 
    if (magic == mavlink20.PROTOCOL_MARKER_V1){ 
            //headerlen = 6; 
             
            // these two are in the same place in both v1 and v2 so no change needed: 
            //magic = magic; 
            //mlen = mlen; 
 
            // grab mavlink-v1 header position info from v2 unpacked position 
            seq1 = incompat_flags; 
            srcSystem1 = compat_flags; 
            srcComponent1 = seq; 
            msgId1 = srcSystem; 
            // override the v1 vs v2 offsets so we get the correct data either way... 
            seq = seq1; 
            srcSystem = srcSystem1; 
            srcComponent = srcComponent1; 
            msgId = msgId1;  
            // don't exist in mavlink1, so zero-them 
            incompat_flags = 0; 
            compat_flags = 0; 
            signature_len = 0; 
            // todo add more v1 here and don't just return 
            return; 
    } 

    if (magic.charCodeAt(0) != this.protocol_marker) {
        throw new Error("Invalid MAVLink prefix ("+magic.charCodeAt(0)+")");
    }

    // is packet supposed to be signed? 
    if ( incompat_flags & mavlink20.MAVLINK_IFLAG_SIGNED ){  
        signature_len = mavlink20.MAVLINK_SIGNATURE_BLOCK_LEN; 
    } else { 
        signature_len = 0; 
    } 
 
    // header's declared len compared to packets actual len 
    var actual_len = (msgbuf.length - (mavlink20.HEADER_LEN + 2 + signature_len)); 
    var actual_len_nosign = (msgbuf.length - (mavlink20.HEADER_LEN + 2 )); 
 
    if ((mlen == actual_len) && (signature_len > 0)){ 
        var len_if_signed = mlen+signature_len; 
        //console.log("Packet appears signed && labeled as signed, OK. msgId=" + msgId);     
 
    } else  if ((mlen == actual_len_nosign) && (signature_len > 0)){ 
 
        var len_if_signed = mlen+signature_len; 
        throw new Error("Packet appears unsigned when labeled as signed. Got actual_len "+actual_len_nosign+" expected " + len_if_signed + ", msgId=" + msgId);     
 
    } else if( mlen != actual_len) {  
          throw new Error("Invalid MAVLink message length.  Got " + (msgbuf.length - (mavlink20.HEADER_LEN + 2)) + " expected " + mlen + ", msgId=" + msgId); 

    }  
 
    if( false === _.has(mavlink20.map, msgId) ) {
        throw new Error("Unknown MAVLink message ID (" + msgId + ")");
    }

    // here's the common chunks of packet we want to work with below.. 
    var headerBuf= msgbuf.slice(mavlink20.HEADER_LEN); // first10 
    var sigBuf = msgbuf.slice(-signature_len); // last 13 or nothing 
    var crcBuf1 = msgbuf.slice(-2); // either last-2 or last-2-prior-to-signature 
    var crcBuf2 = msgbuf.slice(-15,-13); // either last-2 or last-2-prior-to-signature 
    var payloadBuf = msgbuf.slice(mavlink20.HEADER_LEN, -(signature_len+2)); // the remaining bit between the header and the crc 
    var crcCheckBuf = msgbuf.slice(1, -(signature_len+2)); // the part uses to calculate the crc - ie between the magic and signature, 

    // decode the payload
    // refs: (fmt, type, order_map, crc_extra) = mavlink20.map[msgId]
    var decoder = mavlink20.map[msgId];

    // decode the checksum
    var receivedChecksum = undefined; 
    if ( signature_len == 0 ) { // unsigned 
        try { 
            receivedChecksum = jspack.Unpack('<H', crcBuf1); 
        } catch (e) { 
            throw new Error("Unable to unpack MAVLink unsigned CRC: " + e.message); 
        } 
    } else { // signed 
        try { 
            receivedChecksum = jspack.Unpack('<H', crcBuf2); 
        } catch (e) { 
            throw new Error("Unable to unpack MAVLink signed CRC: " + e.message); 
        } 
    }
    receivedChecksum = receivedChecksum[0]; 

    // make our own chksum of the relevant part of the packet... 
    var messageChecksum = mavlink20.x25Crc(crcCheckBuf);  
    var messageChecksum2 = mavlink20.x25Crc([decoder.crc_extra], messageChecksum); 
 
    if ( receivedChecksum != messageChecksum2 ) { 
        throw new Error('invalid MAVLink CRC in msgID ' +msgId+ ', got 0x' + receivedChecksum + ' checksum, calculated payload checksum as 0x'+messageChecksum2 ); 
    }
 
    // now check the signature... 
    var sig_ok = false 
    if (signature_len == mavlink20.MAVLINK_SIGNATURE_BLOCK_LEN){ 
        this.signing.sig_count += 1  
    } 

    // it's a Buffer, zero-length means unused 
    if (this.signing.secret_key.length != 0 ){ 
        var accept_signature = false; 
        if (signature_len == mavlink20.MAVLINK_SIGNATURE_BLOCK_LEN){  
            sig_ok = this.check_signature(msgbuf, srcSystem, srcComponent); 
            accept_signature = sig_ok; 
            if (sig_ok){ 
                this.signing.goodsig_count += 1 
            }else{ 
                this.signing.badsig_count += 1 
            } 
            if ( (! accept_signature) && (this.signing.allow_unsigned_callback != undefined) ){ 
                accept_signature = this.signing.allow_unsigned_callback(this, msgId); 
                if (accept_signature){ 
                    this.signing.unsigned_count += 1 
                }else{ 
                    this.signing.reject_count += 1 
                } 
            } 
        }else if (this.signing.allow_unsigned_callback != undefined){ 
            accept_signature = this.signing.allow_unsigned_callback(this, msgId); 
            if (accept_signature){ 
                this.signing.unsigned_count += 1 
            }else{ 
                this.signing.reject_count += 1 
            } 
        } 
        if (!accept_signature) throw new Error('Invalid signature'); 
    } 

    // now look at the specifics of the payload... 
    var paylen = jspack.CalcLength(decoder.format);

    //put any truncated 0's back in (ie zero-pad ) 
    if (paylen > payloadBuf.length) {
        payloadBuf =  Buffer.concat([payloadBuf, Buffer.alloc(paylen - payloadBuf.length)]);
    }
    // Decode the payload and reorder the fields to match the order map.
    try {
        var t = jspack.Unpack(decoder.format, payloadBuf); 
    }
    catch (e) {
        throw new Error('Unable to unpack MAVLink payload type='+decoder.type+' format='+decoder.format+' payloadLength='+ payloadBuf +': '+ e.message); 
    }

    // Need to check if the message contains arrays
    var args = {};
    const elementsInMsg = decoder.order_map.length;
    const actualElementsInMsg = JSON.parse(JSON.stringify(t)).length;

    if (elementsInMsg == actualElementsInMsg) {
        // Reorder the fields to match the order map
        _.each(t, function(e, i, l) {
            args[i] = t[decoder.order_map[i]]
        });
    } else {
        // This message contains arrays
        var typeIndex = 1;
        var orderIndex = 0;
        var memberIndex = 0;
        var tempArgs = {};

        // Walk through the fields 
        for(var i = 0, size = decoder.format.length-1; i <= size; ++i) {
            var order = decoder.order_map[orderIndex];
            var currentType =  decoder.format[typeIndex];

            if (isNaN(parseInt(currentType))) {
                // This field is not an array check the type and add it to the args
                tempArgs[orderIndex] = t[memberIndex];
                memberIndex++;
            } else {
                // This field is part of an array, need to find the length of the array
                var arraySize = ''
                var newArray = []
                while (!isNaN(decoder.format[typeIndex])) {
                    arraySize = arraySize + decoder.format[typeIndex];
                    typeIndex++;
                }

                // Now that we know how long the array is, create an array with the values
                for(var j = 0, size = parseInt(arraySize); j < size; ++j){
                    newArray.push(t[j+orderIndex]);
                    memberIndex++;
                }

                // Add the array to the args object
                arraySize = arraySize + decoder.format[typeIndex];
                currentType = arraySize;
                tempArgs[orderIndex] = newArray;
            }
            orderIndex++;
            typeIndex++;
        }

        // Finally reorder the fields to match the order map
        _.each(t, function(e, i, l) {
            args[i] = tempArgs[decoder.order_map[i]]
        });
    }

    

    // construct the message object
    try {
        // args at this point might look like:  { '0': 6, '1': 8, '2': 0, '3': 0, '4': 3, '5': 3 }
        var m = new decoder.type();   // make a new 'empty' instance of the right class,
        m.set(args,false); // associate ordered-field-numbers to names, after construction not during.
    }
    catch (e) {
        throw new Error('Unable to instantiate MAVLink message of type '+decoder.type+' : ' + e.message);
    }

    m._signed = sig_ok; 
    if (m._signed) { m._link_id = msgbuf[-13]; } 
 
    m._msgbuf = msgbuf;
    m._payload = payloadBuf 
    m.crc = receivedChecksum;
    m._header = new mavlink20.header(msgId, mlen, seq, srcSystem, srcComponent, incompat_flags, compat_flags);
    this.log(m);
    return m;
}


// allow loading as both common.js (Node), and/or vanilla javascript in-browser
if(typeof module === "object" && module.exports) {
    module.exports = {mavlink20, MAVLink20Processor};
}


}).call(this)}).call(this,require("buffer").Buffer)
},{"buffer":53,"crypto":62,"events":89,"jspack":3,"long":4,"underscore":2,"util":176}],2:[function(require,module,exports){
(function (global){(function (){
(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :
  typeof define === 'function' && define.amd ? define('underscore', factory) :
  (global = typeof globalThis !== 'undefined' ? globalThis : global || self, (function () {
    var current = global._;
    var exports = global._ = factory();
    exports.noConflict = function () { global._ = current; return exports; };
  }()));
}(this, (function () {
  //     Underscore.js 1.13.6
  //     https://underscorejs.org
  //     (c) 2009-2022 Jeremy Ashkenas, Julian Gonggrijp, and DocumentCloud and Investigative Reporters & Editors
  //     Underscore may be freely distributed under the MIT license.

  // Current version.
  var VERSION = '1.13.6';

  // Establish the root object, `window` (`self`) in the browser, `global`
  // on the server, or `this` in some virtual machines. We use `self`
  // instead of `window` for `WebWorker` support.
  var root = (typeof self == 'object' && self.self === self && self) ||
            (typeof global == 'object' && global.global === global && global) ||
            Function('return this')() ||
            {};

  // Save bytes in the minified (but not gzipped) version:
  var ArrayProto = Array.prototype, ObjProto = Object.prototype;
  var SymbolProto = typeof Symbol !== 'undefined' ? Symbol.prototype : null;

  // Create quick reference variables for speed access to core prototypes.
  var push = ArrayProto.push,
      slice = ArrayProto.slice,
      toString = ObjProto.toString,
      hasOwnProperty = ObjProto.hasOwnProperty;

  // Modern feature detection.
  var supportsArrayBuffer = typeof ArrayBuffer !== 'undefined',
      supportsDataView = typeof DataView !== 'undefined';

  // All **ECMAScript 5+** native function implementations that we hope to use
  // are declared here.
  var nativeIsArray = Array.isArray,
      nativeKeys = Object.keys,
      nativeCreate = Object.create,
      nativeIsView = supportsArrayBuffer && ArrayBuffer.isView;

  // Create references to these builtin functions because we override them.
  var _isNaN = isNaN,
      _isFinite = isFinite;

  // Keys in IE < 9 that won't be iterated by `for key in ...` and thus missed.
  var hasEnumBug = !{toString: null}.propertyIsEnumerable('toString');
  var nonEnumerableProps = ['valueOf', 'isPrototypeOf', 'toString',
    'propertyIsEnumerable', 'hasOwnProperty', 'toLocaleString'];

  // The largest integer that can be represented exactly.
  var MAX_ARRAY_INDEX = Math.pow(2, 53) - 1;

  // Some functions take a variable number of arguments, or a few expected
  // arguments at the beginning and then a variable number of values to operate
  // on. This helper accumulates all remaining arguments past the function’s
  // argument length (or an explicit `startIndex`), into an array that becomes
  // the last argument. Similar to ES6’s "rest parameter".
  function restArguments(func, startIndex) {
    startIndex = startIndex == null ? func.length - 1 : +startIndex;
    return function() {
      var length = Math.max(arguments.length - startIndex, 0),
          rest = Array(length),
          index = 0;
      for (; index < length; index++) {
        rest[index] = arguments[index + startIndex];
      }
      switch (startIndex) {
        case 0: return func.call(this, rest);
        case 1: return func.call(this, arguments[0], rest);
        case 2: return func.call(this, arguments[0], arguments[1], rest);
      }
      var args = Array(startIndex + 1);
      for (index = 0; index < startIndex; index++) {
        args[index] = arguments[index];
      }
      args[startIndex] = rest;
      return func.apply(this, args);
    };
  }

  // Is a given variable an object?
  function isObject(obj) {
    var type = typeof obj;
    return type === 'function' || (type === 'object' && !!obj);
  }

  // Is a given value equal to null?
  function isNull(obj) {
    return obj === null;
  }

  // Is a given variable undefined?
  function isUndefined(obj) {
    return obj === void 0;
  }

  // Is a given value a boolean?
  function isBoolean(obj) {
    return obj === true || obj === false || toString.call(obj) === '[object Boolean]';
  }

  // Is a given value a DOM element?
  function isElement(obj) {
    return !!(obj && obj.nodeType === 1);
  }

  // Internal function for creating a `toString`-based type tester.
  function tagTester(name) {
    var tag = '[object ' + name + ']';
    return function(obj) {
      return toString.call(obj) === tag;
    };
  }

  var isString = tagTester('String');

  var isNumber = tagTester('Number');

  var isDate = tagTester('Date');

  var isRegExp = tagTester('RegExp');

  var isError = tagTester('Error');

  var isSymbol = tagTester('Symbol');

  var isArrayBuffer = tagTester('ArrayBuffer');

  var isFunction = tagTester('Function');

  // Optimize `isFunction` if appropriate. Work around some `typeof` bugs in old
  // v8, IE 11 (#1621), Safari 8 (#1929), and PhantomJS (#2236).
  var nodelist = root.document && root.document.childNodes;
  if (typeof /./ != 'function' && typeof Int8Array != 'object' && typeof nodelist != 'function') {
    isFunction = function(obj) {
      return typeof obj == 'function' || false;
    };
  }

  var isFunction$1 = isFunction;

  var hasObjectTag = tagTester('Object');

  // In IE 10 - Edge 13, `DataView` has string tag `'[object Object]'`.
  // In IE 11, the most common among them, this problem also applies to
  // `Map`, `WeakMap` and `Set`.
  var hasStringTagBug = (
        supportsDataView && hasObjectTag(new DataView(new ArrayBuffer(8)))
      ),
      isIE11 = (typeof Map !== 'undefined' && hasObjectTag(new Map));

  var isDataView = tagTester('DataView');

  // In IE 10 - Edge 13, we need a different heuristic
  // to determine whether an object is a `DataView`.
  function ie10IsDataView(obj) {
    return obj != null && isFunction$1(obj.getInt8) && isArrayBuffer(obj.buffer);
  }

  var isDataView$1 = (hasStringTagBug ? ie10IsDataView : isDataView);

  // Is a given value an array?
  // Delegates to ECMA5's native `Array.isArray`.
  var isArray = nativeIsArray || tagTester('Array');

  // Internal function to check whether `key` is an own property name of `obj`.
  function has$1(obj, key) {
    return obj != null && hasOwnProperty.call(obj, key);
  }

  var isArguments = tagTester('Arguments');

  // Define a fallback version of the method in browsers (ahem, IE < 9), where
  // there isn't any inspectable "Arguments" type.
  (function() {
    if (!isArguments(arguments)) {
      isArguments = function(obj) {
        return has$1(obj, 'callee');
      };
    }
  }());

  var isArguments$1 = isArguments;

  // Is a given object a finite number?
  function isFinite$1(obj) {
    return !isSymbol(obj) && _isFinite(obj) && !isNaN(parseFloat(obj));
  }

  // Is the given value `NaN`?
  function isNaN$1(obj) {
    return isNumber(obj) && _isNaN(obj);
  }

  // Predicate-generating function. Often useful outside of Underscore.
  function constant(value) {
    return function() {
      return value;
    };
  }

  // Common internal logic for `isArrayLike` and `isBufferLike`.
  function createSizePropertyCheck(getSizeProperty) {
    return function(collection) {
      var sizeProperty = getSizeProperty(collection);
      return typeof sizeProperty == 'number' && sizeProperty >= 0 && sizeProperty <= MAX_ARRAY_INDEX;
    }
  }

  // Internal helper to generate a function to obtain property `key` from `obj`.
  function shallowProperty(key) {
    return function(obj) {
      return obj == null ? void 0 : obj[key];
    };
  }

  // Internal helper to obtain the `byteLength` property of an object.
  var getByteLength = shallowProperty('byteLength');

  // Internal helper to determine whether we should spend extensive checks against
  // `ArrayBuffer` et al.
  var isBufferLike = createSizePropertyCheck(getByteLength);

  // Is a given value a typed array?
  var typedArrayPattern = /\[object ((I|Ui)nt(8|16|32)|Float(32|64)|Uint8Clamped|Big(I|Ui)nt64)Array\]/;
  function isTypedArray(obj) {
    // `ArrayBuffer.isView` is the most future-proof, so use it when available.
    // Otherwise, fall back on the above regular expression.
    return nativeIsView ? (nativeIsView(obj) && !isDataView$1(obj)) :
                  isBufferLike(obj) && typedArrayPattern.test(toString.call(obj));
  }

  var isTypedArray$1 = supportsArrayBuffer ? isTypedArray : constant(false);

  // Internal helper to obtain the `length` property of an object.
  var getLength = shallowProperty('length');

  // Internal helper to create a simple lookup structure.
  // `collectNonEnumProps` used to depend on `_.contains`, but this led to
  // circular imports. `emulatedSet` is a one-off solution that only works for
  // arrays of strings.
  function emulatedSet(keys) {
    var hash = {};
    for (var l = keys.length, i = 0; i < l; ++i) hash[keys[i]] = true;
    return {
      contains: function(key) { return hash[key] === true; },
      push: function(key) {
        hash[key] = true;
        return keys.push(key);
      }
    };
  }

  // Internal helper. Checks `keys` for the presence of keys in IE < 9 that won't
  // be iterated by `for key in ...` and thus missed. Extends `keys` in place if
  // needed.
  function collectNonEnumProps(obj, keys) {
    keys = emulatedSet(keys);
    var nonEnumIdx = nonEnumerableProps.length;
    var constructor = obj.constructor;
    var proto = (isFunction$1(constructor) && constructor.prototype) || ObjProto;

    // Constructor is a special case.
    var prop = 'constructor';
    if (has$1(obj, prop) && !keys.contains(prop)) keys.push(prop);

    while (nonEnumIdx--) {
      prop = nonEnumerableProps[nonEnumIdx];
      if (prop in obj && obj[prop] !== proto[prop] && !keys.contains(prop)) {
        keys.push(prop);
      }
    }
  }

  // Retrieve the names of an object's own properties.
  // Delegates to **ECMAScript 5**'s native `Object.keys`.
  function keys(obj) {
    if (!isObject(obj)) return [];
    if (nativeKeys) return nativeKeys(obj);
    var keys = [];
    for (var key in obj) if (has$1(obj, key)) keys.push(key);
    // Ahem, IE < 9.
    if (hasEnumBug) collectNonEnumProps(obj, keys);
    return keys;
  }

  // Is a given array, string, or object empty?
  // An "empty" object has no enumerable own-properties.
  function isEmpty(obj) {
    if (obj == null) return true;
    // Skip the more expensive `toString`-based type checks if `obj` has no
    // `.length`.
    var length = getLength(obj);
    if (typeof length == 'number' && (
      isArray(obj) || isString(obj) || isArguments$1(obj)
    )) return length === 0;
    return getLength(keys(obj)) === 0;
  }

  // Returns whether an object has a given set of `key:value` pairs.
  function isMatch(object, attrs) {
    var _keys = keys(attrs), length = _keys.length;
    if (object == null) return !length;
    var obj = Object(object);
    for (var i = 0; i < length; i++) {
      var key = _keys[i];
      if (attrs[key] !== obj[key] || !(key in obj)) return false;
    }
    return true;
  }

  // If Underscore is called as a function, it returns a wrapped object that can
  // be used OO-style. This wrapper holds altered versions of all functions added
  // through `_.mixin`. Wrapped objects may be chained.
  function _$1(obj) {
    if (obj instanceof _$1) return obj;
    if (!(this instanceof _$1)) return new _$1(obj);
    this._wrapped = obj;
  }

  _$1.VERSION = VERSION;

  // Extracts the result from a wrapped and chained object.
  _$1.prototype.value = function() {
    return this._wrapped;
  };

  // Provide unwrapping proxies for some methods used in engine operations
  // such as arithmetic and JSON stringification.
  _$1.prototype.valueOf = _$1.prototype.toJSON = _$1.prototype.value;

  _$1.prototype.toString = function() {
    return String(this._wrapped);
  };

  // Internal function to wrap or shallow-copy an ArrayBuffer,
  // typed array or DataView to a new view, reusing the buffer.
  function toBufferView(bufferSource) {
    return new Uint8Array(
      bufferSource.buffer || bufferSource,
      bufferSource.byteOffset || 0,
      getByteLength(bufferSource)
    );
  }

  // We use this string twice, so give it a name for minification.
  var tagDataView = '[object DataView]';

  // Internal recursive comparison function for `_.isEqual`.
  function eq(a, b, aStack, bStack) {
    // Identical objects are equal. `0 === -0`, but they aren't identical.
    // See the [Harmony `egal` proposal](https://wiki.ecmascript.org/doku.php?id=harmony:egal).
    if (a === b) return a !== 0 || 1 / a === 1 / b;
    // `null` or `undefined` only equal to itself (strict comparison).
    if (a == null || b == null) return false;
    // `NaN`s are equivalent, but non-reflexive.
    if (a !== a) return b !== b;
    // Exhaust primitive checks
    var type = typeof a;
    if (type !== 'function' && type !== 'object' && typeof b != 'object') return false;
    return deepEq(a, b, aStack, bStack);
  }

  // Internal recursive comparison function for `_.isEqual`.
  function deepEq(a, b, aStack, bStack) {
    // Unwrap any wrapped objects.
    if (a instanceof _$1) a = a._wrapped;
    if (b instanceof _$1) b = b._wrapped;
    // Compare `[[Class]]` names.
    var className = toString.call(a);
    if (className !== toString.call(b)) return false;
    // Work around a bug in IE 10 - Edge 13.
    if (hasStringTagBug && className == '[object Object]' && isDataView$1(a)) {
      if (!isDataView$1(b)) return false;
      className = tagDataView;
    }
    switch (className) {
      // These types are compared by value.
      case '[object RegExp]':
        // RegExps are coerced to strings for comparison (Note: '' + /a/i === '/a/i')
      case '[object String]':
        // Primitives and their corresponding object wrappers are equivalent; thus, `"5"` is
        // equivalent to `new String("5")`.
        return '' + a === '' + b;
      case '[object Number]':
        // `NaN`s are equivalent, but non-reflexive.
        // Object(NaN) is equivalent to NaN.
        if (+a !== +a) return +b !== +b;
        // An `egal` comparison is performed for other numeric values.
        return +a === 0 ? 1 / +a === 1 / b : +a === +b;
      case '[object Date]':
      case '[object Boolean]':
        // Coerce dates and booleans to numeric primitive values. Dates are compared by their
        // millisecond representations. Note that invalid dates with millisecond representations
        // of `NaN` are not equivalent.
        return +a === +b;
      case '[object Symbol]':
        return SymbolProto.valueOf.call(a) === SymbolProto.valueOf.call(b);
      case '[object ArrayBuffer]':
      case tagDataView:
        // Coerce to typed array so we can fall through.
        return deepEq(toBufferView(a), toBufferView(b), aStack, bStack);
    }

    var areArrays = className === '[object Array]';
    if (!areArrays && isTypedArray$1(a)) {
        var byteLength = getByteLength(a);
        if (byteLength !== getByteLength(b)) return false;
        if (a.buffer === b.buffer && a.byteOffset === b.byteOffset) return true;
        areArrays = true;
    }
    if (!areArrays) {
      if (typeof a != 'object' || typeof b != 'object') return false;

      // Objects with different constructors are not equivalent, but `Object`s or `Array`s
      // from different frames are.
      var aCtor = a.constructor, bCtor = b.constructor;
      if (aCtor !== bCtor && !(isFunction$1(aCtor) && aCtor instanceof aCtor &&
                               isFunction$1(bCtor) && bCtor instanceof bCtor)
                          && ('constructor' in a && 'constructor' in b)) {
        return false;
      }
    }
    // Assume equality for cyclic structures. The algorithm for detecting cyclic
    // structures is adapted from ES 5.1 section 15.12.3, abstract operation `JO`.

    // Initializing stack of traversed objects.
    // It's done here since we only need them for objects and arrays comparison.
    aStack = aStack || [];
    bStack = bStack || [];
    var length = aStack.length;
    while (length--) {
      // Linear search. Performance is inversely proportional to the number of
      // unique nested structures.
      if (aStack[length] === a) return bStack[length] === b;
    }

    // Add the first object to the stack of traversed objects.
    aStack.push(a);
    bStack.push(b);

    // Recursively compare objects and arrays.
    if (areArrays) {
      // Compare array lengths to determine if a deep comparison is necessary.
      length = a.length;
      if (length !== b.length) return false;
      // Deep compare the contents, ignoring non-numeric properties.
      while (length--) {
        if (!eq(a[length], b[length], aStack, bStack)) return false;
      }
    } else {
      // Deep compare objects.
      var _keys = keys(a), key;
      length = _keys.length;
      // Ensure that both objects contain the same number of properties before comparing deep equality.
      if (keys(b).length !== length) return false;
      while (length--) {
        // Deep compare each member
        key = _keys[length];
        if (!(has$1(b, key) && eq(a[key], b[key], aStack, bStack))) return false;
      }
    }
    // Remove the first object from the stack of traversed objects.
    aStack.pop();
    bStack.pop();
    return true;
  }

  // Perform a deep comparison to check if two objects are equal.
  function isEqual(a, b) {
    return eq(a, b);
  }

  // Retrieve all the enumerable property names of an object.
  function allKeys(obj) {
    if (!isObject(obj)) return [];
    var keys = [];
    for (var key in obj) keys.push(key);
    // Ahem, IE < 9.
    if (hasEnumBug) collectNonEnumProps(obj, keys);
    return keys;
  }

  // Since the regular `Object.prototype.toString` type tests don't work for
  // some types in IE 11, we use a fingerprinting heuristic instead, based
  // on the methods. It's not great, but it's the best we got.
  // The fingerprint method lists are defined below.
  function ie11fingerprint(methods) {
    var length = getLength(methods);
    return function(obj) {
      if (obj == null) return false;
      // `Map`, `WeakMap` and `Set` have no enumerable keys.
      var keys = allKeys(obj);
      if (getLength(keys)) return false;
      for (var i = 0; i < length; i++) {
        if (!isFunction$1(obj[methods[i]])) return false;
      }
      // If we are testing against `WeakMap`, we need to ensure that
      // `obj` doesn't have a `forEach` method in order to distinguish
      // it from a regular `Map`.
      return methods !== weakMapMethods || !isFunction$1(obj[forEachName]);
    };
  }

  // In the interest of compact minification, we write
  // each string in the fingerprints only once.
  var forEachName = 'forEach',
      hasName = 'has',
      commonInit = ['clear', 'delete'],
      mapTail = ['get', hasName, 'set'];

  // `Map`, `WeakMap` and `Set` each have slightly different
  // combinations of the above sublists.
  var mapMethods = commonInit.concat(forEachName, mapTail),
      weakMapMethods = commonInit.concat(mapTail),
      setMethods = ['add'].concat(commonInit, forEachName, hasName);

  var isMap = isIE11 ? ie11fingerprint(mapMethods) : tagTester('Map');

  var isWeakMap = isIE11 ? ie11fingerprint(weakMapMethods) : tagTester('WeakMap');

  var isSet = isIE11 ? ie11fingerprint(setMethods) : tagTester('Set');

  var isWeakSet = tagTester('WeakSet');

  // Retrieve the values of an object's properties.
  function values(obj) {
    var _keys = keys(obj);
    var length = _keys.length;
    var values = Array(length);
    for (var i = 0; i < length; i++) {
      values[i] = obj[_keys[i]];
    }
    return values;
  }

  // Convert an object into a list of `[key, value]` pairs.
  // The opposite of `_.object` with one argument.
  function pairs(obj) {
    var _keys = keys(obj);
    var length = _keys.length;
    var pairs = Array(length);
    for (var i = 0; i < length; i++) {
      pairs[i] = [_keys[i], obj[_keys[i]]];
    }
    return pairs;
  }

  // Invert the keys and values of an object. The values must be serializable.
  function invert(obj) {
    var result = {};
    var _keys = keys(obj);
    for (var i = 0, length = _keys.length; i < length; i++) {
      result[obj[_keys[i]]] = _keys[i];
    }
    return result;
  }

  // Return a sorted list of the function names available on the object.
  function functions(obj) {
    var names = [];
    for (var key in obj) {
      if (isFunction$1(obj[key])) names.push(key);
    }
    return names.sort();
  }

  // An internal function for creating assigner functions.
  function createAssigner(keysFunc, defaults) {
    return function(obj) {
      var length = arguments.length;
      if (defaults) obj = Object(obj);
      if (length < 2 || obj == null) return obj;
      for (var index = 1; index < length; index++) {
        var source = arguments[index],
            keys = keysFunc(source),
            l = keys.length;
        for (var i = 0; i < l; i++) {
          var key = keys[i];
          if (!defaults || obj[key] === void 0) obj[key] = source[key];
        }
      }
      return obj;
    };
  }

  // Extend a given object with all the properties in passed-in object(s).
  var extend = createAssigner(allKeys);

  // Assigns a given object with all the own properties in the passed-in
  // object(s).
  // (https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Object/assign)
  var extendOwn = createAssigner(keys);

  // Fill in a given object with default properties.
  var defaults = createAssigner(allKeys, true);

  // Create a naked function reference for surrogate-prototype-swapping.
  function ctor() {
    return function(){};
  }

  // An internal function for creating a new object that inherits from another.
  function baseCreate(prototype) {
    if (!isObject(prototype)) return {};
    if (nativeCreate) return nativeCreate(prototype);
    var Ctor = ctor();
    Ctor.prototype = prototype;
    var result = new Ctor;
    Ctor.prototype = null;
    return result;
  }

  // Creates an object that inherits from the given prototype object.
  // If additional properties are provided then they will be added to the
  // created object.
  function create(prototype, props) {
    var result = baseCreate(prototype);
    if (props) extendOwn(result, props);
    return result;
  }

  // Create a (shallow-cloned) duplicate of an object.
  function clone(obj) {
    if (!isObject(obj)) return obj;
    return isArray(obj) ? obj.slice() : extend({}, obj);
  }

  // Invokes `interceptor` with the `obj` and then returns `obj`.
  // The primary purpose of this method is to "tap into" a method chain, in
  // order to perform operations on intermediate results within the chain.
  function tap(obj, interceptor) {
    interceptor(obj);
    return obj;
  }

  // Normalize a (deep) property `path` to array.
  // Like `_.iteratee`, this function can be customized.
  function toPath$1(path) {
    return isArray(path) ? path : [path];
  }
  _$1.toPath = toPath$1;

  // Internal wrapper for `_.toPath` to enable minification.
  // Similar to `cb` for `_.iteratee`.
  function toPath(path) {
    return _$1.toPath(path);
  }

  // Internal function to obtain a nested property in `obj` along `path`.
  function deepGet(obj, path) {
    var length = path.length;
    for (var i = 0; i < length; i++) {
      if (obj == null) return void 0;
      obj = obj[path[i]];
    }
    return length ? obj : void 0;
  }

  // Get the value of the (deep) property on `path` from `object`.
  // If any property in `path` does not exist or if the value is
  // `undefined`, return `defaultValue` instead.
  // The `path` is normalized through `_.toPath`.
  function get(object, path, defaultValue) {
    var value = deepGet(object, toPath(path));
    return isUndefined(value) ? defaultValue : value;
  }

  // Shortcut function for checking if an object has a given property directly on
  // itself (in other words, not on a prototype). Unlike the internal `has`
  // function, this public version can also traverse nested properties.
  function has(obj, path) {
    path = toPath(path);
    var length = path.length;
    for (var i = 0; i < length; i++) {
      var key = path[i];
      if (!has$1(obj, key)) return false;
      obj = obj[key];
    }
    return !!length;
  }

  // Keep the identity function around for default iteratees.
  function identity(value) {
    return value;
  }

  // Returns a predicate for checking whether an object has a given set of
  // `key:value` pairs.
  function matcher(attrs) {
    attrs = extendOwn({}, attrs);
    return function(obj) {
      return isMatch(obj, attrs);
    };
  }

  // Creates a function that, when passed an object, will traverse that object’s
  // properties down the given `path`, specified as an array of keys or indices.
  function property(path) {
    path = toPath(path);
    return function(obj) {
      return deepGet(obj, path);
    };
  }

  // Internal function that returns an efficient (for current engines) version
  // of the passed-in callback, to be repeatedly applied in other Underscore
  // functions.
  function optimizeCb(func, context, argCount) {
    if (context === void 0) return func;
    switch (argCount == null ? 3 : argCount) {
      case 1: return function(value) {
        return func.call(context, value);
      };
      // The 2-argument case is omitted because we’re not using it.
      case 3: return function(value, index, collection) {
        return func.call(context, value, index, collection);
      };
      case 4: return function(accumulator, value, index, collection) {
        return func.call(context, accumulator, value, index, collection);
      };
    }
    return function() {
      return func.apply(context, arguments);
    };
  }

  // An internal function to generate callbacks that can be applied to each
  // element in a collection, returning the desired result — either `_.identity`,
  // an arbitrary callback, a property matcher, or a property accessor.
  function baseIteratee(value, context, argCount) {
    if (value == null) return identity;
    if (isFunction$1(value)) return optimizeCb(value, context, argCount);
    if (isObject(value) && !isArray(value)) return matcher(value);
    return property(value);
  }

  // External wrapper for our callback generator. Users may customize
  // `_.iteratee` if they want additional predicate/iteratee shorthand styles.
  // This abstraction hides the internal-only `argCount` argument.
  function iteratee(value, context) {
    return baseIteratee(value, context, Infinity);
  }
  _$1.iteratee = iteratee;

  // The function we call internally to generate a callback. It invokes
  // `_.iteratee` if overridden, otherwise `baseIteratee`.
  function cb(value, context, argCount) {
    if (_$1.iteratee !== iteratee) return _$1.iteratee(value, context);
    return baseIteratee(value, context, argCount);
  }

  // Returns the results of applying the `iteratee` to each element of `obj`.
  // In contrast to `_.map` it returns an object.
  function mapObject(obj, iteratee, context) {
    iteratee = cb(iteratee, context);
    var _keys = keys(obj),
        length = _keys.length,
        results = {};
    for (var index = 0; index < length; index++) {
      var currentKey = _keys[index];
      results[currentKey] = iteratee(obj[currentKey], currentKey, obj);
    }
    return results;
  }

  // Predicate-generating function. Often useful outside of Underscore.
  function noop(){}

  // Generates a function for a given object that returns a given property.
  function propertyOf(obj) {
    if (obj == null) return noop;
    return function(path) {
      return get(obj, path);
    };
  }

  // Run a function **n** times.
  function times(n, iteratee, context) {
    var accum = Array(Math.max(0, n));
    iteratee = optimizeCb(iteratee, context, 1);
    for (var i = 0; i < n; i++) accum[i] = iteratee(i);
    return accum;
  }

  // Return a random integer between `min` and `max` (inclusive).
  function random(min, max) {
    if (max == null) {
      max = min;
      min = 0;
    }
    return min + Math.floor(Math.random() * (max - min + 1));
  }

  // A (possibly faster) way to get the current timestamp as an integer.
  var now = Date.now || function() {
    return new Date().getTime();
  };

  // Internal helper to generate functions for escaping and unescaping strings
  // to/from HTML interpolation.
  function createEscaper(map) {
    var escaper = function(match) {
      return map[match];
    };
    // Regexes for identifying a key that needs to be escaped.
    var source = '(?:' + keys(map).join('|') + ')';
    var testRegexp = RegExp(source);
    var replaceRegexp = RegExp(source, 'g');
    return function(string) {
      string = string == null ? '' : '' + string;
      return testRegexp.test(string) ? string.replace(replaceRegexp, escaper) : string;
    };
  }

  // Internal list of HTML entities for escaping.
  var escapeMap = {
    '&': '&amp;',
    '<': '&lt;',
    '>': '&gt;',
    '"': '&quot;',
    "'": '&#x27;',
    '`': '&#x60;'
  };

  // Function for escaping strings to HTML interpolation.
  var _escape = createEscaper(escapeMap);

  // Internal list of HTML entities for unescaping.
  var unescapeMap = invert(escapeMap);

  // Function for unescaping strings from HTML interpolation.
  var _unescape = createEscaper(unescapeMap);

  // By default, Underscore uses ERB-style template delimiters. Change the
  // following template settings to use alternative delimiters.
  var templateSettings = _$1.templateSettings = {
    evaluate: /<%([\s\S]+?)%>/g,
    interpolate: /<%=([\s\S]+?)%>/g,
    escape: /<%-([\s\S]+?)%>/g
  };

  // When customizing `_.templateSettings`, if you don't want to define an
  // interpolation, evaluation or escaping regex, we need one that is
  // guaranteed not to match.
  var noMatch = /(.)^/;

  // Certain characters need to be escaped so that they can be put into a
  // string literal.
  var escapes = {
    "'": "'",
    '\\': '\\',
    '\r': 'r',
    '\n': 'n',
    '\u2028': 'u2028',
    '\u2029': 'u2029'
  };

  var escapeRegExp = /\\|'|\r|\n|\u2028|\u2029/g;

  function escapeChar(match) {
    return '\\' + escapes[match];
  }

  // In order to prevent third-party code injection through
  // `_.templateSettings.variable`, we test it against the following regular
  // expression. It is intentionally a bit more liberal than just matching valid
  // identifiers, but still prevents possible loopholes through defaults or
  // destructuring assignment.
  var bareIdentifier = /^\s*(\w|\$)+\s*$/;

  // JavaScript micro-templating, similar to John Resig's implementation.
  // Underscore templating handles arbitrary delimiters, preserves whitespace,
  // and correctly escapes quotes within interpolated code.
  // NB: `oldSettings` only exists for backwards compatibility.
  function template(text, settings, oldSettings) {
    if (!settings && oldSettings) settings = oldSettings;
    settings = defaults({}, settings, _$1.templateSettings);

    // Combine delimiters into one regular expression via alternation.
    var matcher = RegExp([
      (settings.escape || noMatch).source,
      (settings.interpolate || noMatch).source,
      (settings.evaluate || noMatch).source
    ].join('|') + '|$', 'g');

    // Compile the template source, escaping string literals appropriately.
    var index = 0;
    var source = "__p+='";
    text.replace(matcher, function(match, escape, interpolate, evaluate, offset) {
      source += text.slice(index, offset).replace(escapeRegExp, escapeChar);
      index = offset + match.length;

      if (escape) {
        source += "'+\n((__t=(" + escape + "))==null?'':_.escape(__t))+\n'";
      } else if (interpolate) {
        source += "'+\n((__t=(" + interpolate + "))==null?'':__t)+\n'";
      } else if (evaluate) {
        source += "';\n" + evaluate + "\n__p+='";
      }

      // Adobe VMs need the match returned to produce the correct offset.
      return match;
    });
    source += "';\n";

    var argument = settings.variable;
    if (argument) {
      // Insure against third-party code injection. (CVE-2021-23358)
      if (!bareIdentifier.test(argument)) throw new Error(
        'variable is not a bare identifier: ' + argument
      );
    } else {
      // If a variable is not specified, place data values in local scope.
      source = 'with(obj||{}){\n' + source + '}\n';
      argument = 'obj';
    }

    source = "var __t,__p='',__j=Array.prototype.join," +
      "print=function(){__p+=__j.call(arguments,'');};\n" +
      source + 'return __p;\n';

    var render;
    try {
      render = new Function(argument, '_', source);
    } catch (e) {
      e.source = source;
      throw e;
    }

    var template = function(data) {
      return render.call(this, data, _$1);
    };

    // Provide the compiled source as a convenience for precompilation.
    template.source = 'function(' + argument + '){\n' + source + '}';

    return template;
  }

  // Traverses the children of `obj` along `path`. If a child is a function, it
  // is invoked with its parent as context. Returns the value of the final
  // child, or `fallback` if any child is undefined.
  function result(obj, path, fallback) {
    path = toPath(path);
    var length = path.length;
    if (!length) {
      return isFunction$1(fallback) ? fallback.call(obj) : fallback;
    }
    for (var i = 0; i < length; i++) {
      var prop = obj == null ? void 0 : obj[path[i]];
      if (prop === void 0) {
        prop = fallback;
        i = length; // Ensure we don't continue iterating.
      }
      obj = isFunction$1(prop) ? prop.call(obj) : prop;
    }
    return obj;
  }

  // Generate a unique integer id (unique within the entire client session).
  // Useful for temporary DOM ids.
  var idCounter = 0;
  function uniqueId(prefix) {
    var id = ++idCounter + '';
    return prefix ? prefix + id : id;
  }

  // Start chaining a wrapped Underscore object.
  function chain(obj) {
    var instance = _$1(obj);
    instance._chain = true;
    return instance;
  }

  // Internal function to execute `sourceFunc` bound to `context` with optional
  // `args`. Determines whether to execute a function as a constructor or as a
  // normal function.
  function executeBound(sourceFunc, boundFunc, context, callingContext, args) {
    if (!(callingContext instanceof boundFunc)) return sourceFunc.apply(context, args);
    var self = baseCreate(sourceFunc.prototype);
    var result = sourceFunc.apply(self, args);
    if (isObject(result)) return result;
    return self;
  }

  // Partially apply a function by creating a version that has had some of its
  // arguments pre-filled, without changing its dynamic `this` context. `_` acts
  // as a placeholder by default, allowing any combination of arguments to be
  // pre-filled. Set `_.partial.placeholder` for a custom placeholder argument.
  var partial = restArguments(function(func, boundArgs) {
    var placeholder = partial.placeholder;
    var bound = function() {
      var position = 0, length = boundArgs.length;
      var args = Array(length);
      for (var i = 0; i < length; i++) {
        args[i] = boundArgs[i] === placeholder ? arguments[position++] : boundArgs[i];
      }
      while (position < arguments.length) args.push(arguments[position++]);
      return executeBound(func, bound, this, this, args);
    };
    return bound;
  });

  partial.placeholder = _$1;

  // Create a function bound to a given object (assigning `this`, and arguments,
  // optionally).
  var bind = restArguments(function(func, context, args) {
    if (!isFunction$1(func)) throw new TypeError('Bind must be called on a function');
    var bound = restArguments(function(callArgs) {
      return executeBound(func, bound, context, this, args.concat(callArgs));
    });
    return bound;
  });

  // Internal helper for collection methods to determine whether a collection
  // should be iterated as an array or as an object.
  // Related: https://people.mozilla.org/~jorendorff/es6-draft.html#sec-tolength
  // Avoids a very nasty iOS 8 JIT bug on ARM-64. #2094
  var isArrayLike = createSizePropertyCheck(getLength);

  // Internal implementation of a recursive `flatten` function.
  function flatten$1(input, depth, strict, output) {
    output = output || [];
    if (!depth && depth !== 0) {
      depth = Infinity;
    } else if (depth <= 0) {
      return output.concat(input);
    }
    var idx = output.length;
    for (var i = 0, length = getLength(input); i < length; i++) {
      var value = input[i];
      if (isArrayLike(value) && (isArray(value) || isArguments$1(value))) {
        // Flatten current level of array or arguments object.
        if (depth > 1) {
          flatten$1(value, depth - 1, strict, output);
          idx = output.length;
        } else {
          var j = 0, len = value.length;
          while (j < len) output[idx++] = value[j++];
        }
      } else if (!strict) {
        output[idx++] = value;
      }
    }
    return output;
  }

  // Bind a number of an object's methods to that object. Remaining arguments
  // are the method names to be bound. Useful for ensuring that all callbacks
  // defined on an object belong to it.
  var bindAll = restArguments(function(obj, keys) {
    keys = flatten$1(keys, false, false);
    var index = keys.length;
    if (index < 1) throw new Error('bindAll must be passed function names');
    while (index--) {
      var key = keys[index];
      obj[key] = bind(obj[key], obj);
    }
    return obj;
  });

  // Memoize an expensive function by storing its results.
  function memoize(func, hasher) {
    var memoize = function(key) {
      var cache = memoize.cache;
      var address = '' + (hasher ? hasher.apply(this, arguments) : key);
      if (!has$1(cache, address)) cache[address] = func.apply(this, arguments);
      return cache[address];
    };
    memoize.cache = {};
    return memoize;
  }

  // Delays a function for the given number of milliseconds, and then calls
  // it with the arguments supplied.
  var delay = restArguments(function(func, wait, args) {
    return setTimeout(function() {
      return func.apply(null, args);
    }, wait);
  });

  // Defers a function, scheduling it to run after the current call stack has
  // cleared.
  var defer = partial(delay, _$1, 1);

  // Returns a function, that, when invoked, will only be triggered at most once
  // during a given window of time. Normally, the throttled function will run
  // as much as it can, without ever going more than once per `wait` duration;
  // but if you'd like to disable the execution on the leading edge, pass
  // `{leading: false}`. To disable execution on the trailing edge, ditto.
  function throttle(func, wait, options) {
    var timeout, context, args, result;
    var previous = 0;
    if (!options) options = {};

    var later = function() {
      previous = options.leading === false ? 0 : now();
      timeout = null;
      result = func.apply(context, args);
      if (!timeout) context = args = null;
    };

    var throttled = function() {
      var _now = now();
      if (!previous && options.leading === false) previous = _now;
      var remaining = wait - (_now - previous);
      context = this;
      args = arguments;
      if (remaining <= 0 || remaining > wait) {
        if (timeout) {
          clearTimeout(timeout);
          timeout = null;
        }
        previous = _now;
        result = func.apply(context, args);
        if (!timeout) context = args = null;
      } else if (!timeout && options.trailing !== false) {
        timeout = setTimeout(later, remaining);
      }
      return result;
    };

    throttled.cancel = function() {
      clearTimeout(timeout);
      previous = 0;
      timeout = context = args = null;
    };

    return throttled;
  }

  // When a sequence of calls of the returned function ends, the argument
  // function is triggered. The end of a sequence is defined by the `wait`
  // parameter. If `immediate` is passed, the argument function will be
  // triggered at the beginning of the sequence instead of at the end.
  function debounce(func, wait, immediate) {
    var timeout, previous, args, result, context;

    var later = function() {
      var passed = now() - previous;
      if (wait > passed) {
        timeout = setTimeout(later, wait - passed);
      } else {
        timeout = null;
        if (!immediate) result = func.apply(context, args);
        // This check is needed because `func` can recursively invoke `debounced`.
        if (!timeout) args = context = null;
      }
    };

    var debounced = restArguments(function(_args) {
      context = this;
      args = _args;
      previous = now();
      if (!timeout) {
        timeout = setTimeout(later, wait);
        if (immediate) result = func.apply(context, args);
      }
      return result;
    });

    debounced.cancel = function() {
      clearTimeout(timeout);
      timeout = args = context = null;
    };

    return debounced;
  }

  // Returns the first function passed as an argument to the second,
  // allowing you to adjust arguments, run code before and after, and
  // conditionally execute the original function.
  function wrap(func, wrapper) {
    return partial(wrapper, func);
  }

  // Returns a negated version of the passed-in predicate.
  function negate(predicate) {
    return function() {
      return !predicate.apply(this, arguments);
    };
  }

  // Returns a function that is the composition of a list of functions, each
  // consuming the return value of the function that follows.
  function compose() {
    var args = arguments;
    var start = args.length - 1;
    return function() {
      var i = start;
      var result = args[start].apply(this, arguments);
      while (i--) result = args[i].call(this, result);
      return result;
    };
  }

  // Returns a function that will only be executed on and after the Nth call.
  function after(times, func) {
    return function() {
      if (--times < 1) {
        return func.apply(this, arguments);
      }
    };
  }

  // Returns a function that will only be executed up to (but not including) the
  // Nth call.
  function before(times, func) {
    var memo;
    return function() {
      if (--times > 0) {
        memo = func.apply(this, arguments);
      }
      if (times <= 1) func = null;
      return memo;
    };
  }

  // Returns a function that will be executed at most one time, no matter how
  // often you call it. Useful for lazy initialization.
  var once = partial(before, 2);

  // Returns the first key on an object that passes a truth test.
  function findKey(obj, predicate, context) {
    predicate = cb(predicate, context);
    var _keys = keys(obj), key;
    for (var i = 0, length = _keys.length; i < length; i++) {
      key = _keys[i];
      if (predicate(obj[key], key, obj)) return key;
    }
  }

  // Internal function to generate `_.findIndex` and `_.findLastIndex`.
  function createPredicateIndexFinder(dir) {
    return function(array, predicate, context) {
      predicate = cb(predicate, context);
      var length = getLength(array);
      var index = dir > 0 ? 0 : length - 1;
      for (; index >= 0 && index < length; index += dir) {
        if (predicate(array[index], index, array)) return index;
      }
      return -1;
    };
  }

  // Returns the first index on an array-like that passes a truth test.
  var findIndex = createPredicateIndexFinder(1);

  // Returns the last index on an array-like that passes a truth test.
  var findLastIndex = createPredicateIndexFinder(-1);

  // Use a comparator function to figure out the smallest index at which
  // an object should be inserted so as to maintain order. Uses binary search.
  function sortedIndex(array, obj, iteratee, context) {
    iteratee = cb(iteratee, context, 1);
    var value = iteratee(obj);
    var low = 0, high = getLength(array);
    while (low < high) {
      var mid = Math.floor((low + high) / 2);
      if (iteratee(array[mid]) < value) low = mid + 1; else high = mid;
    }
    return low;
  }

  // Internal function to generate the `_.indexOf` and `_.lastIndexOf` functions.
  function createIndexFinder(dir, predicateFind, sortedIndex) {
    return function(array, item, idx) {
      var i = 0, length = getLength(array);
      if (typeof idx == 'number') {
        if (dir > 0) {
          i = idx >= 0 ? idx : Math.max(idx + length, i);
        } else {
          length = idx >= 0 ? Math.min(idx + 1, length) : idx + length + 1;
        }
      } else if (sortedIndex && idx && length) {
        idx = sortedIndex(array, item);
        return array[idx] === item ? idx : -1;
      }
      if (item !== item) {
        idx = predicateFind(slice.call(array, i, length), isNaN$1);
        return idx >= 0 ? idx + i : -1;
      }
      for (idx = dir > 0 ? i : length - 1; idx >= 0 && idx < length; idx += dir) {
        if (array[idx] === item) return idx;
      }
      return -1;
    };
  }

  // Return the position of the first occurrence of an item in an array,
  // or -1 if the item is not included in the array.
  // If the array is large and already in sort order, pass `true`
  // for **isSorted** to use binary search.
  var indexOf = createIndexFinder(1, findIndex, sortedIndex);

  // Return the position of the last occurrence of an item in an array,
  // or -1 if the item is not included in the array.
  var lastIndexOf = createIndexFinder(-1, findLastIndex);

  // Return the first value which passes a truth test.
  function find(obj, predicate, context) {
    var keyFinder = isArrayLike(obj) ? findIndex : findKey;
    var key = keyFinder(obj, predicate, context);
    if (key !== void 0 && key !== -1) return obj[key];
  }

  // Convenience version of a common use case of `_.find`: getting the first
  // object containing specific `key:value` pairs.
  function findWhere(obj, attrs) {
    return find(obj, matcher(attrs));
  }

  // The cornerstone for collection functions, an `each`
  // implementation, aka `forEach`.
  // Handles raw objects in addition to array-likes. Treats all
  // sparse array-likes as if they were dense.
  function each(obj, iteratee, context) {
    iteratee = optimizeCb(iteratee, context);
    var i, length;
    if (isArrayLike(obj)) {
      for (i = 0, length = obj.length; i < length; i++) {
        iteratee(obj[i], i, obj);
      }
    } else {
      var _keys = keys(obj);
      for (i = 0, length = _keys.length; i < length; i++) {
        iteratee(obj[_keys[i]], _keys[i], obj);
      }
    }
    return obj;
  }

  // Return the results of applying the iteratee to each element.
  function map(obj, iteratee, context) {
    iteratee = cb(iteratee, context);
    var _keys = !isArrayLike(obj) && keys(obj),
        length = (_keys || obj).length,
        results = Array(length);
    for (var index = 0; index < length; index++) {
      var currentKey = _keys ? _keys[index] : index;
      results[index] = iteratee(obj[currentKey], currentKey, obj);
    }
    return results;
  }

  // Internal helper to create a reducing function, iterating left or right.
  function createReduce(dir) {
    // Wrap code that reassigns argument variables in a separate function than
    // the one that accesses `arguments.length` to avoid a perf hit. (#1991)
    var reducer = function(obj, iteratee, memo, initial) {
      var _keys = !isArrayLike(obj) && keys(obj),
          length = (_keys || obj).length,
          index = dir > 0 ? 0 : length - 1;
      if (!initial) {
        memo = obj[_keys ? _keys[index] : index];
        index += dir;
      }
      for (; index >= 0 && index < length; index += dir) {
        var currentKey = _keys ? _keys[index] : index;
        memo = iteratee(memo, obj[currentKey], currentKey, obj);
      }
      return memo;
    };

    return function(obj, iteratee, memo, context) {
      var initial = arguments.length >= 3;
      return reducer(obj, optimizeCb(iteratee, context, 4), memo, initial);
    };
  }

  // **Reduce** builds up a single result from a list of values, aka `inject`,
  // or `foldl`.
  var reduce = createReduce(1);

  // The right-associative version of reduce, also known as `foldr`.
  var reduceRight = createReduce(-1);

  // Return all the elements that pass a truth test.
  function filter(obj, predicate, context) {
    var results = [];
    predicate = cb(predicate, context);
    each(obj, function(value, index, list) {
      if (predicate(value, index, list)) results.push(value);
    });
    return results;
  }

  // Return all the elements for which a truth test fails.
  function reject(obj, predicate, context) {
    return filter(obj, negate(cb(predicate)), context);
  }

  // Determine whether all of the elements pass a truth test.
  function every(obj, predicate, context) {
    predicate = cb(predicate, context);
    var _keys = !isArrayLike(obj) && keys(obj),
        length = (_keys || obj).length;
    for (var index = 0; index < length; index++) {
      var currentKey = _keys ? _keys[index] : index;
      if (!predicate(obj[currentKey], currentKey, obj)) return false;
    }
    return true;
  }

  // Determine if at least one element in the object passes a truth test.
  function some(obj, predicate, context) {
    predicate = cb(predicate, context);
    var _keys = !isArrayLike(obj) && keys(obj),
        length = (_keys || obj).length;
    for (var index = 0; index < length; index++) {
      var currentKey = _keys ? _keys[index] : index;
      if (predicate(obj[currentKey], currentKey, obj)) return true;
    }
    return false;
  }

  // Determine if the array or object contains a given item (using `===`).
  function contains(obj, item, fromIndex, guard) {
    if (!isArrayLike(obj)) obj = values(obj);
    if (typeof fromIndex != 'number' || guard) fromIndex = 0;
    return indexOf(obj, item, fromIndex) >= 0;
  }

  // Invoke a method (with arguments) on every item in a collection.
  var invoke = restArguments(function(obj, path, args) {
    var contextPath, func;
    if (isFunction$1(path)) {
      func = path;
    } else {
      path = toPath(path);
      contextPath = path.slice(0, -1);
      path = path[path.length - 1];
    }
    return map(obj, function(context) {
      var method = func;
      if (!method) {
        if (contextPath && contextPath.length) {
          context = deepGet(context, contextPath);
        }
        if (context == null) return void 0;
        method = context[path];
      }
      return method == null ? method : method.apply(context, args);
    });
  });

  // Convenience version of a common use case of `_.map`: fetching a property.
  function pluck(obj, key) {
    return map(obj, property(key));
  }

  // Convenience version of a common use case of `_.filter`: selecting only
  // objects containing specific `key:value` pairs.
  function where(obj, attrs) {
    return filter(obj, matcher(attrs));
  }

  // Return the maximum element (or element-based computation).
  function max(obj, iteratee, context) {
    var result = -Infinity, lastComputed = -Infinity,
        value, computed;
    if (iteratee == null || (typeof iteratee == 'number' && typeof obj[0] != 'object' && obj != null)) {
      obj = isArrayLike(obj) ? obj : values(obj);
      for (var i = 0, length = obj.length; i < length; i++) {
        value = obj[i];
        if (value != null && value > result) {
          result = value;
        }
      }
    } else {
      iteratee = cb(iteratee, context);
      each(obj, function(v, index, list) {
        computed = iteratee(v, index, list);
        if (computed > lastComputed || (computed === -Infinity && result === -Infinity)) {
          result = v;
          lastComputed = computed;
        }
      });
    }
    return result;
  }

  // Return the minimum element (or element-based computation).
  function min(obj, iteratee, context) {
    var result = Infinity, lastComputed = Infinity,
        value, computed;
    if (iteratee == null || (typeof iteratee == 'number' && typeof obj[0] != 'object' && obj != null)) {
      obj = isArrayLike(obj) ? obj : values(obj);
      for (var i = 0, length = obj.length; i < length; i++) {
        value = obj[i];
        if (value != null && value < result) {
          result = value;
        }
      }
    } else {
      iteratee = cb(iteratee, context);
      each(obj, function(v, index, list) {
        computed = iteratee(v, index, list);
        if (computed < lastComputed || (computed === Infinity && result === Infinity)) {
          result = v;
          lastComputed = computed;
        }
      });
    }
    return result;
  }

  // Safely create a real, live array from anything iterable.
  var reStrSymbol = /[^\ud800-\udfff]|[\ud800-\udbff][\udc00-\udfff]|[\ud800-\udfff]/g;
  function toArray(obj) {
    if (!obj) return [];
    if (isArray(obj)) return slice.call(obj);
    if (isString(obj)) {
      // Keep surrogate pair characters together.
      return obj.match(reStrSymbol);
    }
    if (isArrayLike(obj)) return map(obj, identity);
    return values(obj);
  }

  // Sample **n** random values from a collection using the modern version of the
  // [Fisher-Yates shuffle](https://en.wikipedia.org/wiki/Fisher–Yates_shuffle).
  // If **n** is not specified, returns a single random element.
  // The internal `guard` argument allows it to work with `_.map`.
  function sample(obj, n, guard) {
    if (n == null || guard) {
      if (!isArrayLike(obj)) obj = values(obj);
      return obj[random(obj.length - 1)];
    }
    var sample = toArray(obj);
    var length = getLength(sample);
    n = Math.max(Math.min(n, length), 0);
    var last = length - 1;
    for (var index = 0; index < n; index++) {
      var rand = random(index, last);
      var temp = sample[index];
      sample[index] = sample[rand];
      sample[rand] = temp;
    }
    return sample.slice(0, n);
  }

  // Shuffle a collection.
  function shuffle(obj) {
    return sample(obj, Infinity);
  }

  // Sort the object's values by a criterion produced by an iteratee.
  function sortBy(obj, iteratee, context) {
    var index = 0;
    iteratee = cb(iteratee, context);
    return pluck(map(obj, function(value, key, list) {
      return {
        value: value,
        index: index++,
        criteria: iteratee(value, key, list)
      };
    }).sort(function(left, right) {
      var a = left.criteria;
      var b = right.criteria;
      if (a !== b) {
        if (a > b || a === void 0) return 1;
        if (a < b || b === void 0) return -1;
      }
      return left.index - right.index;
    }), 'value');
  }

  // An internal function used for aggregate "group by" operations.
  function group(behavior, partition) {
    return function(obj, iteratee, context) {
      var result = partition ? [[], []] : {};
      iteratee = cb(iteratee, context);
      each(obj, function(value, index) {
        var key = iteratee(value, index, obj);
        behavior(result, value, key);
      });
      return result;
    };
  }

  // Groups the object's values by a criterion. Pass either a string attribute
  // to group by, or a function that returns the criterion.
  var groupBy = group(function(result, value, key) {
    if (has$1(result, key)) result[key].push(value); else result[key] = [value];
  });

  // Indexes the object's values by a criterion, similar to `_.groupBy`, but for
  // when you know that your index values will be unique.
  var indexBy = group(function(result, value, key) {
    result[key] = value;
  });

  // Counts instances of an object that group by a certain criterion. Pass
  // either a string attribute to count by, or a function that returns the
  // criterion.
  var countBy = group(function(result, value, key) {
    if (has$1(result, key)) result[key]++; else result[key] = 1;
  });

  // Split a collection into two arrays: one whose elements all pass the given
  // truth test, and one whose elements all do not pass the truth test.
  var partition = group(function(result, value, pass) {
    result[pass ? 0 : 1].push(value);
  }, true);

  // Return the number of elements in a collection.
  function size(obj) {
    if (obj == null) return 0;
    return isArrayLike(obj) ? obj.length : keys(obj).length;
  }

  // Internal `_.pick` helper function to determine whether `key` is an enumerable
  // property name of `obj`.
  function keyInObj(value, key, obj) {
    return key in obj;
  }

  // Return a copy of the object only containing the allowed properties.
  var pick = restArguments(function(obj, keys) {
    var result = {}, iteratee = keys[0];
    if (obj == null) return result;
    if (isFunction$1(iteratee)) {
      if (keys.length > 1) iteratee = optimizeCb(iteratee, keys[1]);
      keys = allKeys(obj);
    } else {
      iteratee = keyInObj;
      keys = flatten$1(keys, false, false);
      obj = Object(obj);
    }
    for (var i = 0, length = keys.length; i < length; i++) {
      var key = keys[i];
      var value = obj[key];
      if (iteratee(value, key, obj)) result[key] = value;
    }
    return result;
  });

  // Return a copy of the object without the disallowed properties.
  var omit = restArguments(function(obj, keys) {
    var iteratee = keys[0], context;
    if (isFunction$1(iteratee)) {
      iteratee = negate(iteratee);
      if (keys.length > 1) context = keys[1];
    } else {
      keys = map(flatten$1(keys, false, false), String);
      iteratee = function(value, key) {
        return !contains(keys, key);
      };
    }
    return pick(obj, iteratee, context);
  });

  // Returns everything but the last entry of the array. Especially useful on
  // the arguments object. Passing **n** will return all the values in
  // the array, excluding the last N.
  function initial(array, n, guard) {
    return slice.call(array, 0, Math.max(0, array.length - (n == null || guard ? 1 : n)));
  }

  // Get the first element of an array. Passing **n** will return the first N
  // values in the array. The **guard** check allows it to work with `_.map`.
  function first(array, n, guard) {
    if (array == null || array.length < 1) return n == null || guard ? void 0 : [];
    if (n == null || guard) return array[0];
    return initial(array, array.length - n);
  }

  // Returns everything but the first entry of the `array`. Especially useful on
  // the `arguments` object. Passing an **n** will return the rest N values in the
  // `array`.
  function rest(array, n, guard) {
    return slice.call(array, n == null || guard ? 1 : n);
  }

  // Get the last element of an array. Passing **n** will return the last N
  // values in the array.
  function last(array, n, guard) {
    if (array == null || array.length < 1) return n == null || guard ? void 0 : [];
    if (n == null || guard) return array[array.length - 1];
    return rest(array, Math.max(0, array.length - n));
  }

  // Trim out all falsy values from an array.
  function compact(array) {
    return filter(array, Boolean);
  }

  // Flatten out an array, either recursively (by default), or up to `depth`.
  // Passing `true` or `false` as `depth` means `1` or `Infinity`, respectively.
  function flatten(array, depth) {
    return flatten$1(array, depth, false);
  }

  // Take the difference between one array and a number of other arrays.
  // Only the elements present in just the first array will remain.
  var difference = restArguments(function(array, rest) {
    rest = flatten$1(rest, true, true);
    return filter(array, function(value){
      return !contains(rest, value);
    });
  });

  // Return a version of the array that does not contain the specified value(s).
  var without = restArguments(function(array, otherArrays) {
    return difference(array, otherArrays);
  });

  // Produce a duplicate-free version of the array. If the array has already
  // been sorted, you have the option of using a faster algorithm.
  // The faster algorithm will not work with an iteratee if the iteratee
  // is not a one-to-one function, so providing an iteratee will disable
  // the faster algorithm.
  function uniq(array, isSorted, iteratee, context) {
    if (!isBoolean(isSorted)) {
      context = iteratee;
      iteratee = isSorted;
      isSorted = false;
    }
    if (iteratee != null) iteratee = cb(iteratee, context);
    var result = [];
    var seen = [];
    for (var i = 0, length = getLength(array); i < length; i++) {
      var value = array[i],
          computed = iteratee ? iteratee(value, i, array) : value;
      if (isSorted && !iteratee) {
        if (!i || seen !== computed) result.push(value);
        seen = computed;
      } else if (iteratee) {
        if (!contains(seen, computed)) {
          seen.push(computed);
          result.push(value);
        }
      } else if (!contains(result, value)) {
        result.push(value);
      }
    }
    return result;
  }

  // Produce an array that contains the union: each distinct element from all of
  // the passed-in arrays.
  var union = restArguments(function(arrays) {
    return uniq(flatten$1(arrays, true, true));
  });

  // Produce an array that contains every item shared between all the
  // passed-in arrays.
  function intersection(array) {
    var result = [];
    var argsLength = arguments.length;
    for (var i = 0, length = getLength(array); i < length; i++) {
      var item = array[i];
      if (contains(result, item)) continue;
      var j;
      for (j = 1; j < argsLength; j++) {
        if (!contains(arguments[j], item)) break;
      }
      if (j === argsLength) result.push(item);
    }
    return result;
  }

  // Complement of zip. Unzip accepts an array of arrays and groups
  // each array's elements on shared indices.
  function unzip(array) {
    var length = (array && max(array, getLength).length) || 0;
    var result = Array(length);

    for (var index = 0; index < length; index++) {
      result[index] = pluck(array, index);
    }
    return result;
  }

  // Zip together multiple lists into a single array -- elements that share
  // an index go together.
  var zip = restArguments(unzip);

  // Converts lists into objects. Pass either a single array of `[key, value]`
  // pairs, or two parallel arrays of the same length -- one of keys, and one of
  // the corresponding values. Passing by pairs is the reverse of `_.pairs`.
  function object(list, values) {
    var result = {};
    for (var i = 0, length = getLength(list); i < length; i++) {
      if (values) {
        result[list[i]] = values[i];
      } else {
        result[list[i][0]] = list[i][1];
      }
    }
    return result;
  }

  // Generate an integer Array containing an arithmetic progression. A port of
  // the native Python `range()` function. See
  // [the Python documentation](https://docs.python.org/library/functions.html#range).
  function range(start, stop, step) {
    if (stop == null) {
      stop = start || 0;
      start = 0;
    }
    if (!step) {
      step = stop < start ? -1 : 1;
    }

    var length = Math.max(Math.ceil((stop - start) / step), 0);
    var range = Array(length);

    for (var idx = 0; idx < length; idx++, start += step) {
      range[idx] = start;
    }

    return range;
  }

  // Chunk a single array into multiple arrays, each containing `count` or fewer
  // items.
  function chunk(array, count) {
    if (count == null || count < 1) return [];
    var result = [];
    var i = 0, length = array.length;
    while (i < length) {
      result.push(slice.call(array, i, i += count));
    }
    return result;
  }

  // Helper function to continue chaining intermediate results.
  function chainResult(instance, obj) {
    return instance._chain ? _$1(obj).chain() : obj;
  }

  // Add your own custom functions to the Underscore object.
  function mixin(obj) {
    each(functions(obj), function(name) {
      var func = _$1[name] = obj[name];
      _$1.prototype[name] = function() {
        var args = [this._wrapped];
        push.apply(args, arguments);
        return chainResult(this, func.apply(_$1, args));
      };
    });
    return _$1;
  }

  // Add all mutator `Array` functions to the wrapper.
  each(['pop', 'push', 'reverse', 'shift', 'sort', 'splice', 'unshift'], function(name) {
    var method = ArrayProto[name];
    _$1.prototype[name] = function() {
      var obj = this._wrapped;
      if (obj != null) {
        method.apply(obj, arguments);
        if ((name === 'shift' || name === 'splice') && obj.length === 0) {
          delete obj[0];
        }
      }
      return chainResult(this, obj);
    };
  });

  // Add all accessor `Array` functions to the wrapper.
  each(['concat', 'join', 'slice'], function(name) {
    var method = ArrayProto[name];
    _$1.prototype[name] = function() {
      var obj = this._wrapped;
      if (obj != null) obj = method.apply(obj, arguments);
      return chainResult(this, obj);
    };
  });

  // Named Exports

  var allExports = {
    __proto__: null,
    VERSION: VERSION,
    restArguments: restArguments,
    isObject: isObject,
    isNull: isNull,
    isUndefined: isUndefined,
    isBoolean: isBoolean,
    isElement: isElement,
    isString: isString,
    isNumber: isNumber,
    isDate: isDate,
    isRegExp: isRegExp,
    isError: isError,
    isSymbol: isSymbol,
    isArrayBuffer: isArrayBuffer,
    isDataView: isDataView$1,
    isArray: isArray,
    isFunction: isFunction$1,
    isArguments: isArguments$1,
    isFinite: isFinite$1,
    isNaN: isNaN$1,
    isTypedArray: isTypedArray$1,
    isEmpty: isEmpty,
    isMatch: isMatch,
    isEqual: isEqual,
    isMap: isMap,
    isWeakMap: isWeakMap,
    isSet: isSet,
    isWeakSet: isWeakSet,
    keys: keys,
    allKeys: allKeys,
    values: values,
    pairs: pairs,
    invert: invert,
    functions: functions,
    methods: functions,
    extend: extend,
    extendOwn: extendOwn,
    assign: extendOwn,
    defaults: defaults,
    create: create,
    clone: clone,
    tap: tap,
    get: get,
    has: has,
    mapObject: mapObject,
    identity: identity,
    constant: constant,
    noop: noop,
    toPath: toPath$1,
    property: property,
    propertyOf: propertyOf,
    matcher: matcher,
    matches: matcher,
    times: times,
    random: random,
    now: now,
    escape: _escape,
    unescape: _unescape,
    templateSettings: templateSettings,
    template: template,
    result: result,
    uniqueId: uniqueId,
    chain: chain,
    iteratee: iteratee,
    partial: partial,
    bind: bind,
    bindAll: bindAll,
    memoize: memoize,
    delay: delay,
    defer: defer,
    throttle: throttle,
    debounce: debounce,
    wrap: wrap,
    negate: negate,
    compose: compose,
    after: after,
    before: before,
    once: once,
    findKey: findKey,
    findIndex: findIndex,
    findLastIndex: findLastIndex,
    sortedIndex: sortedIndex,
    indexOf: indexOf,
    lastIndexOf: lastIndexOf,
    find: find,
    detect: find,
    findWhere: findWhere,
    each: each,
    forEach: each,
    map: map,
    collect: map,
    reduce: reduce,
    foldl: reduce,
    inject: reduce,
    reduceRight: reduceRight,
    foldr: reduceRight,
    filter: filter,
    select: filter,
    reject: reject,
    every: every,
    all: every,
    some: some,
    any: some,
    contains: contains,
    includes: contains,
    include: contains,
    invoke: invoke,
    pluck: pluck,
    where: where,
    max: max,
    min: min,
    shuffle: shuffle,
    sample: sample,
    sortBy: sortBy,
    groupBy: groupBy,
    indexBy: indexBy,
    countBy: countBy,
    partition: partition,
    toArray: toArray,
    size: size,
    pick: pick,
    omit: omit,
    first: first,
    head: first,
    take: first,
    initial: initial,
    last: last,
    rest: rest,
    tail: rest,
    drop: rest,
    compact: compact,
    flatten: flatten,
    without: without,
    uniq: uniq,
    unique: uniq,
    union: union,
    intersection: intersection,
    difference: difference,
    unzip: unzip,
    transpose: unzip,
    zip: zip,
    object: object,
    range: range,
    chunk: chunk,
    mixin: mixin,
    'default': _$1
  };

  // Default Export

  // Add all of the Underscore functions to the wrapper object.
  var _ = mixin(allExports);
  // Legacy Node.js API.
  _._ = _;

  return _;

})));


}).call(this)}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{}],3:[function(require,module,exports){
(function (Buffer){(function (){
/**
 * @license

 Copyright © 2008 Fair Oaks Labs, Inc.
  All rights reserved.

  This file is Modified from the original, by buzz 2020:
   - ran thru http://www.jsnice.org/ and manually renamed the variables to be clearer 
   - added optionally enabled debugging/verbose/printfs throughout
   - bugfixes and integration so it now passes our mavlink.js testsuite/s
   - please see README.md in the upper level folder.
*/
'use strict';

var Long = require('long');

let DEBUG = false;

/**
 * @return {undefined}
 */
function JSPack() {
  var el;
  /** @type {boolean} */
  var booleanIsBigEndian = false;
  var m = this;
  
  
  /**
   * @param {!Object} octet_array_a
   * @param {number} offset_p
   * @param {number} len
   * @return {?}
   */
  //Raw byte arrays
 // m._DeArray = function(octet_array_a, offset_p, len) {
 // if (DEBUG) console.log("zzz1");
 //   return [octet_array_a.slice(offset_p, offset_p + len)];
  //};
  
  /**
   * @param {!Array} to_octet_array_a
   * @param {number} offset_p
   * @param {number} len
   * @param {!NodeList} from_array_v
   * @return {undefined}
   */
 // m._EnArray = function(to_octet_array_a, offset_p, len, from_array_v) {
 // if (DEBUG) console.log("zzz2");
    /** @type {number} */
  //  var i = 0;
  //  for (; i < len; to_octet_array_a[offset_p + i] = from_array_v[i] ? from_array_v[i] : 0, i++) {
  //  }
  //};
  
  
  /**
   * @param {!Object} octet_array_a
   * @param {number} offset_p
   * @return {?}
   */
  // ASCII characters
  m._DeChar = function(octet_array_a, offset_p) {
  if (DEBUG) console.log("zzz3");
    return String.fromCharCode(octet_array_a[offset_p]);
  };
  /**
   * @param {!Array} to_octet_array_a
   * @param {number} offset_p
   * @param {string} from_str_array_v
   * @return {undefined}
   */
 // m._EnChar = function(to_octet_array_a, offset_p, from_str_array_v) {
 // if (DEBUG) console.log("zzz4");
 //   /** @type {number} */
 //   to_octet_array_a[offset_p] = from_str_array_v.charCodeAt(0);
 // };
  
  
  /**
   * @param {!Object} octet_array_a
   * @param {number} offset_p
   * @return {?}
   */
  //Little-endian (un)signed N-byte integers
  m._DeInt = function(octet_array_a, offset_p) {
  if (DEBUG) console.log("zzz5");
    /** @type {number} */
    var lsb = booleanIsBigEndian ? el.len - 1 : 0;
    /** @type {number} */
    var nsb = booleanIsBigEndian ? -1 : 1;
    /** @type {number} */
    var stop = lsb + nsb * el.len;
    var rv;
    var i;
    var f;
    /** @type {number} */
    rv = 0;
    /** @type {number} */
    i = lsb;
    /** @type {number} */
    f = 1;
    for (; i != stop; rv = rv + octet_array_a[offset_p + i] * f, i = i + nsb, f = f * 256) {
    }
    if (el.bSigned && rv & Math.pow(2, el.len * 8 - 1)) {
      /** @type {number} */
      rv = rv - Math.pow(2, el.len * 8);
    }
    return rv;
  };
  
  
  /**
   * @param {!Array} octet_array_a
   * @param {number} offset_p
   * @param {number} val
   * @return {undefined}
   */
  m._EnInt = function(octet_array_a, offset_p, val) {
  if (DEBUG) console.log("chunk-from: "+val);
    /** @type {number} */
    var lsb = booleanIsBigEndian ? el.len - 1 : 0;
    /** @type {number} */
    var nsb = booleanIsBigEndian ? -1 : 1;
    /** @type {number} */
    var stop = lsb + nsb * el.len;
    var i;
    // range limit:
    if (val < el.min ) {
        val = el.min;
        console.log("value limited to MIN:"+val);   
    }
    if (val > el.max ) {
        val =  el.max;
        console.log("value limited to MAX:"+val);   
    }
    /** @type {number} */
    i = lsb;
  if (DEBUG) console.log("booleanIsBigEndian:"+booleanIsBigEndian);   
  if (DEBUG) console.log("el.len:"+el.len);   
  if (DEBUG) console.log("lsb:"+lsb);   
  if (DEBUG) console.log("nsb:"+nsb);   
  if (DEBUG) console.log("i:"+i);   
  if (DEBUG) console.log("stop:"+stop);   
    for (; i != stop; ) {

         var to = JSON.stringify(val&255);
        if (DEBUG) console.log("chunk as bytes: "+to);

        octet_array_a[offset_p + i] = val & 255;
        i = i + nsb;
        val = val >> 8;


    }
  };
  
  
  /**
   * @param {!Object} octet_array_a
   * @param {number} offset_p
   * @param {number} len
   * @return {?}
   */
  // ASCII character strings
  m._DeString = function(octet_array_a, offset_p, len) {
  if (DEBUG) console.log("zzz7");
    /** @type {!Array} */
    var retval = new Array(len);
    /** @type {number} */
    var i = 0;
    for (; i < len; retval[i] = String.fromCharCode(octet_array_a[offset_p + i]), i++) {
    }
    return retval.join("");
  };
  /**
   * @param {!Array} octet_array_a
   * @param {number} offset_p
   * @param {number} len
   * @param {string} strval
   * @return {undefined}
   */
  m._EnString = function(octet_array_a, offset_p, len, strval) {
  if (DEBUG) console.log("zzz8");
    var t;
    /** @type {number} */
    if ( DEBUG ) console.log("strencode before: "+octet_array_a+"\np:"+offset_p+" len:"+len+" strval:"+strval) 
    var i = 0;
    //if (DEBUG) console.log("strval:"+strval);
//console.trace("Here I am!")

    // we all strings to be passed in as a string of characters, or a an array or buffer of them is ok too

    if (typeof strval.charCodeAt === "function") { 
      for (; i < len; octet_array_a[offset_p + i] = (t = strval.charCodeAt(i)) ? t : 0, i++) {
        if ( t > 255 ) console.log("ERROR ERROR ERROR ERROR ERROR ERROR - It seems u passed unicode/utf-8/etc to jspack, not 8 bit ascii. please use .toString('binary'); not .toString();");
      }
      if ( DEBUG ) console.log("strencode from CHAR-string."); 

    } else if (Array.isArray(strval)) { 
      for (; i < len; octet_array_a[offset_p + i] = (t = strval[i]) ? t : 0, i++) {
        // referring directly to 't' inside this loop is bad, seems delayed by an iteration, but strval[i] is ok.
        if ( strval[i] > 255 )  console.log("ERROR ERROR ERROR ERROR ERROR ERROR - It seems u passed unicode/utf-8/etc, or array data with values > 255, to jspack, not 8 bit ascii.\n(bad Array data)"+strval[i]);
      }
      if ( DEBUG ) console.log("strencode from ARRAY."); 

    } else if (Buffer.isBuffer(strval)) { 
      for (; i < len; octet_array_a[offset_p + i] = (t = strval[i]) ? t : 0, i++) {
        if ( strval[i] > 255 ) console.log("ERROR ERROR ERROR ERROR ERROR ERROR - It seems u passed unicode/utf-8/etc to jspack, not 8 bit ascii. \n(bad Buffer data)"+strval[i]);
      }
      if ( DEBUG ) console.log("strencode from Buffer."); 

    } else {
        console.log("ERROR encoding string _EnString:  array:"+octet_array_a+" p:"+offset_p+" len:"+len+" strval:"+JSON.stringify(strval)) 
}
  };
  
  
  /**
   * @param {!Object} octet_array_a
   * @param {number} offset_p
   * @return {?}
   */
  // Little-endian N-bit IEEE 754 floating point
  m._De754 = function(octet_array_a, offset_p) {
  if (DEBUG) console.log("zzz9");
    var bool_s;
    var exponent;
    var mantissa;
    var i;
    var d;
    var nBits;
    var mantissaLen;
    var exponentLen;
    var eBias;
    var eMax;
    mantissaLen = el.mLen;
    /** @type {number} */
    exponentLen = el.len * 8 - el.mLen - 1;
    /** @type {number} */
    eMax = (1 << exponentLen) - 1;
    /** @type {number} */
    eBias = eMax >> 1;
    /** @type {number} */
    i = booleanIsBigEndian ? 0 : el.len - 1;
    /** @type {number} */
    d = booleanIsBigEndian ? 1 : -1;
    bool_s = octet_array_a[offset_p + i];
    /** @type {number} */
    i = i + d;
    /** @type {number} */
    nBits = -7;
    /** @type {number} */
    exponent = bool_s & (1 << -nBits) - 1;
    /** @type {number} */
    bool_s = bool_s >> -nBits;
    /** @type {number} */
    nBits = nBits + exponentLen;
    for (; nBits > 0; exponent = exponent * 256 + octet_array_a[offset_p + i], i = i + d, nBits = nBits - 8) {
    }
    /** @type {number} */
    mantissa = exponent & (1 << -nBits) - 1;
    /** @type {number} */
    exponent = exponent >> -nBits;
    nBits = nBits + mantissaLen;
    for (; nBits > 0; mantissa = mantissa * 256 + octet_array_a[offset_p + i], i = i + d, nBits = nBits - 8) {
    }
    switch(exponent) {
      case 0:
        /** @type {number} */
        // Zero, or denormalized number
        exponent = 1 - eBias;
        break;
      case eMax:
        // NaN, or +/-Infinity
        return mantissa ? NaN : (bool_s ? -1 : 1) * Infinity;
      default:
        // Normalized number
        mantissa = mantissa + Math.pow(2, mantissaLen);
        /** @type {number} */
        exponent = exponent - eBias;
        break;
    }
    return (bool_s ? -1 : 1) * mantissa * Math.pow(2, exponent - mantissaLen);
  };
  /**
   * @param {!Array} octet_array_a
   * @param {number} offset_p
   * @param {number} v
   * @return {undefined}
   */
  m._En754 = function(octet_array_a, offset_p, v) {
  if (DEBUG) console.log("zzz_10");
    var bool_s;
    var exponent;
    var mantissa;
    var i;
    var d;
    var c;
    var mantissaLen;
    var exponentLen;
    var eBias;
    var eMax;
    mantissaLen = el.mLen;
    /** @type {number} */
    exponentLen = el.len * 8 - el.mLen - 1;
    /** @type {number} */
    eMax = (1 << exponentLen) - 1;
    /** @type {number} */
    eBias = eMax >> 1;
    /** @type {number} */
    bool_s = v < 0 ? 1 : 0;
    /** @type {number} */
    v = Math.abs(v);
    if (isNaN(v) || v == Infinity) {
      /** @type {number} */
      mantissa = isNaN(v) ? 1 : 0;
      /** @type {number} */
      exponent = eMax;
    } else {
      /** @type {number} */
      exponent = Math.floor(Math.log(v) / Math.LN2);// Calculate log2 of the value
      if (v * (c = Math.pow(2, -exponent)) < 1) { // Math.log() isn't 100% reliable
        exponent--;
        /** @type {number} */
        c = c * 2;
      }
      // Round by adding 1/2 the significand's LSD
      if (exponent + eBias >= 1) {
        /** @type {number} */
        v = v + el.rt / c; // Normalized:  mLen significand digits
      } else {
        /** @type {number} */
        v = v + el.rt * Math.pow(2, 1 - eBias);// Denormalized:  <= mLen significand digits
      }
      if (v * c >= 2) {
        exponent++;
        /** @type {number} */
        c = c / 2; 	// Rounding can increment the exponent
      }
      if (exponent + eBias >= eMax) {
        // Overflow
        /** @type {number} */
        mantissa = 0;
        /** @type {number} */
        exponent = eMax;
      } else {
        if (exponent + eBias >= 1) {
          	// Normalized - term order matters, as Math.pow(2, 52-e) and v*Math.pow(2, 52) can overflow
          /** @type {number} */
          mantissa = (v * c - 1) * Math.pow(2, mantissaLen);
          /** @type {number} */
          exponent = exponent + eBias;
        } else {
          // Denormalized - also catches the '0' case, somewhat by chance
          /** @type {number} */
          mantissa = v * Math.pow(2, eBias - 1) * Math.pow(2, mantissaLen);
          /** @type {number} */
          exponent = 0;
        }
      }
    }
    /** @type {number} */
    i = booleanIsBigEndian ? el.len - 1 : 0;
    /** @type {number} */
    d = booleanIsBigEndian ? -1 : 1;
    for (; mantissaLen >= 8; octet_array_a[offset_p + i] = mantissa & 255, i = i + d, mantissa = mantissa / 256, mantissaLen = mantissaLen - 8) {
    }
    /** @type {number} */
    exponent = exponent << mantissaLen | mantissa;
    exponentLen = exponentLen + mantissaLen;
    for (; exponentLen > 0; octet_array_a[offset_p + i] = exponent & 255, i = i + d, exponent = exponent / 256, exponentLen = exponentLen - 8) {
    }
    octet_array_a[offset_p + i - d] |= bool_s * 128;
  };
  
  
  /**
   * @param {!Object} octet_array_a
   * @param {number} offset_p
   * @return {?}
   */
  	// Convert int64 to array with 3 elements: [lowBits, highBits, unsignedFlag]
	// '>>>' trick to convert signed 32bit int to unsigned int (because << always results in a signed 32bit int)
  m._DeInt64 = function(octet_array_a, offset_p) {
  if (DEBUG) console.log("zzz_11");
    /** @type {number} */
    var lsb = booleanIsBigEndian ? 0 : 7;
    /** @type {number} */
    var nsb = booleanIsBigEndian ? 1 : -1;
    /** @type {number} */
    var stop = lsb + nsb * 8;
    /** @type {!Array} */
    var nextIdLookup = [0, 0, !el.bSigned];
    var i;
    var f;
    var indexLookupKey;
    /** @type {number} */
    i = lsb;
    /** @type {number} */
    indexLookupKey = 1;
    /** @type {number} */
    f = 0;
    for (; i != stop; nextIdLookup[indexLookupKey] = (nextIdLookup[indexLookupKey] << 8 >>> 0) + octet_array_a[offset_p + i], i = i + nsb, f++, indexLookupKey = f < 4 ? 1 : 0) {

    if ( DEBUG ) console.log("jsPacking int64:"+octet_array_a[offset_p + i]);

    }
    return nextIdLookup;
  };
  /**
   * @param {!Array} octet_array_a
   * @param {number} offset_p
   * @param {!Object} v
   * @return {undefined}
   */
  m._EnInt64 = function(octet_array_a, offset_p, v) {

  if (v.length != 2) { //todo put this error back
     console.log("ERROR ERROR: jspack needs an array of at least length TWO to pack an int64 "+v+' len:'+v.length); 
  } 
//  if (DEBUG) console.log("zzz_12 v:"+v);
    /** @type {number} */
    var lsb = booleanIsBigEndian ? 0 : 7;
    /** @type {number} */
    var nsb = booleanIsBigEndian ? 1 : -1;
    /** @type {number} */
    var stop = lsb + nsb * 8;
    var i;
    var f;
    var j;
    var shift;
    /** @type {number} */
    i = lsb;
    /** @type {number} */
    j = 1;
    /** @type {number} */
    f = 0;
    /** @type {number} */
    shift = 24;

    for (; i != stop; octet_array_a[offset_p + i] = v[j] >> shift & 255, i = i + nsb, f++, j = f < 4 ? 1 : 0, shift = 24 - 8 * (f % 4)) {
    var x = v[j] >> shift & 255 ; 
    var vj = v[j];

    if ( DEBUG )  console.log('js qqqq  vj:'+vj+' j:'+j+' x:'+x+' a:'+octet_array_a+' i:'+i+" offset_p:"+offset_p+" v:"+v); 
    }
  };
  
  
  
  	// Class data
  /** @type {string} */
  m._sPattern = "(\\d+)?([AxcbBhHsfdiIlLqQ])";

  m._lenLut	= {'A':1, 'x':1, 'c':1, 'b':1, 'B':1, 'h':2, 'H':2, 's':1, 'f':4, 'd':8, 'i':4, 'I':4, 'l':4, 'L':4, 'q':8, 'Q':8};
  
  m._elLookUpTable	= {	'A': {en:m._EnArray, de:m._DeArray},
				's': {en:m._EnString, de:m._DeString},
				'c': {en:m._EnChar, de:m._DeChar},
				'b': {en:m._EnInt, de:m._DeInt, len:1, bSigned:true, min:-Math.pow(2, 7), max:Math.pow(2, 7)-1},
				'B': {en:m._EnInt, de:m._DeInt, len:1, bSigned:false, min:0, max:Math.pow(2, 8)-1},
				'h': {en:m._EnInt, de:m._DeInt, len:2, bSigned:true, min:-Math.pow(2, 15), max:Math.pow(2, 15)-1},
				'H': {en:m._EnInt, de:m._DeInt, len:2, bSigned:false, min:0, max:Math.pow(2, 16)-1},
				'i': {en:m._EnInt, de:m._DeInt, len:4, bSigned:true, min:-Math.pow(2, 31), max:Math.pow(2, 31)-1},
				'I': {en:m._EnInt, de:m._DeInt, len:4, bSigned:false, min:0, max:Math.pow(2, 32)-1},
				'l': {en:m._EnInt, de:m._DeInt, len:4, bSigned:true, min:-Math.pow(2, 31), max:Math.pow(2, 31)-1},
				'L': {en:m._EnInt, de:m._DeInt, len:4, bSigned:false, min:0, max:Math.pow(2, 32)-1},
				'f': {en:m._En754, de:m._De754, len:4, mLen:23, rt:Math.pow(2, -24)-Math.pow(2, -77)},
				'd': {en:m._En754, de:m._De754, len:8, mLen:52, rt:0},
				'q': {en:m._EnInt64, de:m._DeInt64, bSigned:true, len:8  },   // 64bit fields need 8 bytes..
				'Q': {en:m._EnInt64, de:m._DeInt64, bSigned:false, len:8 }}; // quirk of longs is they come in with a length of 2 in an array
  
  
  /**
   * @param {number} num_elements_n
   * @param {number} size_s
   * @param {!Object} octet_array_a
   * @param {number} offset_p
   * @return {?}
   */
  	// Unpack a series of n elements of size s from array a at offset p with fxn
  m._UnpackSeries = function(num_elements_n, size_s, octet_array_a, offset_p) {
  if (DEBUG) console.log("zzz_13");
    var fxn = el.de;
    /** @type {!Array} */
    var rv = [];
    /** @type {number} */
    var o = 0;
    for (; o < num_elements_n; rv.push(fxn(octet_array_a, offset_p + o * size_s)), o++) {
    }
    return rv;
  };
  /**
   * @param {number} num_elements_n
   * @param {number} size_s
   * @param {!Array} to_octet_array_a
   * @param {number} array_a_offset_p
   * @param {(Array|NodeList|null)} from_array_v
   * @param {number} array_v_offset_i
   * @return {undefined}
   */
  	// Pack a series of n elements of size s from array v at offset i to array a at offset p with fxn
  
  m._PackSeries = function(num_elements_n, size_s, to_octet_array_a, array_a_offset_p, from_array_v, array_v_offset_i) {
  if (DEBUG) console.log("pack-series: ");


    if ( DEBUG ) console.log('js before  0:'+0+' num_elements_n:'+num_elements_n+' size_s:'+size_s+' to_a:'+to_octet_array_a+' i:'+array_v_offset_i+" offset_p:"+array_a_offset_p+" v:"+from_array_v); 
    var fxn = el.en;
    /** @type {number} */
    var o = 0;
    for (; o < num_elements_n;  o++) {
        //if (DEBUG) console.log("14 called fxn with o:"+o);
        var z = from_array_v[array_v_offset_i + o]; 
        var to = JSON.stringify(z);
        var too = JSON.stringify(from_array_v);
          if (DEBUG) console.log('js pre-ffff  z:'+z+' to:'+to+' too:'+too+'');
        // handle flattened arrays - non-array things don't have a .length
        try {
        if (z.length == undefined ) {
                    //from_array_v = [ from_array_v ] ; 
                      if (DEBUG) console.log('Z FIX');
        }} catch (e){}
        var z = from_array_v[array_v_offset_i + o]; 
        var to = JSON.stringify(z);
        var too = JSON.stringify(from_array_v);

        // if we only have one thing to back and its got an 8 byte target len ( it's a 64bit long),  and length of source array is 2 ( low and high bits ) 
        // we treat it as a singular thing... we use this for Q type, which gets passed in as [lowBits, hightBits]
        if (( num_elements_n == 1 ) && (size_s == 8) && (from_array_v.length == 2) ) {  
            z = from_array_v; 
            if (DEBUG) console.log("js handling Q 64bit array"); 
        } 


        if (DEBUG) console.log('js partial  z:'+z+' to:'+to+' too:'+too+' num_elements_n:'+num_elements_n+' size_s:'+size_s+' to_a:'+to_octet_array_a+' v_offset_i:'+array_v_offset_i+" a_offset_p:"+array_a_offset_p+" from_v:"+from_array_v); 

        fxn(to_octet_array_a, array_a_offset_p + o * size_s, z);

    }
        if (DEBUG) console.log('js after  to_a:'+to_octet_array_a);
  };
  
  
  /**
   * @param {string} fmt
   * @param {!Object} octet_array_a
   * @param {number} offset_p
   * @return {?}
   */
  	// Unpack the octet array a, beginning at offset p, according to the fmt string
  m.Unpack = function(fmt, octet_array_a, offset_p) {
  if (DEBUG) console.log("zzz_15");
    /** @type {boolean} */
    // Set the private bBE flag based on the format string - assume big-endianness
    booleanIsBigEndian = fmt.charAt(0) != "<";
    /** @type {number} */
    offset_p = offset_p ? offset_p : 0;
    /** @type {!RegExp} */
    var re = new RegExp(this._sPattern, "g");
    var re_match;
    var repeat_count_n;
    var element_size_s;
    /** @type {!Array} */
    var rv = [];
    
    //loop over chars in the format string with regex due to optional digits
    for (; re_match = re.exec(fmt);) {
      /** @type {number} */
      repeat_count_n = re_match[1] == undefined || re_match[1] == "" ? 1 : parseInt(re_match[1]);
      element_size_s = this._lenLut[re_match[2]];
      if (offset_p + repeat_count_n * element_size_s > octet_array_a.length) {
        return undefined;
      }
      switch(re_match[2]) {
        case "A":
        case "s":
          rv.push(this._elLookUpTable[re_match[2]].de(octet_array_a, offset_p, repeat_count_n));
          break;
        case "c":
        case "b":
        case "B":
        case "h":
        case "H":
        case "i":
        case "I":
        case "l":
        case "L":
        case "f":
        case "d":
        case "q":
        case "Q":
          el = this._elLookUpTable[re_match[2]];
          
          //rv.push(this._UnpackSeries(repeat_count_n, element_size_s, octet_array_a, offset_p));

          // unpack arrays to an actual array type within the field array result:
          // https://github.com/AndreasAntener/node-jspack/commit/4f16680101303a6b4a1b0deba8cf7d20fc68213e
          if (repeat_count_n > 1) {
            // Field is array, unpack into separate array and push as such
            var arr = [];
            arr.push(this._UnpackSeries(repeat_count_n, element_size_s, octet_array_a, offset_p));
            rv.push(arr);
          } else {
            rv.push(this._UnpackSeries(repeat_count_n, element_size_s, octet_array_a, offset_p));
          }

          break;
      }
      /** @type {number} */
      offset_p = offset_p + repeat_count_n * element_size_s;
    }
    return Array.prototype.concat.apply([], rv);
  };
  

  // cross check the list of input data matches the size of bytes we'll be assembling
  // this is a slightly tweaked implementation of the previous 'PackTo' commented out below.
  // it has a more-consistent approach to input and output arrays, paying particular attention to Q,q, long, etc
  m.WouldPack = function(fmt, octet_array_a, offset_p, values) {
    //if (DEBUG) console.log("zzz_16 fmt:"+JSON.stringify(fmt)+" values:"+JSON.stringify(values));
    // @type {boolean} /
    // Set the private bBE flag based on the format string - assume big-endianness
    booleanIsBigEndian = fmt.charAt(0) != "<";
    // @type {!RegExp} /
    var re = new RegExp(this._sPattern, "g");

    var m;
    var n;
    var s;
    var values_i = 0; // current index into the values[] 

    var j;
    for (; m = re.exec(fmt);) {

        // leading optional prefix num or 1
        n = m[1] == undefined || m[1] == "" ? 1 : parseInt(m[1]);

        s = this._lenLut[m[2]];


        if (DEBUG) console.log("character: "+m[2]+"  how many(n)?: "+n);
        el = this._elLookUpTable[m[2]];

        //if (DEBUG) console.log("using lookup table:"+JSON.stringify(el));
        var bytes_consumed_per_element = el["len"];
        bytes_consumed_per_element = bytes_consumed_per_element == undefined ? 1 : bytes_consumed_per_element ; // undefined means 1
        if (DEBUG) console.log("bytes_consumed_per_element:"+JSON.stringify(bytes_consumed_per_element));
        if (DEBUG) console.log("current_values_idx:"+JSON.stringify(values_i) +" values:"+JSON.stringify(values[values_i])  )  ;


        // do per-case behaviours  'A' , 's' and 'x' are special, everything else gets the same
        switch(m[2]) {
        //------------------------------------------
        case "A":
        case "s":
          if (values_i + 1 > values.length) {
            console.log("JSPACK-ERROR: values_i + 1 > values.length  values_i:"+values_i+" values.length:"+values.length); 
            //return false;
          }
          if (DEBUG) console.log("all values:"+JSON.stringify(values));
          this._elLookUpTable[m[2]].en(octet_array_a, offset_p, n, values[values_i]);
          // @type {number} /
          values_i = values_i + 1;
          break;
        //------------------------------------------
        case "x":
          // @type {number} /
          j = 0;
          for (; j < n; j++) {
            // @type {number} /
            octet_array_a[offset_p + j] = 0;
          }
          break;
        //------------------------------------------
        // everything else
        default:

          // if n > 1 , ie it's multiple occurrences of a 'thing'
          if (n > 1 ) {

            // if we were handed an array at this idx, we need the array to be the same length as n
            if (Array.isArray(values[values_i])) {

                // Value series is array, iterate through that, only increment by 1
                if ((values_i + 1) > values.length) { 
                if (DEBUG) console.log("JSPACK-ERROR: value series is array but (values_i + 1) > values.length. i:"+values_i+" values.length:"+values.length); 
                //return false; 
                }
                  if (DEBUG) console.log("(dst IS array) (source IS array)");
                this._PackSeries(n, s, octet_array_a, offset_p, values[values_i], 0);
                values_i += 1;
            }
             else {
              if (DEBUG) console.log("ERROR: (dst IS array) (source is not array)");            
            }
          } 

          // if n == 1, it just one of a thing
          if (n == 1 ) {

          // type Q can have the source as an array when there is only 1 of them.
            if (Array.isArray(values[values_i]) ) {

                if (( m[2] == 'Q' ) || ( m[2] == 'q' ) ) {  
                this._PackSeries(n, s, octet_array_a, offset_p, values[values_i], 0);
                values_i += 1;
                }
                if (DEBUG) console.log("(dst is not array) (source IS array)");

            } else {
                  if ((values_i + n ) > values.length) { 
                        if (DEBUG) console.log("JSPACK-ERROR: value series NOT array but (values_i + n ) > values.length. i:"+values_i+" n:"+n+" values.length:"+values.length+" values:"+JSON.stringify(values));  
                        //return false; 
                  }
                  if (DEBUG) console.log("(dst is not array)  (source is not array)");
                  this._PackSeries(n, s, octet_array_a, offset_p, values, values_i);
                  values_i += n;
            }
          }

          if (DEBUG) console.log("");
          break;
        //------------------------------------------
        }

      offset_p = offset_p + n * s;

    }
    if (DEBUG) console.log("wouldpack completed, result array_a is:"+JSON.stringify(octet_array_a));
    return octet_array_a
  }



  /**
   * @param {string} fmt
   * @param {!Array} octet_array_a
   * @param {number} offset_p
   * @param {!NodeList} values
   * @return {?}
   */
/* 
  	// Pack the supplied values into the octet array a, beginning at offset p, according to the fmt string
  m.PackTo = function(fmt, octet_array_a, offset_p, values) {
  if (DEBUG) console.log("zzz_16 fmt:"+JSON.stringify(fmt)+" values:"+JSON.stringify(values));
    // @type {boolean} /
    // Set the private bBE flag based on the format string - assume big-endianness
    booleanIsBigEndian = fmt.charAt(0) != "<";
    // @type {!RegExp} /
    var re = new RegExp(this._sPattern, "g");
    var m;
    var n;
    var s;
    // @type {number} /
    var i = 0;
    var j;
    for (; m = re.exec(fmt);) {
      // @type {number} /
      n = m[1] == undefined || m[1] == "" ? 1 : parseInt(m[1]);
      s = this._lenLut[m[2]];
      if (offset_p + n * s > octet_array_a.length) {
        console.log("JSPACK-ERROR: offset_p + n * s > octet_array_a.length  offset_p:"+offset_p+" n:"+n+" s:"+s+" octet_array_a.length:"+octet_array_a.length+" octet_array_a:"+JSON.stringify(octet_array_a));  
        return false;
      }
      if (DEBUG) console.log("\n---------------------------------------------\n");
      if (DEBUG) console.log("handling format specifier:"+m[2]+"  how many:"+n);
      switch(m[2]) {
        case "A":
        case "s":
          if (i + 1 > values.length) {
            console.log("JSPACK-ERROR: i + 1 > values.length  i:"+i+" values.length:"+values.length); 
            return false;
          }
          if (DEBUG) console.log("zzz_16A values:"+JSON.stringify(values));
          this._elLookUpTable[m[2]].en(octet_array_a, offset_p, n, values[i]);
          // @type {number} /
          i = i + 1;
          break;
        case "c":
        case "b":
        case "B":
        case "h":
        case "H":
        case "i":
        case "I":
        case "l":
        case "L":
        case "f":
        case "d":
        case "q":
        case "Q":
          if (DEBUG) console.log("16 blerg");
          el = this._elLookUpTable[m[2]];
          if (DEBUG) console.log("using lookup table:"+JSON.stringify(el));
          //if (i + n > values.length) { return false;  }
          //this._PackSeries(n, s, octet_array_a, offset_p, values, i);
          //i = i + n;
          //added support for packing value series when they are supplied as arrays within the values array
          // https://github.com/AndreasAntener/node-jspack/commit/8de80d20aa06dea15527b3073c6c8631abda0f17
          if (n > 1 && Array.isArray(values[i])) {
            // Value series is array, iterate through that, only increment by 1
            if ((i + 1) > values.length) { 
              console.log("JSPACK-ERROR: value series is array but (i + 1) > values.length. i:"+i+" values.length:"+values.length); 
              return false; 
            }
            if (DEBUG) console.log("zzz_16 option 1 (source is array)");
            this._PackSeries(n, s, octet_array_a, offset_p, values[i], 0);
            i += 1;
          } else {
              if ((i + n) > values.length) { 
                    console.log("JSPACK-ERROR: value series NOT array but (i + n) > values.length. i:"+i+" n:"+n+" values.length:"+values.length+" values:"+JSON.stringify(values));  
                    //return false; 
              }
              if (DEBUG) console.log("zzz_16 option 2 (source is not array)");
            this._PackSeries(n, s, octet_array_a, offset_p, values, i);
            i += n;
          }

          if (DEBUG) console.log("end case");
          break;
        case "x":
          // @type {number} /
          j = 0;
          for (; j < n; j++) {
            // @type {number} /
            octet_array_a[offset_p + j] = 0;
          }
          break;
      }
      // @type {number} /
      offset_p = offset_p + n * s;
    }
    console.log("pack completed, result array_a is:"+JSON.stringify(octet_array_a));
    return octet_array_a;
  };
  */
  
  /**
   * @param {string} fmt
   * @param {(Node|NodeList|null|string)} values
   * @return {?}
   */
  	// Pack the supplied values into a new octet array, according to the fmt string
  m.Pack = function(fmt, values) {
  if (DEBUG) console.log("\n\n------------------------------------------------------------------------------------------------------------\n\n");
  if (DEBUG) console.log("initial unpacked values:"+JSON.stringify(values));
  if (DEBUG) console.log("initial   format string:"+JSON.stringify(fmt));
  if (DEBUG) console.log("\n\nwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwww\n\n");
    return this.WouldPack(fmt, new Array(this.CalcLength(fmt)), 0, values);
  //if (DEBUG) console.log("\n\nmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm\n\n");
   // return this.PackTo(fmt, new Array(this.CalcLength(fmt)), 0, values);
  };

  /**
   * @param {string} fmt
   * @param {(Node|NodeList|null|string)} values
   * @return {?}
   */
  	// Pack the supplied values into a new octet array, according to the fmt string
  m.oldPack = function(fmt, values) {
  if (DEBUG) console.log("\n\n------------------------------------------------------------------------------------------------------------\n\n");
  if (DEBUG) console.log("initial unpacked values:"+JSON.stringify(values));
  if (DEBUG) console.log("initial   format string:"+JSON.stringify(fmt));
    return this.PackTo(fmt, new Array(this.CalcLength(fmt)), 0, values);
  };
  
  /**
   * @param {string} fmt
   * @return {?}
   */
  	// Determine the number of bytes represented by the format string
  m.CalcLength = function(fmt) {

    /** @type {!RegExp} */
    var re = new RegExp(this._sPattern, "g");
    var m;
    /** @type {number} */
    var value = 0;
    for (; m = re.exec(fmt);) {
      /** @type {number} */
      value = value + (m[1] == undefined || m[1] == "" ? 1 : parseInt(m[1])) * this._lenLut[m[2]];
    }
  if (DEBUG) console.log("number of bytes in format string?: "+value+"\n");
    return value;
  };
}
exports.jspack = new JSPack;


}).call(this)}).call(this,{"isBuffer":require("../../../../../../../../../Library/pnpm/global/5/.pnpm/is-buffer@1.1.6/node_modules/is-buffer/index.js")})
},{"../../../../../../../../../Library/pnpm/global/5/.pnpm/is-buffer@1.1.6/node_modules/is-buffer/index.js":117,"long":4}],4:[function(require,module,exports){
//  This file is MODIFIED from the original, by buzz 2020, please see README.md in the upper level folder for more details.

module.exports = Long;

/**
 * wasm optimizations, to do native i64 multiplication and divide
 */
var wasm = null;

try {
  wasm = new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([
    0, 97, 115, 109, 1, 0, 0, 0, 1, 13, 2, 96, 0, 1, 127, 96, 4, 127, 127, 127, 127, 1, 127, 3, 7, 6, 0, 1, 1, 1, 1, 1, 6, 6, 1, 127, 1, 65, 0, 11, 7, 50, 6, 3, 109, 117, 108, 0, 1, 5, 100, 105, 118, 95, 115, 0, 2, 5, 100, 105, 118, 95, 117, 0, 3, 5, 114, 101, 109, 95, 115, 0, 4, 5, 114, 101, 109, 95, 117, 0, 5, 8, 103, 101, 116, 95, 104, 105, 103, 104, 0, 0, 10, 191, 1, 6, 4, 0, 35, 0, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 126, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 127, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 128, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 129, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 130, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11
  ])), {}).exports;
} catch (e) {
  // no wasm support :(
}

/**
 * Constructs a 64 bit two's-complement integer, given its low and high 32 bit values as *signed* integers.
 *  See the from* functions below for more convenient ways of constructing Longs.
 * @exports Long
 * @class A Long class for representing a 64 bit two's-complement integer value.
 * @param {number} low The low (signed) 32 bits of the long
 * @param {number} high The high (signed) 32 bits of the long
 * @param {boolean=} unsigned Whether unsigned or not, defaults to signed
 * @constructor
 */
function Long(low, high, unsigned) {

    /**
     * The low 32 bits as a signed value.
     * @type {number}
     */
    this.low = low | 0;

    /**
     * The high 32 bits as a signed value.
     * @type {number}
     */
    this.high = high | 0;

    /**
     * Whether unsigned or not.
     * @type {boolean}
     */
    this.unsigned = !!unsigned;
}

// The internal representation of a long is the two given signed, 32-bit values.
// We use 32-bit pieces because these are the size of integers on which
// Javascript performs bit-operations.  For operations like addition and
// multiplication, we split each number into 16 bit pieces, which can easily be
// multiplied within Javascript's floating-point representation without overflow
// or change in sign.
//
// In the algorithms below, we frequently reduce the negative case to the
// positive case by negating the input(s) and then post-processing the result.
// Note that we must ALWAYS check specially whether those values are MIN_VALUE
// (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as
// a positive number, it overflows back into a negative).  Not handling this
// case would often result in infinite recursion.
//
// Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the from*
// methods on which they depend.

/**
 * An indicator used to reliably determine if an object is a Long or not.
 * @type {boolean}
 * @const
 * @private
 */
Long.prototype.__isLong__;

Object.defineProperty(Long.prototype, "__isLong__", { value: true });

/**
 * @function
 * @param {*} obj Object
 * @returns {boolean}
 * @inner
 */
function isLong(obj) {
    return (obj && obj["__isLong__"]) === true;
}

/**
 * Tests if the specified object is a Long.
 * @function
 * @param {*} obj Object
 * @returns {boolean}
 */
Long.isLong = isLong;

/**
 * A cache of the Long representations of small integer values.
 * @type {!Object}
 * @inner
 */
var INT_CACHE = {};

/**
 * A cache of the Long representations of small unsigned integer values.
 * @type {!Object}
 * @inner
 */
var UINT_CACHE = {};

/**
 * @param {number} value
 * @param {boolean=} unsigned
 * @returns {!Long}
 * @inner
 */
function fromInt(value, unsigned) {
    var obj, cachedObj, cache;
    if (unsigned) {
        value >>>= 0;
        if (cache = (0 <= value && value < 256)) {
            cachedObj = UINT_CACHE[value];
            if (cachedObj)
                return cachedObj;
        }
        obj = fromBits(value, (value | 0) < 0 ? -1 : 0, true);
        if (cache)
            UINT_CACHE[value] = obj;
        return obj;
    } else {
        value |= 0;
        if (cache = (-128 <= value && value < 128)) {
            cachedObj = INT_CACHE[value];
            if (cachedObj)
                return cachedObj;
        }
        obj = fromBits(value, value < 0 ? -1 : 0, false);
        if (cache)
            INT_CACHE[value] = obj;
        return obj;
    }
}

/**
 * Returns a Long representing the given 32 bit integer value.
 * @function
 * @param {number} value The 32 bit integer in question
 * @param {boolean=} unsigned Whether unsigned or not, defaults to signed
 * @returns {!Long} The corresponding Long value
 */
Long.fromInt = fromInt;

/**
 * @param {number} value
 * @param {boolean=} unsigned
 * @returns {!Long}
 * @inner
 */
function fromNumber(value, unsigned) {
    if (isNaN(value))
        return unsigned ? UZERO : ZERO;
    if (unsigned) {
        if (value < 0)
            return UZERO;
        if (value >= TWO_PWR_64_DBL)
            return MAX_UNSIGNED_VALUE;
    } else {
        if (value <= -TWO_PWR_63_DBL)
            return MIN_VALUE;
        if (value + 1 >= TWO_PWR_63_DBL)
            return MAX_VALUE;
    }
    if (value < 0)
        return fromNumber(-value, unsigned).neg();
    return fromBits((value % TWO_PWR_32_DBL) | 0, (value / TWO_PWR_32_DBL) | 0, unsigned);
}

/**
 * Returns a Long representing the given value, provided that it is a finite number. Otherwise, zero is returned.
 * @function
 * @param {number} value The number in question
 * @param {boolean=} unsigned Whether unsigned or not, defaults to signed
 * @returns {!Long} The corresponding Long value
 */
Long.fromNumber = fromNumber;

/**
 * @param {number} lowBits
 * @param {number} highBits
 * @param {boolean=} unsigned
 * @returns {!Long}
 * @inner
 */
function fromBits(lowBits, highBits, unsigned) {
    return new Long(lowBits, highBits, unsigned);
}

/**
 * Returns a Long representing the 64 bit integer that comes by concatenating the given low and high bits. Each is
 *  assumed to use 32 bits.
 * @function
 * @param {number} lowBits The low 32 bits
 * @param {number} highBits The high 32 bits
 * @param {boolean=} unsigned Whether unsigned or not, defaults to signed
 * @returns {!Long} The corresponding Long value
 */
Long.fromBits = fromBits;

/**
 * @function
 * @param {number} base
 * @param {number} exponent
 * @returns {number}
 * @inner
 */
var pow_dbl = Math.pow; // Used 4 times (4*8 to 15+4)

/**
 * @param {string} str
 * @param {(boolean|number)=} unsigned
 * @param {number=} radix
 * @returns {!Long}
 * @inner
 */
function fromString(str, unsigned, radix) {
    if (str.length === 0)
        throw Error('empty string');
    if (str === "NaN" || str === "Infinity" || str === "+Infinity" || str === "-Infinity")
        return ZERO;
    if (typeof unsigned === 'number') {
        // For goog.math.long compatibility
        radix = unsigned,
        unsigned = false;
    } else {
        unsigned = !! unsigned;
    }
    radix = radix || 10;
    if (radix < 2 || 36 < radix)
        throw RangeError('radix');

    var p;
    if ((p = str.indexOf('-')) > 0)
        throw Error('interior hyphen');
    else if (p === 0) {
        return fromString(str.substring(1), unsigned, radix).neg();
    }

    // Do several (8) digits each time through the loop, so as to
    // minimize the calls to the very expensive emulated div.
    var radixToPower = fromNumber(pow_dbl(radix, 8));

    var result = ZERO;
    for (var i = 0; i < str.length; i += 8) {
        var size = Math.min(8, str.length - i),
            value = parseInt(str.substring(i, i + size), radix);
        if (size < 8) {
            var power = fromNumber(pow_dbl(radix, size));
            result = result.mul(power).add(fromNumber(value));
        } else {
            result = result.mul(radixToPower);
            result = result.add(fromNumber(value));
        }
    }
    result.unsigned = unsigned;
    return result;
}

/**
 * Returns a Long representation of the given string, written using the specified radix.
 * @function
 * @param {string} str The textual representation of the Long
 * @param {(boolean|number)=} unsigned Whether unsigned or not, defaults to signed
 * @param {number=} radix The radix in which the text is written (2-36), defaults to 10
 * @returns {!Long} The corresponding Long value
 */
Long.fromString = fromString;

/**
 * @function
 * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val
 * @param {boolean=} unsigned
 * @returns {!Long}
 * @inner
 */
function fromValue(val, unsigned) {
    if (typeof val === 'number')
        return fromNumber(val, unsigned);
    if (typeof val === 'string')
        return fromString(val, unsigned);
    // Throws for non-objects, converts non-instanceof Long:
    return fromBits(val.low, val.high, typeof unsigned === 'boolean' ? unsigned : val.unsigned);
}

/**
 * Converts the specified value to a Long using the appropriate from* function for its type.
 * @function
 * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val Value
 * @param {boolean=} unsigned Whether unsigned or not, defaults to signed
 * @returns {!Long}
 */
Long.fromValue = fromValue;

// NOTE: the compiler should inline these constant values below and then remove these variables, so there should be
// no runtime penalty for these.

/**
 * @type {number}
 * @const
 * @inner
 */
var TWO_PWR_16_DBL = 1 << 16;

/**
 * @type {number}
 * @const
 * @inner
 */
var TWO_PWR_24_DBL = 1 << 24;

/**
 * @type {number}
 * @const
 * @inner
 */
var TWO_PWR_32_DBL = TWO_PWR_16_DBL * TWO_PWR_16_DBL;

/**
 * @type {number}
 * @const
 * @inner
 */
var TWO_PWR_64_DBL = TWO_PWR_32_DBL * TWO_PWR_32_DBL;

/**
 * @type {number}
 * @const
 * @inner
 */
var TWO_PWR_63_DBL = TWO_PWR_64_DBL / 2;

/**
 * @type {!Long}
 * @const
 * @inner
 */
var TWO_PWR_24 = fromInt(TWO_PWR_24_DBL);

/**
 * @type {!Long}
 * @inner
 */
var ZERO = fromInt(0);

/**
 * Signed zero.
 * @type {!Long}
 */
Long.ZERO = ZERO;

/**
 * @type {!Long}
 * @inner
 */
var UZERO = fromInt(0, true);

/**
 * Unsigned zero.
 * @type {!Long}
 */
Long.UZERO = UZERO;

/**
 * @type {!Long}
 * @inner
 */
var ONE = fromInt(1);

/**
 * Signed one.
 * @type {!Long}
 */
Long.ONE = ONE;

/**
 * @type {!Long}
 * @inner
 */
var UONE = fromInt(1, true);

/**
 * Unsigned one.
 * @type {!Long}
 */
Long.UONE = UONE;

/**
 * @type {!Long}
 * @inner
 */
var NEG_ONE = fromInt(-1);

/**
 * Signed negative one.
 * @type {!Long}
 */
Long.NEG_ONE = NEG_ONE;

/**
 * @type {!Long}
 * @inner
 */
var MAX_VALUE = fromBits(0xFFFFFFFF|0, 0x7FFFFFFF|0, false);

/**
 * Maximum signed value.
 * @type {!Long}
 */
Long.MAX_VALUE = MAX_VALUE;

/**
 * @type {!Long}
 * @inner
 */
var MAX_UNSIGNED_VALUE = fromBits(0xFFFFFFFF|0, 0xFFFFFFFF|0, true);

/**
 * Maximum unsigned value.
 * @type {!Long}
 */
Long.MAX_UNSIGNED_VALUE = MAX_UNSIGNED_VALUE;

/**
 * @type {!Long}
 * @inner
 */
var MIN_VALUE = fromBits(0, 0x80000000|0, false);

/**
 * Minimum signed value.
 * @type {!Long}
 */
Long.MIN_VALUE = MIN_VALUE;

/**
 * @alias Long.prototype
 * @inner
 */
var LongPrototype = Long.prototype;

/**
 * Converts the Long to a 32 bit integer, assuming it is a 32 bit integer.
 * @returns {number}
 */
LongPrototype.toInt = function toInt() {
    return this.unsigned ? this.low >>> 0 : this.low;
};

/**
 * Converts the Long to a the nearest floating-point representation of this value (double, 53 bit mantissa).
 * @returns {number}
 */
LongPrototype.toNumber = function toNumber() {
    if (this.unsigned)
        return ((this.high >>> 0) * TWO_PWR_32_DBL) + (this.low >>> 0);
    return this.high * TWO_PWR_32_DBL + (this.low >>> 0);
};

/**
 * Converts the Long to a string written in the specified radix.
 * @param {number=} radix Radix (2-36), defaults to 10
 * @returns {string}
 * @override
 * @throws {RangeError} If `radix` is out of range
 */
LongPrototype.toString = function toString(radix) {
    radix = radix || 10;
    if (radix < 2 || 36 < radix)
        throw RangeError('radix');
    if (this.isZero())
        return '0';
    if (this.isNegative()) { // Unsigned Longs are never negative
        if (this.eq(MIN_VALUE)) {
            // We need to change the Long value before it can be negated, so we remove
            // the bottom-most digit in this base and then recurse to do the rest.
            var radixLong = fromNumber(radix),
                div = this.div(radixLong),
                rem1 = div.mul(radixLong).sub(this);
            return div.toString(radix) + rem1.toInt().toString(radix);
        } else
            return '-' + this.neg().toString(radix);
    }

    // Do several (6) digits each time through the loop, so as to
    // minimize the calls to the very expensive emulated div.
    var radixToPower = fromNumber(pow_dbl(radix, 6), this.unsigned),
        rem = this;
    var result = '';
    while (true) {
        var remDiv = rem.div(radixToPower),
            intval = rem.sub(remDiv.mul(radixToPower)).toInt() >>> 0,
            digits = intval.toString(radix);
        rem = remDiv;
        if (rem.isZero())
            return digits + result;
        else {
            while (digits.length < 6)
                digits = '0' + digits;
            result = '' + digits + result;
        }
    }
};

/**
 * Gets the high 32 bits as a signed integer.
 * @returns {number} Signed high bits
 */
LongPrototype.getHighBits = function getHighBits() {
    return this.high;
};

/**
 * Gets the high 32 bits as an unsigned integer.
 * @returns {number} Unsigned high bits
 */
LongPrototype.getHighBitsUnsigned = function getHighBitsUnsigned() {
    return this.high >>> 0;
};

/**
 * Gets the low 32 bits as a signed integer.
 * @returns {number} Signed low bits
 */
LongPrototype.getLowBits = function getLowBits() {
    return this.low;
};

/**
 * Gets the low 32 bits as an unsigned integer.
 * @returns {number} Unsigned low bits
 */
LongPrototype.getLowBitsUnsigned = function getLowBitsUnsigned() {
    return this.low >>> 0;
};

/**
 * Gets the number of bits needed to represent the absolute value of this Long.
 * @returns {number}
 */
LongPrototype.getNumBitsAbs = function getNumBitsAbs() {
    if (this.isNegative()) // Unsigned Longs are never negative
        return this.eq(MIN_VALUE) ? 64 : this.neg().getNumBitsAbs();
    var val = this.high != 0 ? this.high : this.low;
    for (var bit = 31; bit > 0; bit--)
        if ((val & (1 << bit)) != 0)
            break;
    return this.high != 0 ? bit + 33 : bit + 1;
};

/**
 * Tests if this Long's value equals zero.
 * @returns {boolean}
 */
LongPrototype.isZero = function isZero() {
    return this.high === 0 && this.low === 0;
};

/**
 * Tests if this Long's value equals zero. This is an alias of {@link Long#isZero}.
 * @returns {boolean}
 */
LongPrototype.eqz = LongPrototype.isZero;

/**
 * Tests if this Long's value is negative.
 * @returns {boolean}
 */
LongPrototype.isNegative = function isNegative() {
    return !this.unsigned && this.high < 0;
};

/**
 * Tests if this Long's value is positive.
 * @returns {boolean}
 */
LongPrototype.isPositive = function isPositive() {
    return this.unsigned || this.high >= 0;
};

/**
 * Tests if this Long's value is odd.
 * @returns {boolean}
 */
LongPrototype.isOdd = function isOdd() {
    return (this.low & 1) === 1;
};

/**
 * Tests if this Long's value is even.
 * @returns {boolean}
 */
LongPrototype.isEven = function isEven() {
    return (this.low & 1) === 0;
};

/**
 * Tests if this Long's value equals the specified's.
 * @param {!Long|number|string} other Other value
 * @returns {boolean}
 */
LongPrototype.equals = function equals(other) {
    if (!isLong(other))
        other = fromValue(other);
    if (this.unsigned !== other.unsigned && (this.high >>> 31) === 1 && (other.high >>> 31) === 1)
        return false;
    return this.high === other.high && this.low === other.low;
};

/**
 * Tests if this Long's value equals the specified's. This is an alias of {@link Long#equals}.
 * @function
 * @param {!Long|number|string} other Other value
 * @returns {boolean}
 */
LongPrototype.eq = LongPrototype.equals;

/**
 * Tests if this Long's value differs from the specified's.
 * @param {!Long|number|string} other Other value
 * @returns {boolean}
 */
LongPrototype.notEquals = function notEquals(other) {
    return !this.eq(/* validates */ other);
};

/**
 * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.
 * @function
 * @param {!Long|number|string} other Other value
 * @returns {boolean}
 */
LongPrototype.neq = LongPrototype.notEquals;

/**
 * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.
 * @function
 * @param {!Long|number|string} other Other value
 * @returns {boolean}
 */
LongPrototype.ne = LongPrototype.notEquals;

/**
 * Tests if this Long's value is less than the specified's.
 * @param {!Long|number|string} other Other value
 * @returns {boolean}
 */
LongPrototype.lessThan = function lessThan(other) {
    return this.comp(/* validates */ other) < 0;
};

/**
 * Tests if this Long's value is less than the specified's. This is an alias of {@link Long#lessThan}.
 * @function
 * @param {!Long|number|string} other Other value
 * @returns {boolean}
 */
LongPrototype.lt = LongPrototype.lessThan;

/**
 * Tests if this Long's value is less than or equal the specified's.
 * @param {!Long|number|string} other Other value
 * @returns {boolean}
 */
LongPrototype.lessThanOrEqual = function lessThanOrEqual(other) {
    return this.comp(/* validates */ other) <= 0;
};

/**
 * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.
 * @function
 * @param {!Long|number|string} other Other value
 * @returns {boolean}
 */
LongPrototype.lte = LongPrototype.lessThanOrEqual;

/**
 * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.
 * @function
 * @param {!Long|number|string} other Other value
 * @returns {boolean}
 */
LongPrototype.le = LongPrototype.lessThanOrEqual;

/**
 * Tests if this Long's value is greater than the specified's.
 * @param {!Long|number|string} other Other value
 * @returns {boolean}
 */
LongPrototype.greaterThan = function greaterThan(other) {
    return this.comp(/* validates */ other) > 0;
};

/**
 * Tests if this Long's value is greater than the specified's. This is an alias of {@link Long#greaterThan}.
 * @function
 * @param {!Long|number|string} other Other value
 * @returns {boolean}
 */
LongPrototype.gt = LongPrototype.greaterThan;

/**
 * Tests if this Long's value is greater than or equal the specified's.
 * @param {!Long|number|string} other Other value
 * @returns {boolean}
 */
LongPrototype.greaterThanOrEqual = function greaterThanOrEqual(other) {
    return this.comp(/* validates */ other) >= 0;
};

/**
 * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.
 * @function
 * @param {!Long|number|string} other Other value
 * @returns {boolean}
 */
LongPrototype.gte = LongPrototype.greaterThanOrEqual;

/**
 * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.
 * @function
 * @param {!Long|number|string} other Other value
 * @returns {boolean}
 */
LongPrototype.ge = LongPrototype.greaterThanOrEqual;

/**
 * Compares this Long's value with the specified's.
 * @param {!Long|number|string} other Other value
 * @returns {number} 0 if they are the same, 1 if the this is greater and -1
 *  if the given one is greater
 */
LongPrototype.compare = function compare(other) {
    if (!isLong(other))
        other = fromValue(other);
    if (this.eq(other))
        return 0;
    var thisNeg = this.isNegative(),
        otherNeg = other.isNegative();
    if (thisNeg && !otherNeg)
        return -1;
    if (!thisNeg && otherNeg)
        return 1;
    // At this point the sign bits are the same
    if (!this.unsigned)
        return this.sub(other).isNegative() ? -1 : 1;
    // Both are positive if at least one is unsigned
    return (other.high >>> 0) > (this.high >>> 0) || (other.high === this.high && (other.low >>> 0) > (this.low >>> 0)) ? -1 : 1;
};

/**
 * Compares this Long's value with the specified's. This is an alias of {@link Long#compare}.
 * @function
 * @param {!Long|number|string} other Other value
 * @returns {number} 0 if they are the same, 1 if the this is greater and -1
 *  if the given one is greater
 */
LongPrototype.comp = LongPrototype.compare;

/**
 * Negates this Long's value.
 * @returns {!Long} Negated Long
 */
LongPrototype.negate = function negate() {
    if (!this.unsigned && this.eq(MIN_VALUE))
        return MIN_VALUE;
    return this.not().add(ONE);
};

/**
 * Negates this Long's value. This is an alias of {@link Long#negate}.
 * @function
 * @returns {!Long} Negated Long
 */
LongPrototype.neg = LongPrototype.negate;

/**
 * Returns the sum of this and the specified Long.
 * @param {!Long|number|string} addend Addend
 * @returns {!Long} Sum
 */
LongPrototype.add = function add(addend) {
    if (!isLong(addend))
        addend = fromValue(addend);

    // Divide each number into 4 chunks of 16 bits, and then sum the chunks.

    var a48 = this.high >>> 16;
    var a32 = this.high & 0xFFFF;
    var a16 = this.low >>> 16;
    var a00 = this.low & 0xFFFF;

    var b48 = addend.high >>> 16;
    var b32 = addend.high & 0xFFFF;
    var b16 = addend.low >>> 16;
    var b00 = addend.low & 0xFFFF;

    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
    c00 += a00 + b00;
    c16 += c00 >>> 16;
    c00 &= 0xFFFF;
    c16 += a16 + b16;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c32 += a32 + b32;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c48 += a48 + b48;
    c48 &= 0xFFFF;
    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);
};

/**
 * Returns the difference of this and the specified Long.
 * @param {!Long|number|string} subtrahend Subtrahend
 * @returns {!Long} Difference
 */
LongPrototype.subtract = function subtract(subtrahend) {
    if (!isLong(subtrahend))
        subtrahend = fromValue(subtrahend);
    return this.add(subtrahend.neg());
};

/**
 * Returns the difference of this and the specified Long. This is an alias of {@link Long#subtract}.
 * @function
 * @param {!Long|number|string} subtrahend Subtrahend
 * @returns {!Long} Difference
 */
LongPrototype.sub = LongPrototype.subtract;

/**
 * Returns the product of this and the specified Long.
 * @param {!Long|number|string} multiplier Multiplier
 * @returns {!Long} Product
 */
LongPrototype.multiply = function multiply(multiplier) {
    if (this.isZero())
        return this;
    if (!isLong(multiplier))
        multiplier = fromValue(multiplier);

    // use wasm support if present
    if (wasm) {
        var low = wasm.mul(this.low,
                           this.high,
                           multiplier.low,
                           multiplier.high);
        return fromBits(low, wasm.get_high(), this.unsigned);
    }

    if (multiplier.isZero())
        return (this.unsigned?UZERO:ZERO);
    if (this.eq(MIN_VALUE))
        return multiplier.isOdd() ? MIN_VALUE : (this.unsigned?UZERO:ZERO);
    if (multiplier.eq(MIN_VALUE))
        return this.isOdd() ? MIN_VALUE : (this.unsigned?UZERO:ZERO);

    if (this.isNegative()) {
        if (multiplier.isNegative())
            return this.neg().mul(multiplier.neg());
        else
            return this.neg().mul(multiplier).neg();
    } else if (multiplier.isNegative())
        return this.mul(multiplier.neg()).neg();

    // If both longs are small, use float multiplication
    if (this.lt(TWO_PWR_24) && multiplier.lt(TWO_PWR_24))
        return fromNumber(this.toNumber() * multiplier.toNumber(), this.unsigned);

    // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.
    // We can skip products that would overflow.

    var a48 = this.high >>> 16;
    var a32 = this.high & 0xFFFF;
    var a16 = this.low >>> 16;
    var a00 = this.low & 0xFFFF;

    var b48 = multiplier.high >>> 16;
    var b32 = multiplier.high & 0xFFFF;
    var b16 = multiplier.low >>> 16;
    var b00 = multiplier.low & 0xFFFF;

    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
    c00 += a00 * b00;
    c16 += c00 >>> 16;
    c00 &= 0xFFFF;
    c16 += a16 * b00;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c16 += a00 * b16;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c32 += a32 * b00;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c32 += a16 * b16;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c32 += a00 * b32;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;
    c48 &= 0xFFFF;
    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);
};

/**
 * Returns the product of this and the specified Long. This is an alias of {@link Long#multiply}.
 * @function
 * @param {!Long|number|string} multiplier Multiplier
 * @returns {!Long} Product
 */
LongPrototype.mul = LongPrototype.multiply;

/**
 * Returns this Long divided by the specified. The result is signed if this Long is signed or
 *  unsigned if this Long is unsigned.
 * @param {!Long|number|string} divisor Divisor
 * @returns {!Long} Quotient
 */
LongPrototype.divide = function divide(divisor) {
    if (!isLong(divisor))
        divisor = fromValue(divisor);
    if (divisor.isZero())
        throw Error('division by zero');

    // use wasm support if present
    if (wasm) {
        // guard against signed division overflow: the largest
        // negative number / -1 would be 1 larger than the largest
        // positive number, due to two's complement.
        if (!this.unsigned &&
            this.high === -0x80000000 &&
            divisor.low === -1 && divisor.high === -1) {
            // be consistent with non-wasm code path
            return this;
        }
        var low = (this.unsigned ? wasm.div_u : wasm.div_s)(
            this.low,
            this.high,
            divisor.low,
            divisor.high
        );
        return fromBits(low, wasm.get_high(), this.unsigned);
    }

    if (this.isZero())
        return this.unsigned ? UZERO : ZERO;
    var approx, rem, res;
    if (!this.unsigned) {
        // This section is only relevant for signed longs and is derived from the
        // closure library as a whole.
        if (this.eq(MIN_VALUE)) {
            if (divisor.eq(ONE) || divisor.eq(NEG_ONE))
                return MIN_VALUE;  // recall that -MIN_VALUE == MIN_VALUE
            else if (divisor.eq(MIN_VALUE))
                return ONE;
            else {
                // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.
                var halfThis = this.shr(1);
                approx = halfThis.div(divisor).shl(1);
                if (approx.eq(ZERO)) {
                    return divisor.isNegative() ? ONE : NEG_ONE;
                } else {
                    rem = this.sub(divisor.mul(approx));
                    res = approx.add(rem.div(divisor));
                    return res;
                }
            }
        } else if (divisor.eq(MIN_VALUE))
            return this.unsigned ? UZERO : ZERO;
        if (this.isNegative()) {
            if (divisor.isNegative())
                return this.neg().div(divisor.neg());
            return this.neg().div(divisor).neg();
        } else if (divisor.isNegative())
            return this.div(divisor.neg()).neg();
        res = ZERO;
    } else {
        // The algorithm below has not been made for unsigned longs. It's therefore
        // required to take special care of the MSB prior to running it.
        if (!divisor.unsigned)
            divisor = divisor.toUnsigned();
        if (divisor.gt(this))
            return UZERO;
        if (divisor.gt(this.shru(1))) // 15 >>> 1 = 7 ; with divisor = 8 ; true
            return UONE;
        res = UZERO;
    }

    // Repeat the following until the remainder is less than other:  find a
    // floating-point that approximates remainder / other *from below*, add this
    // into the result, and subtract it from the remainder.  It is critical that
    // the approximate value is less than or equal to the real value so that the
    // remainder never becomes negative.
    rem = this;
    while (rem.gte(divisor)) {
        // Approximate the result of division. This may be a little greater or
        // smaller than the actual value.
        approx = Math.max(1, Math.floor(rem.toNumber() / divisor.toNumber()));

        // We will tweak the approximate result by changing it in the 48-th digit or
        // the smallest non-fractional digit, whichever is larger.
        var log2 = Math.ceil(Math.log(approx) / Math.LN2),
            delta = (log2 <= 48) ? 1 : pow_dbl(2, log2 - 48),

        // Decrease the approximation until it is smaller than the remainder.  Note
        // that if it is too large, the product overflows and is negative.
            approxRes = fromNumber(approx),
            approxRem = approxRes.mul(divisor);
        while (approxRem.isNegative() || approxRem.gt(rem)) {
            approx -= delta;
            approxRes = fromNumber(approx, this.unsigned);
            approxRem = approxRes.mul(divisor);
        }

        // We know the answer can't be zero... and actually, zero would cause
        // infinite recursion since we would make no progress.
        if (approxRes.isZero())
            approxRes = ONE;

        res = res.add(approxRes);
        rem = rem.sub(approxRem);
    }
    return res;
};

/**
 * Returns this Long divided by the specified. This is an alias of {@link Long#divide}.
 * @function
 * @param {!Long|number|string} divisor Divisor
 * @returns {!Long} Quotient
 */
LongPrototype.div = LongPrototype.divide;

/**
 * Returns this Long modulo the specified.
 * @param {!Long|number|string} divisor Divisor
 * @returns {!Long} Remainder
 */
LongPrototype.modulo = function modulo(divisor) {
    if (!isLong(divisor))
        divisor = fromValue(divisor);

    // use wasm support if present
    if (wasm) {
        var low = (this.unsigned ? wasm.rem_u : wasm.rem_s)(
            this.low,
            this.high,
            divisor.low,
            divisor.high
        );
        return fromBits(low, wasm.get_high(), this.unsigned);
    }

    return this.sub(this.div(divisor).mul(divisor));
};

/**
 * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.
 * @function
 * @param {!Long|number|string} divisor Divisor
 * @returns {!Long} Remainder
 */
LongPrototype.mod = LongPrototype.modulo;

/**
 * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.
 * @function
 * @param {!Long|number|string} divisor Divisor
 * @returns {!Long} Remainder
 */
LongPrototype.rem = LongPrototype.modulo;

/**
 * Returns the bitwise NOT of this Long.
 * @returns {!Long}
 */
LongPrototype.not = function not() {
    return fromBits(~this.low, ~this.high, this.unsigned);
};

/**
 * Returns the bitwise AND of this Long and the specified.
 * @param {!Long|number|string} other Other Long
 * @returns {!Long}
 */
LongPrototype.and = function and(other) {
    if (!isLong(other))
        other = fromValue(other);
    return fromBits(this.low & other.low, this.high & other.high, this.unsigned);
};

/**
 * Returns the bitwise OR of this Long and the specified.
 * @param {!Long|number|string} other Other Long
 * @returns {!Long}
 */
LongPrototype.or = function or(other) {
    if (!isLong(other))
        other = fromValue(other);
    return fromBits(this.low | other.low, this.high | other.high, this.unsigned);
};

/**
 * Returns the bitwise XOR of this Long and the given one.
 * @param {!Long|number|string} other Other Long
 * @returns {!Long}
 */
LongPrototype.xor = function xor(other) {
    if (!isLong(other))
        other = fromValue(other);
    return fromBits(this.low ^ other.low, this.high ^ other.high, this.unsigned);
};

/**
 * Returns this Long with bits shifted to the left by the given amount.
 * @param {number|!Long} numBits Number of bits
 * @returns {!Long} Shifted Long
 */
LongPrototype.shiftLeft = function shiftLeft(numBits) {
    if (isLong(numBits))
        numBits = numBits.toInt();
    if ((numBits &= 63) === 0)
        return this;
    else if (numBits < 32)
        return fromBits(this.low << numBits, (this.high << numBits) | (this.low >>> (32 - numBits)), this.unsigned);
    else
        return fromBits(0, this.low << (numBits - 32), this.unsigned);
};

/**
 * Returns this Long with bits shifted to the left by the given amount. This is an alias of {@link Long#shiftLeft}.
 * @function
 * @param {number|!Long} numBits Number of bits
 * @returns {!Long} Shifted Long
 */
LongPrototype.shl = LongPrototype.shiftLeft;

/**
 * Returns this Long with bits arithmetically shifted to the right by the given amount.
 * @param {number|!Long} numBits Number of bits
 * @returns {!Long} Shifted Long
 */
LongPrototype.shiftRight = function shiftRight(numBits) {
    if (isLong(numBits))
        numBits = numBits.toInt();
    if ((numBits &= 63) === 0)
        return this;
    else if (numBits < 32)
        return fromBits((this.low >>> numBits) | (this.high << (32 - numBits)), this.high >> numBits, this.unsigned);
    else
        return fromBits(this.high >> (numBits - 32), this.high >= 0 ? 0 : -1, this.unsigned);
};

/**
 * Returns this Long with bits arithmetically shifted to the right by the given amount. This is an alias of {@link Long#shiftRight}.
 * @function
 * @param {number|!Long} numBits Number of bits
 * @returns {!Long} Shifted Long
 */
LongPrototype.shr = LongPrototype.shiftRight;

/**
 * Returns this Long with bits logically shifted to the right by the given amount.
 * @param {number|!Long} numBits Number of bits
 * @returns {!Long} Shifted Long
 */
LongPrototype.shiftRightUnsigned = function shiftRightUnsigned(numBits) {
    if (isLong(numBits))
        numBits = numBits.toInt();
    numBits &= 63;
    if (numBits === 0)
        return this;
    else {
        var high = this.high;
        if (numBits < 32) {
            var low = this.low;
            return fromBits((low >>> numBits) | (high << (32 - numBits)), high >>> numBits, this.unsigned);
        } else if (numBits === 32)
            return fromBits(high, 0, this.unsigned);
        else
            return fromBits(high >>> (numBits - 32), 0, this.unsigned);
    }
};

/**
 * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.
 * @function
 * @param {number|!Long} numBits Number of bits
 * @returns {!Long} Shifted Long
 */
LongPrototype.shru = LongPrototype.shiftRightUnsigned;

/**
 * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.
 * @function
 * @param {number|!Long} numBits Number of bits
 * @returns {!Long} Shifted Long
 */
LongPrototype.shr_u = LongPrototype.shiftRightUnsigned;

/**
 * Converts this Long to signed.
 * @returns {!Long} Signed long
 */
LongPrototype.toSigned = function toSigned() {
    if (!this.unsigned)
        return this;
    return fromBits(this.low, this.high, false);
};

/**
 * Converts this Long to unsigned.
 * @returns {!Long} Unsigned long
 */
LongPrototype.toUnsigned = function toUnsigned() {
    if (this.unsigned)
        return this;
    return fromBits(this.low, this.high, true);
};

/**
 * Converts this Long to its byte representation.
 * @param {boolean=} le Whether little or big endian, defaults to big endian
 * @returns {!Array.<number>} Byte representation
 */
LongPrototype.toBytes = function toBytes(le) {
    return le ? this.toBytesLE() : this.toBytesBE();
};

/**
 * Converts this Long to its little endian byte representation.
 * @returns {!Array.<number>} Little endian byte representation
 */
LongPrototype.toBytesLE = function toBytesLE() {
    var hi = this.high,
        lo = this.low;
    return [
        lo        & 0xff,
        lo >>>  8 & 0xff,
        lo >>> 16 & 0xff,
        lo >>> 24       ,
        hi        & 0xff,
        hi >>>  8 & 0xff,
        hi >>> 16 & 0xff,
        hi >>> 24
    ];
};

/**
 * Converts this Long to its big endian byte representation.
 * @returns {!Array.<number>} Big endian byte representation
 */
LongPrototype.toBytesBE = function toBytesBE() {
    var hi = this.high,
        lo = this.low;
    return [
        hi >>> 24       ,
        hi >>> 16 & 0xff,
        hi >>>  8 & 0xff,
        hi        & 0xff,
        lo >>> 24       ,
        lo >>> 16 & 0xff,
        lo >>>  8 & 0xff,
        lo        & 0xff
    ];
};

/**
 * Creates a Long from its byte representation.
 * @param {!Array.<number>} bytes Byte representation
 * @param {boolean=} unsigned Whether unsigned or not, defaults to signed
 * @param {boolean=} le Whether little or big endian, defaults to big endian
 * @returns {Long} The corresponding Long value
 */
Long.fromBytes = function fromBytes(bytes, unsigned, le) {
    return le ? Long.fromBytesLE(bytes, unsigned) : Long.fromBytesBE(bytes, unsigned);
};

/**
 * Creates a Long from its little endian byte representation.
 * @param {!Array.<number>} bytes Little endian byte representation
 * @param {boolean=} unsigned Whether unsigned or not, defaults to signed
 * @returns {Long} The corresponding Long value
 */
Long.fromBytesLE = function fromBytesLE(bytes, unsigned) {
    return new Long(
        bytes[0]       |
        bytes[1] <<  8 |
        bytes[2] << 16 |
        bytes[3] << 24,
        bytes[4]       |
        bytes[5] <<  8 |
        bytes[6] << 16 |
        bytes[7] << 24,
        unsigned
    );
};

/**
 * Creates a Long from its big endian byte representation.
 * @param {!Array.<number>} bytes Big endian byte representation
 * @param {boolean=} unsigned Whether unsigned or not, defaults to signed
 * @returns {Long} The corresponding Long value
 */
Long.fromBytesBE = function fromBytesBE(bytes, unsigned) {
    return new Long(
        bytes[4] << 24 |
        bytes[5] << 16 |
        bytes[6] <<  8 |
        bytes[7],
        bytes[0] << 24 |
        bytes[1] << 16 |
        bytes[2] <<  8 |
        bytes[3],
        unsigned
    );
};

},{}],5:[function(require,module,exports){
'use strict';

const asn1 = exports;

asn1.bignum = require('bn.js');

asn1.define = require('./asn1/api').define;
asn1.base = require('./asn1/base');
asn1.constants = require('./asn1/constants');
asn1.decoders = require('./asn1/decoders');
asn1.encoders = require('./asn1/encoders');

},{"./asn1/api":6,"./asn1/base":8,"./asn1/constants":12,"./asn1/decoders":14,"./asn1/encoders":17,"bn.js":21}],6:[function(require,module,exports){
'use strict';

const encoders = require('./encoders');
const decoders = require('./decoders');
const inherits = require('inherits');

const api = exports;

api.define = function define(name, body) {
  return new Entity(name, body);
};

function Entity(name, body) {
  this.name = name;
  this.body = body;

  this.decoders = {};
  this.encoders = {};
}

Entity.prototype._createNamed = function createNamed(Base) {
  const name = this.name;

  function Generated(entity) {
    this._initNamed(entity, name);
  }
  inherits(Generated, Base);
  Generated.prototype._initNamed = function _initNamed(entity, name) {
    Base.call(this, entity, name);
  };

  return new Generated(this);
};

Entity.prototype._getDecoder = function _getDecoder(enc) {
  enc = enc || 'der';
  // Lazily create decoder
  if (!this.decoders.hasOwnProperty(enc))
    this.decoders[enc] = this._createNamed(decoders[enc]);
  return this.decoders[enc];
};

Entity.prototype.decode = function decode(data, enc, options) {
  return this._getDecoder(enc).decode(data, options);
};

Entity.prototype._getEncoder = function _getEncoder(enc) {
  enc = enc || 'der';
  // Lazily create encoder
  if (!this.encoders.hasOwnProperty(enc))
    this.encoders[enc] = this._createNamed(encoders[enc]);
  return this.encoders[enc];
};

Entity.prototype.encode = function encode(data, enc, /* internal */ reporter) {
  return this._getEncoder(enc).encode(data, reporter);
};

},{"./decoders":14,"./encoders":17,"inherits":115}],7:[function(require,module,exports){
'use strict';

const inherits = require('inherits');
const Reporter = require('../base/reporter').Reporter;
const Buffer = require('safer-buffer').Buffer;

function DecoderBuffer(base, options) {
  Reporter.call(this, options);
  if (!Buffer.isBuffer(base)) {
    this.error('Input not Buffer');
    return;
  }

  this.base = base;
  this.offset = 0;
  this.length = base.length;
}
inherits(DecoderBuffer, Reporter);
exports.DecoderBuffer = DecoderBuffer;

DecoderBuffer.isDecoderBuffer = function isDecoderBuffer(data) {
  if (data instanceof DecoderBuffer) {
    return true;
  }

  // Or accept compatible API
  const isCompatible = typeof data === 'object' &&
    Buffer.isBuffer(data.base) &&
    data.constructor.name === 'DecoderBuffer' &&
    typeof data.offset === 'number' &&
    typeof data.length === 'number' &&
    typeof data.save === 'function' &&
    typeof data.restore === 'function' &&
    typeof data.isEmpty === 'function' &&
    typeof data.readUInt8 === 'function' &&
    typeof data.skip === 'function' &&
    typeof data.raw === 'function';

  return isCompatible;
};

DecoderBuffer.prototype.save = function save() {
  return { offset: this.offset, reporter: Reporter.prototype.save.call(this) };
};

DecoderBuffer.prototype.restore = function restore(save) {
  // Return skipped data
  const res = new DecoderBuffer(this.base);
  res.offset = save.offset;
  res.length = this.offset;

  this.offset = save.offset;
  Reporter.prototype.restore.call(this, save.reporter);

  return res;
};

DecoderBuffer.prototype.isEmpty = function isEmpty() {
  return this.offset === this.length;
};

DecoderBuffer.prototype.readUInt8 = function readUInt8(fail) {
  if (this.offset + 1 <= this.length)
    return this.base.readUInt8(this.offset++, true);
  else
    return this.error(fail || 'DecoderBuffer overrun');
};

DecoderBuffer.prototype.skip = function skip(bytes, fail) {
  if (!(this.offset + bytes <= this.length))
    return this.error(fail || 'DecoderBuffer overrun');

  const res = new DecoderBuffer(this.base);

  // Share reporter state
  res._reporterState = this._reporterState;

  res.offset = this.offset;
  res.length = this.offset + bytes;
  this.offset += bytes;
  return res;
};

DecoderBuffer.prototype.raw = function raw(save) {
  return this.base.slice(save ? save.offset : this.offset, this.length);
};

function EncoderBuffer(value, reporter) {
  if (Array.isArray(value)) {
    this.length = 0;
    this.value = value.map(function(item) {
      if (!EncoderBuffer.isEncoderBuffer(item))
        item = new EncoderBuffer(item, reporter);
      this.length += item.length;
      return item;
    }, this);
  } else if (typeof value === 'number') {
    if (!(0 <= value && value <= 0xff))
      return reporter.error('non-byte EncoderBuffer value');
    this.value = value;
    this.length = 1;
  } else if (typeof value === 'string') {
    this.value = value;
    this.length = Buffer.byteLength(value);
  } else if (Buffer.isBuffer(value)) {
    this.value = value;
    this.length = value.length;
  } else {
    return reporter.error('Unsupported type: ' + typeof value);
  }
}
exports.EncoderBuffer = EncoderBuffer;

EncoderBuffer.isEncoderBuffer = function isEncoderBuffer(data) {
  if (data instanceof EncoderBuffer) {
    return true;
  }

  // Or accept compatible API
  const isCompatible = typeof data === 'object' &&
    data.constructor.name === 'EncoderBuffer' &&
    typeof data.length === 'number' &&
    typeof data.join === 'function';

  return isCompatible;
};

EncoderBuffer.prototype.join = function join(out, offset) {
  if (!out)
    out = Buffer.alloc(this.length);
  if (!offset)
    offset = 0;

  if (this.length === 0)
    return out;

  if (Array.isArray(this.value)) {
    this.value.forEach(function(item) {
      item.join(out, offset);
      offset += item.length;
    });
  } else {
    if (typeof this.value === 'number')
      out[offset] = this.value;
    else if (typeof this.value === 'string')
      out.write(this.value, offset);
    else if (Buffer.isBuffer(this.value))
      this.value.copy(out, offset);
    offset += this.length;
  }

  return out;
};

},{"../base/reporter":10,"inherits":115,"safer-buffer":162}],8:[function(require,module,exports){
'use strict';

const base = exports;

base.Reporter = require('./reporter').Reporter;
base.DecoderBuffer = require('./buffer').DecoderBuffer;
base.EncoderBuffer = require('./buffer').EncoderBuffer;
base.Node = require('./node');

},{"./buffer":7,"./node":9,"./reporter":10}],9:[function(require,module,exports){
'use strict';

const Reporter = require('../base/reporter').Reporter;
const EncoderBuffer = require('../base/buffer').EncoderBuffer;
const DecoderBuffer = require('../base/buffer').DecoderBuffer;
const assert = require('minimalistic-assert');

// Supported tags
const tags = [
  'seq', 'seqof', 'set', 'setof', 'objid', 'bool',
  'gentime', 'utctime', 'null_', 'enum', 'int', 'objDesc',
  'bitstr', 'bmpstr', 'charstr', 'genstr', 'graphstr', 'ia5str', 'iso646str',
  'numstr', 'octstr', 'printstr', 't61str', 'unistr', 'utf8str', 'videostr'
];

// Public methods list
const methods = [
  'key', 'obj', 'use', 'optional', 'explicit', 'implicit', 'def', 'choice',
  'any', 'contains'
].concat(tags);

// Overrided methods list
const overrided = [
  '_peekTag', '_decodeTag', '_use',
  '_decodeStr', '_decodeObjid', '_decodeTime',
  '_decodeNull', '_decodeInt', '_decodeBool', '_decodeList',

  '_encodeComposite', '_encodeStr', '_encodeObjid', '_encodeTime',
  '_encodeNull', '_encodeInt', '_encodeBool'
];

function Node(enc, parent, name) {
  const state = {};
  this._baseState = state;

  state.name = name;
  state.enc = enc;

  state.parent = parent || null;
  state.children = null;

  // State
  state.tag = null;
  state.args = null;
  state.reverseArgs = null;
  state.choice = null;
  state.optional = false;
  state.any = false;
  state.obj = false;
  state.use = null;
  state.useDecoder = null;
  state.key = null;
  state['default'] = null;
  state.explicit = null;
  state.implicit = null;
  state.contains = null;

  // Should create new instance on each method
  if (!state.parent) {
    state.children = [];
    this._wrap();
  }
}
module.exports = Node;

const stateProps = [
  'enc', 'parent', 'children', 'tag', 'args', 'reverseArgs', 'choice',
  'optional', 'any', 'obj', 'use', 'alteredUse', 'key', 'default', 'explicit',
  'implicit', 'contains'
];

Node.prototype.clone = function clone() {
  const state = this._baseState;
  const cstate = {};
  stateProps.forEach(function(prop) {
    cstate[prop] = state[prop];
  });
  const res = new this.constructor(cstate.parent);
  res._baseState = cstate;
  return res;
};

Node.prototype._wrap = function wrap() {
  const state = this._baseState;
  methods.forEach(function(method) {
    this[method] = function _wrappedMethod() {
      const clone = new this.constructor(this);
      state.children.push(clone);
      return clone[method].apply(clone, arguments);
    };
  }, this);
};

Node.prototype._init = function init(body) {
  const state = this._baseState;

  assert(state.parent === null);
  body.call(this);

  // Filter children
  state.children = state.children.filter(function(child) {
    return child._baseState.parent === this;
  }, this);
  assert.equal(state.children.length, 1, 'Root node can have only one child');
};

Node.prototype._useArgs = function useArgs(args) {
  const state = this._baseState;

  // Filter children and args
  const children = args.filter(function(arg) {
    return arg instanceof this.constructor;
  }, this);
  args = args.filter(function(arg) {
    return !(arg instanceof this.constructor);
  }, this);

  if (children.length !== 0) {
    assert(state.children === null);
    state.children = children;

    // Replace parent to maintain backward link
    children.forEach(function(child) {
      child._baseState.parent = this;
    }, this);
  }
  if (args.length !== 0) {
    assert(state.args === null);
    state.args = args;
    state.reverseArgs = args.map(function(arg) {
      if (typeof arg !== 'object' || arg.constructor !== Object)
        return arg;

      const res = {};
      Object.keys(arg).forEach(function(key) {
        if (key == (key | 0))
          key |= 0;
        const value = arg[key];
        res[value] = key;
      });
      return res;
    });
  }
};

//
// Overrided methods
//

overrided.forEach(function(method) {
  Node.prototype[method] = function _overrided() {
    const state = this._baseState;
    throw new Error(method + ' not implemented for encoding: ' + state.enc);
  };
});

//
// Public methods
//

tags.forEach(function(tag) {
  Node.prototype[tag] = function _tagMethod() {
    const state = this._baseState;
    const args = Array.prototype.slice.call(arguments);

    assert(state.tag === null);
    state.tag = tag;

    this._useArgs(args);

    return this;
  };
});

Node.prototype.use = function use(item) {
  assert(item);
  const state = this._baseState;

  assert(state.use === null);
  state.use = item;

  return this;
};

Node.prototype.optional = function optional() {
  const state = this._baseState;

  state.optional = true;

  return this;
};

Node.prototype.def = function def(val) {
  const state = this._baseState;

  assert(state['default'] === null);
  state['default'] = val;
  state.optional = true;

  return this;
};

Node.prototype.explicit = function explicit(num) {
  const state = this._baseState;

  assert(state.explicit === null && state.implicit === null);
  state.explicit = num;

  return this;
};

Node.prototype.implicit = function implicit(num) {
  const state = this._baseState;

  assert(state.explicit === null && state.implicit === null);
  state.implicit = num;

  return this;
};

Node.prototype.obj = function obj() {
  const state = this._baseState;
  const args = Array.prototype.slice.call(arguments);

  state.obj = true;

  if (args.length !== 0)
    this._useArgs(args);

  return this;
};

Node.prototype.key = function key(newKey) {
  const state = this._baseState;

  assert(state.key === null);
  state.key = newKey;

  return this;
};

Node.prototype.any = function any() {
  const state = this._baseState;

  state.any = true;

  return this;
};

Node.prototype.choice = function choice(obj) {
  const state = this._baseState;

  assert(state.choice === null);
  state.choice = obj;
  this._useArgs(Object.keys(obj).map(function(key) {
    return obj[key];
  }));

  return this;
};

Node.prototype.contains = function contains(item) {
  const state = this._baseState;

  assert(state.use === null);
  state.contains = item;

  return this;
};

//
// Decoding
//

Node.prototype._decode = function decode(input, options) {
  const state = this._baseState;

  // Decode root node
  if (state.parent === null)
    return input.wrapResult(state.children[0]._decode(input, options));

  let result = state['default'];
  let present = true;

  let prevKey = null;
  if (state.key !== null)
    prevKey = input.enterKey(state.key);

  // Check if tag is there
  if (state.optional) {
    let tag = null;
    if (state.explicit !== null)
      tag = state.explicit;
    else if (state.implicit !== null)
      tag = state.implicit;
    else if (state.tag !== null)
      tag = state.tag;

    if (tag === null && !state.any) {
      // Trial and Error
      const save = input.save();
      try {
        if (state.choice === null)
          this._decodeGeneric(state.tag, input, options);
        else
          this._decodeChoice(input, options);
        present = true;
      } catch (e) {
        present = false;
      }
      input.restore(save);
    } else {
      present = this._peekTag(input, tag, state.any);

      if (input.isError(present))
        return present;
    }
  }

  // Push object on stack
  let prevObj;
  if (state.obj && present)
    prevObj = input.enterObject();

  if (present) {
    // Unwrap explicit values
    if (state.explicit !== null) {
      const explicit = this._decodeTag(input, state.explicit);
      if (input.isError(explicit))
        return explicit;
      input = explicit;
    }

    const start = input.offset;

    // Unwrap implicit and normal values
    if (state.use === null && state.choice === null) {
      let save;
      if (state.any)
        save = input.save();
      const body = this._decodeTag(
        input,
        state.implicit !== null ? state.implicit : state.tag,
        state.any
      );
      if (input.isError(body))
        return body;

      if (state.any)
        result = input.raw(save);
      else
        input = body;
    }

    if (options && options.track && state.tag !== null)
      options.track(input.path(), start, input.length, 'tagged');

    if (options && options.track && state.tag !== null)
      options.track(input.path(), input.offset, input.length, 'content');

    // Select proper method for tag
    if (state.any) {
      // no-op
    } else if (state.choice === null) {
      result = this._decodeGeneric(state.tag, input, options);
    } else {
      result = this._decodeChoice(input, options);
    }

    if (input.isError(result))
      return result;

    // Decode children
    if (!state.any && state.choice === null && state.children !== null) {
      state.children.forEach(function decodeChildren(child) {
        // NOTE: We are ignoring errors here, to let parser continue with other
        // parts of encoded data
        child._decode(input, options);
      });
    }

    // Decode contained/encoded by schema, only in bit or octet strings
    if (state.contains && (state.tag === 'octstr' || state.tag === 'bitstr')) {
      const data = new DecoderBuffer(result);
      result = this._getUse(state.contains, input._reporterState.obj)
        ._decode(data, options);
    }
  }

  // Pop object
  if (state.obj && present)
    result = input.leaveObject(prevObj);

  // Set key
  if (state.key !== null && (result !== null || present === true))
    input.leaveKey(prevKey, state.key, result);
  else if (prevKey !== null)
    input.exitKey(prevKey);

  return result;
};

Node.prototype._decodeGeneric = function decodeGeneric(tag, input, options) {
  const state = this._baseState;

  if (tag === 'seq' || tag === 'set')
    return null;
  if (tag === 'seqof' || tag === 'setof')
    return this._decodeList(input, tag, state.args[0], options);
  else if (/str$/.test(tag))
    return this._decodeStr(input, tag, options);
  else if (tag === 'objid' && state.args)
    return this._decodeObjid(input, state.args[0], state.args[1], options);
  else if (tag === 'objid')
    return this._decodeObjid(input, null, null, options);
  else if (tag === 'gentime' || tag === 'utctime')
    return this._decodeTime(input, tag, options);
  else if (tag === 'null_')
    return this._decodeNull(input, options);
  else if (tag === 'bool')
    return this._decodeBool(input, options);
  else if (tag === 'objDesc')
    return this._decodeStr(input, tag, options);
  else if (tag === 'int' || tag === 'enum')
    return this._decodeInt(input, state.args && state.args[0], options);

  if (state.use !== null) {
    return this._getUse(state.use, input._reporterState.obj)
      ._decode(input, options);
  } else {
    return input.error('unknown tag: ' + tag);
  }
};

Node.prototype._getUse = function _getUse(entity, obj) {

  const state = this._baseState;
  // Create altered use decoder if implicit is set
  state.useDecoder = this._use(entity, obj);
  assert(state.useDecoder._baseState.parent === null);
  state.useDecoder = state.useDecoder._baseState.children[0];
  if (state.implicit !== state.useDecoder._baseState.implicit) {
    state.useDecoder = state.useDecoder.clone();
    state.useDecoder._baseState.implicit = state.implicit;
  }
  return state.useDecoder;
};

Node.prototype._decodeChoice = function decodeChoice(input, options) {
  const state = this._baseState;
  let result = null;
  let match = false;

  Object.keys(state.choice).some(function(key) {
    const save = input.save();
    const node = state.choice[key];
    try {
      const value = node._decode(input, options);
      if (input.isError(value))
        return false;

      result = { type: key, value: value };
      match = true;
    } catch (e) {
      input.restore(save);
      return false;
    }
    return true;
  }, this);

  if (!match)
    return input.error('Choice not matched');

  return result;
};

//
// Encoding
//

Node.prototype._createEncoderBuffer = function createEncoderBuffer(data) {
  return new EncoderBuffer(data, this.reporter);
};

Node.prototype._encode = function encode(data, reporter, parent) {
  const state = this._baseState;
  if (state['default'] !== null && state['default'] === data)
    return;

  const result = this._encodeValue(data, reporter, parent);
  if (result === undefined)
    return;

  if (this._skipDefault(result, reporter, parent))
    return;

  return result;
};

Node.prototype._encodeValue = function encode(data, reporter, parent) {
  const state = this._baseState;

  // Decode root node
  if (state.parent === null)
    return state.children[0]._encode(data, reporter || new Reporter());

  let result = null;

  // Set reporter to share it with a child class
  this.reporter = reporter;

  // Check if data is there
  if (state.optional && data === undefined) {
    if (state['default'] !== null)
      data = state['default'];
    else
      return;
  }

  // Encode children first
  let content = null;
  let primitive = false;
  if (state.any) {
    // Anything that was given is translated to buffer
    result = this._createEncoderBuffer(data);
  } else if (state.choice) {
    result = this._encodeChoice(data, reporter);
  } else if (state.contains) {
    content = this._getUse(state.contains, parent)._encode(data, reporter);
    primitive = true;
  } else if (state.children) {
    content = state.children.map(function(child) {
      if (child._baseState.tag === 'null_')
        return child._encode(null, reporter, data);

      if (child._baseState.key === null)
        return reporter.error('Child should have a key');
      const prevKey = reporter.enterKey(child._baseState.key);

      if (typeof data !== 'object')
        return reporter.error('Child expected, but input is not object');

      const res = child._encode(data[child._baseState.key], reporter, data);
      reporter.leaveKey(prevKey);

      return res;
    }, this).filter(function(child) {
      return child;
    });
    content = this._createEncoderBuffer(content);
  } else {
    if (state.tag === 'seqof' || state.tag === 'setof') {
      // TODO(indutny): this should be thrown on DSL level
      if (!(state.args && state.args.length === 1))
        return reporter.error('Too many args for : ' + state.tag);

      if (!Array.isArray(data))
        return reporter.error('seqof/setof, but data is not Array');

      const child = this.clone();
      child._baseState.implicit = null;
      content = this._createEncoderBuffer(data.map(function(item) {
        const state = this._baseState;

        return this._getUse(state.args[0], data)._encode(item, reporter);
      }, child));
    } else if (state.use !== null) {
      result = this._getUse(state.use, parent)._encode(data, reporter);
    } else {
      content = this._encodePrimitive(state.tag, data);
      primitive = true;
    }
  }

  // Encode data itself
  if (!state.any && state.choice === null) {
    const tag = state.implicit !== null ? state.implicit : state.tag;
    const cls = state.implicit === null ? 'universal' : 'context';

    if (tag === null) {
      if (state.use === null)
        reporter.error('Tag could be omitted only for .use()');
    } else {
      if (state.use === null)
        result = this._encodeComposite(tag, primitive, cls, content);
    }
  }

  // Wrap in explicit
  if (state.explicit !== null)
    result = this._encodeComposite(state.explicit, false, 'context', result);

  return result;
};

Node.prototype._encodeChoice = function encodeChoice(data, reporter) {
  const state = this._baseState;

  const node = state.choice[data.type];
  if (!node) {
    assert(
      false,
      data.type + ' not found in ' +
            JSON.stringify(Object.keys(state.choice)));
  }
  return node._encode(data.value, reporter);
};

Node.prototype._encodePrimitive = function encodePrimitive(tag, data) {
  const state = this._baseState;

  if (/str$/.test(tag))
    return this._encodeStr(data, tag);
  else if (tag === 'objid' && state.args)
    return this._encodeObjid(data, state.reverseArgs[0], state.args[1]);
  else if (tag === 'objid')
    return this._encodeObjid(data, null, null);
  else if (tag === 'gentime' || tag === 'utctime')
    return this._encodeTime(data, tag);
  else if (tag === 'null_')
    return this._encodeNull();
  else if (tag === 'int' || tag === 'enum')
    return this._encodeInt(data, state.args && state.reverseArgs[0]);
  else if (tag === 'bool')
    return this._encodeBool(data);
  else if (tag === 'objDesc')
    return this._encodeStr(data, tag);
  else
    throw new Error('Unsupported tag: ' + tag);
};

Node.prototype._isNumstr = function isNumstr(str) {
  return /^[0-9 ]*$/.test(str);
};

Node.prototype._isPrintstr = function isPrintstr(str) {
  return /^[A-Za-z0-9 '()+,-./:=?]*$/.test(str);
};

},{"../base/buffer":7,"../base/reporter":10,"minimalistic-assert":123}],10:[function(require,module,exports){
'use strict';

const inherits = require('inherits');

function Reporter(options) {
  this._reporterState = {
    obj: null,
    path: [],
    options: options || {},
    errors: []
  };
}
exports.Reporter = Reporter;

Reporter.prototype.isError = function isError(obj) {
  return obj instanceof ReporterError;
};

Reporter.prototype.save = function save() {
  const state = this._reporterState;

  return { obj: state.obj, pathLen: state.path.length };
};

Reporter.prototype.restore = function restore(data) {
  const state = this._reporterState;

  state.obj = data.obj;
  state.path = state.path.slice(0, data.pathLen);
};

Reporter.prototype.enterKey = function enterKey(key) {
  return this._reporterState.path.push(key);
};

Reporter.prototype.exitKey = function exitKey(index) {
  const state = this._reporterState;

  state.path = state.path.slice(0, index - 1);
};

Reporter.prototype.leaveKey = function leaveKey(index, key, value) {
  const state = this._reporterState;

  this.exitKey(index);
  if (state.obj !== null)
    state.obj[key] = value;
};

Reporter.prototype.path = function path() {
  return this._reporterState.path.join('/');
};

Reporter.prototype.enterObject = function enterObject() {
  const state = this._reporterState;

  const prev = state.obj;
  state.obj = {};
  return prev;
};

Reporter.prototype.leaveObject = function leaveObject(prev) {
  const state = this._reporterState;

  const now = state.obj;
  state.obj = prev;
  return now;
};

Reporter.prototype.error = function error(msg) {
  let err;
  const state = this._reporterState;

  const inherited = msg instanceof ReporterError;
  if (inherited) {
    err = msg;
  } else {
    err = new ReporterError(state.path.map(function(elem) {
      return '[' + JSON.stringify(elem) + ']';
    }).join(''), msg.message || msg, msg.stack);
  }

  if (!state.options.partial)
    throw err;

  if (!inherited)
    state.errors.push(err);

  return err;
};

Reporter.prototype.wrapResult = function wrapResult(result) {
  const state = this._reporterState;
  if (!state.options.partial)
    return result;

  return {
    result: this.isError(result) ? null : result,
    errors: state.errors
  };
};

function ReporterError(path, msg) {
  this.path = path;
  this.rethrow(msg);
}
inherits(ReporterError, Error);

ReporterError.prototype.rethrow = function rethrow(msg) {
  this.message = msg + ' at: ' + (this.path || '(shallow)');
  if (Error.captureStackTrace)
    Error.captureStackTrace(this, ReporterError);

  if (!this.stack) {
    try {
      // IE only adds stack when thrown
      throw new Error(this.message);
    } catch (e) {
      this.stack = e.stack;
    }
  }
  return this;
};

},{"inherits":115}],11:[function(require,module,exports){
'use strict';

// Helper
function reverse(map) {
  const res = {};

  Object.keys(map).forEach(function(key) {
    // Convert key to integer if it is stringified
    if ((key | 0) == key)
      key = key | 0;

    const value = map[key];
    res[value] = key;
  });

  return res;
}

exports.tagClass = {
  0: 'universal',
  1: 'application',
  2: 'context',
  3: 'private'
};
exports.tagClassByName = reverse(exports.tagClass);

exports.tag = {
  0x00: 'end',
  0x01: 'bool',
  0x02: 'int',
  0x03: 'bitstr',
  0x04: 'octstr',
  0x05: 'null_',
  0x06: 'objid',
  0x07: 'objDesc',
  0x08: 'external',
  0x09: 'real',
  0x0a: 'enum',
  0x0b: 'embed',
  0x0c: 'utf8str',
  0x0d: 'relativeOid',
  0x10: 'seq',
  0x11: 'set',
  0x12: 'numstr',
  0x13: 'printstr',
  0x14: 't61str',
  0x15: 'videostr',
  0x16: 'ia5str',
  0x17: 'utctime',
  0x18: 'gentime',
  0x19: 'graphstr',
  0x1a: 'iso646str',
  0x1b: 'genstr',
  0x1c: 'unistr',
  0x1d: 'charstr',
  0x1e: 'bmpstr'
};
exports.tagByName = reverse(exports.tag);

},{}],12:[function(require,module,exports){
'use strict';

const constants = exports;

// Helper
constants._reverse = function reverse(map) {
  const res = {};

  Object.keys(map).forEach(function(key) {
    // Convert key to integer if it is stringified
    if ((key | 0) == key)
      key = key | 0;

    const value = map[key];
    res[value] = key;
  });

  return res;
};

constants.der = require('./der');

},{"./der":11}],13:[function(require,module,exports){
'use strict';

const inherits = require('inherits');

const bignum = require('bn.js');
const DecoderBuffer = require('../base/buffer').DecoderBuffer;
const Node = require('../base/node');

// Import DER constants
const der = require('../constants/der');

function DERDecoder(entity) {
  this.enc = 'der';
  this.name = entity.name;
  this.entity = entity;

  // Construct base tree
  this.tree = new DERNode();
  this.tree._init(entity.body);
}
module.exports = DERDecoder;

DERDecoder.prototype.decode = function decode(data, options) {
  if (!DecoderBuffer.isDecoderBuffer(data)) {
    data = new DecoderBuffer(data, options);
  }

  return this.tree._decode(data, options);
};

// Tree methods

function DERNode(parent) {
  Node.call(this, 'der', parent);
}
inherits(DERNode, Node);

DERNode.prototype._peekTag = function peekTag(buffer, tag, any) {
  if (buffer.isEmpty())
    return false;

  const state = buffer.save();
  const decodedTag = derDecodeTag(buffer, 'Failed to peek tag: "' + tag + '"');
  if (buffer.isError(decodedTag))
    return decodedTag;

  buffer.restore(state);

  return decodedTag.tag === tag || decodedTag.tagStr === tag ||
    (decodedTag.tagStr + 'of') === tag || any;
};

DERNode.prototype._decodeTag = function decodeTag(buffer, tag, any) {
  const decodedTag = derDecodeTag(buffer,
    'Failed to decode tag of "' + tag + '"');
  if (buffer.isError(decodedTag))
    return decodedTag;

  let len = derDecodeLen(buffer,
    decodedTag.primitive,
    'Failed to get length of "' + tag + '"');

  // Failure
  if (buffer.isError(len))
    return len;

  if (!any &&
      decodedTag.tag !== tag &&
      decodedTag.tagStr !== tag &&
      decodedTag.tagStr + 'of' !== tag) {
    return buffer.error('Failed to match tag: "' + tag + '"');
  }

  if (decodedTag.primitive || len !== null)
    return buffer.skip(len, 'Failed to match body of: "' + tag + '"');

  // Indefinite length... find END tag
  const state = buffer.save();
  const res = this._skipUntilEnd(
    buffer,
    'Failed to skip indefinite length body: "' + this.tag + '"');
  if (buffer.isError(res))
    return res;

  len = buffer.offset - state.offset;
  buffer.restore(state);
  return buffer.skip(len, 'Failed to match body of: "' + tag + '"');
};

DERNode.prototype._skipUntilEnd = function skipUntilEnd(buffer, fail) {
  for (;;) {
    const tag = derDecodeTag(buffer, fail);
    if (buffer.isError(tag))
      return tag;
    const len = derDecodeLen(buffer, tag.primitive, fail);
    if (buffer.isError(len))
      return len;

    let res;
    if (tag.primitive || len !== null)
      res = buffer.skip(len);
    else
      res = this._skipUntilEnd(buffer, fail);

    // Failure
    if (buffer.isError(res))
      return res;

    if (tag.tagStr === 'end')
      break;
  }
};

DERNode.prototype._decodeList = function decodeList(buffer, tag, decoder,
  options) {
  const result = [];
  while (!buffer.isEmpty()) {
    const possibleEnd = this._peekTag(buffer, 'end');
    if (buffer.isError(possibleEnd))
      return possibleEnd;

    const res = decoder.decode(buffer, 'der', options);
    if (buffer.isError(res) && possibleEnd)
      break;
    result.push(res);
  }
  return result;
};

DERNode.prototype._decodeStr = function decodeStr(buffer, tag) {
  if (tag === 'bitstr') {
    const unused = buffer.readUInt8();
    if (buffer.isError(unused))
      return unused;
    return { unused: unused, data: buffer.raw() };
  } else if (tag === 'bmpstr') {
    const raw = buffer.raw();
    if (raw.length % 2 === 1)
      return buffer.error('Decoding of string type: bmpstr length mismatch');

    let str = '';
    for (let i = 0; i < raw.length / 2; i++) {
      str += String.fromCharCode(raw.readUInt16BE(i * 2));
    }
    return str;
  } else if (tag === 'numstr') {
    const numstr = buffer.raw().toString('ascii');
    if (!this._isNumstr(numstr)) {
      return buffer.error('Decoding of string type: ' +
                          'numstr unsupported characters');
    }
    return numstr;
  } else if (tag === 'octstr') {
    return buffer.raw();
  } else if (tag === 'objDesc') {
    return buffer.raw();
  } else if (tag === 'printstr') {
    const printstr = buffer.raw().toString('ascii');
    if (!this._isPrintstr(printstr)) {
      return buffer.error('Decoding of string type: ' +
                          'printstr unsupported characters');
    }
    return printstr;
  } else if (/str$/.test(tag)) {
    return buffer.raw().toString();
  } else {
    return buffer.error('Decoding of string type: ' + tag + ' unsupported');
  }
};

DERNode.prototype._decodeObjid = function decodeObjid(buffer, values, relative) {
  let result;
  const identifiers = [];
  let ident = 0;
  let subident = 0;
  while (!buffer.isEmpty()) {
    subident = buffer.readUInt8();
    ident <<= 7;
    ident |= subident & 0x7f;
    if ((subident & 0x80) === 0) {
      identifiers.push(ident);
      ident = 0;
    }
  }
  if (subident & 0x80)
    identifiers.push(ident);

  const first = (identifiers[0] / 40) | 0;
  const second = identifiers[0] % 40;

  if (relative)
    result = identifiers;
  else
    result = [first, second].concat(identifiers.slice(1));

  if (values) {
    let tmp = values[result.join(' ')];
    if (tmp === undefined)
      tmp = values[result.join('.')];
    if (tmp !== undefined)
      result = tmp;
  }

  return result;
};

DERNode.prototype._decodeTime = function decodeTime(buffer, tag) {
  const str = buffer.raw().toString();

  let year;
  let mon;
  let day;
  let hour;
  let min;
  let sec;
  if (tag === 'gentime') {
    year = str.slice(0, 4) | 0;
    mon = str.slice(4, 6) | 0;
    day = str.slice(6, 8) | 0;
    hour = str.slice(8, 10) | 0;
    min = str.slice(10, 12) | 0;
    sec = str.slice(12, 14) | 0;
  } else if (tag === 'utctime') {
    year = str.slice(0, 2) | 0;
    mon = str.slice(2, 4) | 0;
    day = str.slice(4, 6) | 0;
    hour = str.slice(6, 8) | 0;
    min = str.slice(8, 10) | 0;
    sec = str.slice(10, 12) | 0;
    if (year < 70)
      year = 2000 + year;
    else
      year = 1900 + year;
  } else {
    return buffer.error('Decoding ' + tag + ' time is not supported yet');
  }

  return Date.UTC(year, mon - 1, day, hour, min, sec, 0);
};

DERNode.prototype._decodeNull = function decodeNull() {
  return null;
};

DERNode.prototype._decodeBool = function decodeBool(buffer) {
  const res = buffer.readUInt8();
  if (buffer.isError(res))
    return res;
  else
    return res !== 0;
};

DERNode.prototype._decodeInt = function decodeInt(buffer, values) {
  // Bigint, return as it is (assume big endian)
  const raw = buffer.raw();
  let res = new bignum(raw);

  if (values)
    res = values[res.toString(10)] || res;

  return res;
};

DERNode.prototype._use = function use(entity, obj) {
  if (typeof entity === 'function')
    entity = entity(obj);
  return entity._getDecoder('der').tree;
};

// Utility methods

function derDecodeTag(buf, fail) {
  let tag = buf.readUInt8(fail);
  if (buf.isError(tag))
    return tag;

  const cls = der.tagClass[tag >> 6];
  const primitive = (tag & 0x20) === 0;

  // Multi-octet tag - load
  if ((tag & 0x1f) === 0x1f) {
    let oct = tag;
    tag = 0;
    while ((oct & 0x80) === 0x80) {
      oct = buf.readUInt8(fail);
      if (buf.isError(oct))
        return oct;

      tag <<= 7;
      tag |= oct & 0x7f;
    }
  } else {
    tag &= 0x1f;
  }
  const tagStr = der.tag[tag];

  return {
    cls: cls,
    primitive: primitive,
    tag: tag,
    tagStr: tagStr
  };
}

function derDecodeLen(buf, primitive, fail) {
  let len = buf.readUInt8(fail);
  if (buf.isError(len))
    return len;

  // Indefinite form
  if (!primitive && len === 0x80)
    return null;

  // Definite form
  if ((len & 0x80) === 0) {
    // Short form
    return len;
  }

  // Long form
  const num = len & 0x7f;
  if (num > 4)
    return buf.error('length octect is too long');

  len = 0;
  for (let i = 0; i < num; i++) {
    len <<= 8;
    const j = buf.readUInt8(fail);
    if (buf.isError(j))
      return j;
    len |= j;
  }

  return len;
}

},{"../base/buffer":7,"../base/node":9,"../constants/der":11,"bn.js":21,"inherits":115}],14:[function(require,module,exports){
'use strict';

const decoders = exports;

decoders.der = require('./der');
decoders.pem = require('./pem');

},{"./der":13,"./pem":15}],15:[function(require,module,exports){
'use strict';

const inherits = require('inherits');
const Buffer = require('safer-buffer').Buffer;

const DERDecoder = require('./der');

function PEMDecoder(entity) {
  DERDecoder.call(this, entity);
  this.enc = 'pem';
}
inherits(PEMDecoder, DERDecoder);
module.exports = PEMDecoder;

PEMDecoder.prototype.decode = function decode(data, options) {
  const lines = data.toString().split(/[\r\n]+/g);

  const label = options.label.toUpperCase();

  const re = /^-----(BEGIN|END) ([^-]+)-----$/;
  let start = -1;
  let end = -1;
  for (let i = 0; i < lines.length; i++) {
    const match = lines[i].match(re);
    if (match === null)
      continue;

    if (match[2] !== label)
      continue;

    if (start === -1) {
      if (match[1] !== 'BEGIN')
        break;
      start = i;
    } else {
      if (match[1] !== 'END')
        break;
      end = i;
      break;
    }
  }
  if (start === -1 || end === -1)
    throw new Error('PEM section not found for: ' + label);

  const base64 = lines.slice(start + 1, end).join('');
  // Remove excessive symbols
  base64.replace(/[^a-z0-9+/=]+/gi, '');

  const input = Buffer.from(base64, 'base64');
  return DERDecoder.prototype.decode.call(this, input, options);
};

},{"./der":13,"inherits":115,"safer-buffer":162}],16:[function(require,module,exports){
'use strict';

const inherits = require('inherits');
const Buffer = require('safer-buffer').Buffer;
const Node = require('../base/node');

// Import DER constants
const der = require('../constants/der');

function DEREncoder(entity) {
  this.enc = 'der';
  this.name = entity.name;
  this.entity = entity;

  // Construct base tree
  this.tree = new DERNode();
  this.tree._init(entity.body);
}
module.exports = DEREncoder;

DEREncoder.prototype.encode = function encode(data, reporter) {
  return this.tree._encode(data, reporter).join();
};

// Tree methods

function DERNode(parent) {
  Node.call(this, 'der', parent);
}
inherits(DERNode, Node);

DERNode.prototype._encodeComposite = function encodeComposite(tag,
  primitive,
  cls,
  content) {
  const encodedTag = encodeTag(tag, primitive, cls, this.reporter);

  // Short form
  if (content.length < 0x80) {
    const header = Buffer.alloc(2);
    header[0] = encodedTag;
    header[1] = content.length;
    return this._createEncoderBuffer([ header, content ]);
  }

  // Long form
  // Count octets required to store length
  let lenOctets = 1;
  for (let i = content.length; i >= 0x100; i >>= 8)
    lenOctets++;

  const header = Buffer.alloc(1 + 1 + lenOctets);
  header[0] = encodedTag;
  header[1] = 0x80 | lenOctets;

  for (let i = 1 + lenOctets, j = content.length; j > 0; i--, j >>= 8)
    header[i] = j & 0xff;

  return this._createEncoderBuffer([ header, content ]);
};

DERNode.prototype._encodeStr = function encodeStr(str, tag) {
  if (tag === 'bitstr') {
    return this._createEncoderBuffer([ str.unused | 0, str.data ]);
  } else if (tag === 'bmpstr') {
    const buf = Buffer.alloc(str.length * 2);
    for (let i = 0; i < str.length; i++) {
      buf.writeUInt16BE(str.charCodeAt(i), i * 2);
    }
    return this._createEncoderBuffer(buf);
  } else if (tag === 'numstr') {
    if (!this._isNumstr(str)) {
      return this.reporter.error('Encoding of string type: numstr supports ' +
                                 'only digits and space');
    }
    return this._createEncoderBuffer(str);
  } else if (tag === 'printstr') {
    if (!this._isPrintstr(str)) {
      return this.reporter.error('Encoding of string type: printstr supports ' +
                                 'only latin upper and lower case letters, ' +
                                 'digits, space, apostrophe, left and rigth ' +
                                 'parenthesis, plus sign, comma, hyphen, ' +
                                 'dot, slash, colon, equal sign, ' +
                                 'question mark');
    }
    return this._createEncoderBuffer(str);
  } else if (/str$/.test(tag)) {
    return this._createEncoderBuffer(str);
  } else if (tag === 'objDesc') {
    return this._createEncoderBuffer(str);
  } else {
    return this.reporter.error('Encoding of string type: ' + tag +
                               ' unsupported');
  }
};

DERNode.prototype._encodeObjid = function encodeObjid(id, values, relative) {
  if (typeof id === 'string') {
    if (!values)
      return this.reporter.error('string objid given, but no values map found');
    if (!values.hasOwnProperty(id))
      return this.reporter.error('objid not found in values map');
    id = values[id].split(/[\s.]+/g);
    for (let i = 0; i < id.length; i++)
      id[i] |= 0;
  } else if (Array.isArray(id)) {
    id = id.slice();
    for (let i = 0; i < id.length; i++)
      id[i] |= 0;
  }

  if (!Array.isArray(id)) {
    return this.reporter.error('objid() should be either array or string, ' +
                               'got: ' + JSON.stringify(id));
  }

  if (!relative) {
    if (id[1] >= 40)
      return this.reporter.error('Second objid identifier OOB');
    id.splice(0, 2, id[0] * 40 + id[1]);
  }

  // Count number of octets
  let size = 0;
  for (let i = 0; i < id.length; i++) {
    let ident = id[i];
    for (size++; ident >= 0x80; ident >>= 7)
      size++;
  }

  const objid = Buffer.alloc(size);
  let offset = objid.length - 1;
  for (let i = id.length - 1; i >= 0; i--) {
    let ident = id[i];
    objid[offset--] = ident & 0x7f;
    while ((ident >>= 7) > 0)
      objid[offset--] = 0x80 | (ident & 0x7f);
  }

  return this._createEncoderBuffer(objid);
};

function two(num) {
  if (num < 10)
    return '0' + num;
  else
    return num;
}

DERNode.prototype._encodeTime = function encodeTime(time, tag) {
  let str;
  const date = new Date(time);

  if (tag === 'gentime') {
    str = [
      two(date.getUTCFullYear()),
      two(date.getUTCMonth() + 1),
      two(date.getUTCDate()),
      two(date.getUTCHours()),
      two(date.getUTCMinutes()),
      two(date.getUTCSeconds()),
      'Z'
    ].join('');
  } else if (tag === 'utctime') {
    str = [
      two(date.getUTCFullYear() % 100),
      two(date.getUTCMonth() + 1),
      two(date.getUTCDate()),
      two(date.getUTCHours()),
      two(date.getUTCMinutes()),
      two(date.getUTCSeconds()),
      'Z'
    ].join('');
  } else {
    this.reporter.error('Encoding ' + tag + ' time is not supported yet');
  }

  return this._encodeStr(str, 'octstr');
};

DERNode.prototype._encodeNull = function encodeNull() {
  return this._createEncoderBuffer('');
};

DERNode.prototype._encodeInt = function encodeInt(num, values) {
  if (typeof num === 'string') {
    if (!values)
      return this.reporter.error('String int or enum given, but no values map');
    if (!values.hasOwnProperty(num)) {
      return this.reporter.error('Values map doesn\'t contain: ' +
                                 JSON.stringify(num));
    }
    num = values[num];
  }

  // Bignum, assume big endian
  if (typeof num !== 'number' && !Buffer.isBuffer(num)) {
    const numArray = num.toArray();
    if (!num.sign && numArray[0] & 0x80) {
      numArray.unshift(0);
    }
    num = Buffer.from(numArray);
  }

  if (Buffer.isBuffer(num)) {
    let size = num.length;
    if (num.length === 0)
      size++;

    const out = Buffer.alloc(size);
    num.copy(out);
    if (num.length === 0)
      out[0] = 0;
    return this._createEncoderBuffer(out);
  }

  if (num < 0x80)
    return this._createEncoderBuffer(num);

  if (num < 0x100)
    return this._createEncoderBuffer([0, num]);

  let size = 1;
  for (let i = num; i >= 0x100; i >>= 8)
    size++;

  const out = new Array(size);
  for (let i = out.length - 1; i >= 0; i--) {
    out[i] = num & 0xff;
    num >>= 8;
  }
  if(out[0] & 0x80) {
    out.unshift(0);
  }

  return this._createEncoderBuffer(Buffer.from(out));
};

DERNode.prototype._encodeBool = function encodeBool(value) {
  return this._createEncoderBuffer(value ? 0xff : 0);
};

DERNode.prototype._use = function use(entity, obj) {
  if (typeof entity === 'function')
    entity = entity(obj);
  return entity._getEncoder('der').tree;
};

DERNode.prototype._skipDefault = function skipDefault(dataBuffer, reporter, parent) {
  const state = this._baseState;
  let i;
  if (state['default'] === null)
    return false;

  const data = dataBuffer.join();
  if (state.defaultBuffer === undefined)
    state.defaultBuffer = this._encodeValue(state['default'], reporter, parent).join();

  if (data.length !== state.defaultBuffer.length)
    return false;

  for (i=0; i < data.length; i++)
    if (data[i] !== state.defaultBuffer[i])
      return false;

  return true;
};

// Utility methods

function encodeTag(tag, primitive, cls, reporter) {
  let res;

  if (tag === 'seqof')
    tag = 'seq';
  else if (tag === 'setof')
    tag = 'set';

  if (der.tagByName.hasOwnProperty(tag))
    res = der.tagByName[tag];
  else if (typeof tag === 'number' && (tag | 0) === tag)
    res = tag;
  else
    return reporter.error('Unknown tag: ' + tag);

  if (res >= 0x1f)
    return reporter.error('Multi-octet tag encoding unsupported');

  if (!primitive)
    res |= 0x20;

  res |= (der.tagClassByName[cls || 'universal'] << 6);

  return res;
}

},{"../base/node":9,"../constants/der":11,"inherits":115,"safer-buffer":162}],17:[function(require,module,exports){
'use strict';

const encoders = exports;

encoders.der = require('./der');
encoders.pem = require('./pem');

},{"./der":16,"./pem":18}],18:[function(require,module,exports){
'use strict';

const inherits = require('inherits');

const DEREncoder = require('./der');

function PEMEncoder(entity) {
  DEREncoder.call(this, entity);
  this.enc = 'pem';
}
inherits(PEMEncoder, DEREncoder);
module.exports = PEMEncoder;

PEMEncoder.prototype.encode = function encode(data, options) {
  const buf = DEREncoder.prototype.encode.call(this, data);

  const p = buf.toString('base64');
  const out = [ '-----BEGIN ' + options.label + '-----' ];
  for (let i = 0; i < p.length; i += 64)
    out.push(p.slice(i, i + 64));
  out.push('-----END ' + options.label + '-----');
  return out.join('\n');
};

},{"./der":16,"inherits":115}],19:[function(require,module,exports){
(function (global){(function (){
'use strict';

var possibleNames = [
	'BigInt64Array',
	'BigUint64Array',
	'Float32Array',
	'Float64Array',
	'Int16Array',
	'Int32Array',
	'Int8Array',
	'Uint16Array',
	'Uint32Array',
	'Uint8Array',
	'Uint8ClampedArray'
];

var g = typeof globalThis === 'undefined' ? global : globalThis;

module.exports = function availableTypedArrays() {
	var out = [];
	for (var i = 0; i < possibleNames.length; i++) {
		if (typeof g[possibleNames[i]] === 'function') {
			out[out.length] = possibleNames[i];
		}
	}
	return out;
};

}).call(this)}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{}],20:[function(require,module,exports){
'use strict'

exports.byteLength = byteLength
exports.toByteArray = toByteArray
exports.fromByteArray = fromByteArray

var lookup = []
var revLookup = []
var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array

var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'
for (var i = 0, len = code.length; i < len; ++i) {
  lookup[i] = code[i]
  revLookup[code.charCodeAt(i)] = i
}

// Support decoding URL-safe base64 strings, as Node.js does.
// See: https://en.wikipedia.org/wiki/Base64#URL_applications
revLookup['-'.charCodeAt(0)] = 62
revLookup['_'.charCodeAt(0)] = 63

function getLens (b64) {
  var len = b64.length

  if (len % 4 > 0) {
    throw new Error('Invalid string. Length must be a multiple of 4')
  }

  // Trim off extra bytes after placeholder bytes are found
  // See: https://github.com/beatgammit/base64-js/issues/42
  var validLen = b64.indexOf('=')
  if (validLen === -1) validLen = len

  var placeHoldersLen = validLen === len
    ? 0
    : 4 - (validLen % 4)

  return [validLen, placeHoldersLen]
}

// base64 is 4/3 + up to two characters of the original data
function byteLength (b64) {
  var lens = getLens(b64)
  var validLen = lens[0]
  var placeHoldersLen = lens[1]
  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
}

function _byteLength (b64, validLen, placeHoldersLen) {
  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
}

function toByteArray (b64) {
  var tmp
  var lens = getLens(b64)
  var validLen = lens[0]
  var placeHoldersLen = lens[1]

  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))

  var curByte = 0

  // if there are placeholders, only get up to the last complete 4 chars
  var len = placeHoldersLen > 0
    ? validLen - 4
    : validLen

  var i
  for (i = 0; i < len; i += 4) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 18) |
      (revLookup[b64.charCodeAt(i + 1)] << 12) |
      (revLookup[b64.charCodeAt(i + 2)] << 6) |
      revLookup[b64.charCodeAt(i + 3)]
    arr[curByte++] = (tmp >> 16) & 0xFF
    arr[curByte++] = (tmp >> 8) & 0xFF
    arr[curByte++] = tmp & 0xFF
  }

  if (placeHoldersLen === 2) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 2) |
      (revLookup[b64.charCodeAt(i + 1)] >> 4)
    arr[curByte++] = tmp & 0xFF
  }

  if (placeHoldersLen === 1) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 10) |
      (revLookup[b64.charCodeAt(i + 1)] << 4) |
      (revLookup[b64.charCodeAt(i + 2)] >> 2)
    arr[curByte++] = (tmp >> 8) & 0xFF
    arr[curByte++] = tmp & 0xFF
  }

  return arr
}

function tripletToBase64 (num) {
  return lookup[num >> 18 & 0x3F] +
    lookup[num >> 12 & 0x3F] +
    lookup[num >> 6 & 0x3F] +
    lookup[num & 0x3F]
}

function encodeChunk (uint8, start, end) {
  var tmp
  var output = []
  for (var i = start; i < end; i += 3) {
    tmp =
      ((uint8[i] << 16) & 0xFF0000) +
      ((uint8[i + 1] << 8) & 0xFF00) +
      (uint8[i + 2] & 0xFF)
    output.push(tripletToBase64(tmp))
  }
  return output.join('')
}

function fromByteArray (uint8) {
  var tmp
  var len = uint8.length
  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes
  var parts = []
  var maxChunkLength = 16383 // must be multiple of 3

  // go through the array every three bytes, we'll deal with trailing stuff later
  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
    parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)))
  }

  // pad the end with zeros, but make sure to not forget the extra bytes
  if (extraBytes === 1) {
    tmp = uint8[len - 1]
    parts.push(
      lookup[tmp >> 2] +
      lookup[(tmp << 4) & 0x3F] +
      '=='
    )
  } else if (extraBytes === 2) {
    tmp = (uint8[len - 2] << 8) + uint8[len - 1]
    parts.push(
      lookup[tmp >> 10] +
      lookup[(tmp >> 4) & 0x3F] +
      lookup[(tmp << 2) & 0x3F] +
      '='
    )
  }

  return parts.join('')
}

},{}],21:[function(require,module,exports){
(function (module, exports) {
  'use strict';

  // Utils
  function assert (val, msg) {
    if (!val) throw new Error(msg || 'Assertion failed');
  }

  // Could use `inherits` module, but don't want to move from single file
  // architecture yet.
  function inherits (ctor, superCtor) {
    ctor.super_ = superCtor;
    var TempCtor = function () {};
    TempCtor.prototype = superCtor.prototype;
    ctor.prototype = new TempCtor();
    ctor.prototype.constructor = ctor;
  }

  // BN

  function BN (number, base, endian) {
    if (BN.isBN(number)) {
      return number;
    }

    this.negative = 0;
    this.words = null;
    this.length = 0;

    // Reduction context
    this.red = null;

    if (number !== null) {
      if (base === 'le' || base === 'be') {
        endian = base;
        base = 10;
      }

      this._init(number || 0, base || 10, endian || 'be');
    }
  }
  if (typeof module === 'object') {
    module.exports = BN;
  } else {
    exports.BN = BN;
  }

  BN.BN = BN;
  BN.wordSize = 26;

  var Buffer;
  try {
    if (typeof window !== 'undefined' && typeof window.Buffer !== 'undefined') {
      Buffer = window.Buffer;
    } else {
      Buffer = require('buffer').Buffer;
    }
  } catch (e) {
  }

  BN.isBN = function isBN (num) {
    if (num instanceof BN) {
      return true;
    }

    return num !== null && typeof num === 'object' &&
      num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);
  };

  BN.max = function max (left, right) {
    if (left.cmp(right) > 0) return left;
    return right;
  };

  BN.min = function min (left, right) {
    if (left.cmp(right) < 0) return left;
    return right;
  };

  BN.prototype._init = function init (number, base, endian) {
    if (typeof number === 'number') {
      return this._initNumber(number, base, endian);
    }

    if (typeof number === 'object') {
      return this._initArray(number, base, endian);
    }

    if (base === 'hex') {
      base = 16;
    }
    assert(base === (base | 0) && base >= 2 && base <= 36);

    number = number.toString().replace(/\s+/g, '');
    var start = 0;
    if (number[0] === '-') {
      start++;
      this.negative = 1;
    }

    if (start < number.length) {
      if (base === 16) {
        this._parseHex(number, start, endian);
      } else {
        this._parseBase(number, base, start);
        if (endian === 'le') {
          this._initArray(this.toArray(), base, endian);
        }
      }
    }
  };

  BN.prototype._initNumber = function _initNumber (number, base, endian) {
    if (number < 0) {
      this.negative = 1;
      number = -number;
    }
    if (number < 0x4000000) {
      this.words = [ number & 0x3ffffff ];
      this.length = 1;
    } else if (number < 0x10000000000000) {
      this.words = [
        number & 0x3ffffff,
        (number / 0x4000000) & 0x3ffffff
      ];
      this.length = 2;
    } else {
      assert(number < 0x20000000000000); // 2 ^ 53 (unsafe)
      this.words = [
        number & 0x3ffffff,
        (number / 0x4000000) & 0x3ffffff,
        1
      ];
      this.length = 3;
    }

    if (endian !== 'le') return;

    // Reverse the bytes
    this._initArray(this.toArray(), base, endian);
  };

  BN.prototype._initArray = function _initArray (number, base, endian) {
    // Perhaps a Uint8Array
    assert(typeof number.length === 'number');
    if (number.length <= 0) {
      this.words = [ 0 ];
      this.length = 1;
      return this;
    }

    this.length = Math.ceil(number.length / 3);
    this.words = new Array(this.length);
    for (var i = 0; i < this.length; i++) {
      this.words[i] = 0;
    }

    var j, w;
    var off = 0;
    if (endian === 'be') {
      for (i = number.length - 1, j = 0; i >= 0; i -= 3) {
        w = number[i] | (number[i - 1] << 8) | (number[i - 2] << 16);
        this.words[j] |= (w << off) & 0x3ffffff;
        this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;
        off += 24;
        if (off >= 26) {
          off -= 26;
          j++;
        }
      }
    } else if (endian === 'le') {
      for (i = 0, j = 0; i < number.length; i += 3) {
        w = number[i] | (number[i + 1] << 8) | (number[i + 2] << 16);
        this.words[j] |= (w << off) & 0x3ffffff;
        this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;
        off += 24;
        if (off >= 26) {
          off -= 26;
          j++;
        }
      }
    }
    return this.strip();
  };

  function parseHex4Bits (string, index) {
    var c = string.charCodeAt(index);
    // 'A' - 'F'
    if (c >= 65 && c <= 70) {
      return c - 55;
    // 'a' - 'f'
    } else if (c >= 97 && c <= 102) {
      return c - 87;
    // '0' - '9'
    } else {
      return (c - 48) & 0xf;
    }
  }

  function parseHexByte (string, lowerBound, index) {
    var r = parseHex4Bits(string, index);
    if (index - 1 >= lowerBound) {
      r |= parseHex4Bits(string, index - 1) << 4;
    }
    return r;
  }

  BN.prototype._parseHex = function _parseHex (number, start, endian) {
    // Create possibly bigger array to ensure that it fits the number
    this.length = Math.ceil((number.length - start) / 6);
    this.words = new Array(this.length);
    for (var i = 0; i < this.length; i++) {
      this.words[i] = 0;
    }

    // 24-bits chunks
    var off = 0;
    var j = 0;

    var w;
    if (endian === 'be') {
      for (i = number.length - 1; i >= start; i -= 2) {
        w = parseHexByte(number, start, i) << off;
        this.words[j] |= w & 0x3ffffff;
        if (off >= 18) {
          off -= 18;
          j += 1;
          this.words[j] |= w >>> 26;
        } else {
          off += 8;
        }
      }
    } else {
      var parseLength = number.length - start;
      for (i = parseLength % 2 === 0 ? start + 1 : start; i < number.length; i += 2) {
        w = parseHexByte(number, start, i) << off;
        this.words[j] |= w & 0x3ffffff;
        if (off >= 18) {
          off -= 18;
          j += 1;
          this.words[j] |= w >>> 26;
        } else {
          off += 8;
        }
      }
    }

    this.strip();
  };

  function parseBase (str, start, end, mul) {
    var r = 0;
    var len = Math.min(str.length, end);
    for (var i = start; i < len; i++) {
      var c = str.charCodeAt(i) - 48;

      r *= mul;

      // 'a'
      if (c >= 49) {
        r += c - 49 + 0xa;

      // 'A'
      } else if (c >= 17) {
        r += c - 17 + 0xa;

      // '0' - '9'
      } else {
        r += c;
      }
    }
    return r;
  }

  BN.prototype._parseBase = function _parseBase (number, base, start) {
    // Initialize as zero
    this.words = [ 0 ];
    this.length = 1;

    // Find length of limb in base
    for (var limbLen = 0, limbPow = 1; limbPow <= 0x3ffffff; limbPow *= base) {
      limbLen++;
    }
    limbLen--;
    limbPow = (limbPow / base) | 0;

    var total = number.length - start;
    var mod = total % limbLen;
    var end = Math.min(total, total - mod) + start;

    var word = 0;
    for (var i = start; i < end; i += limbLen) {
      word = parseBase(number, i, i + limbLen, base);

      this.imuln(limbPow);
      if (this.words[0] + word < 0x4000000) {
        this.words[0] += word;
      } else {
        this._iaddn(word);
      }
    }

    if (mod !== 0) {
      var pow = 1;
      word = parseBase(number, i, number.length, base);

      for (i = 0; i < mod; i++) {
        pow *= base;
      }

      this.imuln(pow);
      if (this.words[0] + word < 0x4000000) {
        this.words[0] += word;
      } else {
        this._iaddn(word);
      }
    }

    this.strip();
  };

  BN.prototype.copy = function copy (dest) {
    dest.words = new Array(this.length);
    for (var i = 0; i < this.length; i++) {
      dest.words[i] = this.words[i];
    }
    dest.length = this.length;
    dest.negative = this.negative;
    dest.red = this.red;
  };

  BN.prototype.clone = function clone () {
    var r = new BN(null);
    this.copy(r);
    return r;
  };

  BN.prototype._expand = function _expand (size) {
    while (this.length < size) {
      this.words[this.length++] = 0;
    }
    return this;
  };

  // Remove leading `0` from `this`
  BN.prototype.strip = function strip () {
    while (this.length > 1 && this.words[this.length - 1] === 0) {
      this.length--;
    }
    return this._normSign();
  };

  BN.prototype._normSign = function _normSign () {
    // -0 = 0
    if (this.length === 1 && this.words[0] === 0) {
      this.negative = 0;
    }
    return this;
  };

  BN.prototype.inspect = function inspect () {
    return (this.red ? '<BN-R: ' : '<BN: ') + this.toString(16) + '>';
  };

  /*

  var zeros = [];
  var groupSizes = [];
  var groupBases = [];

  var s = '';
  var i = -1;
  while (++i < BN.wordSize) {
    zeros[i] = s;
    s += '0';
  }
  groupSizes[0] = 0;
  groupSizes[1] = 0;
  groupBases[0] = 0;
  groupBases[1] = 0;
  var base = 2 - 1;
  while (++base < 36 + 1) {
    var groupSize = 0;
    var groupBase = 1;
    while (groupBase < (1 << BN.wordSize) / base) {
      groupBase *= base;
      groupSize += 1;
    }
    groupSizes[base] = groupSize;
    groupBases[base] = groupBase;
  }

  */

  var zeros = [
    '',
    '0',
    '00',
    '000',
    '0000',
    '00000',
    '000000',
    '0000000',
    '00000000',
    '000000000',
    '0000000000',
    '00000000000',
    '000000000000',
    '0000000000000',
    '00000000000000',
    '000000000000000',
    '0000000000000000',
    '00000000000000000',
    '000000000000000000',
    '0000000000000000000',
    '00000000000000000000',
    '000000000000000000000',
    '0000000000000000000000',
    '00000000000000000000000',
    '000000000000000000000000',
    '0000000000000000000000000'
  ];

  var groupSizes = [
    0, 0,
    25, 16, 12, 11, 10, 9, 8,
    8, 7, 7, 7, 7, 6, 6,
    6, 6, 6, 6, 6, 5, 5,
    5, 5, 5, 5, 5, 5, 5,
    5, 5, 5, 5, 5, 5, 5
  ];

  var groupBases = [
    0, 0,
    33554432, 43046721, 16777216, 48828125, 60466176, 40353607, 16777216,
    43046721, 10000000, 19487171, 35831808, 62748517, 7529536, 11390625,
    16777216, 24137569, 34012224, 47045881, 64000000, 4084101, 5153632,
    6436343, 7962624, 9765625, 11881376, 14348907, 17210368, 20511149,
    24300000, 28629151, 33554432, 39135393, 45435424, 52521875, 60466176
  ];

  BN.prototype.toString = function toString (base, padding) {
    base = base || 10;
    padding = padding | 0 || 1;

    var out;
    if (base === 16 || base === 'hex') {
      out = '';
      var off = 0;
      var carry = 0;
      for (var i = 0; i < this.length; i++) {
        var w = this.words[i];
        var word = (((w << off) | carry) & 0xffffff).toString(16);
        carry = (w >>> (24 - off)) & 0xffffff;
        if (carry !== 0 || i !== this.length - 1) {
          out = zeros[6 - word.length] + word + out;
        } else {
          out = word + out;
        }
        off += 2;
        if (off >= 26) {
          off -= 26;
          i--;
        }
      }
      if (carry !== 0) {
        out = carry.toString(16) + out;
      }
      while (out.length % padding !== 0) {
        out = '0' + out;
      }
      if (this.negative !== 0) {
        out = '-' + out;
      }
      return out;
    }

    if (base === (base | 0) && base >= 2 && base <= 36) {
      // var groupSize = Math.floor(BN.wordSize * Math.LN2 / Math.log(base));
      var groupSize = groupSizes[base];
      // var groupBase = Math.pow(base, groupSize);
      var groupBase = groupBases[base];
      out = '';
      var c = this.clone();
      c.negative = 0;
      while (!c.isZero()) {
        var r = c.modn(groupBase).toString(base);
        c = c.idivn(groupBase);

        if (!c.isZero()) {
          out = zeros[groupSize - r.length] + r + out;
        } else {
          out = r + out;
        }
      }
      if (this.isZero()) {
        out = '0' + out;
      }
      while (out.length % padding !== 0) {
        out = '0' + out;
      }
      if (this.negative !== 0) {
        out = '-' + out;
      }
      return out;
    }

    assert(false, 'Base should be between 2 and 36');
  };

  BN.prototype.toNumber = function toNumber () {
    var ret = this.words[0];
    if (this.length === 2) {
      ret += this.words[1] * 0x4000000;
    } else if (this.length === 3 && this.words[2] === 0x01) {
      // NOTE: at this stage it is known that the top bit is set
      ret += 0x10000000000000 + (this.words[1] * 0x4000000);
    } else if (this.length > 2) {
      assert(false, 'Number can only safely store up to 53 bits');
    }
    return (this.negative !== 0) ? -ret : ret;
  };

  BN.prototype.toJSON = function toJSON () {
    return this.toString(16);
  };

  BN.prototype.toBuffer = function toBuffer (endian, length) {
    assert(typeof Buffer !== 'undefined');
    return this.toArrayLike(Buffer, endian, length);
  };

  BN.prototype.toArray = function toArray (endian, length) {
    return this.toArrayLike(Array, endian, length);
  };

  BN.prototype.toArrayLike = function toArrayLike (ArrayType, endian, length) {
    var byteLength = this.byteLength();
    var reqLength = length || Math.max(1, byteLength);
    assert(byteLength <= reqLength, 'byte array longer than desired length');
    assert(reqLength > 0, 'Requested array length <= 0');

    this.strip();
    var littleEndian = endian === 'le';
    var res = new ArrayType(reqLength);

    var b, i;
    var q = this.clone();
    if (!littleEndian) {
      // Assume big-endian
      for (i = 0; i < reqLength - byteLength; i++) {
        res[i] = 0;
      }

      for (i = 0; !q.isZero(); i++) {
        b = q.andln(0xff);
        q.iushrn(8);

        res[reqLength - i - 1] = b;
      }
    } else {
      for (i = 0; !q.isZero(); i++) {
        b = q.andln(0xff);
        q.iushrn(8);

        res[i] = b;
      }

      for (; i < reqLength; i++) {
        res[i] = 0;
      }
    }

    return res;
  };

  if (Math.clz32) {
    BN.prototype._countBits = function _countBits (w) {
      return 32 - Math.clz32(w);
    };
  } else {
    BN.prototype._countBits = function _countBits (w) {
      var t = w;
      var r = 0;
      if (t >= 0x1000) {
        r += 13;
        t >>>= 13;
      }
      if (t >= 0x40) {
        r += 7;
        t >>>= 7;
      }
      if (t >= 0x8) {
        r += 4;
        t >>>= 4;
      }
      if (t >= 0x02) {
        r += 2;
        t >>>= 2;
      }
      return r + t;
    };
  }

  BN.prototype._zeroBits = function _zeroBits (w) {
    // Short-cut
    if (w === 0) return 26;

    var t = w;
    var r = 0;
    if ((t & 0x1fff) === 0) {
      r += 13;
      t >>>= 13;
    }
    if ((t & 0x7f) === 0) {
      r += 7;
      t >>>= 7;
    }
    if ((t & 0xf) === 0) {
      r += 4;
      t >>>= 4;
    }
    if ((t & 0x3) === 0) {
      r += 2;
      t >>>= 2;
    }
    if ((t & 0x1) === 0) {
      r++;
    }
    return r;
  };

  // Return number of used bits in a BN
  BN.prototype.bitLength = function bitLength () {
    var w = this.words[this.length - 1];
    var hi = this._countBits(w);
    return (this.length - 1) * 26 + hi;
  };

  function toBitArray (num) {
    var w = new Array(num.bitLength());

    for (var bit = 0; bit < w.length; bit++) {
      var off = (bit / 26) | 0;
      var wbit = bit % 26;

      w[bit] = (num.words[off] & (1 << wbit)) >>> wbit;
    }

    return w;
  }

  // Number of trailing zero bits
  BN.prototype.zeroBits = function zeroBits () {
    if (this.isZero()) return 0;

    var r = 0;
    for (var i = 0; i < this.length; i++) {
      var b = this._zeroBits(this.words[i]);
      r += b;
      if (b !== 26) break;
    }
    return r;
  };

  BN.prototype.byteLength = function byteLength () {
    return Math.ceil(this.bitLength() / 8);
  };

  BN.prototype.toTwos = function toTwos (width) {
    if (this.negative !== 0) {
      return this.abs().inotn(width).iaddn(1);
    }
    return this.clone();
  };

  BN.prototype.fromTwos = function fromTwos (width) {
    if (this.testn(width - 1)) {
      return this.notn(width).iaddn(1).ineg();
    }
    return this.clone();
  };

  BN.prototype.isNeg = function isNeg () {
    return this.negative !== 0;
  };

  // Return negative clone of `this`
  BN.prototype.neg = function neg () {
    return this.clone().ineg();
  };

  BN.prototype.ineg = function ineg () {
    if (!this.isZero()) {
      this.negative ^= 1;
    }

    return this;
  };

  // Or `num` with `this` in-place
  BN.prototype.iuor = function iuor (num) {
    while (this.length < num.length) {
      this.words[this.length++] = 0;
    }

    for (var i = 0; i < num.length; i++) {
      this.words[i] = this.words[i] | num.words[i];
    }

    return this.strip();
  };

  BN.prototype.ior = function ior (num) {
    assert((this.negative | num.negative) === 0);
    return this.iuor(num);
  };

  // Or `num` with `this`
  BN.prototype.or = function or (num) {
    if (this.length > num.length) return this.clone().ior(num);
    return num.clone().ior(this);
  };

  BN.prototype.uor = function uor (num) {
    if (this.length > num.length) return this.clone().iuor(num);
    return num.clone().iuor(this);
  };

  // And `num` with `this` in-place
  BN.prototype.iuand = function iuand (num) {
    // b = min-length(num, this)
    var b;
    if (this.length > num.length) {
      b = num;
    } else {
      b = this;
    }

    for (var i = 0; i < b.length; i++) {
      this.words[i] = this.words[i] & num.words[i];
    }

    this.length = b.length;

    return this.strip();
  };

  BN.prototype.iand = function iand (num) {
    assert((this.negative | num.negative) === 0);
    return this.iuand(num);
  };

  // And `num` with `this`
  BN.prototype.and = function and (num) {
    if (this.length > num.length) return this.clone().iand(num);
    return num.clone().iand(this);
  };

  BN.prototype.uand = function uand (num) {
    if (this.length > num.length) return this.clone().iuand(num);
    return num.clone().iuand(this);
  };

  // Xor `num` with `this` in-place
  BN.prototype.iuxor = function iuxor (num) {
    // a.length > b.length
    var a;
    var b;
    if (this.length > num.length) {
      a = this;
      b = num;
    } else {
      a = num;
      b = this;
    }

    for (var i = 0; i < b.length; i++) {
      this.words[i] = a.words[i] ^ b.words[i];
    }

    if (this !== a) {
      for (; i < a.length; i++) {
        this.words[i] = a.words[i];
      }
    }

    this.length = a.length;

    return this.strip();
  };

  BN.prototype.ixor = function ixor (num) {
    assert((this.negative | num.negative) === 0);
    return this.iuxor(num);
  };

  // Xor `num` with `this`
  BN.prototype.xor = function xor (num) {
    if (this.length > num.length) return this.clone().ixor(num);
    return num.clone().ixor(this);
  };

  BN.prototype.uxor = function uxor (num) {
    if (this.length > num.length) return this.clone().iuxor(num);
    return num.clone().iuxor(this);
  };

  // Not ``this`` with ``width`` bitwidth
  BN.prototype.inotn = function inotn (width) {
    assert(typeof width === 'number' && width >= 0);

    var bytesNeeded = Math.ceil(width / 26) | 0;
    var bitsLeft = width % 26;

    // Extend the buffer with leading zeroes
    this._expand(bytesNeeded);

    if (bitsLeft > 0) {
      bytesNeeded--;
    }

    // Handle complete words
    for (var i = 0; i < bytesNeeded; i++) {
      this.words[i] = ~this.words[i] & 0x3ffffff;
    }

    // Handle the residue
    if (bitsLeft > 0) {
      this.words[i] = ~this.words[i] & (0x3ffffff >> (26 - bitsLeft));
    }

    // And remove leading zeroes
    return this.strip();
  };

  BN.prototype.notn = function notn (width) {
    return this.clone().inotn(width);
  };

  // Set `bit` of `this`
  BN.prototype.setn = function setn (bit, val) {
    assert(typeof bit === 'number' && bit >= 0);

    var off = (bit / 26) | 0;
    var wbit = bit % 26;

    this._expand(off + 1);

    if (val) {
      this.words[off] = this.words[off] | (1 << wbit);
    } else {
      this.words[off] = this.words[off] & ~(1 << wbit);
    }

    return this.strip();
  };

  // Add `num` to `this` in-place
  BN.prototype.iadd = function iadd (num) {
    var r;

    // negative + positive
    if (this.negative !== 0 && num.negative === 0) {
      this.negative = 0;
      r = this.isub(num);
      this.negative ^= 1;
      return this._normSign();

    // positive + negative
    } else if (this.negative === 0 && num.negative !== 0) {
      num.negative = 0;
      r = this.isub(num);
      num.negative = 1;
      return r._normSign();
    }

    // a.length > b.length
    var a, b;
    if (this.length > num.length) {
      a = this;
      b = num;
    } else {
      a = num;
      b = this;
    }

    var carry = 0;
    for (var i = 0; i < b.length; i++) {
      r = (a.words[i] | 0) + (b.words[i] | 0) + carry;
      this.words[i] = r & 0x3ffffff;
      carry = r >>> 26;
    }
    for (; carry !== 0 && i < a.length; i++) {
      r = (a.words[i] | 0) + carry;
      this.words[i] = r & 0x3ffffff;
      carry = r >>> 26;
    }

    this.length = a.length;
    if (carry !== 0) {
      this.words[this.length] = carry;
      this.length++;
    // Copy the rest of the words
    } else if (a !== this) {
      for (; i < a.length; i++) {
        this.words[i] = a.words[i];
      }
    }

    return this;
  };

  // Add `num` to `this`
  BN.prototype.add = function add (num) {
    var res;
    if (num.negative !== 0 && this.negative === 0) {
      num.negative = 0;
      res = this.sub(num);
      num.negative ^= 1;
      return res;
    } else if (num.negative === 0 && this.negative !== 0) {
      this.negative = 0;
      res = num.sub(this);
      this.negative = 1;
      return res;
    }

    if (this.length > num.length) return this.clone().iadd(num);

    return num.clone().iadd(this);
  };

  // Subtract `num` from `this` in-place
  BN.prototype.isub = function isub (num) {
    // this - (-num) = this + num
    if (num.negative !== 0) {
      num.negative = 0;
      var r = this.iadd(num);
      num.negative = 1;
      return r._normSign();

    // -this - num = -(this + num)
    } else if (this.negative !== 0) {
      this.negative = 0;
      this.iadd(num);
      this.negative = 1;
      return this._normSign();
    }

    // At this point both numbers are positive
    var cmp = this.cmp(num);

    // Optimization - zeroify
    if (cmp === 0) {
      this.negative = 0;
      this.length = 1;
      this.words[0] = 0;
      return this;
    }

    // a > b
    var a, b;
    if (cmp > 0) {
      a = this;
      b = num;
    } else {
      a = num;
      b = this;
    }

    var carry = 0;
    for (var i = 0; i < b.length; i++) {
      r = (a.words[i] | 0) - (b.words[i] | 0) + carry;
      carry = r >> 26;
      this.words[i] = r & 0x3ffffff;
    }
    for (; carry !== 0 && i < a.length; i++) {
      r = (a.words[i] | 0) + carry;
      carry = r >> 26;
      this.words[i] = r & 0x3ffffff;
    }

    // Copy rest of the words
    if (carry === 0 && i < a.length && a !== this) {
      for (; i < a.length; i++) {
        this.words[i] = a.words[i];
      }
    }

    this.length = Math.max(this.length, i);

    if (a !== this) {
      this.negative = 1;
    }

    return this.strip();
  };

  // Subtract `num` from `this`
  BN.prototype.sub = function sub (num) {
    return this.clone().isub(num);
  };

  function smallMulTo (self, num, out) {
    out.negative = num.negative ^ self.negative;
    var len = (self.length + num.length) | 0;
    out.length = len;
    len = (len - 1) | 0;

    // Peel one iteration (compiler can't do it, because of code complexity)
    var a = self.words[0] | 0;
    var b = num.words[0] | 0;
    var r = a * b;

    var lo = r & 0x3ffffff;
    var carry = (r / 0x4000000) | 0;
    out.words[0] = lo;

    for (var k = 1; k < len; k++) {
      // Sum all words with the same `i + j = k` and accumulate `ncarry`,
      // note that ncarry could be >= 0x3ffffff
      var ncarry = carry >>> 26;
      var rword = carry & 0x3ffffff;
      var maxJ = Math.min(k, num.length - 1);
      for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
        var i = (k - j) | 0;
        a = self.words[i] | 0;
        b = num.words[j] | 0;
        r = a * b + rword;
        ncarry += (r / 0x4000000) | 0;
        rword = r & 0x3ffffff;
      }
      out.words[k] = rword | 0;
      carry = ncarry | 0;
    }
    if (carry !== 0) {
      out.words[k] = carry | 0;
    } else {
      out.length--;
    }

    return out.strip();
  }

  // TODO(indutny): it may be reasonable to omit it for users who don't need
  // to work with 256-bit numbers, otherwise it gives 20% improvement for 256-bit
  // multiplication (like elliptic secp256k1).
  var comb10MulTo = function comb10MulTo (self, num, out) {
    var a = self.words;
    var b = num.words;
    var o = out.words;
    var c = 0;
    var lo;
    var mid;
    var hi;
    var a0 = a[0] | 0;
    var al0 = a0 & 0x1fff;
    var ah0 = a0 >>> 13;
    var a1 = a[1] | 0;
    var al1 = a1 & 0x1fff;
    var ah1 = a1 >>> 13;
    var a2 = a[2] | 0;
    var al2 = a2 & 0x1fff;
    var ah2 = a2 >>> 13;
    var a3 = a[3] | 0;
    var al3 = a3 & 0x1fff;
    var ah3 = a3 >>> 13;
    var a4 = a[4] | 0;
    var al4 = a4 & 0x1fff;
    var ah4 = a4 >>> 13;
    var a5 = a[5] | 0;
    var al5 = a5 & 0x1fff;
    var ah5 = a5 >>> 13;
    var a6 = a[6] | 0;
    var al6 = a6 & 0x1fff;
    var ah6 = a6 >>> 13;
    var a7 = a[7] | 0;
    var al7 = a7 & 0x1fff;
    var ah7 = a7 >>> 13;
    var a8 = a[8] | 0;
    var al8 = a8 & 0x1fff;
    var ah8 = a8 >>> 13;
    var a9 = a[9] | 0;
    var al9 = a9 & 0x1fff;
    var ah9 = a9 >>> 13;
    var b0 = b[0] | 0;
    var bl0 = b0 & 0x1fff;
    var bh0 = b0 >>> 13;
    var b1 = b[1] | 0;
    var bl1 = b1 & 0x1fff;
    var bh1 = b1 >>> 13;
    var b2 = b[2] | 0;
    var bl2 = b2 & 0x1fff;
    var bh2 = b2 >>> 13;
    var b3 = b[3] | 0;
    var bl3 = b3 & 0x1fff;
    var bh3 = b3 >>> 13;
    var b4 = b[4] | 0;
    var bl4 = b4 & 0x1fff;
    var bh4 = b4 >>> 13;
    var b5 = b[5] | 0;
    var bl5 = b5 & 0x1fff;
    var bh5 = b5 >>> 13;
    var b6 = b[6] | 0;
    var bl6 = b6 & 0x1fff;
    var bh6 = b6 >>> 13;
    var b7 = b[7] | 0;
    var bl7 = b7 & 0x1fff;
    var bh7 = b7 >>> 13;
    var b8 = b[8] | 0;
    var bl8 = b8 & 0x1fff;
    var bh8 = b8 >>> 13;
    var b9 = b[9] | 0;
    var bl9 = b9 & 0x1fff;
    var bh9 = b9 >>> 13;

    out.negative = self.negative ^ num.negative;
    out.length = 19;
    /* k = 0 */
    lo = Math.imul(al0, bl0);
    mid = Math.imul(al0, bh0);
    mid = (mid + Math.imul(ah0, bl0)) | 0;
    hi = Math.imul(ah0, bh0);
    var w0 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w0 >>> 26)) | 0;
    w0 &= 0x3ffffff;
    /* k = 1 */
    lo = Math.imul(al1, bl0);
    mid = Math.imul(al1, bh0);
    mid = (mid + Math.imul(ah1, bl0)) | 0;
    hi = Math.imul(ah1, bh0);
    lo = (lo + Math.imul(al0, bl1)) | 0;
    mid = (mid + Math.imul(al0, bh1)) | 0;
    mid = (mid + Math.imul(ah0, bl1)) | 0;
    hi = (hi + Math.imul(ah0, bh1)) | 0;
    var w1 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w1 >>> 26)) | 0;
    w1 &= 0x3ffffff;
    /* k = 2 */
    lo = Math.imul(al2, bl0);
    mid = Math.imul(al2, bh0);
    mid = (mid + Math.imul(ah2, bl0)) | 0;
    hi = Math.imul(ah2, bh0);
    lo = (lo + Math.imul(al1, bl1)) | 0;
    mid = (mid + Math.imul(al1, bh1)) | 0;
    mid = (mid + Math.imul(ah1, bl1)) | 0;
    hi = (hi + Math.imul(ah1, bh1)) | 0;
    lo = (lo + Math.imul(al0, bl2)) | 0;
    mid = (mid + Math.imul(al0, bh2)) | 0;
    mid = (mid + Math.imul(ah0, bl2)) | 0;
    hi = (hi + Math.imul(ah0, bh2)) | 0;
    var w2 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w2 >>> 26)) | 0;
    w2 &= 0x3ffffff;
    /* k = 3 */
    lo = Math.imul(al3, bl0);
    mid = Math.imul(al3, bh0);
    mid = (mid + Math.imul(ah3, bl0)) | 0;
    hi = Math.imul(ah3, bh0);
    lo = (lo + Math.imul(al2, bl1)) | 0;
    mid = (mid + Math.imul(al2, bh1)) | 0;
    mid = (mid + Math.imul(ah2, bl1)) | 0;
    hi = (hi + Math.imul(ah2, bh1)) | 0;
    lo = (lo + Math.imul(al1, bl2)) | 0;
    mid = (mid + Math.imul(al1, bh2)) | 0;
    mid = (mid + Math.imul(ah1, bl2)) | 0;
    hi = (hi + Math.imul(ah1, bh2)) | 0;
    lo = (lo + Math.imul(al0, bl3)) | 0;
    mid = (mid + Math.imul(al0, bh3)) | 0;
    mid = (mid + Math.imul(ah0, bl3)) | 0;
    hi = (hi + Math.imul(ah0, bh3)) | 0;
    var w3 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w3 >>> 26)) | 0;
    w3 &= 0x3ffffff;
    /* k = 4 */
    lo = Math.imul(al4, bl0);
    mid = Math.imul(al4, bh0);
    mid = (mid + Math.imul(ah4, bl0)) | 0;
    hi = Math.imul(ah4, bh0);
    lo = (lo + Math.imul(al3, bl1)) | 0;
    mid = (mid + Math.imul(al3, bh1)) | 0;
    mid = (mid + Math.imul(ah3, bl1)) | 0;
    hi = (hi + Math.imul(ah3, bh1)) | 0;
    lo = (lo + Math.imul(al2, bl2)) | 0;
    mid = (mid + Math.imul(al2, bh2)) | 0;
    mid = (mid + Math.imul(ah2, bl2)) | 0;
    hi = (hi + Math.imul(ah2, bh2)) | 0;
    lo = (lo + Math.imul(al1, bl3)) | 0;
    mid = (mid + Math.imul(al1, bh3)) | 0;
    mid = (mid + Math.imul(ah1, bl3)) | 0;
    hi = (hi + Math.imul(ah1, bh3)) | 0;
    lo = (lo + Math.imul(al0, bl4)) | 0;
    mid = (mid + Math.imul(al0, bh4)) | 0;
    mid = (mid + Math.imul(ah0, bl4)) | 0;
    hi = (hi + Math.imul(ah0, bh4)) | 0;
    var w4 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w4 >>> 26)) | 0;
    w4 &= 0x3ffffff;
    /* k = 5 */
    lo = Math.imul(al5, bl0);
    mid = Math.imul(al5, bh0);
    mid = (mid + Math.imul(ah5, bl0)) | 0;
    hi = Math.imul(ah5, bh0);
    lo = (lo + Math.imul(al4, bl1)) | 0;
    mid = (mid + Math.imul(al4, bh1)) | 0;
    mid = (mid + Math.imul(ah4, bl1)) | 0;
    hi = (hi + Math.imul(ah4, bh1)) | 0;
    lo = (lo + Math.imul(al3, bl2)) | 0;
    mid = (mid + Math.imul(al3, bh2)) | 0;
    mid = (mid + Math.imul(ah3, bl2)) | 0;
    hi = (hi + Math.imul(ah3, bh2)) | 0;
    lo = (lo + Math.imul(al2, bl3)) | 0;
    mid = (mid + Math.imul(al2, bh3)) | 0;
    mid = (mid + Math.imul(ah2, bl3)) | 0;
    hi = (hi + Math.imul(ah2, bh3)) | 0;
    lo = (lo + Math.imul(al1, bl4)) | 0;
    mid = (mid + Math.imul(al1, bh4)) | 0;
    mid = (mid + Math.imul(ah1, bl4)) | 0;
    hi = (hi + Math.imul(ah1, bh4)) | 0;
    lo = (lo + Math.imul(al0, bl5)) | 0;
    mid = (mid + Math.imul(al0, bh5)) | 0;
    mid = (mid + Math.imul(ah0, bl5)) | 0;
    hi = (hi + Math.imul(ah0, bh5)) | 0;
    var w5 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w5 >>> 26)) | 0;
    w5 &= 0x3ffffff;
    /* k = 6 */
    lo = Math.imul(al6, bl0);
    mid = Math.imul(al6, bh0);
    mid = (mid + Math.imul(ah6, bl0)) | 0;
    hi = Math.imul(ah6, bh0);
    lo = (lo + Math.imul(al5, bl1)) | 0;
    mid = (mid + Math.imul(al5, bh1)) | 0;
    mid = (mid + Math.imul(ah5, bl1)) | 0;
    hi = (hi + Math.imul(ah5, bh1)) | 0;
    lo = (lo + Math.imul(al4, bl2)) | 0;
    mid = (mid + Math.imul(al4, bh2)) | 0;
    mid = (mid + Math.imul(ah4, bl2)) | 0;
    hi = (hi + Math.imul(ah4, bh2)) | 0;
    lo = (lo + Math.imul(al3, bl3)) | 0;
    mid = (mid + Math.imul(al3, bh3)) | 0;
    mid = (mid + Math.imul(ah3, bl3)) | 0;
    hi = (hi + Math.imul(ah3, bh3)) | 0;
    lo = (lo + Math.imul(al2, bl4)) | 0;
    mid = (mid + Math.imul(al2, bh4)) | 0;
    mid = (mid + Math.imul(ah2, bl4)) | 0;
    hi = (hi + Math.imul(ah2, bh4)) | 0;
    lo = (lo + Math.imul(al1, bl5)) | 0;
    mid = (mid + Math.imul(al1, bh5)) | 0;
    mid = (mid + Math.imul(ah1, bl5)) | 0;
    hi = (hi + Math.imul(ah1, bh5)) | 0;
    lo = (lo + Math.imul(al0, bl6)) | 0;
    mid = (mid + Math.imul(al0, bh6)) | 0;
    mid = (mid + Math.imul(ah0, bl6)) | 0;
    hi = (hi + Math.imul(ah0, bh6)) | 0;
    var w6 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w6 >>> 26)) | 0;
    w6 &= 0x3ffffff;
    /* k = 7 */
    lo = Math.imul(al7, bl0);
    mid = Math.imul(al7, bh0);
    mid = (mid + Math.imul(ah7, bl0)) | 0;
    hi = Math.imul(ah7, bh0);
    lo = (lo + Math.imul(al6, bl1)) | 0;
    mid = (mid + Math.imul(al6, bh1)) | 0;
    mid = (mid + Math.imul(ah6, bl1)) | 0;
    hi = (hi + Math.imul(ah6, bh1)) | 0;
    lo = (lo + Math.imul(al5, bl2)) | 0;
    mid = (mid + Math.imul(al5, bh2)) | 0;
    mid = (mid + Math.imul(ah5, bl2)) | 0;
    hi = (hi + Math.imul(ah5, bh2)) | 0;
    lo = (lo + Math.imul(al4, bl3)) | 0;
    mid = (mid + Math.imul(al4, bh3)) | 0;
    mid = (mid + Math.imul(ah4, bl3)) | 0;
    hi = (hi + Math.imul(ah4, bh3)) | 0;
    lo = (lo + Math.imul(al3, bl4)) | 0;
    mid = (mid + Math.imul(al3, bh4)) | 0;
    mid = (mid + Math.imul(ah3, bl4)) | 0;
    hi = (hi + Math.imul(ah3, bh4)) | 0;
    lo = (lo + Math.imul(al2, bl5)) | 0;
    mid = (mid + Math.imul(al2, bh5)) | 0;
    mid = (mid + Math.imul(ah2, bl5)) | 0;
    hi = (hi + Math.imul(ah2, bh5)) | 0;
    lo = (lo + Math.imul(al1, bl6)) | 0;
    mid = (mid + Math.imul(al1, bh6)) | 0;
    mid = (mid + Math.imul(ah1, bl6)) | 0;
    hi = (hi + Math.imul(ah1, bh6)) | 0;
    lo = (lo + Math.imul(al0, bl7)) | 0;
    mid = (mid + Math.imul(al0, bh7)) | 0;
    mid = (mid + Math.imul(ah0, bl7)) | 0;
    hi = (hi + Math.imul(ah0, bh7)) | 0;
    var w7 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w7 >>> 26)) | 0;
    w7 &= 0x3ffffff;
    /* k = 8 */
    lo = Math.imul(al8, bl0);
    mid = Math.imul(al8, bh0);
    mid = (mid + Math.imul(ah8, bl0)) | 0;
    hi = Math.imul(ah8, bh0);
    lo = (lo + Math.imul(al7, bl1)) | 0;
    mid = (mid + Math.imul(al7, bh1)) | 0;
    mid = (mid + Math.imul(ah7, bl1)) | 0;
    hi = (hi + Math.imul(ah7, bh1)) | 0;
    lo = (lo + Math.imul(al6, bl2)) | 0;
    mid = (mid + Math.imul(al6, bh2)) | 0;
    mid = (mid + Math.imul(ah6, bl2)) | 0;
    hi = (hi + Math.imul(ah6, bh2)) | 0;
    lo = (lo + Math.imul(al5, bl3)) | 0;
    mid = (mid + Math.imul(al5, bh3)) | 0;
    mid = (mid + Math.imul(ah5, bl3)) | 0;
    hi = (hi + Math.imul(ah5, bh3)) | 0;
    lo = (lo + Math.imul(al4, bl4)) | 0;
    mid = (mid + Math.imul(al4, bh4)) | 0;
    mid = (mid + Math.imul(ah4, bl4)) | 0;
    hi = (hi + Math.imul(ah4, bh4)) | 0;
    lo = (lo + Math.imul(al3, bl5)) | 0;
    mid = (mid + Math.imul(al3, bh5)) | 0;
    mid = (mid + Math.imul(ah3, bl5)) | 0;
    hi = (hi + Math.imul(ah3, bh5)) | 0;
    lo = (lo + Math.imul(al2, bl6)) | 0;
    mid = (mid + Math.imul(al2, bh6)) | 0;
    mid = (mid + Math.imul(ah2, bl6)) | 0;
    hi = (hi + Math.imul(ah2, bh6)) | 0;
    lo = (lo + Math.imul(al1, bl7)) | 0;
    mid = (mid + Math.imul(al1, bh7)) | 0;
    mid = (mid + Math.imul(ah1, bl7)) | 0;
    hi = (hi + Math.imul(ah1, bh7)) | 0;
    lo = (lo + Math.imul(al0, bl8)) | 0;
    mid = (mid + Math.imul(al0, bh8)) | 0;
    mid = (mid + Math.imul(ah0, bl8)) | 0;
    hi = (hi + Math.imul(ah0, bh8)) | 0;
    var w8 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w8 >>> 26)) | 0;
    w8 &= 0x3ffffff;
    /* k = 9 */
    lo = Math.imul(al9, bl0);
    mid = Math.imul(al9, bh0);
    mid = (mid + Math.imul(ah9, bl0)) | 0;
    hi = Math.imul(ah9, bh0);
    lo = (lo + Math.imul(al8, bl1)) | 0;
    mid = (mid + Math.imul(al8, bh1)) | 0;
    mid = (mid + Math.imul(ah8, bl1)) | 0;
    hi = (hi + Math.imul(ah8, bh1)) | 0;
    lo = (lo + Math.imul(al7, bl2)) | 0;
    mid = (mid + Math.imul(al7, bh2)) | 0;
    mid = (mid + Math.imul(ah7, bl2)) | 0;
    hi = (hi + Math.imul(ah7, bh2)) | 0;
    lo = (lo + Math.imul(al6, bl3)) | 0;
    mid = (mid + Math.imul(al6, bh3)) | 0;
    mid = (mid + Math.imul(ah6, bl3)) | 0;
    hi = (hi + Math.imul(ah6, bh3)) | 0;
    lo = (lo + Math.imul(al5, bl4)) | 0;
    mid = (mid + Math.imul(al5, bh4)) | 0;
    mid = (mid + Math.imul(ah5, bl4)) | 0;
    hi = (hi + Math.imul(ah5, bh4)) | 0;
    lo = (lo + Math.imul(al4, bl5)) | 0;
    mid = (mid + Math.imul(al4, bh5)) | 0;
    mid = (mid + Math.imul(ah4, bl5)) | 0;
    hi = (hi + Math.imul(ah4, bh5)) | 0;
    lo = (lo + Math.imul(al3, bl6)) | 0;
    mid = (mid + Math.imul(al3, bh6)) | 0;
    mid = (mid + Math.imul(ah3, bl6)) | 0;
    hi = (hi + Math.imul(ah3, bh6)) | 0;
    lo = (lo + Math.imul(al2, bl7)) | 0;
    mid = (mid + Math.imul(al2, bh7)) | 0;
    mid = (mid + Math.imul(ah2, bl7)) | 0;
    hi = (hi + Math.imul(ah2, bh7)) | 0;
    lo = (lo + Math.imul(al1, bl8)) | 0;
    mid = (mid + Math.imul(al1, bh8)) | 0;
    mid = (mid + Math.imul(ah1, bl8)) | 0;
    hi = (hi + Math.imul(ah1, bh8)) | 0;
    lo = (lo + Math.imul(al0, bl9)) | 0;
    mid = (mid + Math.imul(al0, bh9)) | 0;
    mid = (mid + Math.imul(ah0, bl9)) | 0;
    hi = (hi + Math.imul(ah0, bh9)) | 0;
    var w9 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w9 >>> 26)) | 0;
    w9 &= 0x3ffffff;
    /* k = 10 */
    lo = Math.imul(al9, bl1);
    mid = Math.imul(al9, bh1);
    mid = (mid + Math.imul(ah9, bl1)) | 0;
    hi = Math.imul(ah9, bh1);
    lo = (lo + Math.imul(al8, bl2)) | 0;
    mid = (mid + Math.imul(al8, bh2)) | 0;
    mid = (mid + Math.imul(ah8, bl2)) | 0;
    hi = (hi + Math.imul(ah8, bh2)) | 0;
    lo = (lo + Math.imul(al7, bl3)) | 0;
    mid = (mid + Math.imul(al7, bh3)) | 0;
    mid = (mid + Math.imul(ah7, bl3)) | 0;
    hi = (hi + Math.imul(ah7, bh3)) | 0;
    lo = (lo + Math.imul(al6, bl4)) | 0;
    mid = (mid + Math.imul(al6, bh4)) | 0;
    mid = (mid + Math.imul(ah6, bl4)) | 0;
    hi = (hi + Math.imul(ah6, bh4)) | 0;
    lo = (lo + Math.imul(al5, bl5)) | 0;
    mid = (mid + Math.imul(al5, bh5)) | 0;
    mid = (mid + Math.imul(ah5, bl5)) | 0;
    hi = (hi + Math.imul(ah5, bh5)) | 0;
    lo = (lo + Math.imul(al4, bl6)) | 0;
    mid = (mid + Math.imul(al4, bh6)) | 0;
    mid = (mid + Math.imul(ah4, bl6)) | 0;
    hi = (hi + Math.imul(ah4, bh6)) | 0;
    lo = (lo + Math.imul(al3, bl7)) | 0;
    mid = (mid + Math.imul(al3, bh7)) | 0;
    mid = (mid + Math.imul(ah3, bl7)) | 0;
    hi = (hi + Math.imul(ah3, bh7)) | 0;
    lo = (lo + Math.imul(al2, bl8)) | 0;
    mid = (mid + Math.imul(al2, bh8)) | 0;
    mid = (mid + Math.imul(ah2, bl8)) | 0;
    hi = (hi + Math.imul(ah2, bh8)) | 0;
    lo = (lo + Math.imul(al1, bl9)) | 0;
    mid = (mid + Math.imul(al1, bh9)) | 0;
    mid = (mid + Math.imul(ah1, bl9)) | 0;
    hi = (hi + Math.imul(ah1, bh9)) | 0;
    var w10 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w10 >>> 26)) | 0;
    w10 &= 0x3ffffff;
    /* k = 11 */
    lo = Math.imul(al9, bl2);
    mid = Math.imul(al9, bh2);
    mid = (mid + Math.imul(ah9, bl2)) | 0;
    hi = Math.imul(ah9, bh2);
    lo = (lo + Math.imul(al8, bl3)) | 0;
    mid = (mid + Math.imul(al8, bh3)) | 0;
    mid = (mid + Math.imul(ah8, bl3)) | 0;
    hi = (hi + Math.imul(ah8, bh3)) | 0;
    lo = (lo + Math.imul(al7, bl4)) | 0;
    mid = (mid + Math.imul(al7, bh4)) | 0;
    mid = (mid + Math.imul(ah7, bl4)) | 0;
    hi = (hi + Math.imul(ah7, bh4)) | 0;
    lo = (lo + Math.imul(al6, bl5)) | 0;
    mid = (mid + Math.imul(al6, bh5)) | 0;
    mid = (mid + Math.imul(ah6, bl5)) | 0;
    hi = (hi + Math.imul(ah6, bh5)) | 0;
    lo = (lo + Math.imul(al5, bl6)) | 0;
    mid = (mid + Math.imul(al5, bh6)) | 0;
    mid = (mid + Math.imul(ah5, bl6)) | 0;
    hi = (hi + Math.imul(ah5, bh6)) | 0;
    lo = (lo + Math.imul(al4, bl7)) | 0;
    mid = (mid + Math.imul(al4, bh7)) | 0;
    mid = (mid + Math.imul(ah4, bl7)) | 0;
    hi = (hi + Math.imul(ah4, bh7)) | 0;
    lo = (lo + Math.imul(al3, bl8)) | 0;
    mid = (mid + Math.imul(al3, bh8)) | 0;
    mid = (mid + Math.imul(ah3, bl8)) | 0;
    hi = (hi + Math.imul(ah3, bh8)) | 0;
    lo = (lo + Math.imul(al2, bl9)) | 0;
    mid = (mid + Math.imul(al2, bh9)) | 0;
    mid = (mid + Math.imul(ah2, bl9)) | 0;
    hi = (hi + Math.imul(ah2, bh9)) | 0;
    var w11 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w11 >>> 26)) | 0;
    w11 &= 0x3ffffff;
    /* k = 12 */
    lo = Math.imul(al9, bl3);
    mid = Math.imul(al9, bh3);
    mid = (mid + Math.imul(ah9, bl3)) | 0;
    hi = Math.imul(ah9, bh3);
    lo = (lo + Math.imul(al8, bl4)) | 0;
    mid = (mid + Math.imul(al8, bh4)) | 0;
    mid = (mid + Math.imul(ah8, bl4)) | 0;
    hi = (hi + Math.imul(ah8, bh4)) | 0;
    lo = (lo + Math.imul(al7, bl5)) | 0;
    mid = (mid + Math.imul(al7, bh5)) | 0;
    mid = (mid + Math.imul(ah7, bl5)) | 0;
    hi = (hi + Math.imul(ah7, bh5)) | 0;
    lo = (lo + Math.imul(al6, bl6)) | 0;
    mid = (mid + Math.imul(al6, bh6)) | 0;
    mid = (mid + Math.imul(ah6, bl6)) | 0;
    hi = (hi + Math.imul(ah6, bh6)) | 0;
    lo = (lo + Math.imul(al5, bl7)) | 0;
    mid = (mid + Math.imul(al5, bh7)) | 0;
    mid = (mid + Math.imul(ah5, bl7)) | 0;
    hi = (hi + Math.imul(ah5, bh7)) | 0;
    lo = (lo + Math.imul(al4, bl8)) | 0;
    mid = (mid + Math.imul(al4, bh8)) | 0;
    mid = (mid + Math.imul(ah4, bl8)) | 0;
    hi = (hi + Math.imul(ah4, bh8)) | 0;
    lo = (lo + Math.imul(al3, bl9)) | 0;
    mid = (mid + Math.imul(al3, bh9)) | 0;
    mid = (mid + Math.imul(ah3, bl9)) | 0;
    hi = (hi + Math.imul(ah3, bh9)) | 0;
    var w12 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w12 >>> 26)) | 0;
    w12 &= 0x3ffffff;
    /* k = 13 */
    lo = Math.imul(al9, bl4);
    mid = Math.imul(al9, bh4);
    mid = (mid + Math.imul(ah9, bl4)) | 0;
    hi = Math.imul(ah9, bh4);
    lo = (lo + Math.imul(al8, bl5)) | 0;
    mid = (mid + Math.imul(al8, bh5)) | 0;
    mid = (mid + Math.imul(ah8, bl5)) | 0;
    hi = (hi + Math.imul(ah8, bh5)) | 0;
    lo = (lo + Math.imul(al7, bl6)) | 0;
    mid = (mid + Math.imul(al7, bh6)) | 0;
    mid = (mid + Math.imul(ah7, bl6)) | 0;
    hi = (hi + Math.imul(ah7, bh6)) | 0;
    lo = (lo + Math.imul(al6, bl7)) | 0;
    mid = (mid + Math.imul(al6, bh7)) | 0;
    mid = (mid + Math.imul(ah6, bl7)) | 0;
    hi = (hi + Math.imul(ah6, bh7)) | 0;
    lo = (lo + Math.imul(al5, bl8)) | 0;
    mid = (mid + Math.imul(al5, bh8)) | 0;
    mid = (mid + Math.imul(ah5, bl8)) | 0;
    hi = (hi + Math.imul(ah5, bh8)) | 0;
    lo = (lo + Math.imul(al4, bl9)) | 0;
    mid = (mid + Math.imul(al4, bh9)) | 0;
    mid = (mid + Math.imul(ah4, bl9)) | 0;
    hi = (hi + Math.imul(ah4, bh9)) | 0;
    var w13 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w13 >>> 26)) | 0;
    w13 &= 0x3ffffff;
    /* k = 14 */
    lo = Math.imul(al9, bl5);
    mid = Math.imul(al9, bh5);
    mid = (mid + Math.imul(ah9, bl5)) | 0;
    hi = Math.imul(ah9, bh5);
    lo = (lo + Math.imul(al8, bl6)) | 0;
    mid = (mid + Math.imul(al8, bh6)) | 0;
    mid = (mid + Math.imul(ah8, bl6)) | 0;
    hi = (hi + Math.imul(ah8, bh6)) | 0;
    lo = (lo + Math.imul(al7, bl7)) | 0;
    mid = (mid + Math.imul(al7, bh7)) | 0;
    mid = (mid + Math.imul(ah7, bl7)) | 0;
    hi = (hi + Math.imul(ah7, bh7)) | 0;
    lo = (lo + Math.imul(al6, bl8)) | 0;
    mid = (mid + Math.imul(al6, bh8)) | 0;
    mid = (mid + Math.imul(ah6, bl8)) | 0;
    hi = (hi + Math.imul(ah6, bh8)) | 0;
    lo = (lo + Math.imul(al5, bl9)) | 0;
    mid = (mid + Math.imul(al5, bh9)) | 0;
    mid = (mid + Math.imul(ah5, bl9)) | 0;
    hi = (hi + Math.imul(ah5, bh9)) | 0;
    var w14 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w14 >>> 26)) | 0;
    w14 &= 0x3ffffff;
    /* k = 15 */
    lo = Math.imul(al9, bl6);
    mid = Math.imul(al9, bh6);
    mid = (mid + Math.imul(ah9, bl6)) | 0;
    hi = Math.imul(ah9, bh6);
    lo = (lo + Math.imul(al8, bl7)) | 0;
    mid = (mid + Math.imul(al8, bh7)) | 0;
    mid = (mid + Math.imul(ah8, bl7)) | 0;
    hi = (hi + Math.imul(ah8, bh7)) | 0;
    lo = (lo + Math.imul(al7, bl8)) | 0;
    mid = (mid + Math.imul(al7, bh8)) | 0;
    mid = (mid + Math.imul(ah7, bl8)) | 0;
    hi = (hi + Math.imul(ah7, bh8)) | 0;
    lo = (lo + Math.imul(al6, bl9)) | 0;
    mid = (mid + Math.imul(al6, bh9)) | 0;
    mid = (mid + Math.imul(ah6, bl9)) | 0;
    hi = (hi + Math.imul(ah6, bh9)) | 0;
    var w15 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w15 >>> 26)) | 0;
    w15 &= 0x3ffffff;
    /* k = 16 */
    lo = Math.imul(al9, bl7);
    mid = Math.imul(al9, bh7);
    mid = (mid + Math.imul(ah9, bl7)) | 0;
    hi = Math.imul(ah9, bh7);
    lo = (lo + Math.imul(al8, bl8)) | 0;
    mid = (mid + Math.imul(al8, bh8)) | 0;
    mid = (mid + Math.imul(ah8, bl8)) | 0;
    hi = (hi + Math.imul(ah8, bh8)) | 0;
    lo = (lo + Math.imul(al7, bl9)) | 0;
    mid = (mid + Math.imul(al7, bh9)) | 0;
    mid = (mid + Math.imul(ah7, bl9)) | 0;
    hi = (hi + Math.imul(ah7, bh9)) | 0;
    var w16 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w16 >>> 26)) | 0;
    w16 &= 0x3ffffff;
    /* k = 17 */
    lo = Math.imul(al9, bl8);
    mid = Math.imul(al9, bh8);
    mid = (mid + Math.imul(ah9, bl8)) | 0;
    hi = Math.imul(ah9, bh8);
    lo = (lo + Math.imul(al8, bl9)) | 0;
    mid = (mid + Math.imul(al8, bh9)) | 0;
    mid = (mid + Math.imul(ah8, bl9)) | 0;
    hi = (hi + Math.imul(ah8, bh9)) | 0;
    var w17 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w17 >>> 26)) | 0;
    w17 &= 0x3ffffff;
    /* k = 18 */
    lo = Math.imul(al9, bl9);
    mid = Math.imul(al9, bh9);
    mid = (mid + Math.imul(ah9, bl9)) | 0;
    hi = Math.imul(ah9, bh9);
    var w18 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w18 >>> 26)) | 0;
    w18 &= 0x3ffffff;
    o[0] = w0;
    o[1] = w1;
    o[2] = w2;
    o[3] = w3;
    o[4] = w4;
    o[5] = w5;
    o[6] = w6;
    o[7] = w7;
    o[8] = w8;
    o[9] = w9;
    o[10] = w10;
    o[11] = w11;
    o[12] = w12;
    o[13] = w13;
    o[14] = w14;
    o[15] = w15;
    o[16] = w16;
    o[17] = w17;
    o[18] = w18;
    if (c !== 0) {
      o[19] = c;
      out.length++;
    }
    return out;
  };

  // Polyfill comb
  if (!Math.imul) {
    comb10MulTo = smallMulTo;
  }

  function bigMulTo (self, num, out) {
    out.negative = num.negative ^ self.negative;
    out.length = self.length + num.length;

    var carry = 0;
    var hncarry = 0;
    for (var k = 0; k < out.length - 1; k++) {
      // Sum all words with the same `i + j = k` and accumulate `ncarry`,
      // note that ncarry could be >= 0x3ffffff
      var ncarry = hncarry;
      hncarry = 0;
      var rword = carry & 0x3ffffff;
      var maxJ = Math.min(k, num.length - 1);
      for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
        var i = k - j;
        var a = self.words[i] | 0;
        var b = num.words[j] | 0;
        var r = a * b;

        var lo = r & 0x3ffffff;
        ncarry = (ncarry + ((r / 0x4000000) | 0)) | 0;
        lo = (lo + rword) | 0;
        rword = lo & 0x3ffffff;
        ncarry = (ncarry + (lo >>> 26)) | 0;

        hncarry += ncarry >>> 26;
        ncarry &= 0x3ffffff;
      }
      out.words[k] = rword;
      carry = ncarry;
      ncarry = hncarry;
    }
    if (carry !== 0) {
      out.words[k] = carry;
    } else {
      out.length--;
    }

    return out.strip();
  }

  function jumboMulTo (self, num, out) {
    var fftm = new FFTM();
    return fftm.mulp(self, num, out);
  }

  BN.prototype.mulTo = function mulTo (num, out) {
    var res;
    var len = this.length + num.length;
    if (this.length === 10 && num.length === 10) {
      res = comb10MulTo(this, num, out);
    } else if (len < 63) {
      res = smallMulTo(this, num, out);
    } else if (len < 1024) {
      res = bigMulTo(this, num, out);
    } else {
      res = jumboMulTo(this, num, out);
    }

    return res;
  };

  // Cooley-Tukey algorithm for FFT
  // slightly revisited to rely on looping instead of recursion

  function FFTM (x, y) {
    this.x = x;
    this.y = y;
  }

  FFTM.prototype.makeRBT = function makeRBT (N) {
    var t = new Array(N);
    var l = BN.prototype._countBits(N) - 1;
    for (var i = 0; i < N; i++) {
      t[i] = this.revBin(i, l, N);
    }

    return t;
  };

  // Returns binary-reversed representation of `x`
  FFTM.prototype.revBin = function revBin (x, l, N) {
    if (x === 0 || x === N - 1) return x;

    var rb = 0;
    for (var i = 0; i < l; i++) {
      rb |= (x & 1) << (l - i - 1);
      x >>= 1;
    }

    return rb;
  };

  // Performs "tweedling" phase, therefore 'emulating'
  // behaviour of the recursive algorithm
  FFTM.prototype.permute = function permute (rbt, rws, iws, rtws, itws, N) {
    for (var i = 0; i < N; i++) {
      rtws[i] = rws[rbt[i]];
      itws[i] = iws[rbt[i]];
    }
  };

  FFTM.prototype.transform = function transform (rws, iws, rtws, itws, N, rbt) {
    this.permute(rbt, rws, iws, rtws, itws, N);

    for (var s = 1; s < N; s <<= 1) {
      var l = s << 1;

      var rtwdf = Math.cos(2 * Math.PI / l);
      var itwdf = Math.sin(2 * Math.PI / l);

      for (var p = 0; p < N; p += l) {
        var rtwdf_ = rtwdf;
        var itwdf_ = itwdf;

        for (var j = 0; j < s; j++) {
          var re = rtws[p + j];
          var ie = itws[p + j];

          var ro = rtws[p + j + s];
          var io = itws[p + j + s];

          var rx = rtwdf_ * ro - itwdf_ * io;

          io = rtwdf_ * io + itwdf_ * ro;
          ro = rx;

          rtws[p + j] = re + ro;
          itws[p + j] = ie + io;

          rtws[p + j + s] = re - ro;
          itws[p + j + s] = ie - io;

          /* jshint maxdepth : false */
          if (j !== l) {
            rx = rtwdf * rtwdf_ - itwdf * itwdf_;

            itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;
            rtwdf_ = rx;
          }
        }
      }
    }
  };

  FFTM.prototype.guessLen13b = function guessLen13b (n, m) {
    var N = Math.max(m, n) | 1;
    var odd = N & 1;
    var i = 0;
    for (N = N / 2 | 0; N; N = N >>> 1) {
      i++;
    }

    return 1 << i + 1 + odd;
  };

  FFTM.prototype.conjugate = function conjugate (rws, iws, N) {
    if (N <= 1) return;

    for (var i = 0; i < N / 2; i++) {
      var t = rws[i];

      rws[i] = rws[N - i - 1];
      rws[N - i - 1] = t;

      t = iws[i];

      iws[i] = -iws[N - i - 1];
      iws[N - i - 1] = -t;
    }
  };

  FFTM.prototype.normalize13b = function normalize13b (ws, N) {
    var carry = 0;
    for (var i = 0; i < N / 2; i++) {
      var w = Math.round(ws[2 * i + 1] / N) * 0x2000 +
        Math.round(ws[2 * i] / N) +
        carry;

      ws[i] = w & 0x3ffffff;

      if (w < 0x4000000) {
        carry = 0;
      } else {
        carry = w / 0x4000000 | 0;
      }
    }

    return ws;
  };

  FFTM.prototype.convert13b = function convert13b (ws, len, rws, N) {
    var carry = 0;
    for (var i = 0; i < len; i++) {
      carry = carry + (ws[i] | 0);

      rws[2 * i] = carry & 0x1fff; carry = carry >>> 13;
      rws[2 * i + 1] = carry & 0x1fff; carry = carry >>> 13;
    }

    // Pad with zeroes
    for (i = 2 * len; i < N; ++i) {
      rws[i] = 0;
    }

    assert(carry === 0);
    assert((carry & ~0x1fff) === 0);
  };

  FFTM.prototype.stub = function stub (N) {
    var ph = new Array(N);
    for (var i = 0; i < N; i++) {
      ph[i] = 0;
    }

    return ph;
  };

  FFTM.prototype.mulp = function mulp (x, y, out) {
    var N = 2 * this.guessLen13b(x.length, y.length);

    var rbt = this.makeRBT(N);

    var _ = this.stub(N);

    var rws = new Array(N);
    var rwst = new Array(N);
    var iwst = new Array(N);

    var nrws = new Array(N);
    var nrwst = new Array(N);
    var niwst = new Array(N);

    var rmws = out.words;
    rmws.length = N;

    this.convert13b(x.words, x.length, rws, N);
    this.convert13b(y.words, y.length, nrws, N);

    this.transform(rws, _, rwst, iwst, N, rbt);
    this.transform(nrws, _, nrwst, niwst, N, rbt);

    for (var i = 0; i < N; i++) {
      var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];
      iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];
      rwst[i] = rx;
    }

    this.conjugate(rwst, iwst, N);
    this.transform(rwst, iwst, rmws, _, N, rbt);
    this.conjugate(rmws, _, N);
    this.normalize13b(rmws, N);

    out.negative = x.negative ^ y.negative;
    out.length = x.length + y.length;
    return out.strip();
  };

  // Multiply `this` by `num`
  BN.prototype.mul = function mul (num) {
    var out = new BN(null);
    out.words = new Array(this.length + num.length);
    return this.mulTo(num, out);
  };

  // Multiply employing FFT
  BN.prototype.mulf = function mulf (num) {
    var out = new BN(null);
    out.words = new Array(this.length + num.length);
    return jumboMulTo(this, num, out);
  };

  // In-place Multiplication
  BN.prototype.imul = function imul (num) {
    return this.clone().mulTo(num, this);
  };

  BN.prototype.imuln = function imuln (num) {
    assert(typeof num === 'number');
    assert(num < 0x4000000);

    // Carry
    var carry = 0;
    for (var i = 0; i < this.length; i++) {
      var w = (this.words[i] | 0) * num;
      var lo = (w & 0x3ffffff) + (carry & 0x3ffffff);
      carry >>= 26;
      carry += (w / 0x4000000) | 0;
      // NOTE: lo is 27bit maximum
      carry += lo >>> 26;
      this.words[i] = lo & 0x3ffffff;
    }

    if (carry !== 0) {
      this.words[i] = carry;
      this.length++;
    }

    return this;
  };

  BN.prototype.muln = function muln (num) {
    return this.clone().imuln(num);
  };

  // `this` * `this`
  BN.prototype.sqr = function sqr () {
    return this.mul(this);
  };

  // `this` * `this` in-place
  BN.prototype.isqr = function isqr () {
    return this.imul(this.clone());
  };

  // Math.pow(`this`, `num`)
  BN.prototype.pow = function pow (num) {
    var w = toBitArray(num);
    if (w.length === 0) return new BN(1);

    // Skip leading zeroes
    var res = this;
    for (var i = 0; i < w.length; i++, res = res.sqr()) {
      if (w[i] !== 0) break;
    }

    if (++i < w.length) {
      for (var q = res.sqr(); i < w.length; i++, q = q.sqr()) {
        if (w[i] === 0) continue;

        res = res.mul(q);
      }
    }

    return res;
  };

  // Shift-left in-place
  BN.prototype.iushln = function iushln (bits) {
    assert(typeof bits === 'number' && bits >= 0);
    var r = bits % 26;
    var s = (bits - r) / 26;
    var carryMask = (0x3ffffff >>> (26 - r)) << (26 - r);
    var i;

    if (r !== 0) {
      var carry = 0;

      for (i = 0; i < this.length; i++) {
        var newCarry = this.words[i] & carryMask;
        var c = ((this.words[i] | 0) - newCarry) << r;
        this.words[i] = c | carry;
        carry = newCarry >>> (26 - r);
      }

      if (carry) {
        this.words[i] = carry;
        this.length++;
      }
    }

    if (s !== 0) {
      for (i = this.length - 1; i >= 0; i--) {
        this.words[i + s] = this.words[i];
      }

      for (i = 0; i < s; i++) {
        this.words[i] = 0;
      }

      this.length += s;
    }

    return this.strip();
  };

  BN.prototype.ishln = function ishln (bits) {
    // TODO(indutny): implement me
    assert(this.negative === 0);
    return this.iushln(bits);
  };

  // Shift-right in-place
  // NOTE: `hint` is a lowest bit before trailing zeroes
  // NOTE: if `extended` is present - it will be filled with destroyed bits
  BN.prototype.iushrn = function iushrn (bits, hint, extended) {
    assert(typeof bits === 'number' && bits >= 0);
    var h;
    if (hint) {
      h = (hint - (hint % 26)) / 26;
    } else {
      h = 0;
    }

    var r = bits % 26;
    var s = Math.min((bits - r) / 26, this.length);
    var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);
    var maskedWords = extended;

    h -= s;
    h = Math.max(0, h);

    // Extended mode, copy masked part
    if (maskedWords) {
      for (var i = 0; i < s; i++) {
        maskedWords.words[i] = this.words[i];
      }
      maskedWords.length = s;
    }

    if (s === 0) {
      // No-op, we should not move anything at all
    } else if (this.length > s) {
      this.length -= s;
      for (i = 0; i < this.length; i++) {
        this.words[i] = this.words[i + s];
      }
    } else {
      this.words[0] = 0;
      this.length = 1;
    }

    var carry = 0;
    for (i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--) {
      var word = this.words[i] | 0;
      this.words[i] = (carry << (26 - r)) | (word >>> r);
      carry = word & mask;
    }

    // Push carried bits as a mask
    if (maskedWords && carry !== 0) {
      maskedWords.words[maskedWords.length++] = carry;
    }

    if (this.length === 0) {
      this.words[0] = 0;
      this.length = 1;
    }

    return this.strip();
  };

  BN.prototype.ishrn = function ishrn (bits, hint, extended) {
    // TODO(indutny): implement me
    assert(this.negative === 0);
    return this.iushrn(bits, hint, extended);
  };

  // Shift-left
  BN.prototype.shln = function shln (bits) {
    return this.clone().ishln(bits);
  };

  BN.prototype.ushln = function ushln (bits) {
    return this.clone().iushln(bits);
  };

  // Shift-right
  BN.prototype.shrn = function shrn (bits) {
    return this.clone().ishrn(bits);
  };

  BN.prototype.ushrn = function ushrn (bits) {
    return this.clone().iushrn(bits);
  };

  // Test if n bit is set
  BN.prototype.testn = function testn (bit) {
    assert(typeof bit === 'number' && bit >= 0);
    var r = bit % 26;
    var s = (bit - r) / 26;
    var q = 1 << r;

    // Fast case: bit is much higher than all existing words
    if (this.length <= s) return false;

    // Check bit and return
    var w = this.words[s];

    return !!(w & q);
  };

  // Return only lowers bits of number (in-place)
  BN.prototype.imaskn = function imaskn (bits) {
    assert(typeof bits === 'number' && bits >= 0);
    var r = bits % 26;
    var s = (bits - r) / 26;

    assert(this.negative === 0, 'imaskn works only with positive numbers');

    if (this.length <= s) {
      return this;
    }

    if (r !== 0) {
      s++;
    }
    this.length = Math.min(s, this.length);

    if (r !== 0) {
      var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);
      this.words[this.length - 1] &= mask;
    }

    return this.strip();
  };

  // Return only lowers bits of number
  BN.prototype.maskn = function maskn (bits) {
    return this.clone().imaskn(bits);
  };

  // Add plain number `num` to `this`
  BN.prototype.iaddn = function iaddn (num) {
    assert(typeof num === 'number');
    assert(num < 0x4000000);
    if (num < 0) return this.isubn(-num);

    // Possible sign change
    if (this.negative !== 0) {
      if (this.length === 1 && (this.words[0] | 0) < num) {
        this.words[0] = num - (this.words[0] | 0);
        this.negative = 0;
        return this;
      }

      this.negative = 0;
      this.isubn(num);
      this.negative = 1;
      return this;
    }

    // Add without checks
    return this._iaddn(num);
  };

  BN.prototype._iaddn = function _iaddn (num) {
    this.words[0] += num;

    // Carry
    for (var i = 0; i < this.length && this.words[i] >= 0x4000000; i++) {
      this.words[i] -= 0x4000000;
      if (i === this.length - 1) {
        this.words[i + 1] = 1;
      } else {
        this.words[i + 1]++;
      }
    }
    this.length = Math.max(this.length, i + 1);

    return this;
  };

  // Subtract plain number `num` from `this`
  BN.prototype.isubn = function isubn (num) {
    assert(typeof num === 'number');
    assert(num < 0x4000000);
    if (num < 0) return this.iaddn(-num);

    if (this.negative !== 0) {
      this.negative = 0;
      this.iaddn(num);
      this.negative = 1;
      return this;
    }

    this.words[0] -= num;

    if (this.length === 1 && this.words[0] < 0) {
      this.words[0] = -this.words[0];
      this.negative = 1;
    } else {
      // Carry
      for (var i = 0; i < this.length && this.words[i] < 0; i++) {
        this.words[i] += 0x4000000;
        this.words[i + 1] -= 1;
      }
    }

    return this.strip();
  };

  BN.prototype.addn = function addn (num) {
    return this.clone().iaddn(num);
  };

  BN.prototype.subn = function subn (num) {
    return this.clone().isubn(num);
  };

  BN.prototype.iabs = function iabs () {
    this.negative = 0;

    return this;
  };

  BN.prototype.abs = function abs () {
    return this.clone().iabs();
  };

  BN.prototype._ishlnsubmul = function _ishlnsubmul (num, mul, shift) {
    var len = num.length + shift;
    var i;

    this._expand(len);

    var w;
    var carry = 0;
    for (i = 0; i < num.length; i++) {
      w = (this.words[i + shift] | 0) + carry;
      var right = (num.words[i] | 0) * mul;
      w -= right & 0x3ffffff;
      carry = (w >> 26) - ((right / 0x4000000) | 0);
      this.words[i + shift] = w & 0x3ffffff;
    }
    for (; i < this.length - shift; i++) {
      w = (this.words[i + shift] | 0) + carry;
      carry = w >> 26;
      this.words[i + shift] = w & 0x3ffffff;
    }

    if (carry === 0) return this.strip();

    // Subtraction overflow
    assert(carry === -1);
    carry = 0;
    for (i = 0; i < this.length; i++) {
      w = -(this.words[i] | 0) + carry;
      carry = w >> 26;
      this.words[i] = w & 0x3ffffff;
    }
    this.negative = 1;

    return this.strip();
  };

  BN.prototype._wordDiv = function _wordDiv (num, mode) {
    var shift = this.length - num.length;

    var a = this.clone();
    var b = num;

    // Normalize
    var bhi = b.words[b.length - 1] | 0;
    var bhiBits = this._countBits(bhi);
    shift = 26 - bhiBits;
    if (shift !== 0) {
      b = b.ushln(shift);
      a.iushln(shift);
      bhi = b.words[b.length - 1] | 0;
    }

    // Initialize quotient
    var m = a.length - b.length;
    var q;

    if (mode !== 'mod') {
      q = new BN(null);
      q.length = m + 1;
      q.words = new Array(q.length);
      for (var i = 0; i < q.length; i++) {
        q.words[i] = 0;
      }
    }

    var diff = a.clone()._ishlnsubmul(b, 1, m);
    if (diff.negative === 0) {
      a = diff;
      if (q) {
        q.words[m] = 1;
      }
    }

    for (var j = m - 1; j >= 0; j--) {
      var qj = (a.words[b.length + j] | 0) * 0x4000000 +
        (a.words[b.length + j - 1] | 0);

      // NOTE: (qj / bhi) is (0x3ffffff * 0x4000000 + 0x3ffffff) / 0x2000000 max
      // (0x7ffffff)
      qj = Math.min((qj / bhi) | 0, 0x3ffffff);

      a._ishlnsubmul(b, qj, j);
      while (a.negative !== 0) {
        qj--;
        a.negative = 0;
        a._ishlnsubmul(b, 1, j);
        if (!a.isZero()) {
          a.negative ^= 1;
        }
      }
      if (q) {
        q.words[j] = qj;
      }
    }
    if (q) {
      q.strip();
    }
    a.strip();

    // Denormalize
    if (mode !== 'div' && shift !== 0) {
      a.iushrn(shift);
    }

    return {
      div: q || null,
      mod: a
    };
  };

  // NOTE: 1) `mode` can be set to `mod` to request mod only,
  //       to `div` to request div only, or be absent to
  //       request both div & mod
  //       2) `positive` is true if unsigned mod is requested
  BN.prototype.divmod = function divmod (num, mode, positive) {
    assert(!num.isZero());

    if (this.isZero()) {
      return {
        div: new BN(0),
        mod: new BN(0)
      };
    }

    var div, mod, res;
    if (this.negative !== 0 && num.negative === 0) {
      res = this.neg().divmod(num, mode);

      if (mode !== 'mod') {
        div = res.div.neg();
      }

      if (mode !== 'div') {
        mod = res.mod.neg();
        if (positive && mod.negative !== 0) {
          mod.iadd(num);
        }
      }

      return {
        div: div,
        mod: mod
      };
    }

    if (this.negative === 0 && num.negative !== 0) {
      res = this.divmod(num.neg(), mode);

      if (mode !== 'mod') {
        div = res.div.neg();
      }

      return {
        div: div,
        mod: res.mod
      };
    }

    if ((this.negative & num.negative) !== 0) {
      res = this.neg().divmod(num.neg(), mode);

      if (mode !== 'div') {
        mod = res.mod.neg();
        if (positive && mod.negative !== 0) {
          mod.isub(num);
        }
      }

      return {
        div: res.div,
        mod: mod
      };
    }

    // Both numbers are positive at this point

    // Strip both numbers to approximate shift value
    if (num.length > this.length || this.cmp(num) < 0) {
      return {
        div: new BN(0),
        mod: this
      };
    }

    // Very short reduction
    if (num.length === 1) {
      if (mode === 'div') {
        return {
          div: this.divn(num.words[0]),
          mod: null
        };
      }

      if (mode === 'mod') {
        return {
          div: null,
          mod: new BN(this.modn(num.words[0]))
        };
      }

      return {
        div: this.divn(num.words[0]),
        mod: new BN(this.modn(num.words[0]))
      };
    }

    return this._wordDiv(num, mode);
  };

  // Find `this` / `num`
  BN.prototype.div = function div (num) {
    return this.divmod(num, 'div', false).div;
  };

  // Find `this` % `num`
  BN.prototype.mod = function mod (num) {
    return this.divmod(num, 'mod', false).mod;
  };

  BN.prototype.umod = function umod (num) {
    return this.divmod(num, 'mod', true).mod;
  };

  // Find Round(`this` / `num`)
  BN.prototype.divRound = function divRound (num) {
    var dm = this.divmod(num);

    // Fast case - exact division
    if (dm.mod.isZero()) return dm.div;

    var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;

    var half = num.ushrn(1);
    var r2 = num.andln(1);
    var cmp = mod.cmp(half);

    // Round down
    if (cmp < 0 || r2 === 1 && cmp === 0) return dm.div;

    // Round up
    return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
  };

  BN.prototype.modn = function modn (num) {
    assert(num <= 0x3ffffff);
    var p = (1 << 26) % num;

    var acc = 0;
    for (var i = this.length - 1; i >= 0; i--) {
      acc = (p * acc + (this.words[i] | 0)) % num;
    }

    return acc;
  };

  // In-place division by number
  BN.prototype.idivn = function idivn (num) {
    assert(num <= 0x3ffffff);

    var carry = 0;
    for (var i = this.length - 1; i >= 0; i--) {
      var w = (this.words[i] | 0) + carry * 0x4000000;
      this.words[i] = (w / num) | 0;
      carry = w % num;
    }

    return this.strip();
  };

  BN.prototype.divn = function divn (num) {
    return this.clone().idivn(num);
  };

  BN.prototype.egcd = function egcd (p) {
    assert(p.negative === 0);
    assert(!p.isZero());

    var x = this;
    var y = p.clone();

    if (x.negative !== 0) {
      x = x.umod(p);
    } else {
      x = x.clone();
    }

    // A * x + B * y = x
    var A = new BN(1);
    var B = new BN(0);

    // C * x + D * y = y
    var C = new BN(0);
    var D = new BN(1);

    var g = 0;

    while (x.isEven() && y.isEven()) {
      x.iushrn(1);
      y.iushrn(1);
      ++g;
    }

    var yp = y.clone();
    var xp = x.clone();

    while (!x.isZero()) {
      for (var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
      if (i > 0) {
        x.iushrn(i);
        while (i-- > 0) {
          if (A.isOdd() || B.isOdd()) {
            A.iadd(yp);
            B.isub(xp);
          }

          A.iushrn(1);
          B.iushrn(1);
        }
      }

      for (var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
      if (j > 0) {
        y.iushrn(j);
        while (j-- > 0) {
          if (C.isOdd() || D.isOdd()) {
            C.iadd(yp);
            D.isub(xp);
          }

          C.iushrn(1);
          D.iushrn(1);
        }
      }

      if (x.cmp(y) >= 0) {
        x.isub(y);
        A.isub(C);
        B.isub(D);
      } else {
        y.isub(x);
        C.isub(A);
        D.isub(B);
      }
    }

    return {
      a: C,
      b: D,
      gcd: y.iushln(g)
    };
  };

  // This is reduced incarnation of the binary EEA
  // above, designated to invert members of the
  // _prime_ fields F(p) at a maximal speed
  BN.prototype._invmp = function _invmp (p) {
    assert(p.negative === 0);
    assert(!p.isZero());

    var a = this;
    var b = p.clone();

    if (a.negative !== 0) {
      a = a.umod(p);
    } else {
      a = a.clone();
    }

    var x1 = new BN(1);
    var x2 = new BN(0);

    var delta = b.clone();

    while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {
      for (var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
      if (i > 0) {
        a.iushrn(i);
        while (i-- > 0) {
          if (x1.isOdd()) {
            x1.iadd(delta);
          }

          x1.iushrn(1);
        }
      }

      for (var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
      if (j > 0) {
        b.iushrn(j);
        while (j-- > 0) {
          if (x2.isOdd()) {
            x2.iadd(delta);
          }

          x2.iushrn(1);
        }
      }

      if (a.cmp(b) >= 0) {
        a.isub(b);
        x1.isub(x2);
      } else {
        b.isub(a);
        x2.isub(x1);
      }
    }

    var res;
    if (a.cmpn(1) === 0) {
      res = x1;
    } else {
      res = x2;
    }

    if (res.cmpn(0) < 0) {
      res.iadd(p);
    }

    return res;
  };

  BN.prototype.gcd = function gcd (num) {
    if (this.isZero()) return num.abs();
    if (num.isZero()) return this.abs();

    var a = this.clone();
    var b = num.clone();
    a.negative = 0;
    b.negative = 0;

    // Remove common factor of two
    for (var shift = 0; a.isEven() && b.isEven(); shift++) {
      a.iushrn(1);
      b.iushrn(1);
    }

    do {
      while (a.isEven()) {
        a.iushrn(1);
      }
      while (b.isEven()) {
        b.iushrn(1);
      }

      var r = a.cmp(b);
      if (r < 0) {
        // Swap `a` and `b` to make `a` always bigger than `b`
        var t = a;
        a = b;
        b = t;
      } else if (r === 0 || b.cmpn(1) === 0) {
        break;
      }

      a.isub(b);
    } while (true);

    return b.iushln(shift);
  };

  // Invert number in the field F(num)
  BN.prototype.invm = function invm (num) {
    return this.egcd(num).a.umod(num);
  };

  BN.prototype.isEven = function isEven () {
    return (this.words[0] & 1) === 0;
  };

  BN.prototype.isOdd = function isOdd () {
    return (this.words[0] & 1) === 1;
  };

  // And first word and num
  BN.prototype.andln = function andln (num) {
    return this.words[0] & num;
  };

  // Increment at the bit position in-line
  BN.prototype.bincn = function bincn (bit) {
    assert(typeof bit === 'number');
    var r = bit % 26;
    var s = (bit - r) / 26;
    var q = 1 << r;

    // Fast case: bit is much higher than all existing words
    if (this.length <= s) {
      this._expand(s + 1);
      this.words[s] |= q;
      return this;
    }

    // Add bit and propagate, if needed
    var carry = q;
    for (var i = s; carry !== 0 && i < this.length; i++) {
      var w = this.words[i] | 0;
      w += carry;
      carry = w >>> 26;
      w &= 0x3ffffff;
      this.words[i] = w;
    }
    if (carry !== 0) {
      this.words[i] = carry;
      this.length++;
    }
    return this;
  };

  BN.prototype.isZero = function isZero () {
    return this.length === 1 && this.words[0] === 0;
  };

  BN.prototype.cmpn = function cmpn (num) {
    var negative = num < 0;

    if (this.negative !== 0 && !negative) return -1;
    if (this.negative === 0 && negative) return 1;

    this.strip();

    var res;
    if (this.length > 1) {
      res = 1;
    } else {
      if (negative) {
        num = -num;
      }

      assert(num <= 0x3ffffff, 'Number is too big');

      var w = this.words[0] | 0;
      res = w === num ? 0 : w < num ? -1 : 1;
    }
    if (this.negative !== 0) return -res | 0;
    return res;
  };

  // Compare two numbers and return:
  // 1 - if `this` > `num`
  // 0 - if `this` == `num`
  // -1 - if `this` < `num`
  BN.prototype.cmp = function cmp (num) {
    if (this.negative !== 0 && num.negative === 0) return -1;
    if (this.negative === 0 && num.negative !== 0) return 1;

    var res = this.ucmp(num);
    if (this.negative !== 0) return -res | 0;
    return res;
  };

  // Unsigned comparison
  BN.prototype.ucmp = function ucmp (num) {
    // At this point both numbers have the same sign
    if (this.length > num.length) return 1;
    if (this.length < num.length) return -1;

    var res = 0;
    for (var i = this.length - 1; i >= 0; i--) {
      var a = this.words[i] | 0;
      var b = num.words[i] | 0;

      if (a === b) continue;
      if (a < b) {
        res = -1;
      } else if (a > b) {
        res = 1;
      }
      break;
    }
    return res;
  };

  BN.prototype.gtn = function gtn (num) {
    return this.cmpn(num) === 1;
  };

  BN.prototype.gt = function gt (num) {
    return this.cmp(num) === 1;
  };

  BN.prototype.gten = function gten (num) {
    return this.cmpn(num) >= 0;
  };

  BN.prototype.gte = function gte (num) {
    return this.cmp(num) >= 0;
  };

  BN.prototype.ltn = function ltn (num) {
    return this.cmpn(num) === -1;
  };

  BN.prototype.lt = function lt (num) {
    return this.cmp(num) === -1;
  };

  BN.prototype.lten = function lten (num) {
    return this.cmpn(num) <= 0;
  };

  BN.prototype.lte = function lte (num) {
    return this.cmp(num) <= 0;
  };

  BN.prototype.eqn = function eqn (num) {
    return this.cmpn(num) === 0;
  };

  BN.prototype.eq = function eq (num) {
    return this.cmp(num) === 0;
  };

  //
  // A reduce context, could be using montgomery or something better, depending
  // on the `m` itself.
  //
  BN.red = function red (num) {
    return new Red(num);
  };

  BN.prototype.toRed = function toRed (ctx) {
    assert(!this.red, 'Already a number in reduction context');
    assert(this.negative === 0, 'red works only with positives');
    return ctx.convertTo(this)._forceRed(ctx);
  };

  BN.prototype.fromRed = function fromRed () {
    assert(this.red, 'fromRed works only with numbers in reduction context');
    return this.red.convertFrom(this);
  };

  BN.prototype._forceRed = function _forceRed (ctx) {
    this.red = ctx;
    return this;
  };

  BN.prototype.forceRed = function forceRed (ctx) {
    assert(!this.red, 'Already a number in reduction context');
    return this._forceRed(ctx);
  };

  BN.prototype.redAdd = function redAdd (num) {
    assert(this.red, 'redAdd works only with red numbers');
    return this.red.add(this, num);
  };

  BN.prototype.redIAdd = function redIAdd (num) {
    assert(this.red, 'redIAdd works only with red numbers');
    return this.red.iadd(this, num);
  };

  BN.prototype.redSub = function redSub (num) {
    assert(this.red, 'redSub works only with red numbers');
    return this.red.sub(this, num);
  };

  BN.prototype.redISub = function redISub (num) {
    assert(this.red, 'redISub works only with red numbers');
    return this.red.isub(this, num);
  };

  BN.prototype.redShl = function redShl (num) {
    assert(this.red, 'redShl works only with red numbers');
    return this.red.shl(this, num);
  };

  BN.prototype.redMul = function redMul (num) {
    assert(this.red, 'redMul works only with red numbers');
    this.red._verify2(this, num);
    return this.red.mul(this, num);
  };

  BN.prototype.redIMul = function redIMul (num) {
    assert(this.red, 'redMul works only with red numbers');
    this.red._verify2(this, num);
    return this.red.imul(this, num);
  };

  BN.prototype.redSqr = function redSqr () {
    assert(this.red, 'redSqr works only with red numbers');
    this.red._verify1(this);
    return this.red.sqr(this);
  };

  BN.prototype.redISqr = function redISqr () {
    assert(this.red, 'redISqr works only with red numbers');
    this.red._verify1(this);
    return this.red.isqr(this);
  };

  // Square root over p
  BN.prototype.redSqrt = function redSqrt () {
    assert(this.red, 'redSqrt works only with red numbers');
    this.red._verify1(this);
    return this.red.sqrt(this);
  };

  BN.prototype.redInvm = function redInvm () {
    assert(this.red, 'redInvm works only with red numbers');
    this.red._verify1(this);
    return this.red.invm(this);
  };

  // Return negative clone of `this` % `red modulo`
  BN.prototype.redNeg = function redNeg () {
    assert(this.red, 'redNeg works only with red numbers');
    this.red._verify1(this);
    return this.red.neg(this);
  };

  BN.prototype.redPow = function redPow (num) {
    assert(this.red && !num.red, 'redPow(normalNum)');
    this.red._verify1(this);
    return this.red.pow(this, num);
  };

  // Prime numbers with efficient reduction
  var primes = {
    k256: null,
    p224: null,
    p192: null,
    p25519: null
  };

  // Pseudo-Mersenne prime
  function MPrime (name, p) {
    // P = 2 ^ N - K
    this.name = name;
    this.p = new BN(p, 16);
    this.n = this.p.bitLength();
    this.k = new BN(1).iushln(this.n).isub(this.p);

    this.tmp = this._tmp();
  }

  MPrime.prototype._tmp = function _tmp () {
    var tmp = new BN(null);
    tmp.words = new Array(Math.ceil(this.n / 13));
    return tmp;
  };

  MPrime.prototype.ireduce = function ireduce (num) {
    // Assumes that `num` is less than `P^2`
    // num = HI * (2 ^ N - K) + HI * K + LO = HI * K + LO (mod P)
    var r = num;
    var rlen;

    do {
      this.split(r, this.tmp);
      r = this.imulK(r);
      r = r.iadd(this.tmp);
      rlen = r.bitLength();
    } while (rlen > this.n);

    var cmp = rlen < this.n ? -1 : r.ucmp(this.p);
    if (cmp === 0) {
      r.words[0] = 0;
      r.length = 1;
    } else if (cmp > 0) {
      r.isub(this.p);
    } else {
      if (r.strip !== undefined) {
        // r is BN v4 instance
        r.strip();
      } else {
        // r is BN v5 instance
        r._strip();
      }
    }

    return r;
  };

  MPrime.prototype.split = function split (input, out) {
    input.iushrn(this.n, 0, out);
  };

  MPrime.prototype.imulK = function imulK (num) {
    return num.imul(this.k);
  };

  function K256 () {
    MPrime.call(
      this,
      'k256',
      'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f');
  }
  inherits(K256, MPrime);

  K256.prototype.split = function split (input, output) {
    // 256 = 9 * 26 + 22
    var mask = 0x3fffff;

    var outLen = Math.min(input.length, 9);
    for (var i = 0; i < outLen; i++) {
      output.words[i] = input.words[i];
    }
    output.length = outLen;

    if (input.length <= 9) {
      input.words[0] = 0;
      input.length = 1;
      return;
    }

    // Shift by 9 limbs
    var prev = input.words[9];
    output.words[output.length++] = prev & mask;

    for (i = 10; i < input.length; i++) {
      var next = input.words[i] | 0;
      input.words[i - 10] = ((next & mask) << 4) | (prev >>> 22);
      prev = next;
    }
    prev >>>= 22;
    input.words[i - 10] = prev;
    if (prev === 0 && input.length > 10) {
      input.length -= 10;
    } else {
      input.length -= 9;
    }
  };

  K256.prototype.imulK = function imulK (num) {
    // K = 0x1000003d1 = [ 0x40, 0x3d1 ]
    num.words[num.length] = 0;
    num.words[num.length + 1] = 0;
    num.length += 2;

    // bounded at: 0x40 * 0x3ffffff + 0x3d0 = 0x100000390
    var lo = 0;
    for (var i = 0; i < num.length; i++) {
      var w = num.words[i] | 0;
      lo += w * 0x3d1;
      num.words[i] = lo & 0x3ffffff;
      lo = w * 0x40 + ((lo / 0x4000000) | 0);
    }

    // Fast length reduction
    if (num.words[num.length - 1] === 0) {
      num.length--;
      if (num.words[num.length - 1] === 0) {
        num.length--;
      }
    }
    return num;
  };

  function P224 () {
    MPrime.call(
      this,
      'p224',
      'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001');
  }
  inherits(P224, MPrime);

  function P192 () {
    MPrime.call(
      this,
      'p192',
      'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff');
  }
  inherits(P192, MPrime);

  function P25519 () {
    // 2 ^ 255 - 19
    MPrime.call(
      this,
      '25519',
      '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed');
  }
  inherits(P25519, MPrime);

  P25519.prototype.imulK = function imulK (num) {
    // K = 0x13
    var carry = 0;
    for (var i = 0; i < num.length; i++) {
      var hi = (num.words[i] | 0) * 0x13 + carry;
      var lo = hi & 0x3ffffff;
      hi >>>= 26;

      num.words[i] = lo;
      carry = hi;
    }
    if (carry !== 0) {
      num.words[num.length++] = carry;
    }
    return num;
  };

  // Exported mostly for testing purposes, use plain name instead
  BN._prime = function prime (name) {
    // Cached version of prime
    if (primes[name]) return primes[name];

    var prime;
    if (name === 'k256') {
      prime = new K256();
    } else if (name === 'p224') {
      prime = new P224();
    } else if (name === 'p192') {
      prime = new P192();
    } else if (name === 'p25519') {
      prime = new P25519();
    } else {
      throw new Error('Unknown prime ' + name);
    }
    primes[name] = prime;

    return prime;
  };

  //
  // Base reduction engine
  //
  function Red (m) {
    if (typeof m === 'string') {
      var prime = BN._prime(m);
      this.m = prime.p;
      this.prime = prime;
    } else {
      assert(m.gtn(1), 'modulus must be greater than 1');
      this.m = m;
      this.prime = null;
    }
  }

  Red.prototype._verify1 = function _verify1 (a) {
    assert(a.negative === 0, 'red works only with positives');
    assert(a.red, 'red works only with red numbers');
  };

  Red.prototype._verify2 = function _verify2 (a, b) {
    assert((a.negative | b.negative) === 0, 'red works only with positives');
    assert(a.red && a.red === b.red,
      'red works only with red numbers');
  };

  Red.prototype.imod = function imod (a) {
    if (this.prime) return this.prime.ireduce(a)._forceRed(this);
    return a.umod(this.m)._forceRed(this);
  };

  Red.prototype.neg = function neg (a) {
    if (a.isZero()) {
      return a.clone();
    }

    return this.m.sub(a)._forceRed(this);
  };

  Red.prototype.add = function add (a, b) {
    this._verify2(a, b);

    var res = a.add(b);
    if (res.cmp(this.m) >= 0) {
      res.isub(this.m);
    }
    return res._forceRed(this);
  };

  Red.prototype.iadd = function iadd (a, b) {
    this._verify2(a, b);

    var res = a.iadd(b);
    if (res.cmp(this.m) >= 0) {
      res.isub(this.m);
    }
    return res;
  };

  Red.prototype.sub = function sub (a, b) {
    this._verify2(a, b);

    var res = a.sub(b);
    if (res.cmpn(0) < 0) {
      res.iadd(this.m);
    }
    return res._forceRed(this);
  };

  Red.prototype.isub = function isub (a, b) {
    this._verify2(a, b);

    var res = a.isub(b);
    if (res.cmpn(0) < 0) {
      res.iadd(this.m);
    }
    return res;
  };

  Red.prototype.shl = function shl (a, num) {
    this._verify1(a);
    return this.imod(a.ushln(num));
  };

  Red.prototype.imul = function imul (a, b) {
    this._verify2(a, b);
    return this.imod(a.imul(b));
  };

  Red.prototype.mul = function mul (a, b) {
    this._verify2(a, b);
    return this.imod(a.mul(b));
  };

  Red.prototype.isqr = function isqr (a) {
    return this.imul(a, a.clone());
  };

  Red.prototype.sqr = function sqr (a) {
    return this.mul(a, a);
  };

  Red.prototype.sqrt = function sqrt (a) {
    if (a.isZero()) return a.clone();

    var mod3 = this.m.andln(3);
    assert(mod3 % 2 === 1);

    // Fast case
    if (mod3 === 3) {
      var pow = this.m.add(new BN(1)).iushrn(2);
      return this.pow(a, pow);
    }

    // Tonelli-Shanks algorithm (Totally unoptimized and slow)
    //
    // Find Q and S, that Q * 2 ^ S = (P - 1)
    var q = this.m.subn(1);
    var s = 0;
    while (!q.isZero() && q.andln(1) === 0) {
      s++;
      q.iushrn(1);
    }
    assert(!q.isZero());

    var one = new BN(1).toRed(this);
    var nOne = one.redNeg();

    // Find quadratic non-residue
    // NOTE: Max is such because of generalized Riemann hypothesis.
    var lpow = this.m.subn(1).iushrn(1);
    var z = this.m.bitLength();
    z = new BN(2 * z * z).toRed(this);

    while (this.pow(z, lpow).cmp(nOne) !== 0) {
      z.redIAdd(nOne);
    }

    var c = this.pow(z, q);
    var r = this.pow(a, q.addn(1).iushrn(1));
    var t = this.pow(a, q);
    var m = s;
    while (t.cmp(one) !== 0) {
      var tmp = t;
      for (var i = 0; tmp.cmp(one) !== 0; i++) {
        tmp = tmp.redSqr();
      }
      assert(i < m);
      var b = this.pow(c, new BN(1).iushln(m - i - 1));

      r = r.redMul(b);
      c = b.redSqr();
      t = t.redMul(c);
      m = i;
    }

    return r;
  };

  Red.prototype.invm = function invm (a) {
    var inv = a._invmp(this.m);
    if (inv.negative !== 0) {
      inv.negative = 0;
      return this.imod(inv).redNeg();
    } else {
      return this.imod(inv);
    }
  };

  Red.prototype.pow = function pow (a, num) {
    if (num.isZero()) return new BN(1).toRed(this);
    if (num.cmpn(1) === 0) return a.clone();

    var windowSize = 4;
    var wnd = new Array(1 << windowSize);
    wnd[0] = new BN(1).toRed(this);
    wnd[1] = a;
    for (var i = 2; i < wnd.length; i++) {
      wnd[i] = this.mul(wnd[i - 1], a);
    }

    var res = wnd[0];
    var current = 0;
    var currentLen = 0;
    var start = num.bitLength() % 26;
    if (start === 0) {
      start = 26;
    }

    for (i = num.length - 1; i >= 0; i--) {
      var word = num.words[i];
      for (var j = start - 1; j >= 0; j--) {
        var bit = (word >> j) & 1;
        if (res !== wnd[0]) {
          res = this.sqr(res);
        }

        if (bit === 0 && current === 0) {
          currentLen = 0;
          continue;
        }

        current <<= 1;
        current |= bit;
        currentLen++;
        if (currentLen !== windowSize && (i !== 0 || j !== 0)) continue;

        res = this.mul(res, wnd[current]);
        currentLen = 0;
        current = 0;
      }
      start = 26;
    }

    return res;
  };

  Red.prototype.convertTo = function convertTo (num) {
    var r = num.umod(this.m);

    return r === num ? r.clone() : r;
  };

  Red.prototype.convertFrom = function convertFrom (num) {
    var res = num.clone();
    res.red = null;
    return res;
  };

  //
  // Montgomery method engine
  //

  BN.mont = function mont (num) {
    return new Mont(num);
  };

  function Mont (m) {
    Red.call(this, m);

    this.shift = this.m.bitLength();
    if (this.shift % 26 !== 0) {
      this.shift += 26 - (this.shift % 26);
    }

    this.r = new BN(1).iushln(this.shift);
    this.r2 = this.imod(this.r.sqr());
    this.rinv = this.r._invmp(this.m);

    this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
    this.minv = this.minv.umod(this.r);
    this.minv = this.r.sub(this.minv);
  }
  inherits(Mont, Red);

  Mont.prototype.convertTo = function convertTo (num) {
    return this.imod(num.ushln(this.shift));
  };

  Mont.prototype.convertFrom = function convertFrom (num) {
    var r = this.imod(num.mul(this.rinv));
    r.red = null;
    return r;
  };

  Mont.prototype.imul = function imul (a, b) {
    if (a.isZero() || b.isZero()) {
      a.words[0] = 0;
      a.length = 1;
      return a;
    }

    var t = a.imul(b);
    var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
    var u = t.isub(c).iushrn(this.shift);
    var res = u;

    if (u.cmp(this.m) >= 0) {
      res = u.isub(this.m);
    } else if (u.cmpn(0) < 0) {
      res = u.iadd(this.m);
    }

    return res._forceRed(this);
  };

  Mont.prototype.mul = function mul (a, b) {
    if (a.isZero() || b.isZero()) return new BN(0)._forceRed(this);

    var t = a.mul(b);
    var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
    var u = t.isub(c).iushrn(this.shift);
    var res = u;
    if (u.cmp(this.m) >= 0) {
      res = u.isub(this.m);
    } else if (u.cmpn(0) < 0) {
      res = u.iadd(this.m);
    }

    return res._forceRed(this);
  };

  Mont.prototype.invm = function invm (a) {
    // (AR)^-1 * R^2 = (A^-1 * R^-1) * R^2 = A^-1 * R
    var res = this.imod(a._invmp(this.m).mul(this.r2));
    return res._forceRed(this);
  };
})(typeof module === 'undefined' || module, this);

},{"buffer":24}],22:[function(require,module,exports){
(function (module, exports) {
  'use strict';

  // Utils
  function assert (val, msg) {
    if (!val) throw new Error(msg || 'Assertion failed');
  }

  // Could use `inherits` module, but don't want to move from single file
  // architecture yet.
  function inherits (ctor, superCtor) {
    ctor.super_ = superCtor;
    var TempCtor = function () {};
    TempCtor.prototype = superCtor.prototype;
    ctor.prototype = new TempCtor();
    ctor.prototype.constructor = ctor;
  }

  // BN

  function BN (number, base, endian) {
    if (BN.isBN(number)) {
      return number;
    }

    this.negative = 0;
    this.words = null;
    this.length = 0;

    // Reduction context
    this.red = null;

    if (number !== null) {
      if (base === 'le' || base === 'be') {
        endian = base;
        base = 10;
      }

      this._init(number || 0, base || 10, endian || 'be');
    }
  }
  if (typeof module === 'object') {
    module.exports = BN;
  } else {
    exports.BN = BN;
  }

  BN.BN = BN;
  BN.wordSize = 26;

  var Buffer;
  try {
    if (typeof window !== 'undefined' && typeof window.Buffer !== 'undefined') {
      Buffer = window.Buffer;
    } else {
      Buffer = require('buffer').Buffer;
    }
  } catch (e) {
  }

  BN.isBN = function isBN (num) {
    if (num instanceof BN) {
      return true;
    }

    return num !== null && typeof num === 'object' &&
      num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);
  };

  BN.max = function max (left, right) {
    if (left.cmp(right) > 0) return left;
    return right;
  };

  BN.min = function min (left, right) {
    if (left.cmp(right) < 0) return left;
    return right;
  };

  BN.prototype._init = function init (number, base, endian) {
    if (typeof number === 'number') {
      return this._initNumber(number, base, endian);
    }

    if (typeof number === 'object') {
      return this._initArray(number, base, endian);
    }

    if (base === 'hex') {
      base = 16;
    }
    assert(base === (base | 0) && base >= 2 && base <= 36);

    number = number.toString().replace(/\s+/g, '');
    var start = 0;
    if (number[0] === '-') {
      start++;
      this.negative = 1;
    }

    if (start < number.length) {
      if (base === 16) {
        this._parseHex(number, start, endian);
      } else {
        this._parseBase(number, base, start);
        if (endian === 'le') {
          this._initArray(this.toArray(), base, endian);
        }
      }
    }
  };

  BN.prototype._initNumber = function _initNumber (number, base, endian) {
    if (number < 0) {
      this.negative = 1;
      number = -number;
    }
    if (number < 0x4000000) {
      this.words = [number & 0x3ffffff];
      this.length = 1;
    } else if (number < 0x10000000000000) {
      this.words = [
        number & 0x3ffffff,
        (number / 0x4000000) & 0x3ffffff
      ];
      this.length = 2;
    } else {
      assert(number < 0x20000000000000); // 2 ^ 53 (unsafe)
      this.words = [
        number & 0x3ffffff,
        (number / 0x4000000) & 0x3ffffff,
        1
      ];
      this.length = 3;
    }

    if (endian !== 'le') return;

    // Reverse the bytes
    this._initArray(this.toArray(), base, endian);
  };

  BN.prototype._initArray = function _initArray (number, base, endian) {
    // Perhaps a Uint8Array
    assert(typeof number.length === 'number');
    if (number.length <= 0) {
      this.words = [0];
      this.length = 1;
      return this;
    }

    this.length = Math.ceil(number.length / 3);
    this.words = new Array(this.length);
    for (var i = 0; i < this.length; i++) {
      this.words[i] = 0;
    }

    var j, w;
    var off = 0;
    if (endian === 'be') {
      for (i = number.length - 1, j = 0; i >= 0; i -= 3) {
        w = number[i] | (number[i - 1] << 8) | (number[i - 2] << 16);
        this.words[j] |= (w << off) & 0x3ffffff;
        this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;
        off += 24;
        if (off >= 26) {
          off -= 26;
          j++;
        }
      }
    } else if (endian === 'le') {
      for (i = 0, j = 0; i < number.length; i += 3) {
        w = number[i] | (number[i + 1] << 8) | (number[i + 2] << 16);
        this.words[j] |= (w << off) & 0x3ffffff;
        this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;
        off += 24;
        if (off >= 26) {
          off -= 26;
          j++;
        }
      }
    }
    return this._strip();
  };

  function parseHex4Bits (string, index) {
    var c = string.charCodeAt(index);
    // '0' - '9'
    if (c >= 48 && c <= 57) {
      return c - 48;
    // 'A' - 'F'
    } else if (c >= 65 && c <= 70) {
      return c - 55;
    // 'a' - 'f'
    } else if (c >= 97 && c <= 102) {
      return c - 87;
    } else {
      assert(false, 'Invalid character in ' + string);
    }
  }

  function parseHexByte (string, lowerBound, index) {
    var r = parseHex4Bits(string, index);
    if (index - 1 >= lowerBound) {
      r |= parseHex4Bits(string, index - 1) << 4;
    }
    return r;
  }

  BN.prototype._parseHex = function _parseHex (number, start, endian) {
    // Create possibly bigger array to ensure that it fits the number
    this.length = Math.ceil((number.length - start) / 6);
    this.words = new Array(this.length);
    for (var i = 0; i < this.length; i++) {
      this.words[i] = 0;
    }

    // 24-bits chunks
    var off = 0;
    var j = 0;

    var w;
    if (endian === 'be') {
      for (i = number.length - 1; i >= start; i -= 2) {
        w = parseHexByte(number, start, i) << off;
        this.words[j] |= w & 0x3ffffff;
        if (off >= 18) {
          off -= 18;
          j += 1;
          this.words[j] |= w >>> 26;
        } else {
          off += 8;
        }
      }
    } else {
      var parseLength = number.length - start;
      for (i = parseLength % 2 === 0 ? start + 1 : start; i < number.length; i += 2) {
        w = parseHexByte(number, start, i) << off;
        this.words[j] |= w & 0x3ffffff;
        if (off >= 18) {
          off -= 18;
          j += 1;
          this.words[j] |= w >>> 26;
        } else {
          off += 8;
        }
      }
    }

    this._strip();
  };

  function parseBase (str, start, end, mul) {
    var r = 0;
    var b = 0;
    var len = Math.min(str.length, end);
    for (var i = start; i < len; i++) {
      var c = str.charCodeAt(i) - 48;

      r *= mul;

      // 'a'
      if (c >= 49) {
        b = c - 49 + 0xa;

      // 'A'
      } else if (c >= 17) {
        b = c - 17 + 0xa;

      // '0' - '9'
      } else {
        b = c;
      }
      assert(c >= 0 && b < mul, 'Invalid character');
      r += b;
    }
    return r;
  }

  BN.prototype._parseBase = function _parseBase (number, base, start) {
    // Initialize as zero
    this.words = [0];
    this.length = 1;

    // Find length of limb in base
    for (var limbLen = 0, limbPow = 1; limbPow <= 0x3ffffff; limbPow *= base) {
      limbLen++;
    }
    limbLen--;
    limbPow = (limbPow / base) | 0;

    var total = number.length - start;
    var mod = total % limbLen;
    var end = Math.min(total, total - mod) + start;

    var word = 0;
    for (var i = start; i < end; i += limbLen) {
      word = parseBase(number, i, i + limbLen, base);

      this.imuln(limbPow);
      if (this.words[0] + word < 0x4000000) {
        this.words[0] += word;
      } else {
        this._iaddn(word);
      }
    }

    if (mod !== 0) {
      var pow = 1;
      word = parseBase(number, i, number.length, base);

      for (i = 0; i < mod; i++) {
        pow *= base;
      }

      this.imuln(pow);
      if (this.words[0] + word < 0x4000000) {
        this.words[0] += word;
      } else {
        this._iaddn(word);
      }
    }

    this._strip();
  };

  BN.prototype.copy = function copy (dest) {
    dest.words = new Array(this.length);
    for (var i = 0; i < this.length; i++) {
      dest.words[i] = this.words[i];
    }
    dest.length = this.length;
    dest.negative = this.negative;
    dest.red = this.red;
  };

  function move (dest, src) {
    dest.words = src.words;
    dest.length = src.length;
    dest.negative = src.negative;
    dest.red = src.red;
  }

  BN.prototype._move = function _move (dest) {
    move(dest, this);
  };

  BN.prototype.clone = function clone () {
    var r = new BN(null);
    this.copy(r);
    return r;
  };

  BN.prototype._expand = function _expand (size) {
    while (this.length < size) {
      this.words[this.length++] = 0;
    }
    return this;
  };

  // Remove leading `0` from `this`
  BN.prototype._strip = function strip () {
    while (this.length > 1 && this.words[this.length - 1] === 0) {
      this.length--;
    }
    return this._normSign();
  };

  BN.prototype._normSign = function _normSign () {
    // -0 = 0
    if (this.length === 1 && this.words[0] === 0) {
      this.negative = 0;
    }
    return this;
  };

  // Check Symbol.for because not everywhere where Symbol defined
  // See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol#Browser_compatibility
  if (typeof Symbol !== 'undefined' && typeof Symbol.for === 'function') {
    try {
      BN.prototype[Symbol.for('nodejs.util.inspect.custom')] = inspect;
    } catch (e) {
      BN.prototype.inspect = inspect;
    }
  } else {
    BN.prototype.inspect = inspect;
  }

  function inspect () {
    return (this.red ? '<BN-R: ' : '<BN: ') + this.toString(16) + '>';
  }

  /*

  var zeros = [];
  var groupSizes = [];
  var groupBases = [];

  var s = '';
  var i = -1;
  while (++i < BN.wordSize) {
    zeros[i] = s;
    s += '0';
  }
  groupSizes[0] = 0;
  groupSizes[1] = 0;
  groupBases[0] = 0;
  groupBases[1] = 0;
  var base = 2 - 1;
  while (++base < 36 + 1) {
    var groupSize = 0;
    var groupBase = 1;
    while (groupBase < (1 << BN.wordSize) / base) {
      groupBase *= base;
      groupSize += 1;
    }
    groupSizes[base] = groupSize;
    groupBases[base] = groupBase;
  }

  */

  var zeros = [
    '',
    '0',
    '00',
    '000',
    '0000',
    '00000',
    '000000',
    '0000000',
    '00000000',
    '000000000',
    '0000000000',
    '00000000000',
    '000000000000',
    '0000000000000',
    '00000000000000',
    '000000000000000',
    '0000000000000000',
    '00000000000000000',
    '000000000000000000',
    '0000000000000000000',
    '00000000000000000000',
    '000000000000000000000',
    '0000000000000000000000',
    '00000000000000000000000',
    '000000000000000000000000',
    '0000000000000000000000000'
  ];

  var groupSizes = [
    0, 0,
    25, 16, 12, 11, 10, 9, 8,
    8, 7, 7, 7, 7, 6, 6,
    6, 6, 6, 6, 6, 5, 5,
    5, 5, 5, 5, 5, 5, 5,
    5, 5, 5, 5, 5, 5, 5
  ];

  var groupBases = [
    0, 0,
    33554432, 43046721, 16777216, 48828125, 60466176, 40353607, 16777216,
    43046721, 10000000, 19487171, 35831808, 62748517, 7529536, 11390625,
    16777216, 24137569, 34012224, 47045881, 64000000, 4084101, 5153632,
    6436343, 7962624, 9765625, 11881376, 14348907, 17210368, 20511149,
    24300000, 28629151, 33554432, 39135393, 45435424, 52521875, 60466176
  ];

  BN.prototype.toString = function toString (base, padding) {
    base = base || 10;
    padding = padding | 0 || 1;

    var out;
    if (base === 16 || base === 'hex') {
      out = '';
      var off = 0;
      var carry = 0;
      for (var i = 0; i < this.length; i++) {
        var w = this.words[i];
        var word = (((w << off) | carry) & 0xffffff).toString(16);
        carry = (w >>> (24 - off)) & 0xffffff;
        off += 2;
        if (off >= 26) {
          off -= 26;
          i--;
        }
        if (carry !== 0 || i !== this.length - 1) {
          out = zeros[6 - word.length] + word + out;
        } else {
          out = word + out;
        }
      }
      if (carry !== 0) {
        out = carry.toString(16) + out;
      }
      while (out.length % padding !== 0) {
        out = '0' + out;
      }
      if (this.negative !== 0) {
        out = '-' + out;
      }
      return out;
    }

    if (base === (base | 0) && base >= 2 && base <= 36) {
      // var groupSize = Math.floor(BN.wordSize * Math.LN2 / Math.log(base));
      var groupSize = groupSizes[base];
      // var groupBase = Math.pow(base, groupSize);
      var groupBase = groupBases[base];
      out = '';
      var c = this.clone();
      c.negative = 0;
      while (!c.isZero()) {
        var r = c.modrn(groupBase).toString(base);
        c = c.idivn(groupBase);

        if (!c.isZero()) {
          out = zeros[groupSize - r.length] + r + out;
        } else {
          out = r + out;
        }
      }
      if (this.isZero()) {
        out = '0' + out;
      }
      while (out.length % padding !== 0) {
        out = '0' + out;
      }
      if (this.negative !== 0) {
        out = '-' + out;
      }
      return out;
    }

    assert(false, 'Base should be between 2 and 36');
  };

  BN.prototype.toNumber = function toNumber () {
    var ret = this.words[0];
    if (this.length === 2) {
      ret += this.words[1] * 0x4000000;
    } else if (this.length === 3 && this.words[2] === 0x01) {
      // NOTE: at this stage it is known that the top bit is set
      ret += 0x10000000000000 + (this.words[1] * 0x4000000);
    } else if (this.length > 2) {
      assert(false, 'Number can only safely store up to 53 bits');
    }
    return (this.negative !== 0) ? -ret : ret;
  };

  BN.prototype.toJSON = function toJSON () {
    return this.toString(16, 2);
  };

  if (Buffer) {
    BN.prototype.toBuffer = function toBuffer (endian, length) {
      return this.toArrayLike(Buffer, endian, length);
    };
  }

  BN.prototype.toArray = function toArray (endian, length) {
    return this.toArrayLike(Array, endian, length);
  };

  var allocate = function allocate (ArrayType, size) {
    if (ArrayType.allocUnsafe) {
      return ArrayType.allocUnsafe(size);
    }
    return new ArrayType(size);
  };

  BN.prototype.toArrayLike = function toArrayLike (ArrayType, endian, length) {
    this._strip();

    var byteLength = this.byteLength();
    var reqLength = length || Math.max(1, byteLength);
    assert(byteLength <= reqLength, 'byte array longer than desired length');
    assert(reqLength > 0, 'Requested array length <= 0');

    var res = allocate(ArrayType, reqLength);
    var postfix = endian === 'le' ? 'LE' : 'BE';
    this['_toArrayLike' + postfix](res, byteLength);
    return res;
  };

  BN.prototype._toArrayLikeLE = function _toArrayLikeLE (res, byteLength) {
    var position = 0;
    var carry = 0;

    for (var i = 0, shift = 0; i < this.length; i++) {
      var word = (this.words[i] << shift) | carry;

      res[position++] = word & 0xff;
      if (position < res.length) {
        res[position++] = (word >> 8) & 0xff;
      }
      if (position < res.length) {
        res[position++] = (word >> 16) & 0xff;
      }

      if (shift === 6) {
        if (position < res.length) {
          res[position++] = (word >> 24) & 0xff;
        }
        carry = 0;
        shift = 0;
      } else {
        carry = word >>> 24;
        shift += 2;
      }
    }

    if (position < res.length) {
      res[position++] = carry;

      while (position < res.length) {
        res[position++] = 0;
      }
    }
  };

  BN.prototype._toArrayLikeBE = function _toArrayLikeBE (res, byteLength) {
    var position = res.length - 1;
    var carry = 0;

    for (var i = 0, shift = 0; i < this.length; i++) {
      var word = (this.words[i] << shift) | carry;

      res[position--] = word & 0xff;
      if (position >= 0) {
        res[position--] = (word >> 8) & 0xff;
      }
      if (position >= 0) {
        res[position--] = (word >> 16) & 0xff;
      }

      if (shift === 6) {
        if (position >= 0) {
          res[position--] = (word >> 24) & 0xff;
        }
        carry = 0;
        shift = 0;
      } else {
        carry = word >>> 24;
        shift += 2;
      }
    }

    if (position >= 0) {
      res[position--] = carry;

      while (position >= 0) {
        res[position--] = 0;
      }
    }
  };

  if (Math.clz32) {
    BN.prototype._countBits = function _countBits (w) {
      return 32 - Math.clz32(w);
    };
  } else {
    BN.prototype._countBits = function _countBits (w) {
      var t = w;
      var r = 0;
      if (t >= 0x1000) {
        r += 13;
        t >>>= 13;
      }
      if (t >= 0x40) {
        r += 7;
        t >>>= 7;
      }
      if (t >= 0x8) {
        r += 4;
        t >>>= 4;
      }
      if (t >= 0x02) {
        r += 2;
        t >>>= 2;
      }
      return r + t;
    };
  }

  BN.prototype._zeroBits = function _zeroBits (w) {
    // Short-cut
    if (w === 0) return 26;

    var t = w;
    var r = 0;
    if ((t & 0x1fff) === 0) {
      r += 13;
      t >>>= 13;
    }
    if ((t & 0x7f) === 0) {
      r += 7;
      t >>>= 7;
    }
    if ((t & 0xf) === 0) {
      r += 4;
      t >>>= 4;
    }
    if ((t & 0x3) === 0) {
      r += 2;
      t >>>= 2;
    }
    if ((t & 0x1) === 0) {
      r++;
    }
    return r;
  };

  // Return number of used bits in a BN
  BN.prototype.bitLength = function bitLength () {
    var w = this.words[this.length - 1];
    var hi = this._countBits(w);
    return (this.length - 1) * 26 + hi;
  };

  function toBitArray (num) {
    var w = new Array(num.bitLength());

    for (var bit = 0; bit < w.length; bit++) {
      var off = (bit / 26) | 0;
      var wbit = bit % 26;

      w[bit] = (num.words[off] >>> wbit) & 0x01;
    }

    return w;
  }

  // Number of trailing zero bits
  BN.prototype.zeroBits = function zeroBits () {
    if (this.isZero()) return 0;

    var r = 0;
    for (var i = 0; i < this.length; i++) {
      var b = this._zeroBits(this.words[i]);
      r += b;
      if (b !== 26) break;
    }
    return r;
  };

  BN.prototype.byteLength = function byteLength () {
    return Math.ceil(this.bitLength() / 8);
  };

  BN.prototype.toTwos = function toTwos (width) {
    if (this.negative !== 0) {
      return this.abs().inotn(width).iaddn(1);
    }
    return this.clone();
  };

  BN.prototype.fromTwos = function fromTwos (width) {
    if (this.testn(width - 1)) {
      return this.notn(width).iaddn(1).ineg();
    }
    return this.clone();
  };

  BN.prototype.isNeg = function isNeg () {
    return this.negative !== 0;
  };

  // Return negative clone of `this`
  BN.prototype.neg = function neg () {
    return this.clone().ineg();
  };

  BN.prototype.ineg = function ineg () {
    if (!this.isZero()) {
      this.negative ^= 1;
    }

    return this;
  };

  // Or `num` with `this` in-place
  BN.prototype.iuor = function iuor (num) {
    while (this.length < num.length) {
      this.words[this.length++] = 0;
    }

    for (var i = 0; i < num.length; i++) {
      this.words[i] = this.words[i] | num.words[i];
    }

    return this._strip();
  };

  BN.prototype.ior = function ior (num) {
    assert((this.negative | num.negative) === 0);
    return this.iuor(num);
  };

  // Or `num` with `this`
  BN.prototype.or = function or (num) {
    if (this.length > num.length) return this.clone().ior(num);
    return num.clone().ior(this);
  };

  BN.prototype.uor = function uor (num) {
    if (this.length > num.length) return this.clone().iuor(num);
    return num.clone().iuor(this);
  };

  // And `num` with `this` in-place
  BN.prototype.iuand = function iuand (num) {
    // b = min-length(num, this)
    var b;
    if (this.length > num.length) {
      b = num;
    } else {
      b = this;
    }

    for (var i = 0; i < b.length; i++) {
      this.words[i] = this.words[i] & num.words[i];
    }

    this.length = b.length;

    return this._strip();
  };

  BN.prototype.iand = function iand (num) {
    assert((this.negative | num.negative) === 0);
    return this.iuand(num);
  };

  // And `num` with `this`
  BN.prototype.and = function and (num) {
    if (this.length > num.length) return this.clone().iand(num);
    return num.clone().iand(this);
  };

  BN.prototype.uand = function uand (num) {
    if (this.length > num.length) return this.clone().iuand(num);
    return num.clone().iuand(this);
  };

  // Xor `num` with `this` in-place
  BN.prototype.iuxor = function iuxor (num) {
    // a.length > b.length
    var a;
    var b;
    if (this.length > num.length) {
      a = this;
      b = num;
    } else {
      a = num;
      b = this;
    }

    for (var i = 0; i < b.length; i++) {
      this.words[i] = a.words[i] ^ b.words[i];
    }

    if (this !== a) {
      for (; i < a.length; i++) {
        this.words[i] = a.words[i];
      }
    }

    this.length = a.length;

    return this._strip();
  };

  BN.prototype.ixor = function ixor (num) {
    assert((this.negative | num.negative) === 0);
    return this.iuxor(num);
  };

  // Xor `num` with `this`
  BN.prototype.xor = function xor (num) {
    if (this.length > num.length) return this.clone().ixor(num);
    return num.clone().ixor(this);
  };

  BN.prototype.uxor = function uxor (num) {
    if (this.length > num.length) return this.clone().iuxor(num);
    return num.clone().iuxor(this);
  };

  // Not ``this`` with ``width`` bitwidth
  BN.prototype.inotn = function inotn (width) {
    assert(typeof width === 'number' && width >= 0);

    var bytesNeeded = Math.ceil(width / 26) | 0;
    var bitsLeft = width % 26;

    // Extend the buffer with leading zeroes
    this._expand(bytesNeeded);

    if (bitsLeft > 0) {
      bytesNeeded--;
    }

    // Handle complete words
    for (var i = 0; i < bytesNeeded; i++) {
      this.words[i] = ~this.words[i] & 0x3ffffff;
    }

    // Handle the residue
    if (bitsLeft > 0) {
      this.words[i] = ~this.words[i] & (0x3ffffff >> (26 - bitsLeft));
    }

    // And remove leading zeroes
    return this._strip();
  };

  BN.prototype.notn = function notn (width) {
    return this.clone().inotn(width);
  };

  // Set `bit` of `this`
  BN.prototype.setn = function setn (bit, val) {
    assert(typeof bit === 'number' && bit >= 0);

    var off = (bit / 26) | 0;
    var wbit = bit % 26;

    this._expand(off + 1);

    if (val) {
      this.words[off] = this.words[off] | (1 << wbit);
    } else {
      this.words[off] = this.words[off] & ~(1 << wbit);
    }

    return this._strip();
  };

  // Add `num` to `this` in-place
  BN.prototype.iadd = function iadd (num) {
    var r;

    // negative + positive
    if (this.negative !== 0 && num.negative === 0) {
      this.negative = 0;
      r = this.isub(num);
      this.negative ^= 1;
      return this._normSign();

    // positive + negative
    } else if (this.negative === 0 && num.negative !== 0) {
      num.negative = 0;
      r = this.isub(num);
      num.negative = 1;
      return r._normSign();
    }

    // a.length > b.length
    var a, b;
    if (this.length > num.length) {
      a = this;
      b = num;
    } else {
      a = num;
      b = this;
    }

    var carry = 0;
    for (var i = 0; i < b.length; i++) {
      r = (a.words[i] | 0) + (b.words[i] | 0) + carry;
      this.words[i] = r & 0x3ffffff;
      carry = r >>> 26;
    }
    for (; carry !== 0 && i < a.length; i++) {
      r = (a.words[i] | 0) + carry;
      this.words[i] = r & 0x3ffffff;
      carry = r >>> 26;
    }

    this.length = a.length;
    if (carry !== 0) {
      this.words[this.length] = carry;
      this.length++;
    // Copy the rest of the words
    } else if (a !== this) {
      for (; i < a.length; i++) {
        this.words[i] = a.words[i];
      }
    }

    return this;
  };

  // Add `num` to `this`
  BN.prototype.add = function add (num) {
    var res;
    if (num.negative !== 0 && this.negative === 0) {
      num.negative = 0;
      res = this.sub(num);
      num.negative ^= 1;
      return res;
    } else if (num.negative === 0 && this.negative !== 0) {
      this.negative = 0;
      res = num.sub(this);
      this.negative = 1;
      return res;
    }

    if (this.length > num.length) return this.clone().iadd(num);

    return num.clone().iadd(this);
  };

  // Subtract `num` from `this` in-place
  BN.prototype.isub = function isub (num) {
    // this - (-num) = this + num
    if (num.negative !== 0) {
      num.negative = 0;
      var r = this.iadd(num);
      num.negative = 1;
      return r._normSign();

    // -this - num = -(this + num)
    } else if (this.negative !== 0) {
      this.negative = 0;
      this.iadd(num);
      this.negative = 1;
      return this._normSign();
    }

    // At this point both numbers are positive
    var cmp = this.cmp(num);

    // Optimization - zeroify
    if (cmp === 0) {
      this.negative = 0;
      this.length = 1;
      this.words[0] = 0;
      return this;
    }

    // a > b
    var a, b;
    if (cmp > 0) {
      a = this;
      b = num;
    } else {
      a = num;
      b = this;
    }

    var carry = 0;
    for (var i = 0; i < b.length; i++) {
      r = (a.words[i] | 0) - (b.words[i] | 0) + carry;
      carry = r >> 26;
      this.words[i] = r & 0x3ffffff;
    }
    for (; carry !== 0 && i < a.length; i++) {
      r = (a.words[i] | 0) + carry;
      carry = r >> 26;
      this.words[i] = r & 0x3ffffff;
    }

    // Copy rest of the words
    if (carry === 0 && i < a.length && a !== this) {
      for (; i < a.length; i++) {
        this.words[i] = a.words[i];
      }
    }

    this.length = Math.max(this.length, i);

    if (a !== this) {
      this.negative = 1;
    }

    return this._strip();
  };

  // Subtract `num` from `this`
  BN.prototype.sub = function sub (num) {
    return this.clone().isub(num);
  };

  function smallMulTo (self, num, out) {
    out.negative = num.negative ^ self.negative;
    var len = (self.length + num.length) | 0;
    out.length = len;
    len = (len - 1) | 0;

    // Peel one iteration (compiler can't do it, because of code complexity)
    var a = self.words[0] | 0;
    var b = num.words[0] | 0;
    var r = a * b;

    var lo = r & 0x3ffffff;
    var carry = (r / 0x4000000) | 0;
    out.words[0] = lo;

    for (var k = 1; k < len; k++) {
      // Sum all words with the same `i + j = k` and accumulate `ncarry`,
      // note that ncarry could be >= 0x3ffffff
      var ncarry = carry >>> 26;
      var rword = carry & 0x3ffffff;
      var maxJ = Math.min(k, num.length - 1);
      for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
        var i = (k - j) | 0;
        a = self.words[i] | 0;
        b = num.words[j] | 0;
        r = a * b + rword;
        ncarry += (r / 0x4000000) | 0;
        rword = r & 0x3ffffff;
      }
      out.words[k] = rword | 0;
      carry = ncarry | 0;
    }
    if (carry !== 0) {
      out.words[k] = carry | 0;
    } else {
      out.length--;
    }

    return out._strip();
  }

  // TODO(indutny): it may be reasonable to omit it for users who don't need
  // to work with 256-bit numbers, otherwise it gives 20% improvement for 256-bit
  // multiplication (like elliptic secp256k1).
  var comb10MulTo = function comb10MulTo (self, num, out) {
    var a = self.words;
    var b = num.words;
    var o = out.words;
    var c = 0;
    var lo;
    var mid;
    var hi;
    var a0 = a[0] | 0;
    var al0 = a0 & 0x1fff;
    var ah0 = a0 >>> 13;
    var a1 = a[1] | 0;
    var al1 = a1 & 0x1fff;
    var ah1 = a1 >>> 13;
    var a2 = a[2] | 0;
    var al2 = a2 & 0x1fff;
    var ah2 = a2 >>> 13;
    var a3 = a[3] | 0;
    var al3 = a3 & 0x1fff;
    var ah3 = a3 >>> 13;
    var a4 = a[4] | 0;
    var al4 = a4 & 0x1fff;
    var ah4 = a4 >>> 13;
    var a5 = a[5] | 0;
    var al5 = a5 & 0x1fff;
    var ah5 = a5 >>> 13;
    var a6 = a[6] | 0;
    var al6 = a6 & 0x1fff;
    var ah6 = a6 >>> 13;
    var a7 = a[7] | 0;
    var al7 = a7 & 0x1fff;
    var ah7 = a7 >>> 13;
    var a8 = a[8] | 0;
    var al8 = a8 & 0x1fff;
    var ah8 = a8 >>> 13;
    var a9 = a[9] | 0;
    var al9 = a9 & 0x1fff;
    var ah9 = a9 >>> 13;
    var b0 = b[0] | 0;
    var bl0 = b0 & 0x1fff;
    var bh0 = b0 >>> 13;
    var b1 = b[1] | 0;
    var bl1 = b1 & 0x1fff;
    var bh1 = b1 >>> 13;
    var b2 = b[2] | 0;
    var bl2 = b2 & 0x1fff;
    var bh2 = b2 >>> 13;
    var b3 = b[3] | 0;
    var bl3 = b3 & 0x1fff;
    var bh3 = b3 >>> 13;
    var b4 = b[4] | 0;
    var bl4 = b4 & 0x1fff;
    var bh4 = b4 >>> 13;
    var b5 = b[5] | 0;
    var bl5 = b5 & 0x1fff;
    var bh5 = b5 >>> 13;
    var b6 = b[6] | 0;
    var bl6 = b6 & 0x1fff;
    var bh6 = b6 >>> 13;
    var b7 = b[7] | 0;
    var bl7 = b7 & 0x1fff;
    var bh7 = b7 >>> 13;
    var b8 = b[8] | 0;
    var bl8 = b8 & 0x1fff;
    var bh8 = b8 >>> 13;
    var b9 = b[9] | 0;
    var bl9 = b9 & 0x1fff;
    var bh9 = b9 >>> 13;

    out.negative = self.negative ^ num.negative;
    out.length = 19;
    /* k = 0 */
    lo = Math.imul(al0, bl0);
    mid = Math.imul(al0, bh0);
    mid = (mid + Math.imul(ah0, bl0)) | 0;
    hi = Math.imul(ah0, bh0);
    var w0 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w0 >>> 26)) | 0;
    w0 &= 0x3ffffff;
    /* k = 1 */
    lo = Math.imul(al1, bl0);
    mid = Math.imul(al1, bh0);
    mid = (mid + Math.imul(ah1, bl0)) | 0;
    hi = Math.imul(ah1, bh0);
    lo = (lo + Math.imul(al0, bl1)) | 0;
    mid = (mid + Math.imul(al0, bh1)) | 0;
    mid = (mid + Math.imul(ah0, bl1)) | 0;
    hi = (hi + Math.imul(ah0, bh1)) | 0;
    var w1 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w1 >>> 26)) | 0;
    w1 &= 0x3ffffff;
    /* k = 2 */
    lo = Math.imul(al2, bl0);
    mid = Math.imul(al2, bh0);
    mid = (mid + Math.imul(ah2, bl0)) | 0;
    hi = Math.imul(ah2, bh0);
    lo = (lo + Math.imul(al1, bl1)) | 0;
    mid = (mid + Math.imul(al1, bh1)) | 0;
    mid = (mid + Math.imul(ah1, bl1)) | 0;
    hi = (hi + Math.imul(ah1, bh1)) | 0;
    lo = (lo + Math.imul(al0, bl2)) | 0;
    mid = (mid + Math.imul(al0, bh2)) | 0;
    mid = (mid + Math.imul(ah0, bl2)) | 0;
    hi = (hi + Math.imul(ah0, bh2)) | 0;
    var w2 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w2 >>> 26)) | 0;
    w2 &= 0x3ffffff;
    /* k = 3 */
    lo = Math.imul(al3, bl0);
    mid = Math.imul(al3, bh0);
    mid = (mid + Math.imul(ah3, bl0)) | 0;
    hi = Math.imul(ah3, bh0);
    lo = (lo + Math.imul(al2, bl1)) | 0;
    mid = (mid + Math.imul(al2, bh1)) | 0;
    mid = (mid + Math.imul(ah2, bl1)) | 0;
    hi = (hi + Math.imul(ah2, bh1)) | 0;
    lo = (lo + Math.imul(al1, bl2)) | 0;
    mid = (mid + Math.imul(al1, bh2)) | 0;
    mid = (mid + Math.imul(ah1, bl2)) | 0;
    hi = (hi + Math.imul(ah1, bh2)) | 0;
    lo = (lo + Math.imul(al0, bl3)) | 0;
    mid = (mid + Math.imul(al0, bh3)) | 0;
    mid = (mid + Math.imul(ah0, bl3)) | 0;
    hi = (hi + Math.imul(ah0, bh3)) | 0;
    var w3 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w3 >>> 26)) | 0;
    w3 &= 0x3ffffff;
    /* k = 4 */
    lo = Math.imul(al4, bl0);
    mid = Math.imul(al4, bh0);
    mid = (mid + Math.imul(ah4, bl0)) | 0;
    hi = Math.imul(ah4, bh0);
    lo = (lo + Math.imul(al3, bl1)) | 0;
    mid = (mid + Math.imul(al3, bh1)) | 0;
    mid = (mid + Math.imul(ah3, bl1)) | 0;
    hi = (hi + Math.imul(ah3, bh1)) | 0;
    lo = (lo + Math.imul(al2, bl2)) | 0;
    mid = (mid + Math.imul(al2, bh2)) | 0;
    mid = (mid + Math.imul(ah2, bl2)) | 0;
    hi = (hi + Math.imul(ah2, bh2)) | 0;
    lo = (lo + Math.imul(al1, bl3)) | 0;
    mid = (mid + Math.imul(al1, bh3)) | 0;
    mid = (mid + Math.imul(ah1, bl3)) | 0;
    hi = (hi + Math.imul(ah1, bh3)) | 0;
    lo = (lo + Math.imul(al0, bl4)) | 0;
    mid = (mid + Math.imul(al0, bh4)) | 0;
    mid = (mid + Math.imul(ah0, bl4)) | 0;
    hi = (hi + Math.imul(ah0, bh4)) | 0;
    var w4 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w4 >>> 26)) | 0;
    w4 &= 0x3ffffff;
    /* k = 5 */
    lo = Math.imul(al5, bl0);
    mid = Math.imul(al5, bh0);
    mid = (mid + Math.imul(ah5, bl0)) | 0;
    hi = Math.imul(ah5, bh0);
    lo = (lo + Math.imul(al4, bl1)) | 0;
    mid = (mid + Math.imul(al4, bh1)) | 0;
    mid = (mid + Math.imul(ah4, bl1)) | 0;
    hi = (hi + Math.imul(ah4, bh1)) | 0;
    lo = (lo + Math.imul(al3, bl2)) | 0;
    mid = (mid + Math.imul(al3, bh2)) | 0;
    mid = (mid + Math.imul(ah3, bl2)) | 0;
    hi = (hi + Math.imul(ah3, bh2)) | 0;
    lo = (lo + Math.imul(al2, bl3)) | 0;
    mid = (mid + Math.imul(al2, bh3)) | 0;
    mid = (mid + Math.imul(ah2, bl3)) | 0;
    hi = (hi + Math.imul(ah2, bh3)) | 0;
    lo = (lo + Math.imul(al1, bl4)) | 0;
    mid = (mid + Math.imul(al1, bh4)) | 0;
    mid = (mid + Math.imul(ah1, bl4)) | 0;
    hi = (hi + Math.imul(ah1, bh4)) | 0;
    lo = (lo + Math.imul(al0, bl5)) | 0;
    mid = (mid + Math.imul(al0, bh5)) | 0;
    mid = (mid + Math.imul(ah0, bl5)) | 0;
    hi = (hi + Math.imul(ah0, bh5)) | 0;
    var w5 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w5 >>> 26)) | 0;
    w5 &= 0x3ffffff;
    /* k = 6 */
    lo = Math.imul(al6, bl0);
    mid = Math.imul(al6, bh0);
    mid = (mid + Math.imul(ah6, bl0)) | 0;
    hi = Math.imul(ah6, bh0);
    lo = (lo + Math.imul(al5, bl1)) | 0;
    mid = (mid + Math.imul(al5, bh1)) | 0;
    mid = (mid + Math.imul(ah5, bl1)) | 0;
    hi = (hi + Math.imul(ah5, bh1)) | 0;
    lo = (lo + Math.imul(al4, bl2)) | 0;
    mid = (mid + Math.imul(al4, bh2)) | 0;
    mid = (mid + Math.imul(ah4, bl2)) | 0;
    hi = (hi + Math.imul(ah4, bh2)) | 0;
    lo = (lo + Math.imul(al3, bl3)) | 0;
    mid = (mid + Math.imul(al3, bh3)) | 0;
    mid = (mid + Math.imul(ah3, bl3)) | 0;
    hi = (hi + Math.imul(ah3, bh3)) | 0;
    lo = (lo + Math.imul(al2, bl4)) | 0;
    mid = (mid + Math.imul(al2, bh4)) | 0;
    mid = (mid + Math.imul(ah2, bl4)) | 0;
    hi = (hi + Math.imul(ah2, bh4)) | 0;
    lo = (lo + Math.imul(al1, bl5)) | 0;
    mid = (mid + Math.imul(al1, bh5)) | 0;
    mid = (mid + Math.imul(ah1, bl5)) | 0;
    hi = (hi + Math.imul(ah1, bh5)) | 0;
    lo = (lo + Math.imul(al0, bl6)) | 0;
    mid = (mid + Math.imul(al0, bh6)) | 0;
    mid = (mid + Math.imul(ah0, bl6)) | 0;
    hi = (hi + Math.imul(ah0, bh6)) | 0;
    var w6 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w6 >>> 26)) | 0;
    w6 &= 0x3ffffff;
    /* k = 7 */
    lo = Math.imul(al7, bl0);
    mid = Math.imul(al7, bh0);
    mid = (mid + Math.imul(ah7, bl0)) | 0;
    hi = Math.imul(ah7, bh0);
    lo = (lo + Math.imul(al6, bl1)) | 0;
    mid = (mid + Math.imul(al6, bh1)) | 0;
    mid = (mid + Math.imul(ah6, bl1)) | 0;
    hi = (hi + Math.imul(ah6, bh1)) | 0;
    lo = (lo + Math.imul(al5, bl2)) | 0;
    mid = (mid + Math.imul(al5, bh2)) | 0;
    mid = (mid + Math.imul(ah5, bl2)) | 0;
    hi = (hi + Math.imul(ah5, bh2)) | 0;
    lo = (lo + Math.imul(al4, bl3)) | 0;
    mid = (mid + Math.imul(al4, bh3)) | 0;
    mid = (mid + Math.imul(ah4, bl3)) | 0;
    hi = (hi + Math.imul(ah4, bh3)) | 0;
    lo = (lo + Math.imul(al3, bl4)) | 0;
    mid = (mid + Math.imul(al3, bh4)) | 0;
    mid = (mid + Math.imul(ah3, bl4)) | 0;
    hi = (hi + Math.imul(ah3, bh4)) | 0;
    lo = (lo + Math.imul(al2, bl5)) | 0;
    mid = (mid + Math.imul(al2, bh5)) | 0;
    mid = (mid + Math.imul(ah2, bl5)) | 0;
    hi = (hi + Math.imul(ah2, bh5)) | 0;
    lo = (lo + Math.imul(al1, bl6)) | 0;
    mid = (mid + Math.imul(al1, bh6)) | 0;
    mid = (mid + Math.imul(ah1, bl6)) | 0;
    hi = (hi + Math.imul(ah1, bh6)) | 0;
    lo = (lo + Math.imul(al0, bl7)) | 0;
    mid = (mid + Math.imul(al0, bh7)) | 0;
    mid = (mid + Math.imul(ah0, bl7)) | 0;
    hi = (hi + Math.imul(ah0, bh7)) | 0;
    var w7 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w7 >>> 26)) | 0;
    w7 &= 0x3ffffff;
    /* k = 8 */
    lo = Math.imul(al8, bl0);
    mid = Math.imul(al8, bh0);
    mid = (mid + Math.imul(ah8, bl0)) | 0;
    hi = Math.imul(ah8, bh0);
    lo = (lo + Math.imul(al7, bl1)) | 0;
    mid = (mid + Math.imul(al7, bh1)) | 0;
    mid = (mid + Math.imul(ah7, bl1)) | 0;
    hi = (hi + Math.imul(ah7, bh1)) | 0;
    lo = (lo + Math.imul(al6, bl2)) | 0;
    mid = (mid + Math.imul(al6, bh2)) | 0;
    mid = (mid + Math.imul(ah6, bl2)) | 0;
    hi = (hi + Math.imul(ah6, bh2)) | 0;
    lo = (lo + Math.imul(al5, bl3)) | 0;
    mid = (mid + Math.imul(al5, bh3)) | 0;
    mid = (mid + Math.imul(ah5, bl3)) | 0;
    hi = (hi + Math.imul(ah5, bh3)) | 0;
    lo = (lo + Math.imul(al4, bl4)) | 0;
    mid = (mid + Math.imul(al4, bh4)) | 0;
    mid = (mid + Math.imul(ah4, bl4)) | 0;
    hi = (hi + Math.imul(ah4, bh4)) | 0;
    lo = (lo + Math.imul(al3, bl5)) | 0;
    mid = (mid + Math.imul(al3, bh5)) | 0;
    mid = (mid + Math.imul(ah3, bl5)) | 0;
    hi = (hi + Math.imul(ah3, bh5)) | 0;
    lo = (lo + Math.imul(al2, bl6)) | 0;
    mid = (mid + Math.imul(al2, bh6)) | 0;
    mid = (mid + Math.imul(ah2, bl6)) | 0;
    hi = (hi + Math.imul(ah2, bh6)) | 0;
    lo = (lo + Math.imul(al1, bl7)) | 0;
    mid = (mid + Math.imul(al1, bh7)) | 0;
    mid = (mid + Math.imul(ah1, bl7)) | 0;
    hi = (hi + Math.imul(ah1, bh7)) | 0;
    lo = (lo + Math.imul(al0, bl8)) | 0;
    mid = (mid + Math.imul(al0, bh8)) | 0;
    mid = (mid + Math.imul(ah0, bl8)) | 0;
    hi = (hi + Math.imul(ah0, bh8)) | 0;
    var w8 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w8 >>> 26)) | 0;
    w8 &= 0x3ffffff;
    /* k = 9 */
    lo = Math.imul(al9, bl0);
    mid = Math.imul(al9, bh0);
    mid = (mid + Math.imul(ah9, bl0)) | 0;
    hi = Math.imul(ah9, bh0);
    lo = (lo + Math.imul(al8, bl1)) | 0;
    mid = (mid + Math.imul(al8, bh1)) | 0;
    mid = (mid + Math.imul(ah8, bl1)) | 0;
    hi = (hi + Math.imul(ah8, bh1)) | 0;
    lo = (lo + Math.imul(al7, bl2)) | 0;
    mid = (mid + Math.imul(al7, bh2)) | 0;
    mid = (mid + Math.imul(ah7, bl2)) | 0;
    hi = (hi + Math.imul(ah7, bh2)) | 0;
    lo = (lo + Math.imul(al6, bl3)) | 0;
    mid = (mid + Math.imul(al6, bh3)) | 0;
    mid = (mid + Math.imul(ah6, bl3)) | 0;
    hi = (hi + Math.imul(ah6, bh3)) | 0;
    lo = (lo + Math.imul(al5, bl4)) | 0;
    mid = (mid + Math.imul(al5, bh4)) | 0;
    mid = (mid + Math.imul(ah5, bl4)) | 0;
    hi = (hi + Math.imul(ah5, bh4)) | 0;
    lo = (lo + Math.imul(al4, bl5)) | 0;
    mid = (mid + Math.imul(al4, bh5)) | 0;
    mid = (mid + Math.imul(ah4, bl5)) | 0;
    hi = (hi + Math.imul(ah4, bh5)) | 0;
    lo = (lo + Math.imul(al3, bl6)) | 0;
    mid = (mid + Math.imul(al3, bh6)) | 0;
    mid = (mid + Math.imul(ah3, bl6)) | 0;
    hi = (hi + Math.imul(ah3, bh6)) | 0;
    lo = (lo + Math.imul(al2, bl7)) | 0;
    mid = (mid + Math.imul(al2, bh7)) | 0;
    mid = (mid + Math.imul(ah2, bl7)) | 0;
    hi = (hi + Math.imul(ah2, bh7)) | 0;
    lo = (lo + Math.imul(al1, bl8)) | 0;
    mid = (mid + Math.imul(al1, bh8)) | 0;
    mid = (mid + Math.imul(ah1, bl8)) | 0;
    hi = (hi + Math.imul(ah1, bh8)) | 0;
    lo = (lo + Math.imul(al0, bl9)) | 0;
    mid = (mid + Math.imul(al0, bh9)) | 0;
    mid = (mid + Math.imul(ah0, bl9)) | 0;
    hi = (hi + Math.imul(ah0, bh9)) | 0;
    var w9 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w9 >>> 26)) | 0;
    w9 &= 0x3ffffff;
    /* k = 10 */
    lo = Math.imul(al9, bl1);
    mid = Math.imul(al9, bh1);
    mid = (mid + Math.imul(ah9, bl1)) | 0;
    hi = Math.imul(ah9, bh1);
    lo = (lo + Math.imul(al8, bl2)) | 0;
    mid = (mid + Math.imul(al8, bh2)) | 0;
    mid = (mid + Math.imul(ah8, bl2)) | 0;
    hi = (hi + Math.imul(ah8, bh2)) | 0;
    lo = (lo + Math.imul(al7, bl3)) | 0;
    mid = (mid + Math.imul(al7, bh3)) | 0;
    mid = (mid + Math.imul(ah7, bl3)) | 0;
    hi = (hi + Math.imul(ah7, bh3)) | 0;
    lo = (lo + Math.imul(al6, bl4)) | 0;
    mid = (mid + Math.imul(al6, bh4)) | 0;
    mid = (mid + Math.imul(ah6, bl4)) | 0;
    hi = (hi + Math.imul(ah6, bh4)) | 0;
    lo = (lo + Math.imul(al5, bl5)) | 0;
    mid = (mid + Math.imul(al5, bh5)) | 0;
    mid = (mid + Math.imul(ah5, bl5)) | 0;
    hi = (hi + Math.imul(ah5, bh5)) | 0;
    lo = (lo + Math.imul(al4, bl6)) | 0;
    mid = (mid + Math.imul(al4, bh6)) | 0;
    mid = (mid + Math.imul(ah4, bl6)) | 0;
    hi = (hi + Math.imul(ah4, bh6)) | 0;
    lo = (lo + Math.imul(al3, bl7)) | 0;
    mid = (mid + Math.imul(al3, bh7)) | 0;
    mid = (mid + Math.imul(ah3, bl7)) | 0;
    hi = (hi + Math.imul(ah3, bh7)) | 0;
    lo = (lo + Math.imul(al2, bl8)) | 0;
    mid = (mid + Math.imul(al2, bh8)) | 0;
    mid = (mid + Math.imul(ah2, bl8)) | 0;
    hi = (hi + Math.imul(ah2, bh8)) | 0;
    lo = (lo + Math.imul(al1, bl9)) | 0;
    mid = (mid + Math.imul(al1, bh9)) | 0;
    mid = (mid + Math.imul(ah1, bl9)) | 0;
    hi = (hi + Math.imul(ah1, bh9)) | 0;
    var w10 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w10 >>> 26)) | 0;
    w10 &= 0x3ffffff;
    /* k = 11 */
    lo = Math.imul(al9, bl2);
    mid = Math.imul(al9, bh2);
    mid = (mid + Math.imul(ah9, bl2)) | 0;
    hi = Math.imul(ah9, bh2);
    lo = (lo + Math.imul(al8, bl3)) | 0;
    mid = (mid + Math.imul(al8, bh3)) | 0;
    mid = (mid + Math.imul(ah8, bl3)) | 0;
    hi = (hi + Math.imul(ah8, bh3)) | 0;
    lo = (lo + Math.imul(al7, bl4)) | 0;
    mid = (mid + Math.imul(al7, bh4)) | 0;
    mid = (mid + Math.imul(ah7, bl4)) | 0;
    hi = (hi + Math.imul(ah7, bh4)) | 0;
    lo = (lo + Math.imul(al6, bl5)) | 0;
    mid = (mid + Math.imul(al6, bh5)) | 0;
    mid = (mid + Math.imul(ah6, bl5)) | 0;
    hi = (hi + Math.imul(ah6, bh5)) | 0;
    lo = (lo + Math.imul(al5, bl6)) | 0;
    mid = (mid + Math.imul(al5, bh6)) | 0;
    mid = (mid + Math.imul(ah5, bl6)) | 0;
    hi = (hi + Math.imul(ah5, bh6)) | 0;
    lo = (lo + Math.imul(al4, bl7)) | 0;
    mid = (mid + Math.imul(al4, bh7)) | 0;
    mid = (mid + Math.imul(ah4, bl7)) | 0;
    hi = (hi + Math.imul(ah4, bh7)) | 0;
    lo = (lo + Math.imul(al3, bl8)) | 0;
    mid = (mid + Math.imul(al3, bh8)) | 0;
    mid = (mid + Math.imul(ah3, bl8)) | 0;
    hi = (hi + Math.imul(ah3, bh8)) | 0;
    lo = (lo + Math.imul(al2, bl9)) | 0;
    mid = (mid + Math.imul(al2, bh9)) | 0;
    mid = (mid + Math.imul(ah2, bl9)) | 0;
    hi = (hi + Math.imul(ah2, bh9)) | 0;
    var w11 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w11 >>> 26)) | 0;
    w11 &= 0x3ffffff;
    /* k = 12 */
    lo = Math.imul(al9, bl3);
    mid = Math.imul(al9, bh3);
    mid = (mid + Math.imul(ah9, bl3)) | 0;
    hi = Math.imul(ah9, bh3);
    lo = (lo + Math.imul(al8, bl4)) | 0;
    mid = (mid + Math.imul(al8, bh4)) | 0;
    mid = (mid + Math.imul(ah8, bl4)) | 0;
    hi = (hi + Math.imul(ah8, bh4)) | 0;
    lo = (lo + Math.imul(al7, bl5)) | 0;
    mid = (mid + Math.imul(al7, bh5)) | 0;
    mid = (mid + Math.imul(ah7, bl5)) | 0;
    hi = (hi + Math.imul(ah7, bh5)) | 0;
    lo = (lo + Math.imul(al6, bl6)) | 0;
    mid = (mid + Math.imul(al6, bh6)) | 0;
    mid = (mid + Math.imul(ah6, bl6)) | 0;
    hi = (hi + Math.imul(ah6, bh6)) | 0;
    lo = (lo + Math.imul(al5, bl7)) | 0;
    mid = (mid + Math.imul(al5, bh7)) | 0;
    mid = (mid + Math.imul(ah5, bl7)) | 0;
    hi = (hi + Math.imul(ah5, bh7)) | 0;
    lo = (lo + Math.imul(al4, bl8)) | 0;
    mid = (mid + Math.imul(al4, bh8)) | 0;
    mid = (mid + Math.imul(ah4, bl8)) | 0;
    hi = (hi + Math.imul(ah4, bh8)) | 0;
    lo = (lo + Math.imul(al3, bl9)) | 0;
    mid = (mid + Math.imul(al3, bh9)) | 0;
    mid = (mid + Math.imul(ah3, bl9)) | 0;
    hi = (hi + Math.imul(ah3, bh9)) | 0;
    var w12 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w12 >>> 26)) | 0;
    w12 &= 0x3ffffff;
    /* k = 13 */
    lo = Math.imul(al9, bl4);
    mid = Math.imul(al9, bh4);
    mid = (mid + Math.imul(ah9, bl4)) | 0;
    hi = Math.imul(ah9, bh4);
    lo = (lo + Math.imul(al8, bl5)) | 0;
    mid = (mid + Math.imul(al8, bh5)) | 0;
    mid = (mid + Math.imul(ah8, bl5)) | 0;
    hi = (hi + Math.imul(ah8, bh5)) | 0;
    lo = (lo + Math.imul(al7, bl6)) | 0;
    mid = (mid + Math.imul(al7, bh6)) | 0;
    mid = (mid + Math.imul(ah7, bl6)) | 0;
    hi = (hi + Math.imul(ah7, bh6)) | 0;
    lo = (lo + Math.imul(al6, bl7)) | 0;
    mid = (mid + Math.imul(al6, bh7)) | 0;
    mid = (mid + Math.imul(ah6, bl7)) | 0;
    hi = (hi + Math.imul(ah6, bh7)) | 0;
    lo = (lo + Math.imul(al5, bl8)) | 0;
    mid = (mid + Math.imul(al5, bh8)) | 0;
    mid = (mid + Math.imul(ah5, bl8)) | 0;
    hi = (hi + Math.imul(ah5, bh8)) | 0;
    lo = (lo + Math.imul(al4, bl9)) | 0;
    mid = (mid + Math.imul(al4, bh9)) | 0;
    mid = (mid + Math.imul(ah4, bl9)) | 0;
    hi = (hi + Math.imul(ah4, bh9)) | 0;
    var w13 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w13 >>> 26)) | 0;
    w13 &= 0x3ffffff;
    /* k = 14 */
    lo = Math.imul(al9, bl5);
    mid = Math.imul(al9, bh5);
    mid = (mid + Math.imul(ah9, bl5)) | 0;
    hi = Math.imul(ah9, bh5);
    lo = (lo + Math.imul(al8, bl6)) | 0;
    mid = (mid + Math.imul(al8, bh6)) | 0;
    mid = (mid + Math.imul(ah8, bl6)) | 0;
    hi = (hi + Math.imul(ah8, bh6)) | 0;
    lo = (lo + Math.imul(al7, bl7)) | 0;
    mid = (mid + Math.imul(al7, bh7)) | 0;
    mid = (mid + Math.imul(ah7, bl7)) | 0;
    hi = (hi + Math.imul(ah7, bh7)) | 0;
    lo = (lo + Math.imul(al6, bl8)) | 0;
    mid = (mid + Math.imul(al6, bh8)) | 0;
    mid = (mid + Math.imul(ah6, bl8)) | 0;
    hi = (hi + Math.imul(ah6, bh8)) | 0;
    lo = (lo + Math.imul(al5, bl9)) | 0;
    mid = (mid + Math.imul(al5, bh9)) | 0;
    mid = (mid + Math.imul(ah5, bl9)) | 0;
    hi = (hi + Math.imul(ah5, bh9)) | 0;
    var w14 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w14 >>> 26)) | 0;
    w14 &= 0x3ffffff;
    /* k = 15 */
    lo = Math.imul(al9, bl6);
    mid = Math.imul(al9, bh6);
    mid = (mid + Math.imul(ah9, bl6)) | 0;
    hi = Math.imul(ah9, bh6);
    lo = (lo + Math.imul(al8, bl7)) | 0;
    mid = (mid + Math.imul(al8, bh7)) | 0;
    mid = (mid + Math.imul(ah8, bl7)) | 0;
    hi = (hi + Math.imul(ah8, bh7)) | 0;
    lo = (lo + Math.imul(al7, bl8)) | 0;
    mid = (mid + Math.imul(al7, bh8)) | 0;
    mid = (mid + Math.imul(ah7, bl8)) | 0;
    hi = (hi + Math.imul(ah7, bh8)) | 0;
    lo = (lo + Math.imul(al6, bl9)) | 0;
    mid = (mid + Math.imul(al6, bh9)) | 0;
    mid = (mid + Math.imul(ah6, bl9)) | 0;
    hi = (hi + Math.imul(ah6, bh9)) | 0;
    var w15 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w15 >>> 26)) | 0;
    w15 &= 0x3ffffff;
    /* k = 16 */
    lo = Math.imul(al9, bl7);
    mid = Math.imul(al9, bh7);
    mid = (mid + Math.imul(ah9, bl7)) | 0;
    hi = Math.imul(ah9, bh7);
    lo = (lo + Math.imul(al8, bl8)) | 0;
    mid = (mid + Math.imul(al8, bh8)) | 0;
    mid = (mid + Math.imul(ah8, bl8)) | 0;
    hi = (hi + Math.imul(ah8, bh8)) | 0;
    lo = (lo + Math.imul(al7, bl9)) | 0;
    mid = (mid + Math.imul(al7, bh9)) | 0;
    mid = (mid + Math.imul(ah7, bl9)) | 0;
    hi = (hi + Math.imul(ah7, bh9)) | 0;
    var w16 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w16 >>> 26)) | 0;
    w16 &= 0x3ffffff;
    /* k = 17 */
    lo = Math.imul(al9, bl8);
    mid = Math.imul(al9, bh8);
    mid = (mid + Math.imul(ah9, bl8)) | 0;
    hi = Math.imul(ah9, bh8);
    lo = (lo + Math.imul(al8, bl9)) | 0;
    mid = (mid + Math.imul(al8, bh9)) | 0;
    mid = (mid + Math.imul(ah8, bl9)) | 0;
    hi = (hi + Math.imul(ah8, bh9)) | 0;
    var w17 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w17 >>> 26)) | 0;
    w17 &= 0x3ffffff;
    /* k = 18 */
    lo = Math.imul(al9, bl9);
    mid = Math.imul(al9, bh9);
    mid = (mid + Math.imul(ah9, bl9)) | 0;
    hi = Math.imul(ah9, bh9);
    var w18 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w18 >>> 26)) | 0;
    w18 &= 0x3ffffff;
    o[0] = w0;
    o[1] = w1;
    o[2] = w2;
    o[3] = w3;
    o[4] = w4;
    o[5] = w5;
    o[6] = w6;
    o[7] = w7;
    o[8] = w8;
    o[9] = w9;
    o[10] = w10;
    o[11] = w11;
    o[12] = w12;
    o[13] = w13;
    o[14] = w14;
    o[15] = w15;
    o[16] = w16;
    o[17] = w17;
    o[18] = w18;
    if (c !== 0) {
      o[19] = c;
      out.length++;
    }
    return out;
  };

  // Polyfill comb
  if (!Math.imul) {
    comb10MulTo = smallMulTo;
  }

  function bigMulTo (self, num, out) {
    out.negative = num.negative ^ self.negative;
    out.length = self.length + num.length;

    var carry = 0;
    var hncarry = 0;
    for (var k = 0; k < out.length - 1; k++) {
      // Sum all words with the same `i + j = k` and accumulate `ncarry`,
      // note that ncarry could be >= 0x3ffffff
      var ncarry = hncarry;
      hncarry = 0;
      var rword = carry & 0x3ffffff;
      var maxJ = Math.min(k, num.length - 1);
      for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
        var i = k - j;
        var a = self.words[i] | 0;
        var b = num.words[j] | 0;
        var r = a * b;

        var lo = r & 0x3ffffff;
        ncarry = (ncarry + ((r / 0x4000000) | 0)) | 0;
        lo = (lo + rword) | 0;
        rword = lo & 0x3ffffff;
        ncarry = (ncarry + (lo >>> 26)) | 0;

        hncarry += ncarry >>> 26;
        ncarry &= 0x3ffffff;
      }
      out.words[k] = rword;
      carry = ncarry;
      ncarry = hncarry;
    }
    if (carry !== 0) {
      out.words[k] = carry;
    } else {
      out.length--;
    }

    return out._strip();
  }

  function jumboMulTo (self, num, out) {
    // Temporary disable, see https://github.com/indutny/bn.js/issues/211
    // var fftm = new FFTM();
    // return fftm.mulp(self, num, out);
    return bigMulTo(self, num, out);
  }

  BN.prototype.mulTo = function mulTo (num, out) {
    var res;
    var len = this.length + num.length;
    if (this.length === 10 && num.length === 10) {
      res = comb10MulTo(this, num, out);
    } else if (len < 63) {
      res = smallMulTo(this, num, out);
    } else if (len < 1024) {
      res = bigMulTo(this, num, out);
    } else {
      res = jumboMulTo(this, num, out);
    }

    return res;
  };

  // Cooley-Tukey algorithm for FFT
  // slightly revisited to rely on looping instead of recursion

  function FFTM (x, y) {
    this.x = x;
    this.y = y;
  }

  FFTM.prototype.makeRBT = function makeRBT (N) {
    var t = new Array(N);
    var l = BN.prototype._countBits(N) - 1;
    for (var i = 0; i < N; i++) {
      t[i] = this.revBin(i, l, N);
    }

    return t;
  };

  // Returns binary-reversed representation of `x`
  FFTM.prototype.revBin = function revBin (x, l, N) {
    if (x === 0 || x === N - 1) return x;

    var rb = 0;
    for (var i = 0; i < l; i++) {
      rb |= (x & 1) << (l - i - 1);
      x >>= 1;
    }

    return rb;
  };

  // Performs "tweedling" phase, therefore 'emulating'
  // behaviour of the recursive algorithm
  FFTM.prototype.permute = function permute (rbt, rws, iws, rtws, itws, N) {
    for (var i = 0; i < N; i++) {
      rtws[i] = rws[rbt[i]];
      itws[i] = iws[rbt[i]];
    }
  };

  FFTM.prototype.transform = function transform (rws, iws, rtws, itws, N, rbt) {
    this.permute(rbt, rws, iws, rtws, itws, N);

    for (var s = 1; s < N; s <<= 1) {
      var l = s << 1;

      var rtwdf = Math.cos(2 * Math.PI / l);
      var itwdf = Math.sin(2 * Math.PI / l);

      for (var p = 0; p < N; p += l) {
        var rtwdf_ = rtwdf;
        var itwdf_ = itwdf;

        for (var j = 0; j < s; j++) {
          var re = rtws[p + j];
          var ie = itws[p + j];

          var ro = rtws[p + j + s];
          var io = itws[p + j + s];

          var rx = rtwdf_ * ro - itwdf_ * io;

          io = rtwdf_ * io + itwdf_ * ro;
          ro = rx;

          rtws[p + j] = re + ro;
          itws[p + j] = ie + io;

          rtws[p + j + s] = re - ro;
          itws[p + j + s] = ie - io;

          /* jshint maxdepth : false */
          if (j !== l) {
            rx = rtwdf * rtwdf_ - itwdf * itwdf_;

            itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;
            rtwdf_ = rx;
          }
        }
      }
    }
  };

  FFTM.prototype.guessLen13b = function guessLen13b (n, m) {
    var N = Math.max(m, n) | 1;
    var odd = N & 1;
    var i = 0;
    for (N = N / 2 | 0; N; N = N >>> 1) {
      i++;
    }

    return 1 << i + 1 + odd;
  };

  FFTM.prototype.conjugate = function conjugate (rws, iws, N) {
    if (N <= 1) return;

    for (var i = 0; i < N / 2; i++) {
      var t = rws[i];

      rws[i] = rws[N - i - 1];
      rws[N - i - 1] = t;

      t = iws[i];

      iws[i] = -iws[N - i - 1];
      iws[N - i - 1] = -t;
    }
  };

  FFTM.prototype.normalize13b = function normalize13b (ws, N) {
    var carry = 0;
    for (var i = 0; i < N / 2; i++) {
      var w = Math.round(ws[2 * i + 1] / N) * 0x2000 +
        Math.round(ws[2 * i] / N) +
        carry;

      ws[i] = w & 0x3ffffff;

      if (w < 0x4000000) {
        carry = 0;
      } else {
        carry = w / 0x4000000 | 0;
      }
    }

    return ws;
  };

  FFTM.prototype.convert13b = function convert13b (ws, len, rws, N) {
    var carry = 0;
    for (var i = 0; i < len; i++) {
      carry = carry + (ws[i] | 0);

      rws[2 * i] = carry & 0x1fff; carry = carry >>> 13;
      rws[2 * i + 1] = carry & 0x1fff; carry = carry >>> 13;
    }

    // Pad with zeroes
    for (i = 2 * len; i < N; ++i) {
      rws[i] = 0;
    }

    assert(carry === 0);
    assert((carry & ~0x1fff) === 0);
  };

  FFTM.prototype.stub = function stub (N) {
    var ph = new Array(N);
    for (var i = 0; i < N; i++) {
      ph[i] = 0;
    }

    return ph;
  };

  FFTM.prototype.mulp = function mulp (x, y, out) {
    var N = 2 * this.guessLen13b(x.length, y.length);

    var rbt = this.makeRBT(N);

    var _ = this.stub(N);

    var rws = new Array(N);
    var rwst = new Array(N);
    var iwst = new Array(N);

    var nrws = new Array(N);
    var nrwst = new Array(N);
    var niwst = new Array(N);

    var rmws = out.words;
    rmws.length = N;

    this.convert13b(x.words, x.length, rws, N);
    this.convert13b(y.words, y.length, nrws, N);

    this.transform(rws, _, rwst, iwst, N, rbt);
    this.transform(nrws, _, nrwst, niwst, N, rbt);

    for (var i = 0; i < N; i++) {
      var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];
      iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];
      rwst[i] = rx;
    }

    this.conjugate(rwst, iwst, N);
    this.transform(rwst, iwst, rmws, _, N, rbt);
    this.conjugate(rmws, _, N);
    this.normalize13b(rmws, N);

    out.negative = x.negative ^ y.negative;
    out.length = x.length + y.length;
    return out._strip();
  };

  // Multiply `this` by `num`
  BN.prototype.mul = function mul (num) {
    var out = new BN(null);
    out.words = new Array(this.length + num.length);
    return this.mulTo(num, out);
  };

  // Multiply employing FFT
  BN.prototype.mulf = function mulf (num) {
    var out = new BN(null);
    out.words = new Array(this.length + num.length);
    return jumboMulTo(this, num, out);
  };

  // In-place Multiplication
  BN.prototype.imul = function imul (num) {
    return this.clone().mulTo(num, this);
  };

  BN.prototype.imuln = function imuln (num) {
    var isNegNum = num < 0;
    if (isNegNum) num = -num;

    assert(typeof num === 'number');
    assert(num < 0x4000000);

    // Carry
    var carry = 0;
    for (var i = 0; i < this.length; i++) {
      var w = (this.words[i] | 0) * num;
      var lo = (w & 0x3ffffff) + (carry & 0x3ffffff);
      carry >>= 26;
      carry += (w / 0x4000000) | 0;
      // NOTE: lo is 27bit maximum
      carry += lo >>> 26;
      this.words[i] = lo & 0x3ffffff;
    }

    if (carry !== 0) {
      this.words[i] = carry;
      this.length++;
    }

    return isNegNum ? this.ineg() : this;
  };

  BN.prototype.muln = function muln (num) {
    return this.clone().imuln(num);
  };

  // `this` * `this`
  BN.prototype.sqr = function sqr () {
    return this.mul(this);
  };

  // `this` * `this` in-place
  BN.prototype.isqr = function isqr () {
    return this.imul(this.clone());
  };

  // Math.pow(`this`, `num`)
  BN.prototype.pow = function pow (num) {
    var w = toBitArray(num);
    if (w.length === 0) return new BN(1);

    // Skip leading zeroes
    var res = this;
    for (var i = 0; i < w.length; i++, res = res.sqr()) {
      if (w[i] !== 0) break;
    }

    if (++i < w.length) {
      for (var q = res.sqr(); i < w.length; i++, q = q.sqr()) {
        if (w[i] === 0) continue;

        res = res.mul(q);
      }
    }

    return res;
  };

  // Shift-left in-place
  BN.prototype.iushln = function iushln (bits) {
    assert(typeof bits === 'number' && bits >= 0);
    var r = bits % 26;
    var s = (bits - r) / 26;
    var carryMask = (0x3ffffff >>> (26 - r)) << (26 - r);
    var i;

    if (r !== 0) {
      var carry = 0;

      for (i = 0; i < this.length; i++) {
        var newCarry = this.words[i] & carryMask;
        var c = ((this.words[i] | 0) - newCarry) << r;
        this.words[i] = c | carry;
        carry = newCarry >>> (26 - r);
      }

      if (carry) {
        this.words[i] = carry;
        this.length++;
      }
    }

    if (s !== 0) {
      for (i = this.length - 1; i >= 0; i--) {
        this.words[i + s] = this.words[i];
      }

      for (i = 0; i < s; i++) {
        this.words[i] = 0;
      }

      this.length += s;
    }

    return this._strip();
  };

  BN.prototype.ishln = function ishln (bits) {
    // TODO(indutny): implement me
    assert(this.negative === 0);
    return this.iushln(bits);
  };

  // Shift-right in-place
  // NOTE: `hint` is a lowest bit before trailing zeroes
  // NOTE: if `extended` is present - it will be filled with destroyed bits
  BN.prototype.iushrn = function iushrn (bits, hint, extended) {
    assert(typeof bits === 'number' && bits >= 0);
    var h;
    if (hint) {
      h = (hint - (hint % 26)) / 26;
    } else {
      h = 0;
    }

    var r = bits % 26;
    var s = Math.min((bits - r) / 26, this.length);
    var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);
    var maskedWords = extended;

    h -= s;
    h = Math.max(0, h);

    // Extended mode, copy masked part
    if (maskedWords) {
      for (var i = 0; i < s; i++) {
        maskedWords.words[i] = this.words[i];
      }
      maskedWords.length = s;
    }

    if (s === 0) {
      // No-op, we should not move anything at all
    } else if (this.length > s) {
      this.length -= s;
      for (i = 0; i < this.length; i++) {
        this.words[i] = this.words[i + s];
      }
    } else {
      this.words[0] = 0;
      this.length = 1;
    }

    var carry = 0;
    for (i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--) {
      var word = this.words[i] | 0;
      this.words[i] = (carry << (26 - r)) | (word >>> r);
      carry = word & mask;
    }

    // Push carried bits as a mask
    if (maskedWords && carry !== 0) {
      maskedWords.words[maskedWords.length++] = carry;
    }

    if (this.length === 0) {
      this.words[0] = 0;
      this.length = 1;
    }

    return this._strip();
  };

  BN.prototype.ishrn = function ishrn (bits, hint, extended) {
    // TODO(indutny): implement me
    assert(this.negative === 0);
    return this.iushrn(bits, hint, extended);
  };

  // Shift-left
  BN.prototype.shln = function shln (bits) {
    return this.clone().ishln(bits);
  };

  BN.prototype.ushln = function ushln (bits) {
    return this.clone().iushln(bits);
  };

  // Shift-right
  BN.prototype.shrn = function shrn (bits) {
    return this.clone().ishrn(bits);
  };

  BN.prototype.ushrn = function ushrn (bits) {
    return this.clone().iushrn(bits);
  };

  // Test if n bit is set
  BN.prototype.testn = function testn (bit) {
    assert(typeof bit === 'number' && bit >= 0);
    var r = bit % 26;
    var s = (bit - r) / 26;
    var q = 1 << r;

    // Fast case: bit is much higher than all existing words
    if (this.length <= s) return false;

    // Check bit and return
    var w = this.words[s];

    return !!(w & q);
  };

  // Return only lowers bits of number (in-place)
  BN.prototype.imaskn = function imaskn (bits) {
    assert(typeof bits === 'number' && bits >= 0);
    var r = bits % 26;
    var s = (bits - r) / 26;

    assert(this.negative === 0, 'imaskn works only with positive numbers');

    if (this.length <= s) {
      return this;
    }

    if (r !== 0) {
      s++;
    }
    this.length = Math.min(s, this.length);

    if (r !== 0) {
      var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);
      this.words[this.length - 1] &= mask;
    }

    return this._strip();
  };

  // Return only lowers bits of number
  BN.prototype.maskn = function maskn (bits) {
    return this.clone().imaskn(bits);
  };

  // Add plain number `num` to `this`
  BN.prototype.iaddn = function iaddn (num) {
    assert(typeof num === 'number');
    assert(num < 0x4000000);
    if (num < 0) return this.isubn(-num);

    // Possible sign change
    if (this.negative !== 0) {
      if (this.length === 1 && (this.words[0] | 0) <= num) {
        this.words[0] = num - (this.words[0] | 0);
        this.negative = 0;
        return this;
      }

      this.negative = 0;
      this.isubn(num);
      this.negative = 1;
      return this;
    }

    // Add without checks
    return this._iaddn(num);
  };

  BN.prototype._iaddn = function _iaddn (num) {
    this.words[0] += num;

    // Carry
    for (var i = 0; i < this.length && this.words[i] >= 0x4000000; i++) {
      this.words[i] -= 0x4000000;
      if (i === this.length - 1) {
        this.words[i + 1] = 1;
      } else {
        this.words[i + 1]++;
      }
    }
    this.length = Math.max(this.length, i + 1);

    return this;
  };

  // Subtract plain number `num` from `this`
  BN.prototype.isubn = function isubn (num) {
    assert(typeof num === 'number');
    assert(num < 0x4000000);
    if (num < 0) return this.iaddn(-num);

    if (this.negative !== 0) {
      this.negative = 0;
      this.iaddn(num);
      this.negative = 1;
      return this;
    }

    this.words[0] -= num;

    if (this.length === 1 && this.words[0] < 0) {
      this.words[0] = -this.words[0];
      this.negative = 1;
    } else {
      // Carry
      for (var i = 0; i < this.length && this.words[i] < 0; i++) {
        this.words[i] += 0x4000000;
        this.words[i + 1] -= 1;
      }
    }

    return this._strip();
  };

  BN.prototype.addn = function addn (num) {
    return this.clone().iaddn(num);
  };

  BN.prototype.subn = function subn (num) {
    return this.clone().isubn(num);
  };

  BN.prototype.iabs = function iabs () {
    this.negative = 0;

    return this;
  };

  BN.prototype.abs = function abs () {
    return this.clone().iabs();
  };

  BN.prototype._ishlnsubmul = function _ishlnsubmul (num, mul, shift) {
    var len = num.length + shift;
    var i;

    this._expand(len);

    var w;
    var carry = 0;
    for (i = 0; i < num.length; i++) {
      w = (this.words[i + shift] | 0) + carry;
      var right = (num.words[i] | 0) * mul;
      w -= right & 0x3ffffff;
      carry = (w >> 26) - ((right / 0x4000000) | 0);
      this.words[i + shift] = w & 0x3ffffff;
    }
    for (; i < this.length - shift; i++) {
      w = (this.words[i + shift] | 0) + carry;
      carry = w >> 26;
      this.words[i + shift] = w & 0x3ffffff;
    }

    if (carry === 0) return this._strip();

    // Subtraction overflow
    assert(carry === -1);
    carry = 0;
    for (i = 0; i < this.length; i++) {
      w = -(this.words[i] | 0) + carry;
      carry = w >> 26;
      this.words[i] = w & 0x3ffffff;
    }
    this.negative = 1;

    return this._strip();
  };

  BN.prototype._wordDiv = function _wordDiv (num, mode) {
    var shift = this.length - num.length;

    var a = this.clone();
    var b = num;

    // Normalize
    var bhi = b.words[b.length - 1] | 0;
    var bhiBits = this._countBits(bhi);
    shift = 26 - bhiBits;
    if (shift !== 0) {
      b = b.ushln(shift);
      a.iushln(shift);
      bhi = b.words[b.length - 1] | 0;
    }

    // Initialize quotient
    var m = a.length - b.length;
    var q;

    if (mode !== 'mod') {
      q = new BN(null);
      q.length = m + 1;
      q.words = new Array(q.length);
      for (var i = 0; i < q.length; i++) {
        q.words[i] = 0;
      }
    }

    var diff = a.clone()._ishlnsubmul(b, 1, m);
    if (diff.negative === 0) {
      a = diff;
      if (q) {
        q.words[m] = 1;
      }
    }

    for (var j = m - 1; j >= 0; j--) {
      var qj = (a.words[b.length + j] | 0) * 0x4000000 +
        (a.words[b.length + j - 1] | 0);

      // NOTE: (qj / bhi) is (0x3ffffff * 0x4000000 + 0x3ffffff) / 0x2000000 max
      // (0x7ffffff)
      qj = Math.min((qj / bhi) | 0, 0x3ffffff);

      a._ishlnsubmul(b, qj, j);
      while (a.negative !== 0) {
        qj--;
        a.negative = 0;
        a._ishlnsubmul(b, 1, j);
        if (!a.isZero()) {
          a.negative ^= 1;
        }
      }
      if (q) {
        q.words[j] = qj;
      }
    }
    if (q) {
      q._strip();
    }
    a._strip();

    // Denormalize
    if (mode !== 'div' && shift !== 0) {
      a.iushrn(shift);
    }

    return {
      div: q || null,
      mod: a
    };
  };

  // NOTE: 1) `mode` can be set to `mod` to request mod only,
  //       to `div` to request div only, or be absent to
  //       request both div & mod
  //       2) `positive` is true if unsigned mod is requested
  BN.prototype.divmod = function divmod (num, mode, positive) {
    assert(!num.isZero());

    if (this.isZero()) {
      return {
        div: new BN(0),
        mod: new BN(0)
      };
    }

    var div, mod, res;
    if (this.negative !== 0 && num.negative === 0) {
      res = this.neg().divmod(num, mode);

      if (mode !== 'mod') {
        div = res.div.neg();
      }

      if (mode !== 'div') {
        mod = res.mod.neg();
        if (positive && mod.negative !== 0) {
          mod.iadd(num);
        }
      }

      return {
        div: div,
        mod: mod
      };
    }

    if (this.negative === 0 && num.negative !== 0) {
      res = this.divmod(num.neg(), mode);

      if (mode !== 'mod') {
        div = res.div.neg();
      }

      return {
        div: div,
        mod: res.mod
      };
    }

    if ((this.negative & num.negative) !== 0) {
      res = this.neg().divmod(num.neg(), mode);

      if (mode !== 'div') {
        mod = res.mod.neg();
        if (positive && mod.negative !== 0) {
          mod.isub(num);
        }
      }

      return {
        div: res.div,
        mod: mod
      };
    }

    // Both numbers are positive at this point

    // Strip both numbers to approximate shift value
    if (num.length > this.length || this.cmp(num) < 0) {
      return {
        div: new BN(0),
        mod: this
      };
    }

    // Very short reduction
    if (num.length === 1) {
      if (mode === 'div') {
        return {
          div: this.divn(num.words[0]),
          mod: null
        };
      }

      if (mode === 'mod') {
        return {
          div: null,
          mod: new BN(this.modrn(num.words[0]))
        };
      }

      return {
        div: this.divn(num.words[0]),
        mod: new BN(this.modrn(num.words[0]))
      };
    }

    return this._wordDiv(num, mode);
  };

  // Find `this` / `num`
  BN.prototype.div = function div (num) {
    return this.divmod(num, 'div', false).div;
  };

  // Find `this` % `num`
  BN.prototype.mod = function mod (num) {
    return this.divmod(num, 'mod', false).mod;
  };

  BN.prototype.umod = function umod (num) {
    return this.divmod(num, 'mod', true).mod;
  };

  // Find Round(`this` / `num`)
  BN.prototype.divRound = function divRound (num) {
    var dm = this.divmod(num);

    // Fast case - exact division
    if (dm.mod.isZero()) return dm.div;

    var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;

    var half = num.ushrn(1);
    var r2 = num.andln(1);
    var cmp = mod.cmp(half);

    // Round down
    if (cmp < 0 || (r2 === 1 && cmp === 0)) return dm.div;

    // Round up
    return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
  };

  BN.prototype.modrn = function modrn (num) {
    var isNegNum = num < 0;
    if (isNegNum) num = -num;

    assert(num <= 0x3ffffff);
    var p = (1 << 26) % num;

    var acc = 0;
    for (var i = this.length - 1; i >= 0; i--) {
      acc = (p * acc + (this.words[i] | 0)) % num;
    }

    return isNegNum ? -acc : acc;
  };

  // WARNING: DEPRECATED
  BN.prototype.modn = function modn (num) {
    return this.modrn(num);
  };

  // In-place division by number
  BN.prototype.idivn = function idivn (num) {
    var isNegNum = num < 0;
    if (isNegNum) num = -num;

    assert(num <= 0x3ffffff);

    var carry = 0;
    for (var i = this.length - 1; i >= 0; i--) {
      var w = (this.words[i] | 0) + carry * 0x4000000;
      this.words[i] = (w / num) | 0;
      carry = w % num;
    }

    this._strip();
    return isNegNum ? this.ineg() : this;
  };

  BN.prototype.divn = function divn (num) {
    return this.clone().idivn(num);
  };

  BN.prototype.egcd = function egcd (p) {
    assert(p.negative === 0);
    assert(!p.isZero());

    var x = this;
    var y = p.clone();

    if (x.negative !== 0) {
      x = x.umod(p);
    } else {
      x = x.clone();
    }

    // A * x + B * y = x
    var A = new BN(1);
    var B = new BN(0);

    // C * x + D * y = y
    var C = new BN(0);
    var D = new BN(1);

    var g = 0;

    while (x.isEven() && y.isEven()) {
      x.iushrn(1);
      y.iushrn(1);
      ++g;
    }

    var yp = y.clone();
    var xp = x.clone();

    while (!x.isZero()) {
      for (var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
      if (i > 0) {
        x.iushrn(i);
        while (i-- > 0) {
          if (A.isOdd() || B.isOdd()) {
            A.iadd(yp);
            B.isub(xp);
          }

          A.iushrn(1);
          B.iushrn(1);
        }
      }

      for (var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
      if (j > 0) {
        y.iushrn(j);
        while (j-- > 0) {
          if (C.isOdd() || D.isOdd()) {
            C.iadd(yp);
            D.isub(xp);
          }

          C.iushrn(1);
          D.iushrn(1);
        }
      }

      if (x.cmp(y) >= 0) {
        x.isub(y);
        A.isub(C);
        B.isub(D);
      } else {
        y.isub(x);
        C.isub(A);
        D.isub(B);
      }
    }

    return {
      a: C,
      b: D,
      gcd: y.iushln(g)
    };
  };

  // This is reduced incarnation of the binary EEA
  // above, designated to invert members of the
  // _prime_ fields F(p) at a maximal speed
  BN.prototype._invmp = function _invmp (p) {
    assert(p.negative === 0);
    assert(!p.isZero());

    var a = this;
    var b = p.clone();

    if (a.negative !== 0) {
      a = a.umod(p);
    } else {
      a = a.clone();
    }

    var x1 = new BN(1);
    var x2 = new BN(0);

    var delta = b.clone();

    while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {
      for (var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
      if (i > 0) {
        a.iushrn(i);
        while (i-- > 0) {
          if (x1.isOdd()) {
            x1.iadd(delta);
          }

          x1.iushrn(1);
        }
      }

      for (var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
      if (j > 0) {
        b.iushrn(j);
        while (j-- > 0) {
          if (x2.isOdd()) {
            x2.iadd(delta);
          }

          x2.iushrn(1);
        }
      }

      if (a.cmp(b) >= 0) {
        a.isub(b);
        x1.isub(x2);
      } else {
        b.isub(a);
        x2.isub(x1);
      }
    }

    var res;
    if (a.cmpn(1) === 0) {
      res = x1;
    } else {
      res = x2;
    }

    if (res.cmpn(0) < 0) {
      res.iadd(p);
    }

    return res;
  };

  BN.prototype.gcd = function gcd (num) {
    if (this.isZero()) return num.abs();
    if (num.isZero()) return this.abs();

    var a = this.clone();
    var b = num.clone();
    a.negative = 0;
    b.negative = 0;

    // Remove common factor of two
    for (var shift = 0; a.isEven() && b.isEven(); shift++) {
      a.iushrn(1);
      b.iushrn(1);
    }

    do {
      while (a.isEven()) {
        a.iushrn(1);
      }
      while (b.isEven()) {
        b.iushrn(1);
      }

      var r = a.cmp(b);
      if (r < 0) {
        // Swap `a` and `b` to make `a` always bigger than `b`
        var t = a;
        a = b;
        b = t;
      } else if (r === 0 || b.cmpn(1) === 0) {
        break;
      }

      a.isub(b);
    } while (true);

    return b.iushln(shift);
  };

  // Invert number in the field F(num)
  BN.prototype.invm = function invm (num) {
    return this.egcd(num).a.umod(num);
  };

  BN.prototype.isEven = function isEven () {
    return (this.words[0] & 1) === 0;
  };

  BN.prototype.isOdd = function isOdd () {
    return (this.words[0] & 1) === 1;
  };

  // And first word and num
  BN.prototype.andln = function andln (num) {
    return this.words[0] & num;
  };

  // Increment at the bit position in-line
  BN.prototype.bincn = function bincn (bit) {
    assert(typeof bit === 'number');
    var r = bit % 26;
    var s = (bit - r) / 26;
    var q = 1 << r;

    // Fast case: bit is much higher than all existing words
    if (this.length <= s) {
      this._expand(s + 1);
      this.words[s] |= q;
      return this;
    }

    // Add bit and propagate, if needed
    var carry = q;
    for (var i = s; carry !== 0 && i < this.length; i++) {
      var w = this.words[i] | 0;
      w += carry;
      carry = w >>> 26;
      w &= 0x3ffffff;
      this.words[i] = w;
    }
    if (carry !== 0) {
      this.words[i] = carry;
      this.length++;
    }
    return this;
  };

  BN.prototype.isZero = function isZero () {
    return this.length === 1 && this.words[0] === 0;
  };

  BN.prototype.cmpn = function cmpn (num) {
    var negative = num < 0;

    if (this.negative !== 0 && !negative) return -1;
    if (this.negative === 0 && negative) return 1;

    this._strip();

    var res;
    if (this.length > 1) {
      res = 1;
    } else {
      if (negative) {
        num = -num;
      }

      assert(num <= 0x3ffffff, 'Number is too big');

      var w = this.words[0] | 0;
      res = w === num ? 0 : w < num ? -1 : 1;
    }
    if (this.negative !== 0) return -res | 0;
    return res;
  };

  // Compare two numbers and return:
  // 1 - if `this` > `num`
  // 0 - if `this` == `num`
  // -1 - if `this` < `num`
  BN.prototype.cmp = function cmp (num) {
    if (this.negative !== 0 && num.negative === 0) return -1;
    if (this.negative === 0 && num.negative !== 0) return 1;

    var res = this.ucmp(num);
    if (this.negative !== 0) return -res | 0;
    return res;
  };

  // Unsigned comparison
  BN.prototype.ucmp = function ucmp (num) {
    // At this point both numbers have the same sign
    if (this.length > num.length) return 1;
    if (this.length < num.length) return -1;

    var res = 0;
    for (var i = this.length - 1; i >= 0; i--) {
      var a = this.words[i] | 0;
      var b = num.words[i] | 0;

      if (a === b) continue;
      if (a < b) {
        res = -1;
      } else if (a > b) {
        res = 1;
      }
      break;
    }
    return res;
  };

  BN.prototype.gtn = function gtn (num) {
    return this.cmpn(num) === 1;
  };

  BN.prototype.gt = function gt (num) {
    return this.cmp(num) === 1;
  };

  BN.prototype.gten = function gten (num) {
    return this.cmpn(num) >= 0;
  };

  BN.prototype.gte = function gte (num) {
    return this.cmp(num) >= 0;
  };

  BN.prototype.ltn = function ltn (num) {
    return this.cmpn(num) === -1;
  };

  BN.prototype.lt = function lt (num) {
    return this.cmp(num) === -1;
  };

  BN.prototype.lten = function lten (num) {
    return this.cmpn(num) <= 0;
  };

  BN.prototype.lte = function lte (num) {
    return this.cmp(num) <= 0;
  };

  BN.prototype.eqn = function eqn (num) {
    return this.cmpn(num) === 0;
  };

  BN.prototype.eq = function eq (num) {
    return this.cmp(num) === 0;
  };

  //
  // A reduce context, could be using montgomery or something better, depending
  // on the `m` itself.
  //
  BN.red = function red (num) {
    return new Red(num);
  };

  BN.prototype.toRed = function toRed (ctx) {
    assert(!this.red, 'Already a number in reduction context');
    assert(this.negative === 0, 'red works only with positives');
    return ctx.convertTo(this)._forceRed(ctx);
  };

  BN.prototype.fromRed = function fromRed () {
    assert(this.red, 'fromRed works only with numbers in reduction context');
    return this.red.convertFrom(this);
  };

  BN.prototype._forceRed = function _forceRed (ctx) {
    this.red = ctx;
    return this;
  };

  BN.prototype.forceRed = function forceRed (ctx) {
    assert(!this.red, 'Already a number in reduction context');
    return this._forceRed(ctx);
  };

  BN.prototype.redAdd = function redAdd (num) {
    assert(this.red, 'redAdd works only with red numbers');
    return this.red.add(this, num);
  };

  BN.prototype.redIAdd = function redIAdd (num) {
    assert(this.red, 'redIAdd works only with red numbers');
    return this.red.iadd(this, num);
  };

  BN.prototype.redSub = function redSub (num) {
    assert(this.red, 'redSub works only with red numbers');
    return this.red.sub(this, num);
  };

  BN.prototype.redISub = function redISub (num) {
    assert(this.red, 'redISub works only with red numbers');
    return this.red.isub(this, num);
  };

  BN.prototype.redShl = function redShl (num) {
    assert(this.red, 'redShl works only with red numbers');
    return this.red.shl(this, num);
  };

  BN.prototype.redMul = function redMul (num) {
    assert(this.red, 'redMul works only with red numbers');
    this.red._verify2(this, num);
    return this.red.mul(this, num);
  };

  BN.prototype.redIMul = function redIMul (num) {
    assert(this.red, 'redMul works only with red numbers');
    this.red._verify2(this, num);
    return this.red.imul(this, num);
  };

  BN.prototype.redSqr = function redSqr () {
    assert(this.red, 'redSqr works only with red numbers');
    this.red._verify1(this);
    return this.red.sqr(this);
  };

  BN.prototype.redISqr = function redISqr () {
    assert(this.red, 'redISqr works only with red numbers');
    this.red._verify1(this);
    return this.red.isqr(this);
  };

  // Square root over p
  BN.prototype.redSqrt = function redSqrt () {
    assert(this.red, 'redSqrt works only with red numbers');
    this.red._verify1(this);
    return this.red.sqrt(this);
  };

  BN.prototype.redInvm = function redInvm () {
    assert(this.red, 'redInvm works only with red numbers');
    this.red._verify1(this);
    return this.red.invm(this);
  };

  // Return negative clone of `this` % `red modulo`
  BN.prototype.redNeg = function redNeg () {
    assert(this.red, 'redNeg works only with red numbers');
    this.red._verify1(this);
    return this.red.neg(this);
  };

  BN.prototype.redPow = function redPow (num) {
    assert(this.red && !num.red, 'redPow(normalNum)');
    this.red._verify1(this);
    return this.red.pow(this, num);
  };

  // Prime numbers with efficient reduction
  var primes = {
    k256: null,
    p224: null,
    p192: null,
    p25519: null
  };

  // Pseudo-Mersenne prime
  function MPrime (name, p) {
    // P = 2 ^ N - K
    this.name = name;
    this.p = new BN(p, 16);
    this.n = this.p.bitLength();
    this.k = new BN(1).iushln(this.n).isub(this.p);

    this.tmp = this._tmp();
  }

  MPrime.prototype._tmp = function _tmp () {
    var tmp = new BN(null);
    tmp.words = new Array(Math.ceil(this.n / 13));
    return tmp;
  };

  MPrime.prototype.ireduce = function ireduce (num) {
    // Assumes that `num` is less than `P^2`
    // num = HI * (2 ^ N - K) + HI * K + LO = HI * K + LO (mod P)
    var r = num;
    var rlen;

    do {
      this.split(r, this.tmp);
      r = this.imulK(r);
      r = r.iadd(this.tmp);
      rlen = r.bitLength();
    } while (rlen > this.n);

    var cmp = rlen < this.n ? -1 : r.ucmp(this.p);
    if (cmp === 0) {
      r.words[0] = 0;
      r.length = 1;
    } else if (cmp > 0) {
      r.isub(this.p);
    } else {
      if (r.strip !== undefined) {
        // r is a BN v4 instance
        r.strip();
      } else {
        // r is a BN v5 instance
        r._strip();
      }
    }

    return r;
  };

  MPrime.prototype.split = function split (input, out) {
    input.iushrn(this.n, 0, out);
  };

  MPrime.prototype.imulK = function imulK (num) {
    return num.imul(this.k);
  };

  function K256 () {
    MPrime.call(
      this,
      'k256',
      'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f');
  }
  inherits(K256, MPrime);

  K256.prototype.split = function split (input, output) {
    // 256 = 9 * 26 + 22
    var mask = 0x3fffff;

    var outLen = Math.min(input.length, 9);
    for (var i = 0; i < outLen; i++) {
      output.words[i] = input.words[i];
    }
    output.length = outLen;

    if (input.length <= 9) {
      input.words[0] = 0;
      input.length = 1;
      return;
    }

    // Shift by 9 limbs
    var prev = input.words[9];
    output.words[output.length++] = prev & mask;

    for (i = 10; i < input.length; i++) {
      var next = input.words[i] | 0;
      input.words[i - 10] = ((next & mask) << 4) | (prev >>> 22);
      prev = next;
    }
    prev >>>= 22;
    input.words[i - 10] = prev;
    if (prev === 0 && input.length > 10) {
      input.length -= 10;
    } else {
      input.length -= 9;
    }
  };

  K256.prototype.imulK = function imulK (num) {
    // K = 0x1000003d1 = [ 0x40, 0x3d1 ]
    num.words[num.length] = 0;
    num.words[num.length + 1] = 0;
    num.length += 2;

    // bounded at: 0x40 * 0x3ffffff + 0x3d0 = 0x100000390
    var lo = 0;
    for (var i = 0; i < num.length; i++) {
      var w = num.words[i] | 0;
      lo += w * 0x3d1;
      num.words[i] = lo & 0x3ffffff;
      lo = w * 0x40 + ((lo / 0x4000000) | 0);
    }

    // Fast length reduction
    if (num.words[num.length - 1] === 0) {
      num.length--;
      if (num.words[num.length - 1] === 0) {
        num.length--;
      }
    }
    return num;
  };

  function P224 () {
    MPrime.call(
      this,
      'p224',
      'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001');
  }
  inherits(P224, MPrime);

  function P192 () {
    MPrime.call(
      this,
      'p192',
      'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff');
  }
  inherits(P192, MPrime);

  function P25519 () {
    // 2 ^ 255 - 19
    MPrime.call(
      this,
      '25519',
      '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed');
  }
  inherits(P25519, MPrime);

  P25519.prototype.imulK = function imulK (num) {
    // K = 0x13
    var carry = 0;
    for (var i = 0; i < num.length; i++) {
      var hi = (num.words[i] | 0) * 0x13 + carry;
      var lo = hi & 0x3ffffff;
      hi >>>= 26;

      num.words[i] = lo;
      carry = hi;
    }
    if (carry !== 0) {
      num.words[num.length++] = carry;
    }
    return num;
  };

  // Exported mostly for testing purposes, use plain name instead
  BN._prime = function prime (name) {
    // Cached version of prime
    if (primes[name]) return primes[name];

    var prime;
    if (name === 'k256') {
      prime = new K256();
    } else if (name === 'p224') {
      prime = new P224();
    } else if (name === 'p192') {
      prime = new P192();
    } else if (name === 'p25519') {
      prime = new P25519();
    } else {
      throw new Error('Unknown prime ' + name);
    }
    primes[name] = prime;

    return prime;
  };

  //
  // Base reduction engine
  //
  function Red (m) {
    if (typeof m === 'string') {
      var prime = BN._prime(m);
      this.m = prime.p;
      this.prime = prime;
    } else {
      assert(m.gtn(1), 'modulus must be greater than 1');
      this.m = m;
      this.prime = null;
    }
  }

  Red.prototype._verify1 = function _verify1 (a) {
    assert(a.negative === 0, 'red works only with positives');
    assert(a.red, 'red works only with red numbers');
  };

  Red.prototype._verify2 = function _verify2 (a, b) {
    assert((a.negative | b.negative) === 0, 'red works only with positives');
    assert(a.red && a.red === b.red,
      'red works only with red numbers');
  };

  Red.prototype.imod = function imod (a) {
    if (this.prime) return this.prime.ireduce(a)._forceRed(this);

    move(a, a.umod(this.m)._forceRed(this));
    return a;
  };

  Red.prototype.neg = function neg (a) {
    if (a.isZero()) {
      return a.clone();
    }

    return this.m.sub(a)._forceRed(this);
  };

  Red.prototype.add = function add (a, b) {
    this._verify2(a, b);

    var res = a.add(b);
    if (res.cmp(this.m) >= 0) {
      res.isub(this.m);
    }
    return res._forceRed(this);
  };

  Red.prototype.iadd = function iadd (a, b) {
    this._verify2(a, b);

    var res = a.iadd(b);
    if (res.cmp(this.m) >= 0) {
      res.isub(this.m);
    }
    return res;
  };

  Red.prototype.sub = function sub (a, b) {
    this._verify2(a, b);

    var res = a.sub(b);
    if (res.cmpn(0) < 0) {
      res.iadd(this.m);
    }
    return res._forceRed(this);
  };

  Red.prototype.isub = function isub (a, b) {
    this._verify2(a, b);

    var res = a.isub(b);
    if (res.cmpn(0) < 0) {
      res.iadd(this.m);
    }
    return res;
  };

  Red.prototype.shl = function shl (a, num) {
    this._verify1(a);
    return this.imod(a.ushln(num));
  };

  Red.prototype.imul = function imul (a, b) {
    this._verify2(a, b);
    return this.imod(a.imul(b));
  };

  Red.prototype.mul = function mul (a, b) {
    this._verify2(a, b);
    return this.imod(a.mul(b));
  };

  Red.prototype.isqr = function isqr (a) {
    return this.imul(a, a.clone());
  };

  Red.prototype.sqr = function sqr (a) {
    return this.mul(a, a);
  };

  Red.prototype.sqrt = function sqrt (a) {
    if (a.isZero()) return a.clone();

    var mod3 = this.m.andln(3);
    assert(mod3 % 2 === 1);

    // Fast case
    if (mod3 === 3) {
      var pow = this.m.add(new BN(1)).iushrn(2);
      return this.pow(a, pow);
    }

    // Tonelli-Shanks algorithm (Totally unoptimized and slow)
    //
    // Find Q and S, that Q * 2 ^ S = (P - 1)
    var q = this.m.subn(1);
    var s = 0;
    while (!q.isZero() && q.andln(1) === 0) {
      s++;
      q.iushrn(1);
    }
    assert(!q.isZero());

    var one = new BN(1).toRed(this);
    var nOne = one.redNeg();

    // Find quadratic non-residue
    // NOTE: Max is such because of generalized Riemann hypothesis.
    var lpow = this.m.subn(1).iushrn(1);
    var z = this.m.bitLength();
    z = new BN(2 * z * z).toRed(this);

    while (this.pow(z, lpow).cmp(nOne) !== 0) {
      z.redIAdd(nOne);
    }

    var c = this.pow(z, q);
    var r = this.pow(a, q.addn(1).iushrn(1));
    var t = this.pow(a, q);
    var m = s;
    while (t.cmp(one) !== 0) {
      var tmp = t;
      for (var i = 0; tmp.cmp(one) !== 0; i++) {
        tmp = tmp.redSqr();
      }
      assert(i < m);
      var b = this.pow(c, new BN(1).iushln(m - i - 1));

      r = r.redMul(b);
      c = b.redSqr();
      t = t.redMul(c);
      m = i;
    }

    return r;
  };

  Red.prototype.invm = function invm (a) {
    var inv = a._invmp(this.m);
    if (inv.negative !== 0) {
      inv.negative = 0;
      return this.imod(inv).redNeg();
    } else {
      return this.imod(inv);
    }
  };

  Red.prototype.pow = function pow (a, num) {
    if (num.isZero()) return new BN(1).toRed(this);
    if (num.cmpn(1) === 0) return a.clone();

    var windowSize = 4;
    var wnd = new Array(1 << windowSize);
    wnd[0] = new BN(1).toRed(this);
    wnd[1] = a;
    for (var i = 2; i < wnd.length; i++) {
      wnd[i] = this.mul(wnd[i - 1], a);
    }

    var res = wnd[0];
    var current = 0;
    var currentLen = 0;
    var start = num.bitLength() % 26;
    if (start === 0) {
      start = 26;
    }

    for (i = num.length - 1; i >= 0; i--) {
      var word = num.words[i];
      for (var j = start - 1; j >= 0; j--) {
        var bit = (word >> j) & 1;
        if (res !== wnd[0]) {
          res = this.sqr(res);
        }

        if (bit === 0 && current === 0) {
          currentLen = 0;
          continue;
        }

        current <<= 1;
        current |= bit;
        currentLen++;
        if (currentLen !== windowSize && (i !== 0 || j !== 0)) continue;

        res = this.mul(res, wnd[current]);
        currentLen = 0;
        current = 0;
      }
      start = 26;
    }

    return res;
  };

  Red.prototype.convertTo = function convertTo (num) {
    var r = num.umod(this.m);

    return r === num ? r.clone() : r;
  };

  Red.prototype.convertFrom = function convertFrom (num) {
    var res = num.clone();
    res.red = null;
    return res;
  };

  //
  // Montgomery method engine
  //

  BN.mont = function mont (num) {
    return new Mont(num);
  };

  function Mont (m) {
    Red.call(this, m);

    this.shift = this.m.bitLength();
    if (this.shift % 26 !== 0) {
      this.shift += 26 - (this.shift % 26);
    }

    this.r = new BN(1).iushln(this.shift);
    this.r2 = this.imod(this.r.sqr());
    this.rinv = this.r._invmp(this.m);

    this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
    this.minv = this.minv.umod(this.r);
    this.minv = this.r.sub(this.minv);
  }
  inherits(Mont, Red);

  Mont.prototype.convertTo = function convertTo (num) {
    return this.imod(num.ushln(this.shift));
  };

  Mont.prototype.convertFrom = function convertFrom (num) {
    var r = this.imod(num.mul(this.rinv));
    r.red = null;
    return r;
  };

  Mont.prototype.imul = function imul (a, b) {
    if (a.isZero() || b.isZero()) {
      a.words[0] = 0;
      a.length = 1;
      return a;
    }

    var t = a.imul(b);
    var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
    var u = t.isub(c).iushrn(this.shift);
    var res = u;

    if (u.cmp(this.m) >= 0) {
      res = u.isub(this.m);
    } else if (u.cmpn(0) < 0) {
      res = u.iadd(this.m);
    }

    return res._forceRed(this);
  };

  Mont.prototype.mul = function mul (a, b) {
    if (a.isZero() || b.isZero()) return new BN(0)._forceRed(this);

    var t = a.mul(b);
    var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
    var u = t.isub(c).iushrn(this.shift);
    var res = u;
    if (u.cmp(this.m) >= 0) {
      res = u.isub(this.m);
    } else if (u.cmpn(0) < 0) {
      res = u.iadd(this.m);
    }

    return res._forceRed(this);
  };

  Mont.prototype.invm = function invm (a) {
    // (AR)^-1 * R^2 = (A^-1 * R^-1) * R^2 = A^-1 * R
    var res = this.imod(a._invmp(this.m).mul(this.r2));
    return res._forceRed(this);
  };
})(typeof module === 'undefined' || module, this);

},{"buffer":24}],23:[function(require,module,exports){
var r;

module.exports = function rand(len) {
  if (!r)
    r = new Rand(null);

  return r.generate(len);
};

function Rand(rand) {
  this.rand = rand;
}
module.exports.Rand = Rand;

Rand.prototype.generate = function generate(len) {
  return this._rand(len);
};

// Emulate crypto API using randy
Rand.prototype._rand = function _rand(n) {
  if (this.rand.getBytes)
    return this.rand.getBytes(n);

  var res = new Uint8Array(n);
  for (var i = 0; i < res.length; i++)
    res[i] = this.rand.getByte();
  return res;
};

if (typeof self === 'object') {
  if (self.crypto && self.crypto.getRandomValues) {
    // Modern browsers
    Rand.prototype._rand = function _rand(n) {
      var arr = new Uint8Array(n);
      self.crypto.getRandomValues(arr);
      return arr;
    };
  } else if (self.msCrypto && self.msCrypto.getRandomValues) {
    // IE
    Rand.prototype._rand = function _rand(n) {
      var arr = new Uint8Array(n);
      self.msCrypto.getRandomValues(arr);
      return arr;
    };

  // Safari's WebWorkers do not have `crypto`
  } else if (typeof window === 'object') {
    // Old junk
    Rand.prototype._rand = function() {
      throw new Error('Not implemented yet');
    };
  }
} else {
  // Node.js or Web worker with no crypto support
  try {
    var crypto = require('crypto');
    if (typeof crypto.randomBytes !== 'function')
      throw new Error('Not supported');

    Rand.prototype._rand = function _rand(n) {
      return crypto.randomBytes(n);
    };
  } catch (e) {
  }
}

},{"crypto":24}],24:[function(require,module,exports){

},{}],25:[function(require,module,exports){
// based on the aes implimentation in triple sec
// https://github.com/keybase/triplesec
// which is in turn based on the one from crypto-js
// https://code.google.com/p/crypto-js/

var Buffer = require('safe-buffer').Buffer

function asUInt32Array (buf) {
  if (!Buffer.isBuffer(buf)) buf = Buffer.from(buf)

  var len = (buf.length / 4) | 0
  var out = new Array(len)

  for (var i = 0; i < len; i++) {
    out[i] = buf.readUInt32BE(i * 4)
  }

  return out
}

function scrubVec (v) {
  for (var i = 0; i < v.length; v++) {
    v[i] = 0
  }
}

function cryptBlock (M, keySchedule, SUB_MIX, SBOX, nRounds) {
  var SUB_MIX0 = SUB_MIX[0]
  var SUB_MIX1 = SUB_MIX[1]
  var SUB_MIX2 = SUB_MIX[2]
  var SUB_MIX3 = SUB_MIX[3]

  var s0 = M[0] ^ keySchedule[0]
  var s1 = M[1] ^ keySchedule[1]
  var s2 = M[2] ^ keySchedule[2]
  var s3 = M[3] ^ keySchedule[3]
  var t0, t1, t2, t3
  var ksRow = 4

  for (var round = 1; round < nRounds; round++) {
    t0 = SUB_MIX0[s0 >>> 24] ^ SUB_MIX1[(s1 >>> 16) & 0xff] ^ SUB_MIX2[(s2 >>> 8) & 0xff] ^ SUB_MIX3[s3 & 0xff] ^ keySchedule[ksRow++]
    t1 = SUB_MIX0[s1 >>> 24] ^ SUB_MIX1[(s2 >>> 16) & 0xff] ^ SUB_MIX2[(s3 >>> 8) & 0xff] ^ SUB_MIX3[s0 & 0xff] ^ keySchedule[ksRow++]
    t2 = SUB_MIX0[s2 >>> 24] ^ SUB_MIX1[(s3 >>> 16) & 0xff] ^ SUB_MIX2[(s0 >>> 8) & 0xff] ^ SUB_MIX3[s1 & 0xff] ^ keySchedule[ksRow++]
    t3 = SUB_MIX0[s3 >>> 24] ^ SUB_MIX1[(s0 >>> 16) & 0xff] ^ SUB_MIX2[(s1 >>> 8) & 0xff] ^ SUB_MIX3[s2 & 0xff] ^ keySchedule[ksRow++]
    s0 = t0
    s1 = t1
    s2 = t2
    s3 = t3
  }

  t0 = ((SBOX[s0 >>> 24] << 24) | (SBOX[(s1 >>> 16) & 0xff] << 16) | (SBOX[(s2 >>> 8) & 0xff] << 8) | SBOX[s3 & 0xff]) ^ keySchedule[ksRow++]
  t1 = ((SBOX[s1 >>> 24] << 24) | (SBOX[(s2 >>> 16) & 0xff] << 16) | (SBOX[(s3 >>> 8) & 0xff] << 8) | SBOX[s0 & 0xff]) ^ keySchedule[ksRow++]
  t2 = ((SBOX[s2 >>> 24] << 24) | (SBOX[(s3 >>> 16) & 0xff] << 16) | (SBOX[(s0 >>> 8) & 0xff] << 8) | SBOX[s1 & 0xff]) ^ keySchedule[ksRow++]
  t3 = ((SBOX[s3 >>> 24] << 24) | (SBOX[(s0 >>> 16) & 0xff] << 16) | (SBOX[(s1 >>> 8) & 0xff] << 8) | SBOX[s2 & 0xff]) ^ keySchedule[ksRow++]
  t0 = t0 >>> 0
  t1 = t1 >>> 0
  t2 = t2 >>> 0
  t3 = t3 >>> 0

  return [t0, t1, t2, t3]
}

// AES constants
var RCON = [0x00, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36]
var G = (function () {
  // Compute double table
  var d = new Array(256)
  for (var j = 0; j < 256; j++) {
    if (j < 128) {
      d[j] = j << 1
    } else {
      d[j] = (j << 1) ^ 0x11b
    }
  }

  var SBOX = []
  var INV_SBOX = []
  var SUB_MIX = [[], [], [], []]
  var INV_SUB_MIX = [[], [], [], []]

  // Walk GF(2^8)
  var x = 0
  var xi = 0
  for (var i = 0; i < 256; ++i) {
    // Compute sbox
    var sx = xi ^ (xi << 1) ^ (xi << 2) ^ (xi << 3) ^ (xi << 4)
    sx = (sx >>> 8) ^ (sx & 0xff) ^ 0x63
    SBOX[x] = sx
    INV_SBOX[sx] = x

    // Compute multiplication
    var x2 = d[x]
    var x4 = d[x2]
    var x8 = d[x4]

    // Compute sub bytes, mix columns tables
    var t = (d[sx] * 0x101) ^ (sx * 0x1010100)
    SUB_MIX[0][x] = (t << 24) | (t >>> 8)
    SUB_MIX[1][x] = (t << 16) | (t >>> 16)
    SUB_MIX[2][x] = (t << 8) | (t >>> 24)
    SUB_MIX[3][x] = t

    // Compute inv sub bytes, inv mix columns tables
    t = (x8 * 0x1010101) ^ (x4 * 0x10001) ^ (x2 * 0x101) ^ (x * 0x1010100)
    INV_SUB_MIX[0][sx] = (t << 24) | (t >>> 8)
    INV_SUB_MIX[1][sx] = (t << 16) | (t >>> 16)
    INV_SUB_MIX[2][sx] = (t << 8) | (t >>> 24)
    INV_SUB_MIX[3][sx] = t

    if (x === 0) {
      x = xi = 1
    } else {
      x = x2 ^ d[d[d[x8 ^ x2]]]
      xi ^= d[d[xi]]
    }
  }

  return {
    SBOX: SBOX,
    INV_SBOX: INV_SBOX,
    SUB_MIX: SUB_MIX,
    INV_SUB_MIX: INV_SUB_MIX
  }
})()

function AES (key) {
  this._key = asUInt32Array(key)
  this._reset()
}

AES.blockSize = 4 * 4
AES.keySize = 256 / 8
AES.prototype.blockSize = AES.blockSize
AES.prototype.keySize = AES.keySize
AES.prototype._reset = function () {
  var keyWords = this._key
  var keySize = keyWords.length
  var nRounds = keySize + 6
  var ksRows = (nRounds + 1) * 4

  var keySchedule = []
  for (var k = 0; k < keySize; k++) {
    keySchedule[k] = keyWords[k]
  }

  for (k = keySize; k < ksRows; k++) {
    var t = keySchedule[k - 1]

    if (k % keySize === 0) {
      t = (t << 8) | (t >>> 24)
      t =
        (G.SBOX[t >>> 24] << 24) |
        (G.SBOX[(t >>> 16) & 0xff] << 16) |
        (G.SBOX[(t >>> 8) & 0xff] << 8) |
        (G.SBOX[t & 0xff])

      t ^= RCON[(k / keySize) | 0] << 24
    } else if (keySize > 6 && k % keySize === 4) {
      t =
        (G.SBOX[t >>> 24] << 24) |
        (G.SBOX[(t >>> 16) & 0xff] << 16) |
        (G.SBOX[(t >>> 8) & 0xff] << 8) |
        (G.SBOX[t & 0xff])
    }

    keySchedule[k] = keySchedule[k - keySize] ^ t
  }

  var invKeySchedule = []
  for (var ik = 0; ik < ksRows; ik++) {
    var ksR = ksRows - ik
    var tt = keySchedule[ksR - (ik % 4 ? 0 : 4)]

    if (ik < 4 || ksR <= 4) {
      invKeySchedule[ik] = tt
    } else {
      invKeySchedule[ik] =
        G.INV_SUB_MIX[0][G.SBOX[tt >>> 24]] ^
        G.INV_SUB_MIX[1][G.SBOX[(tt >>> 16) & 0xff]] ^
        G.INV_SUB_MIX[2][G.SBOX[(tt >>> 8) & 0xff]] ^
        G.INV_SUB_MIX[3][G.SBOX[tt & 0xff]]
    }
  }

  this._nRounds = nRounds
  this._keySchedule = keySchedule
  this._invKeySchedule = invKeySchedule
}

AES.prototype.encryptBlockRaw = function (M) {
  M = asUInt32Array(M)
  return cryptBlock(M, this._keySchedule, G.SUB_MIX, G.SBOX, this._nRounds)
}

AES.prototype.encryptBlock = function (M) {
  var out = this.encryptBlockRaw(M)
  var buf = Buffer.allocUnsafe(16)
  buf.writeUInt32BE(out[0], 0)
  buf.writeUInt32BE(out[1], 4)
  buf.writeUInt32BE(out[2], 8)
  buf.writeUInt32BE(out[3], 12)
  return buf
}

AES.prototype.decryptBlock = function (M) {
  M = asUInt32Array(M)

  // swap
  var m1 = M[1]
  M[1] = M[3]
  M[3] = m1

  var out = cryptBlock(M, this._invKeySchedule, G.INV_SUB_MIX, G.INV_SBOX, this._nRounds)
  var buf = Buffer.allocUnsafe(16)
  buf.writeUInt32BE(out[0], 0)
  buf.writeUInt32BE(out[3], 4)
  buf.writeUInt32BE(out[2], 8)
  buf.writeUInt32BE(out[1], 12)
  return buf
}

AES.prototype.scrub = function () {
  scrubVec(this._keySchedule)
  scrubVec(this._invKeySchedule)
  scrubVec(this._key)
}

module.exports.AES = AES

},{"safe-buffer":161}],26:[function(require,module,exports){
var aes = require('./aes')
var Buffer = require('safe-buffer').Buffer
var Transform = require('cipher-base')
var inherits = require('inherits')
var GHASH = require('./ghash')
var xor = require('buffer-xor')
var incr32 = require('./incr32')

function xorTest (a, b) {
  var out = 0
  if (a.length !== b.length) out++

  var len = Math.min(a.length, b.length)
  for (var i = 0; i < len; ++i) {
    out += (a[i] ^ b[i])
  }

  return out
}

function calcIv (self, iv, ck) {
  if (iv.length === 12) {
    self._finID = Buffer.concat([iv, Buffer.from([0, 0, 0, 1])])
    return Buffer.concat([iv, Buffer.from([0, 0, 0, 2])])
  }
  var ghash = new GHASH(ck)
  var len = iv.length
  var toPad = len % 16
  ghash.update(iv)
  if (toPad) {
    toPad = 16 - toPad
    ghash.update(Buffer.alloc(toPad, 0))
  }
  ghash.update(Buffer.alloc(8, 0))
  var ivBits = len * 8
  var tail = Buffer.alloc(8)
  tail.writeUIntBE(ivBits, 0, 8)
  ghash.update(tail)
  self._finID = ghash.state
  var out = Buffer.from(self._finID)
  incr32(out)
  return out
}
function StreamCipher (mode, key, iv, decrypt) {
  Transform.call(this)

  var h = Buffer.alloc(4, 0)

  this._cipher = new aes.AES(key)
  var ck = this._cipher.encryptBlock(h)
  this._ghash = new GHASH(ck)
  iv = calcIv(this, iv, ck)

  this._prev = Buffer.from(iv)
  this._cache = Buffer.allocUnsafe(0)
  this._secCache = Buffer.allocUnsafe(0)
  this._decrypt = decrypt
  this._alen = 0
  this._len = 0
  this._mode = mode

  this._authTag = null
  this._called = false
}

inherits(StreamCipher, Transform)

StreamCipher.prototype._update = function (chunk) {
  if (!this._called && this._alen) {
    var rump = 16 - (this._alen % 16)
    if (rump < 16) {
      rump = Buffer.alloc(rump, 0)
      this._ghash.update(rump)
    }
  }

  this._called = true
  var out = this._mode.encrypt(this, chunk)
  if (this._decrypt) {
    this._ghash.update(chunk)
  } else {
    this._ghash.update(out)
  }
  this._len += chunk.length
  return out
}

StreamCipher.prototype._final = function () {
  if (this._decrypt && !this._authTag) throw new Error('Unsupported state or unable to authenticate data')

  var tag = xor(this._ghash.final(this._alen * 8, this._len * 8), this._cipher.encryptBlock(this._finID))
  if (this._decrypt && xorTest(tag, this._authTag)) throw new Error('Unsupported state or unable to authenticate data')

  this._authTag = tag
  this._cipher.scrub()
}

StreamCipher.prototype.getAuthTag = function getAuthTag () {
  if (this._decrypt || !Buffer.isBuffer(this._authTag)) throw new Error('Attempting to get auth tag in unsupported state')

  return this._authTag
}

StreamCipher.prototype.setAuthTag = function setAuthTag (tag) {
  if (!this._decrypt) throw new Error('Attempting to set auth tag in unsupported state')

  this._authTag = tag
}

StreamCipher.prototype.setAAD = function setAAD (buf) {
  if (this._called) throw new Error('Attempting to set AAD in unsupported state')

  this._ghash.update(buf)
  this._alen += buf.length
}

module.exports = StreamCipher

},{"./aes":25,"./ghash":30,"./incr32":31,"buffer-xor":52,"cipher-base":56,"inherits":115,"safe-buffer":161}],27:[function(require,module,exports){
var ciphers = require('./encrypter')
var deciphers = require('./decrypter')
var modes = require('./modes/list.json')

function getCiphers () {
  return Object.keys(modes)
}

exports.createCipher = exports.Cipher = ciphers.createCipher
exports.createCipheriv = exports.Cipheriv = ciphers.createCipheriv
exports.createDecipher = exports.Decipher = deciphers.createDecipher
exports.createDecipheriv = exports.Decipheriv = deciphers.createDecipheriv
exports.listCiphers = exports.getCiphers = getCiphers

},{"./decrypter":28,"./encrypter":29,"./modes/list.json":39}],28:[function(require,module,exports){
var AuthCipher = require('./authCipher')
var Buffer = require('safe-buffer').Buffer
var MODES = require('./modes')
var StreamCipher = require('./streamCipher')
var Transform = require('cipher-base')
var aes = require('./aes')
var ebtk = require('evp_bytestokey')
var inherits = require('inherits')

function Decipher (mode, key, iv) {
  Transform.call(this)

  this._cache = new Splitter()
  this._last = void 0
  this._cipher = new aes.AES(key)
  this._prev = Buffer.from(iv)
  this._mode = mode
  this._autopadding = true
}

inherits(Decipher, Transform)

Decipher.prototype._update = function (data) {
  this._cache.add(data)
  var chunk
  var thing
  var out = []
  while ((chunk = this._cache.get(this._autopadding))) {
    thing = this._mode.decrypt(this, chunk)
    out.push(thing)
  }
  return Buffer.concat(out)
}

Decipher.prototype._final = function () {
  var chunk = this._cache.flush()
  if (this._autopadding) {
    return unpad(this._mode.decrypt(this, chunk))
  } else if (chunk) {
    throw new Error('data not multiple of block length')
  }
}

Decipher.prototype.setAutoPadding = function (setTo) {
  this._autopadding = !!setTo
  return this
}

function Splitter () {
  this.cache = Buffer.allocUnsafe(0)
}

Splitter.prototype.add = function (data) {
  this.cache = Buffer.concat([this.cache, data])
}

Splitter.prototype.get = function (autoPadding) {
  var out
  if (autoPadding) {
    if (this.cache.length > 16) {
      out = this.cache.slice(0, 16)
      this.cache = this.cache.slice(16)
      return out
    }
  } else {
    if (this.cache.length >= 16) {
      out = this.cache.slice(0, 16)
      this.cache = this.cache.slice(16)
      return out
    }
  }

  return null
}

Splitter.prototype.flush = function () {
  if (this.cache.length) return this.cache
}

function unpad (last) {
  var padded = last[15]
  if (padded < 1 || padded > 16) {
    throw new Error('unable to decrypt data')
  }
  var i = -1
  while (++i < padded) {
    if (last[(i + (16 - padded))] !== padded) {
      throw new Error('unable to decrypt data')
    }
  }
  if (padded === 16) return

  return last.slice(0, 16 - padded)
}

function createDecipheriv (suite, password, iv) {
  var config = MODES[suite.toLowerCase()]
  if (!config) throw new TypeError('invalid suite type')

  if (typeof iv === 'string') iv = Buffer.from(iv)
  if (config.mode !== 'GCM' && iv.length !== config.iv) throw new TypeError('invalid iv length ' + iv.length)

  if (typeof password === 'string') password = Buffer.from(password)
  if (password.length !== config.key / 8) throw new TypeError('invalid key length ' + password.length)

  if (config.type === 'stream') {
    return new StreamCipher(config.module, password, iv, true)
  } else if (config.type === 'auth') {
    return new AuthCipher(config.module, password, iv, true)
  }

  return new Decipher(config.module, password, iv)
}

function createDecipher (suite, password) {
  var config = MODES[suite.toLowerCase()]
  if (!config) throw new TypeError('invalid suite type')

  var keys = ebtk(password, false, config.key, config.iv)
  return createDecipheriv(suite, keys.key, keys.iv)
}

exports.createDecipher = createDecipher
exports.createDecipheriv = createDecipheriv

},{"./aes":25,"./authCipher":26,"./modes":38,"./streamCipher":41,"cipher-base":56,"evp_bytestokey":90,"inherits":115,"safe-buffer":161}],29:[function(require,module,exports){
var MODES = require('./modes')
var AuthCipher = require('./authCipher')
var Buffer = require('safe-buffer').Buffer
var StreamCipher = require('./streamCipher')
var Transform = require('cipher-base')
var aes = require('./aes')
var ebtk = require('evp_bytestokey')
var inherits = require('inherits')

function Cipher (mode, key, iv) {
  Transform.call(this)

  this._cache = new Splitter()
  this._cipher = new aes.AES(key)
  this._prev = Buffer.from(iv)
  this._mode = mode
  this._autopadding = true
}

inherits(Cipher, Transform)

Cipher.prototype._update = function (data) {
  this._cache.add(data)
  var chunk
  var thing
  var out = []

  while ((chunk = this._cache.get())) {
    thing = this._mode.encrypt(this, chunk)
    out.push(thing)
  }

  return Buffer.concat(out)
}

var PADDING = Buffer.alloc(16, 0x10)

Cipher.prototype._final = function () {
  var chunk = this._cache.flush()
  if (this._autopadding) {
    chunk = this._mode.encrypt(this, chunk)
    this._cipher.scrub()
    return chunk
  }

  if (!chunk.equals(PADDING)) {
    this._cipher.scrub()
    throw new Error('data not multiple of block length')
  }
}

Cipher.prototype.setAutoPadding = function (setTo) {
  this._autopadding = !!setTo
  return this
}

function Splitter () {
  this.cache = Buffer.allocUnsafe(0)
}

Splitter.prototype.add = function (data) {
  this.cache = Buffer.concat([this.cache, data])
}

Splitter.prototype.get = function () {
  if (this.cache.length > 15) {
    var out = this.cache.slice(0, 16)
    this.cache = this.cache.slice(16)
    return out
  }
  return null
}

Splitter.prototype.flush = function () {
  var len = 16 - this.cache.length
  var padBuff = Buffer.allocUnsafe(len)

  var i = -1
  while (++i < len) {
    padBuff.writeUInt8(len, i)
  }

  return Buffer.concat([this.cache, padBuff])
}

function createCipheriv (suite, password, iv) {
  var config = MODES[suite.toLowerCase()]
  if (!config) throw new TypeError('invalid suite type')

  if (typeof password === 'string') password = Buffer.from(password)
  if (password.length !== config.key / 8) throw new TypeError('invalid key length ' + password.length)

  if (typeof iv === 'string') iv = Buffer.from(iv)
  if (config.mode !== 'GCM' && iv.length !== config.iv) throw new TypeError('invalid iv length ' + iv.length)

  if (config.type === 'stream') {
    return new StreamCipher(config.module, password, iv)
  } else if (config.type === 'auth') {
    return new AuthCipher(config.module, password, iv)
  }

  return new Cipher(config.module, password, iv)
}

function createCipher (suite, password) {
  var config = MODES[suite.toLowerCase()]
  if (!config) throw new TypeError('invalid suite type')

  var keys = ebtk(password, false, config.key, config.iv)
  return createCipheriv(suite, keys.key, keys.iv)
}

exports.createCipheriv = createCipheriv
exports.createCipher = createCipher

},{"./aes":25,"./authCipher":26,"./modes":38,"./streamCipher":41,"cipher-base":56,"evp_bytestokey":90,"inherits":115,"safe-buffer":161}],30:[function(require,module,exports){
var Buffer = require('safe-buffer').Buffer
var ZEROES = Buffer.alloc(16, 0)

function toArray (buf) {
  return [
    buf.readUInt32BE(0),
    buf.readUInt32BE(4),
    buf.readUInt32BE(8),
    buf.readUInt32BE(12)
  ]
}

function fromArray (out) {
  var buf = Buffer.allocUnsafe(16)
  buf.writeUInt32BE(out[0] >>> 0, 0)
  buf.writeUInt32BE(out[1] >>> 0, 4)
  buf.writeUInt32BE(out[2] >>> 0, 8)
  buf.writeUInt32BE(out[3] >>> 0, 12)
  return buf
}

function GHASH (key) {
  this.h = key
  this.state = Buffer.alloc(16, 0)
  this.cache = Buffer.allocUnsafe(0)
}

// from http://bitwiseshiftleft.github.io/sjcl/doc/symbols/src/core_gcm.js.html
// by Juho Vähä-Herttua
GHASH.prototype.ghash = function (block) {
  var i = -1
  while (++i < block.length) {
    this.state[i] ^= block[i]
  }
  this._multiply()
}

GHASH.prototype._multiply = function () {
  var Vi = toArray(this.h)
  var Zi = [0, 0, 0, 0]
  var j, xi, lsbVi
  var i = -1
  while (++i < 128) {
    xi = (this.state[~~(i / 8)] & (1 << (7 - (i % 8)))) !== 0
    if (xi) {
      // Z_i+1 = Z_i ^ V_i
      Zi[0] ^= Vi[0]
      Zi[1] ^= Vi[1]
      Zi[2] ^= Vi[2]
      Zi[3] ^= Vi[3]
    }

    // Store the value of LSB(V_i)
    lsbVi = (Vi[3] & 1) !== 0

    // V_i+1 = V_i >> 1
    for (j = 3; j > 0; j--) {
      Vi[j] = (Vi[j] >>> 1) | ((Vi[j - 1] & 1) << 31)
    }
    Vi[0] = Vi[0] >>> 1

    // If LSB(V_i) is 1, V_i+1 = (V_i >> 1) ^ R
    if (lsbVi) {
      Vi[0] = Vi[0] ^ (0xe1 << 24)
    }
  }
  this.state = fromArray(Zi)
}

GHASH.prototype.update = function (buf) {
  this.cache = Buffer.concat([this.cache, buf])
  var chunk
  while (this.cache.length >= 16) {
    chunk = this.cache.slice(0, 16)
    this.cache = this.cache.slice(16)
    this.ghash(chunk)
  }
}

GHASH.prototype.final = function (abl, bl) {
  if (this.cache.length) {
    this.ghash(Buffer.concat([this.cache, ZEROES], 16))
  }

  this.ghash(fromArray([0, abl, 0, bl]))
  return this.state
}

module.exports = GHASH

},{"safe-buffer":161}],31:[function(require,module,exports){
function incr32 (iv) {
  var len = iv.length
  var item
  while (len--) {
    item = iv.readUInt8(len)
    if (item === 255) {
      iv.writeUInt8(0, len)
    } else {
      item++
      iv.writeUInt8(item, len)
      break
    }
  }
}
module.exports = incr32

},{}],32:[function(require,module,exports){
var xor = require('buffer-xor')

exports.encrypt = function (self, block) {
  var data = xor(block, self._prev)

  self._prev = self._cipher.encryptBlock(data)
  return self._prev
}

exports.decrypt = function (self, block) {
  var pad = self._prev

  self._prev = block
  var out = self._cipher.decryptBlock(block)

  return xor(out, pad)
}

},{"buffer-xor":52}],33:[function(require,module,exports){
var Buffer = require('safe-buffer').Buffer
var xor = require('buffer-xor')

function encryptStart (self, data, decrypt) {
  var len = data.length
  var out = xor(data, self._cache)
  self._cache = self._cache.slice(len)
  self._prev = Buffer.concat([self._prev, decrypt ? data : out])
  return out
}

exports.encrypt = function (self, data, decrypt) {
  var out = Buffer.allocUnsafe(0)
  var len

  while (data.length) {
    if (self._cache.length === 0) {
      self._cache = self._cipher.encryptBlock(self._prev)
      self._prev = Buffer.allocUnsafe(0)
    }

    if (self._cache.length <= data.length) {
      len = self._cache.length
      out = Buffer.concat([out, encryptStart(self, data.slice(0, len), decrypt)])
      data = data.slice(len)
    } else {
      out = Buffer.concat([out, encryptStart(self, data, decrypt)])
      break
    }
  }

  return out
}

},{"buffer-xor":52,"safe-buffer":161}],34:[function(require,module,exports){
var Buffer = require('safe-buffer').Buffer

function encryptByte (self, byteParam, decrypt) {
  var pad
  var i = -1
  var len = 8
  var out = 0
  var bit, value
  while (++i < len) {
    pad = self._cipher.encryptBlock(self._prev)
    bit = (byteParam & (1 << (7 - i))) ? 0x80 : 0
    value = pad[0] ^ bit
    out += ((value & 0x80) >> (i % 8))
    self._prev = shiftIn(self._prev, decrypt ? bit : value)
  }
  return out
}

function shiftIn (buffer, value) {
  var len = buffer.length
  var i = -1
  var out = Buffer.allocUnsafe(buffer.length)
  buffer = Buffer.concat([buffer, Buffer.from([value])])

  while (++i < len) {
    out[i] = buffer[i] << 1 | buffer[i + 1] >> (7)
  }

  return out
}

exports.encrypt = function (self, chunk, decrypt) {
  var len = chunk.length
  var out = Buffer.allocUnsafe(len)
  var i = -1

  while (++i < len) {
    out[i] = encryptByte(self, chunk[i], decrypt)
  }

  return out
}

},{"safe-buffer":161}],35:[function(require,module,exports){
var Buffer = require('safe-buffer').Buffer

function encryptByte (self, byteParam, decrypt) {
  var pad = self._cipher.encryptBlock(self._prev)
  var out = pad[0] ^ byteParam

  self._prev = Buffer.concat([
    self._prev.slice(1),
    Buffer.from([decrypt ? byteParam : out])
  ])

  return out
}

exports.encrypt = function (self, chunk, decrypt) {
  var len = chunk.length
  var out = Buffer.allocUnsafe(len)
  var i = -1

  while (++i < len) {
    out[i] = encryptByte(self, chunk[i], decrypt)
  }

  return out
}

},{"safe-buffer":161}],36:[function(require,module,exports){
var xor = require('buffer-xor')
var Buffer = require('safe-buffer').Buffer
var incr32 = require('../incr32')

function getBlock (self) {
  var out = self._cipher.encryptBlockRaw(self._prev)
  incr32(self._prev)
  return out
}

var blockSize = 16
exports.encrypt = function (self, chunk) {
  var chunkNum = Math.ceil(chunk.length / blockSize)
  var start = self._cache.length
  self._cache = Buffer.concat([
    self._cache,
    Buffer.allocUnsafe(chunkNum * blockSize)
  ])
  for (var i = 0; i < chunkNum; i++) {
    var out = getBlock(self)
    var offset = start + i * blockSize
    self._cache.writeUInt32BE(out[0], offset + 0)
    self._cache.writeUInt32BE(out[1], offset + 4)
    self._cache.writeUInt32BE(out[2], offset + 8)
    self._cache.writeUInt32BE(out[3], offset + 12)
  }
  var pad = self._cache.slice(0, chunk.length)
  self._cache = self._cache.slice(chunk.length)
  return xor(chunk, pad)
}

},{"../incr32":31,"buffer-xor":52,"safe-buffer":161}],37:[function(require,module,exports){
exports.encrypt = function (self, block) {
  return self._cipher.encryptBlock(block)
}

exports.decrypt = function (self, block) {
  return self._cipher.decryptBlock(block)
}

},{}],38:[function(require,module,exports){
var modeModules = {
  ECB: require('./ecb'),
  CBC: require('./cbc'),
  CFB: require('./cfb'),
  CFB8: require('./cfb8'),
  CFB1: require('./cfb1'),
  OFB: require('./ofb'),
  CTR: require('./ctr'),
  GCM: require('./ctr')
}

var modes = require('./list.json')

for (var key in modes) {
  modes[key].module = modeModules[modes[key].mode]
}

module.exports = modes

},{"./cbc":32,"./cfb":33,"./cfb1":34,"./cfb8":35,"./ctr":36,"./ecb":37,"./list.json":39,"./ofb":40}],39:[function(require,module,exports){
module.exports={
  "aes-128-ecb": {
    "cipher": "AES",
    "key": 128,
    "iv": 0,
    "mode": "ECB",
    "type": "block"
  },
  "aes-192-ecb": {
    "cipher": "AES",
    "key": 192,
    "iv": 0,
    "mode": "ECB",
    "type": "block"
  },
  "aes-256-ecb": {
    "cipher": "AES",
    "key": 256,
    "iv": 0,
    "mode": "ECB",
    "type": "block"
  },
  "aes-128-cbc": {
    "cipher": "AES",
    "key": 128,
    "iv": 16,
    "mode": "CBC",
    "type": "block"
  },
  "aes-192-cbc": {
    "cipher": "AES",
    "key": 192,
    "iv": 16,
    "mode": "CBC",
    "type": "block"
  },
  "aes-256-cbc": {
    "cipher": "AES",
    "key": 256,
    "iv": 16,
    "mode": "CBC",
    "type": "block"
  },
  "aes128": {
    "cipher": "AES",
    "key": 128,
    "iv": 16,
    "mode": "CBC",
    "type": "block"
  },
  "aes192": {
    "cipher": "AES",
    "key": 192,
    "iv": 16,
    "mode": "CBC",
    "type": "block"
  },
  "aes256": {
    "cipher": "AES",
    "key": 256,
    "iv": 16,
    "mode": "CBC",
    "type": "block"
  },
  "aes-128-cfb": {
    "cipher": "AES",
    "key": 128,
    "iv": 16,
    "mode": "CFB",
    "type": "stream"
  },
  "aes-192-cfb": {
    "cipher": "AES",
    "key": 192,
    "iv": 16,
    "mode": "CFB",
    "type": "stream"
  },
  "aes-256-cfb": {
    "cipher": "AES",
    "key": 256,
    "iv": 16,
    "mode": "CFB",
    "type": "stream"
  },
  "aes-128-cfb8": {
    "cipher": "AES",
    "key": 128,
    "iv": 16,
    "mode": "CFB8",
    "type": "stream"
  },
  "aes-192-cfb8": {
    "cipher": "AES",
    "key": 192,
    "iv": 16,
    "mode": "CFB8",
    "type": "stream"
  },
  "aes-256-cfb8": {
    "cipher": "AES",
    "key": 256,
    "iv": 16,
    "mode": "CFB8",
    "type": "stream"
  },
  "aes-128-cfb1": {
    "cipher": "AES",
    "key": 128,
    "iv": 16,
    "mode": "CFB1",
    "type": "stream"
  },
  "aes-192-cfb1": {
    "cipher": "AES",
    "key": 192,
    "iv": 16,
    "mode": "CFB1",
    "type": "stream"
  },
  "aes-256-cfb1": {
    "cipher": "AES",
    "key": 256,
    "iv": 16,
    "mode": "CFB1",
    "type": "stream"
  },
  "aes-128-ofb": {
    "cipher": "AES",
    "key": 128,
    "iv": 16,
    "mode": "OFB",
    "type": "stream"
  },
  "aes-192-ofb": {
    "cipher": "AES",
    "key": 192,
    "iv": 16,
    "mode": "OFB",
    "type": "stream"
  },
  "aes-256-ofb": {
    "cipher": "AES",
    "key": 256,
    "iv": 16,
    "mode": "OFB",
    "type": "stream"
  },
  "aes-128-ctr": {
    "cipher": "AES",
    "key": 128,
    "iv": 16,
    "mode": "CTR",
    "type": "stream"
  },
  "aes-192-ctr": {
    "cipher": "AES",
    "key": 192,
    "iv": 16,
    "mode": "CTR",
    "type": "stream"
  },
  "aes-256-ctr": {
    "cipher": "AES",
    "key": 256,
    "iv": 16,
    "mode": "CTR",
    "type": "stream"
  },
  "aes-128-gcm": {
    "cipher": "AES",
    "key": 128,
    "iv": 12,
    "mode": "GCM",
    "type": "auth"
  },
  "aes-192-gcm": {
    "cipher": "AES",
    "key": 192,
    "iv": 12,
    "mode": "GCM",
    "type": "auth"
  },
  "aes-256-gcm": {
    "cipher": "AES",
    "key": 256,
    "iv": 12,
    "mode": "GCM",
    "type": "auth"
  }
}

},{}],40:[function(require,module,exports){
(function (Buffer){(function (){
var xor = require('buffer-xor')

function getBlock (self) {
  self._prev = self._cipher.encryptBlock(self._prev)
  return self._prev
}

exports.encrypt = function (self, chunk) {
  while (self._cache.length < chunk.length) {
    self._cache = Buffer.concat([self._cache, getBlock(self)])
  }

  var pad = self._cache.slice(0, chunk.length)
  self._cache = self._cache.slice(chunk.length)
  return xor(chunk, pad)
}

}).call(this)}).call(this,require("buffer").Buffer)
},{"buffer":53,"buffer-xor":52}],41:[function(require,module,exports){
var aes = require('./aes')
var Buffer = require('safe-buffer').Buffer
var Transform = require('cipher-base')
var inherits = require('inherits')

function StreamCipher (mode, key, iv, decrypt) {
  Transform.call(this)

  this._cipher = new aes.AES(key)
  this._prev = Buffer.from(iv)
  this._cache = Buffer.allocUnsafe(0)
  this._secCache = Buffer.allocUnsafe(0)
  this._decrypt = decrypt
  this._mode = mode
}

inherits(StreamCipher, Transform)

StreamCipher.prototype._update = function (chunk) {
  return this._mode.encrypt(this, chunk, this._decrypt)
}

StreamCipher.prototype._final = function () {
  this._cipher.scrub()
}

module.exports = StreamCipher

},{"./aes":25,"cipher-base":56,"inherits":115,"safe-buffer":161}],42:[function(require,module,exports){
var DES = require('browserify-des')
var aes = require('browserify-aes/browser')
var aesModes = require('browserify-aes/modes')
var desModes = require('browserify-des/modes')
var ebtk = require('evp_bytestokey')

function createCipher (suite, password) {
  suite = suite.toLowerCase()

  var keyLen, ivLen
  if (aesModes[suite]) {
    keyLen = aesModes[suite].key
    ivLen = aesModes[suite].iv
  } else if (desModes[suite]) {
    keyLen = desModes[suite].key * 8
    ivLen = desModes[suite].iv
  } else {
    throw new TypeError('invalid suite type')
  }

  var keys = ebtk(password, false, keyLen, ivLen)
  return createCipheriv(suite, keys.key, keys.iv)
}

function createDecipher (suite, password) {
  suite = suite.toLowerCase()

  var keyLen, ivLen
  if (aesModes[suite]) {
    keyLen = aesModes[suite].key
    ivLen = aesModes[suite].iv
  } else if (desModes[suite]) {
    keyLen = desModes[suite].key * 8
    ivLen = desModes[suite].iv
  } else {
    throw new TypeError('invalid suite type')
  }

  var keys = ebtk(password, false, keyLen, ivLen)
  return createDecipheriv(suite, keys.key, keys.iv)
}

function createCipheriv (suite, key, iv) {
  suite = suite.toLowerCase()
  if (aesModes[suite]) return aes.createCipheriv(suite, key, iv)
  if (desModes[suite]) return new DES({ key: key, iv: iv, mode: suite })

  throw new TypeError('invalid suite type')
}

function createDecipheriv (suite, key, iv) {
  suite = suite.toLowerCase()
  if (aesModes[suite]) return aes.createDecipheriv(suite, key, iv)
  if (desModes[suite]) return new DES({ key: key, iv: iv, mode: suite, decrypt: true })

  throw new TypeError('invalid suite type')
}

function getCiphers () {
  return Object.keys(desModes).concat(aes.getCiphers())
}

exports.createCipher = exports.Cipher = createCipher
exports.createCipheriv = exports.Cipheriv = createCipheriv
exports.createDecipher = exports.Decipher = createDecipher
exports.createDecipheriv = exports.Decipheriv = createDecipheriv
exports.listCiphers = exports.getCiphers = getCiphers

},{"browserify-aes/browser":27,"browserify-aes/modes":38,"browserify-des":43,"browserify-des/modes":44,"evp_bytestokey":90}],43:[function(require,module,exports){
var CipherBase = require('cipher-base')
var des = require('des.js')
var inherits = require('inherits')
var Buffer = require('safe-buffer').Buffer

var modes = {
  'des-ede3-cbc': des.CBC.instantiate(des.EDE),
  'des-ede3': des.EDE,
  'des-ede-cbc': des.CBC.instantiate(des.EDE),
  'des-ede': des.EDE,
  'des-cbc': des.CBC.instantiate(des.DES),
  'des-ecb': des.DES
}
modes.des = modes['des-cbc']
modes.des3 = modes['des-ede3-cbc']
module.exports = DES
inherits(DES, CipherBase)
function DES (opts) {
  CipherBase.call(this)
  var modeName = opts.mode.toLowerCase()
  var mode = modes[modeName]
  var type
  if (opts.decrypt) {
    type = 'decrypt'
  } else {
    type = 'encrypt'
  }
  var key = opts.key
  if (!Buffer.isBuffer(key)) {
    key = Buffer.from(key)
  }
  if (modeName === 'des-ede' || modeName === 'des-ede-cbc') {
    key = Buffer.concat([key, key.slice(0, 8)])
  }
  var iv = opts.iv
  if (!Buffer.isBuffer(iv)) {
    iv = Buffer.from(iv)
  }
  this._des = mode.create({
    key: key,
    iv: iv,
    type: type
  })
}
DES.prototype._update = function (data) {
  return Buffer.from(this._des.update(data))
}
DES.prototype._final = function () {
  return Buffer.from(this._des.final())
}

},{"cipher-base":56,"des.js":63,"inherits":115,"safe-buffer":161}],44:[function(require,module,exports){
exports['des-ecb'] = {
  key: 8,
  iv: 0
}
exports['des-cbc'] = exports.des = {
  key: 8,
  iv: 8
}
exports['des-ede3-cbc'] = exports.des3 = {
  key: 24,
  iv: 8
}
exports['des-ede3'] = {
  key: 24,
  iv: 0
}
exports['des-ede-cbc'] = {
  key: 16,
  iv: 8
}
exports['des-ede'] = {
  key: 16,
  iv: 0
}

},{}],45:[function(require,module,exports){
(function (Buffer){(function (){
var BN = require('bn.js')
var randomBytes = require('randombytes')

function blind (priv) {
  var r = getr(priv)
  var blinder = r.toRed(BN.mont(priv.modulus)).redPow(new BN(priv.publicExponent)).fromRed()
  return { blinder: blinder, unblinder: r.invm(priv.modulus) }
}

function getr (priv) {
  var len = priv.modulus.byteLength()
  var r
  do {
    r = new BN(randomBytes(len))
  } while (r.cmp(priv.modulus) >= 0 || !r.umod(priv.prime1) || !r.umod(priv.prime2))
  return r
}

function crt (msg, priv) {
  var blinds = blind(priv)
  var len = priv.modulus.byteLength()
  var blinded = new BN(msg).mul(blinds.blinder).umod(priv.modulus)
  var c1 = blinded.toRed(BN.mont(priv.prime1))
  var c2 = blinded.toRed(BN.mont(priv.prime2))
  var qinv = priv.coefficient
  var p = priv.prime1
  var q = priv.prime2
  var m1 = c1.redPow(priv.exponent1).fromRed()
  var m2 = c2.redPow(priv.exponent2).fromRed()
  var h = m1.isub(m2).imul(qinv).umod(p).imul(q)
  return m2.iadd(h).imul(blinds.unblinder).umod(priv.modulus).toArrayLike(Buffer, 'be', len)
}
crt.getr = getr

module.exports = crt

}).call(this)}).call(this,require("buffer").Buffer)
},{"bn.js":22,"buffer":53,"randombytes":143}],46:[function(require,module,exports){
module.exports = require('./browser/algorithms.json')

},{"./browser/algorithms.json":47}],47:[function(require,module,exports){
module.exports={
  "sha224WithRSAEncryption": {
    "sign": "rsa",
    "hash": "sha224",
    "id": "302d300d06096086480165030402040500041c"
  },
  "RSA-SHA224": {
    "sign": "ecdsa/rsa",
    "hash": "sha224",
    "id": "302d300d06096086480165030402040500041c"
  },
  "sha256WithRSAEncryption": {
    "sign": "rsa",
    "hash": "sha256",
    "id": "3031300d060960864801650304020105000420"
  },
  "RSA-SHA256": {
    "sign": "ecdsa/rsa",
    "hash": "sha256",
    "id": "3031300d060960864801650304020105000420"
  },
  "sha384WithRSAEncryption": {
    "sign": "rsa",
    "hash": "sha384",
    "id": "3041300d060960864801650304020205000430"
  },
  "RSA-SHA384": {
    "sign": "ecdsa/rsa",
    "hash": "sha384",
    "id": "3041300d060960864801650304020205000430"
  },
  "sha512WithRSAEncryption": {
    "sign": "rsa",
    "hash": "sha512",
    "id": "3051300d060960864801650304020305000440"
  },
  "RSA-SHA512": {
    "sign": "ecdsa/rsa",
    "hash": "sha512",
    "id": "3051300d060960864801650304020305000440"
  },
  "RSA-SHA1": {
    "sign": "rsa",
    "hash": "sha1",
    "id": "3021300906052b0e03021a05000414"
  },
  "ecdsa-with-SHA1": {
    "sign": "ecdsa",
    "hash": "sha1",
    "id": ""
  },
  "sha256": {
    "sign": "ecdsa",
    "hash": "sha256",
    "id": ""
  },
  "sha224": {
    "sign": "ecdsa",
    "hash": "sha224",
    "id": ""
  },
  "sha384": {
    "sign": "ecdsa",
    "hash": "sha384",
    "id": ""
  },
  "sha512": {
    "sign": "ecdsa",
    "hash": "sha512",
    "id": ""
  },
  "DSA-SHA": {
    "sign": "dsa",
    "hash": "sha1",
    "id": ""
  },
  "DSA-SHA1": {
    "sign": "dsa",
    "hash": "sha1",
    "id": ""
  },
  "DSA": {
    "sign": "dsa",
    "hash": "sha1",
    "id": ""
  },
  "DSA-WITH-SHA224": {
    "sign": "dsa",
    "hash": "sha224",
    "id": ""
  },
  "DSA-SHA224": {
    "sign": "dsa",
    "hash": "sha224",
    "id": ""
  },
  "DSA-WITH-SHA256": {
    "sign": "dsa",
    "hash": "sha256",
    "id": ""
  },
  "DSA-SHA256": {
    "sign": "dsa",
    "hash": "sha256",
    "id": ""
  },
  "DSA-WITH-SHA384": {
    "sign": "dsa",
    "hash": "sha384",
    "id": ""
  },
  "DSA-SHA384": {
    "sign": "dsa",
    "hash": "sha384",
    "id": ""
  },
  "DSA-WITH-SHA512": {
    "sign": "dsa",
    "hash": "sha512",
    "id": ""
  },
  "DSA-SHA512": {
    "sign": "dsa",
    "hash": "sha512",
    "id": ""
  },
  "DSA-RIPEMD160": {
    "sign": "dsa",
    "hash": "rmd160",
    "id": ""
  },
  "ripemd160WithRSA": {
    "sign": "rsa",
    "hash": "rmd160",
    "id": "3021300906052b2403020105000414"
  },
  "RSA-RIPEMD160": {
    "sign": "rsa",
    "hash": "rmd160",
    "id": "3021300906052b2403020105000414"
  },
  "md5WithRSAEncryption": {
    "sign": "rsa",
    "hash": "md5",
    "id": "3020300c06082a864886f70d020505000410"
  },
  "RSA-MD5": {
    "sign": "rsa",
    "hash": "md5",
    "id": "3020300c06082a864886f70d020505000410"
  }
}

},{}],48:[function(require,module,exports){
module.exports={
  "1.3.132.0.10": "secp256k1",
  "1.3.132.0.33": "p224",
  "1.2.840.10045.3.1.1": "p192",
  "1.2.840.10045.3.1.7": "p256",
  "1.3.132.0.34": "p384",
  "1.3.132.0.35": "p521"
}

},{}],49:[function(require,module,exports){
var Buffer = require('safe-buffer').Buffer
var createHash = require('create-hash')
var stream = require('readable-stream')
var inherits = require('inherits')
var sign = require('./sign')
var verify = require('./verify')

var algorithms = require('./algorithms.json')
Object.keys(algorithms).forEach(function (key) {
  algorithms[key].id = Buffer.from(algorithms[key].id, 'hex')
  algorithms[key.toLowerCase()] = algorithms[key]
})

function Sign (algorithm) {
  stream.Writable.call(this)

  var data = algorithms[algorithm]
  if (!data) throw new Error('Unknown message digest')

  this._hashType = data.hash
  this._hash = createHash(data.hash)
  this._tag = data.id
  this._signType = data.sign
}
inherits(Sign, stream.Writable)

Sign.prototype._write = function _write (data, _, done) {
  this._hash.update(data)
  done()
}

Sign.prototype.update = function update (data, enc) {
  if (typeof data === 'string') data = Buffer.from(data, enc)

  this._hash.update(data)
  return this
}

Sign.prototype.sign = function signMethod (key, enc) {
  this.end()
  var hash = this._hash.digest()
  var sig = sign(hash, key, this._hashType, this._signType, this._tag)

  return enc ? sig.toString(enc) : sig
}

function Verify (algorithm) {
  stream.Writable.call(this)

  var data = algorithms[algorithm]
  if (!data) throw new Error('Unknown message digest')

  this._hash = createHash(data.hash)
  this._tag = data.id
  this._signType = data.sign
}
inherits(Verify, stream.Writable)

Verify.prototype._write = function _write (data, _, done) {
  this._hash.update(data)
  done()
}

Verify.prototype.update = function update (data, enc) {
  if (typeof data === 'string') data = Buffer.from(data, enc)

  this._hash.update(data)
  return this
}

Verify.prototype.verify = function verifyMethod (key, sig, enc) {
  if (typeof sig === 'string') sig = Buffer.from(sig, enc)

  this.end()
  var hash = this._hash.digest()
  return verify(sig, hash, key, this._signType, this._tag)
}

function createSign (algorithm) {
  return new Sign(algorithm)
}

function createVerify (algorithm) {
  return new Verify(algorithm)
}

module.exports = {
  Sign: createSign,
  Verify: createVerify,
  createSign: createSign,
  createVerify: createVerify
}

},{"./algorithms.json":47,"./sign":50,"./verify":51,"create-hash":58,"inherits":115,"readable-stream":159,"safe-buffer":161}],50:[function(require,module,exports){
// much of this based on https://github.com/indutny/self-signed/blob/gh-pages/lib/rsa.js
var Buffer = require('safe-buffer').Buffer
var createHmac = require('create-hmac')
var crt = require('browserify-rsa')
var EC = require('elliptic').ec
var BN = require('bn.js')
var parseKeys = require('parse-asn1')
var curves = require('./curves.json')

function sign (hash, key, hashType, signType, tag) {
  var priv = parseKeys(key)
  if (priv.curve) {
    // rsa keys can be interpreted as ecdsa ones in openssl
    if (signType !== 'ecdsa' && signType !== 'ecdsa/rsa') throw new Error('wrong private key type')
    return ecSign(hash, priv)
  } else if (priv.type === 'dsa') {
    if (signType !== 'dsa') throw new Error('wrong private key type')
    return dsaSign(hash, priv, hashType)
  } else {
    if (signType !== 'rsa' && signType !== 'ecdsa/rsa') throw new Error('wrong private key type')
  }
  hash = Buffer.concat([tag, hash])
  var len = priv.modulus.byteLength()
  var pad = [0, 1]
  while (hash.length + pad.length + 1 < len) pad.push(0xff)
  pad.push(0x00)
  var i = -1
  while (++i < hash.length) pad.push(hash[i])

  var out = crt(pad, priv)
  return out
}

function ecSign (hash, priv) {
  var curveId = curves[priv.curve.join('.')]
  if (!curveId) throw new Error('unknown curve ' + priv.curve.join('.'))

  var curve = new EC(curveId)
  var key = curve.keyFromPrivate(priv.privateKey)
  var out = key.sign(hash)

  return Buffer.from(out.toDER())
}

function dsaSign (hash, priv, algo) {
  var x = priv.params.priv_key
  var p = priv.params.p
  var q = priv.params.q
  var g = priv.params.g
  var r = new BN(0)
  var k
  var H = bits2int(hash, q).mod(q)
  var s = false
  var kv = getKey(x, q, hash, algo)
  while (s === false) {
    k = makeKey(q, kv, algo)
    r = makeR(g, k, p, q)
    s = k.invm(q).imul(H.add(x.mul(r))).mod(q)
    if (s.cmpn(0) === 0) {
      s = false
      r = new BN(0)
    }
  }
  return toDER(r, s)
}

function toDER (r, s) {
  r = r.toArray()
  s = s.toArray()

  // Pad values
  if (r[0] & 0x80) r = [0].concat(r)
  if (s[0] & 0x80) s = [0].concat(s)

  var total = r.length + s.length + 4
  var res = [0x30, total, 0x02, r.length]
  res = res.concat(r, [0x02, s.length], s)
  return Buffer.from(res)
}

function getKey (x, q, hash, algo) {
  x = Buffer.from(x.toArray())
  if (x.length < q.byteLength()) {
    var zeros = Buffer.alloc(q.byteLength() - x.length)
    x = Buffer.concat([zeros, x])
  }
  var hlen = hash.length
  var hbits = bits2octets(hash, q)
  var v = Buffer.alloc(hlen)
  v.fill(1)
  var k = Buffer.alloc(hlen)
  k = createHmac(algo, k).update(v).update(Buffer.from([0])).update(x).update(hbits).digest()
  v = createHmac(algo, k).update(v).digest()
  k = createHmac(algo, k).update(v).update(Buffer.from([1])).update(x).update(hbits).digest()
  v = createHmac(algo, k).update(v).digest()
  return { k: k, v: v }
}

function bits2int (obits, q) {
  var bits = new BN(obits)
  var shift = (obits.length << 3) - q.bitLength()
  if (shift > 0) bits.ishrn(shift)
  return bits
}

function bits2octets (bits, q) {
  bits = bits2int(bits, q)
  bits = bits.mod(q)
  var out = Buffer.from(bits.toArray())
  if (out.length < q.byteLength()) {
    var zeros = Buffer.alloc(q.byteLength() - out.length)
    out = Buffer.concat([zeros, out])
  }
  return out
}

function makeKey (q, kv, algo) {
  var t
  var k

  do {
    t = Buffer.alloc(0)

    while (t.length * 8 < q.bitLength()) {
      kv.v = createHmac(algo, kv.k).update(kv.v).digest()
      t = Buffer.concat([t, kv.v])
    }

    k = bits2int(t, q)
    kv.k = createHmac(algo, kv.k).update(kv.v).update(Buffer.from([0])).digest()
    kv.v = createHmac(algo, kv.k).update(kv.v).digest()
  } while (k.cmp(q) !== -1)

  return k
}

function makeR (g, k, p, q) {
  return g.toRed(BN.mont(p)).redPow(k).fromRed().mod(q)
}

module.exports = sign
module.exports.getKey = getKey
module.exports.makeKey = makeKey

},{"./curves.json":48,"bn.js":22,"browserify-rsa":45,"create-hmac":60,"elliptic":73,"parse-asn1":129,"safe-buffer":161}],51:[function(require,module,exports){
// much of this based on https://github.com/indutny/self-signed/blob/gh-pages/lib/rsa.js
var Buffer = require('safe-buffer').Buffer
var BN = require('bn.js')
var EC = require('elliptic').ec
var parseKeys = require('parse-asn1')
var curves = require('./curves.json')

function verify (sig, hash, key, signType, tag) {
  var pub = parseKeys(key)
  if (pub.type === 'ec') {
    // rsa keys can be interpreted as ecdsa ones in openssl
    if (signType !== 'ecdsa' && signType !== 'ecdsa/rsa') throw new Error('wrong public key type')
    return ecVerify(sig, hash, pub)
  } else if (pub.type === 'dsa') {
    if (signType !== 'dsa') throw new Error('wrong public key type')
    return dsaVerify(sig, hash, pub)
  } else {
    if (signType !== 'rsa' && signType !== 'ecdsa/rsa') throw new Error('wrong public key type')
  }
  hash = Buffer.concat([tag, hash])
  var len = pub.modulus.byteLength()
  var pad = [1]
  var padNum = 0
  while (hash.length + pad.length + 2 < len) {
    pad.push(0xff)
    padNum++
  }
  pad.push(0x00)
  var i = -1
  while (++i < hash.length) {
    pad.push(hash[i])
  }
  pad = Buffer.from(pad)
  var red = BN.mont(pub.modulus)
  sig = new BN(sig).toRed(red)

  sig = sig.redPow(new BN(pub.publicExponent))
  sig = Buffer.from(sig.fromRed().toArray())
  var out = padNum < 8 ? 1 : 0
  len = Math.min(sig.length, pad.length)
  if (sig.length !== pad.length) out = 1

  i = -1
  while (++i < len) out |= sig[i] ^ pad[i]
  return out === 0
}

function ecVerify (sig, hash, pub) {
  var curveId = curves[pub.data.algorithm.curve.join('.')]
  if (!curveId) throw new Error('unknown curve ' + pub.data.algorithm.curve.join('.'))

  var curve = new EC(curveId)
  var pubkey = pub.data.subjectPrivateKey.data

  return curve.verify(hash, sig, pubkey)
}

function dsaVerify (sig, hash, pub) {
  var p = pub.data.p
  var q = pub.data.q
  var g = pub.data.g
  var y = pub.data.pub_key
  var unpacked = parseKeys.signature.decode(sig, 'der')
  var s = unpacked.s
  var r = unpacked.r
  checkValue(s, q)
  checkValue(r, q)
  var montp = BN.mont(p)
  var w = s.invm(q)
  var v = g.toRed(montp)
    .redPow(new BN(hash).mul(w).mod(q))
    .fromRed()
    .mul(y.toRed(montp).redPow(r.mul(w).mod(q)).fromRed())
    .mod(p)
    .mod(q)
  return v.cmp(r) === 0
}

function checkValue (b, q) {
  if (b.cmpn(0) <= 0) throw new Error('invalid sig')
  if (b.cmp(q) >= q) throw new Error('invalid sig')
}

module.exports = verify

},{"./curves.json":48,"bn.js":22,"elliptic":73,"parse-asn1":129,"safe-buffer":161}],52:[function(require,module,exports){
(function (Buffer){(function (){
module.exports = function xor (a, b) {
  var length = Math.min(a.length, b.length)
  var buffer = new Buffer(length)

  for (var i = 0; i < length; ++i) {
    buffer[i] = a[i] ^ b[i]
  }

  return buffer
}

}).call(this)}).call(this,require("buffer").Buffer)
},{"buffer":53}],53:[function(require,module,exports){
(function (Buffer){(function (){
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <https://feross.org>
 * @license  MIT
 */
/* eslint-disable no-proto */

'use strict'

var base64 = require('base64-js')
var ieee754 = require('ieee754')

exports.Buffer = Buffer
exports.SlowBuffer = SlowBuffer
exports.INSPECT_MAX_BYTES = 50

var K_MAX_LENGTH = 0x7fffffff
exports.kMaxLength = K_MAX_LENGTH

/**
 * If `Buffer.TYPED_ARRAY_SUPPORT`:
 *   === true    Use Uint8Array implementation (fastest)
 *   === false   Print warning and recommend using `buffer` v4.x which has an Object
 *               implementation (most compatible, even IE6)
 *
 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
 * Opera 11.6+, iOS 4.2+.
 *
 * We report that the browser does not support typed arrays if the are not subclassable
 * using __proto__. Firefox 4-29 lacks support for adding new properties to `Uint8Array`
 * (See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438). IE 10 lacks support
 * for __proto__ and has a buggy typed array implementation.
 */
Buffer.TYPED_ARRAY_SUPPORT = typedArraySupport()

if (!Buffer.TYPED_ARRAY_SUPPORT && typeof console !== 'undefined' &&
    typeof console.error === 'function') {
  console.error(
    'This browser lacks typed array (Uint8Array) support which is required by ' +
    '`buffer` v5.x. Use `buffer` v4.x if you require old browser support.'
  )
}

function typedArraySupport () {
  // Can typed array instances can be augmented?
  try {
    var arr = new Uint8Array(1)
    arr.__proto__ = { __proto__: Uint8Array.prototype, foo: function () { return 42 } }
    return arr.foo() === 42
  } catch (e) {
    return false
  }
}

Object.defineProperty(Buffer.prototype, 'parent', {
  enumerable: true,
  get: function () {
    if (!Buffer.isBuffer(this)) return undefined
    return this.buffer
  }
})

Object.defineProperty(Buffer.prototype, 'offset', {
  enumerable: true,
  get: function () {
    if (!Buffer.isBuffer(this)) return undefined
    return this.byteOffset
  }
})

function createBuffer (length) {
  if (length > K_MAX_LENGTH) {
    throw new RangeError('The value "' + length + '" is invalid for option "size"')
  }
  // Return an augmented `Uint8Array` instance
  var buf = new Uint8Array(length)
  buf.__proto__ = Buffer.prototype
  return buf
}

/**
 * The Buffer constructor returns instances of `Uint8Array` that have their
 * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
 * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
 * and the `Uint8Array` methods. Square bracket notation works as expected -- it
 * returns a single octet.
 *
 * The `Uint8Array` prototype remains unmodified.
 */

function Buffer (arg, encodingOrOffset, length) {
  // Common case.
  if (typeof arg === 'number') {
    if (typeof encodingOrOffset === 'string') {
      throw new TypeError(
        'The "string" argument must be of type string. Received type number'
      )
    }
    return allocUnsafe(arg)
  }
  return from(arg, encodingOrOffset, length)
}

// Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97
if (typeof Symbol !== 'undefined' && Symbol.species != null &&
    Buffer[Symbol.species] === Buffer) {
  Object.defineProperty(Buffer, Symbol.species, {
    value: null,
    configurable: true,
    enumerable: false,
    writable: false
  })
}

Buffer.poolSize = 8192 // not used by this implementation

function from (value, encodingOrOffset, length) {
  if (typeof value === 'string') {
    return fromString(value, encodingOrOffset)
  }

  if (ArrayBuffer.isView(value)) {
    return fromArrayLike(value)
  }

  if (value == null) {
    throw TypeError(
      'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +
      'or Array-like Object. Received type ' + (typeof value)
    )
  }

  if (isInstance(value, ArrayBuffer) ||
      (value && isInstance(value.buffer, ArrayBuffer))) {
    return fromArrayBuffer(value, encodingOrOffset, length)
  }

  if (typeof value === 'number') {
    throw new TypeError(
      'The "value" argument must not be of type number. Received type number'
    )
  }

  var valueOf = value.valueOf && value.valueOf()
  if (valueOf != null && valueOf !== value) {
    return Buffer.from(valueOf, encodingOrOffset, length)
  }

  var b = fromObject(value)
  if (b) return b

  if (typeof Symbol !== 'undefined' && Symbol.toPrimitive != null &&
      typeof value[Symbol.toPrimitive] === 'function') {
    return Buffer.from(
      value[Symbol.toPrimitive]('string'), encodingOrOffset, length
    )
  }

  throw new TypeError(
    'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +
    'or Array-like Object. Received type ' + (typeof value)
  )
}

/**
 * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
 * if value is a number.
 * Buffer.from(str[, encoding])
 * Buffer.from(array)
 * Buffer.from(buffer)
 * Buffer.from(arrayBuffer[, byteOffset[, length]])
 **/
Buffer.from = function (value, encodingOrOffset, length) {
  return from(value, encodingOrOffset, length)
}

// Note: Change prototype *after* Buffer.from is defined to workaround Chrome bug:
// https://github.com/feross/buffer/pull/148
Buffer.prototype.__proto__ = Uint8Array.prototype
Buffer.__proto__ = Uint8Array

function assertSize (size) {
  if (typeof size !== 'number') {
    throw new TypeError('"size" argument must be of type number')
  } else if (size < 0) {
    throw new RangeError('The value "' + size + '" is invalid for option "size"')
  }
}

function alloc (size, fill, encoding) {
  assertSize(size)
  if (size <= 0) {
    return createBuffer(size)
  }
  if (fill !== undefined) {
    // Only pay attention to encoding if it's a string. This
    // prevents accidentally sending in a number that would
    // be interpretted as a start offset.
    return typeof encoding === 'string'
      ? createBuffer(size).fill(fill, encoding)
      : createBuffer(size).fill(fill)
  }
  return createBuffer(size)
}

/**
 * Creates a new filled Buffer instance.
 * alloc(size[, fill[, encoding]])
 **/
Buffer.alloc = function (size, fill, encoding) {
  return alloc(size, fill, encoding)
}

function allocUnsafe (size) {
  assertSize(size)
  return createBuffer(size < 0 ? 0 : checked(size) | 0)
}

/**
 * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
 * */
Buffer.allocUnsafe = function (size) {
  return allocUnsafe(size)
}
/**
 * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
 */
Buffer.allocUnsafeSlow = function (size) {
  return allocUnsafe(size)
}

function fromString (string, encoding) {
  if (typeof encoding !== 'string' || encoding === '') {
    encoding = 'utf8'
  }

  if (!Buffer.isEncoding(encoding)) {
    throw new TypeError('Unknown encoding: ' + encoding)
  }

  var length = byteLength(string, encoding) | 0
  var buf = createBuffer(length)

  var actual = buf.write(string, encoding)

  if (actual !== length) {
    // Writing a hex string, for example, that contains invalid characters will
    // cause everything after the first invalid character to be ignored. (e.g.
    // 'abxxcd' will be treated as 'ab')
    buf = buf.slice(0, actual)
  }

  return buf
}

function fromArrayLike (array) {
  var length = array.length < 0 ? 0 : checked(array.length) | 0
  var buf = createBuffer(length)
  for (var i = 0; i < length; i += 1) {
    buf[i] = array[i] & 255
  }
  return buf
}

function fromArrayBuffer (array, byteOffset, length) {
  if (byteOffset < 0 || array.byteLength < byteOffset) {
    throw new RangeError('"offset" is outside of buffer bounds')
  }

  if (array.byteLength < byteOffset + (length || 0)) {
    throw new RangeError('"length" is outside of buffer bounds')
  }

  var buf
  if (byteOffset === undefined && length === undefined) {
    buf = new Uint8Array(array)
  } else if (length === undefined) {
    buf = new Uint8Array(array, byteOffset)
  } else {
    buf = new Uint8Array(array, byteOffset, length)
  }

  // Return an augmented `Uint8Array` instance
  buf.__proto__ = Buffer.prototype
  return buf
}

function fromObject (obj) {
  if (Buffer.isBuffer(obj)) {
    var len = checked(obj.length) | 0
    var buf = createBuffer(len)

    if (buf.length === 0) {
      return buf
    }

    obj.copy(buf, 0, 0, len)
    return buf
  }

  if (obj.length !== undefined) {
    if (typeof obj.length !== 'number' || numberIsNaN(obj.length)) {
      return createBuffer(0)
    }
    return fromArrayLike(obj)
  }

  if (obj.type === 'Buffer' && Array.isArray(obj.data)) {
    return fromArrayLike(obj.data)
  }
}

function checked (length) {
  // Note: cannot use `length < K_MAX_LENGTH` here because that fails when
  // length is NaN (which is otherwise coerced to zero.)
  if (length >= K_MAX_LENGTH) {
    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
                         'size: 0x' + K_MAX_LENGTH.toString(16) + ' bytes')
  }
  return length | 0
}

function SlowBuffer (length) {
  if (+length != length) { // eslint-disable-line eqeqeq
    length = 0
  }
  return Buffer.alloc(+length)
}

Buffer.isBuffer = function isBuffer (b) {
  return b != null && b._isBuffer === true &&
    b !== Buffer.prototype // so Buffer.isBuffer(Buffer.prototype) will be false
}

Buffer.compare = function compare (a, b) {
  if (isInstance(a, Uint8Array)) a = Buffer.from(a, a.offset, a.byteLength)
  if (isInstance(b, Uint8Array)) b = Buffer.from(b, b.offset, b.byteLength)
  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
    throw new TypeError(
      'The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array'
    )
  }

  if (a === b) return 0

  var x = a.length
  var y = b.length

  for (var i = 0, len = Math.min(x, y); i < len; ++i) {
    if (a[i] !== b[i]) {
      x = a[i]
      y = b[i]
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

Buffer.isEncoding = function isEncoding (encoding) {
  switch (String(encoding).toLowerCase()) {
    case 'hex':
    case 'utf8':
    case 'utf-8':
    case 'ascii':
    case 'latin1':
    case 'binary':
    case 'base64':
    case 'ucs2':
    case 'ucs-2':
    case 'utf16le':
    case 'utf-16le':
      return true
    default:
      return false
  }
}

Buffer.concat = function concat (list, length) {
  if (!Array.isArray(list)) {
    throw new TypeError('"list" argument must be an Array of Buffers')
  }

  if (list.length === 0) {
    return Buffer.alloc(0)
  }

  var i
  if (length === undefined) {
    length = 0
    for (i = 0; i < list.length; ++i) {
      length += list[i].length
    }
  }

  var buffer = Buffer.allocUnsafe(length)
  var pos = 0
  for (i = 0; i < list.length; ++i) {
    var buf = list[i]
    if (isInstance(buf, Uint8Array)) {
      buf = Buffer.from(buf)
    }
    if (!Buffer.isBuffer(buf)) {
      throw new TypeError('"list" argument must be an Array of Buffers')
    }
    buf.copy(buffer, pos)
    pos += buf.length
  }
  return buffer
}

function byteLength (string, encoding) {
  if (Buffer.isBuffer(string)) {
    return string.length
  }
  if (ArrayBuffer.isView(string) || isInstance(string, ArrayBuffer)) {
    return string.byteLength
  }
  if (typeof string !== 'string') {
    throw new TypeError(
      'The "string" argument must be one of type string, Buffer, or ArrayBuffer. ' +
      'Received type ' + typeof string
    )
  }

  var len = string.length
  var mustMatch = (arguments.length > 2 && arguments[2] === true)
  if (!mustMatch && len === 0) return 0

  // Use a for loop to avoid recursion
  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'ascii':
      case 'latin1':
      case 'binary':
        return len
      case 'utf8':
      case 'utf-8':
        return utf8ToBytes(string).length
      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return len * 2
      case 'hex':
        return len >>> 1
      case 'base64':
        return base64ToBytes(string).length
      default:
        if (loweredCase) {
          return mustMatch ? -1 : utf8ToBytes(string).length // assume utf8
        }
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}
Buffer.byteLength = byteLength

function slowToString (encoding, start, end) {
  var loweredCase = false

  // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
  // property of a typed array.

  // This behaves neither like String nor Uint8Array in that we set start/end
  // to their upper/lower bounds if the value passed is out of range.
  // undefined is handled specially as per ECMA-262 6th Edition,
  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
  if (start === undefined || start < 0) {
    start = 0
  }
  // Return early if start > this.length. Done here to prevent potential uint32
  // coercion fail below.
  if (start > this.length) {
    return ''
  }

  if (end === undefined || end > this.length) {
    end = this.length
  }

  if (end <= 0) {
    return ''
  }

  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.
  end >>>= 0
  start >>>= 0

  if (end <= start) {
    return ''
  }

  if (!encoding) encoding = 'utf8'

  while (true) {
    switch (encoding) {
      case 'hex':
        return hexSlice(this, start, end)

      case 'utf8':
      case 'utf-8':
        return utf8Slice(this, start, end)

      case 'ascii':
        return asciiSlice(this, start, end)

      case 'latin1':
      case 'binary':
        return latin1Slice(this, start, end)

      case 'base64':
        return base64Slice(this, start, end)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return utf16leSlice(this, start, end)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = (encoding + '').toLowerCase()
        loweredCase = true
    }
  }
}

// This property is used by `Buffer.isBuffer` (and the `is-buffer` npm package)
// to detect a Buffer instance. It's not possible to use `instanceof Buffer`
// reliably in a browserify context because there could be multiple different
// copies of the 'buffer' package in use. This method works even for Buffer
// instances that were created from another copy of the `buffer` package.
// See: https://github.com/feross/buffer/issues/154
Buffer.prototype._isBuffer = true

function swap (b, n, m) {
  var i = b[n]
  b[n] = b[m]
  b[m] = i
}

Buffer.prototype.swap16 = function swap16 () {
  var len = this.length
  if (len % 2 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 16-bits')
  }
  for (var i = 0; i < len; i += 2) {
    swap(this, i, i + 1)
  }
  return this
}

Buffer.prototype.swap32 = function swap32 () {
  var len = this.length
  if (len % 4 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 32-bits')
  }
  for (var i = 0; i < len; i += 4) {
    swap(this, i, i + 3)
    swap(this, i + 1, i + 2)
  }
  return this
}

Buffer.prototype.swap64 = function swap64 () {
  var len = this.length
  if (len % 8 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 64-bits')
  }
  for (var i = 0; i < len; i += 8) {
    swap(this, i, i + 7)
    swap(this, i + 1, i + 6)
    swap(this, i + 2, i + 5)
    swap(this, i + 3, i + 4)
  }
  return this
}

Buffer.prototype.toString = function toString () {
  var length = this.length
  if (length === 0) return ''
  if (arguments.length === 0) return utf8Slice(this, 0, length)
  return slowToString.apply(this, arguments)
}

Buffer.prototype.toLocaleString = Buffer.prototype.toString

Buffer.prototype.equals = function equals (b) {
  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
  if (this === b) return true
  return Buffer.compare(this, b) === 0
}

Buffer.prototype.inspect = function inspect () {
  var str = ''
  var max = exports.INSPECT_MAX_BYTES
  str = this.toString('hex', 0, max).replace(/(.{2})/g, '$1 ').trim()
  if (this.length > max) str += ' ... '
  return '<Buffer ' + str + '>'
}

Buffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {
  if (isInstance(target, Uint8Array)) {
    target = Buffer.from(target, target.offset, target.byteLength)
  }
  if (!Buffer.isBuffer(target)) {
    throw new TypeError(
      'The "target" argument must be one of type Buffer or Uint8Array. ' +
      'Received type ' + (typeof target)
    )
  }

  if (start === undefined) {
    start = 0
  }
  if (end === undefined) {
    end = target ? target.length : 0
  }
  if (thisStart === undefined) {
    thisStart = 0
  }
  if (thisEnd === undefined) {
    thisEnd = this.length
  }

  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
    throw new RangeError('out of range index')
  }

  if (thisStart >= thisEnd && start >= end) {
    return 0
  }
  if (thisStart >= thisEnd) {
    return -1
  }
  if (start >= end) {
    return 1
  }

  start >>>= 0
  end >>>= 0
  thisStart >>>= 0
  thisEnd >>>= 0

  if (this === target) return 0

  var x = thisEnd - thisStart
  var y = end - start
  var len = Math.min(x, y)

  var thisCopy = this.slice(thisStart, thisEnd)
  var targetCopy = target.slice(start, end)

  for (var i = 0; i < len; ++i) {
    if (thisCopy[i] !== targetCopy[i]) {
      x = thisCopy[i]
      y = targetCopy[i]
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
// OR the last index of `val` in `buffer` at offset <= `byteOffset`.
//
// Arguments:
// - buffer - a Buffer to search
// - val - a string, Buffer, or number
// - byteOffset - an index into `buffer`; will be clamped to an int32
// - encoding - an optional encoding, relevant is val is a string
// - dir - true for indexOf, false for lastIndexOf
function bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {
  // Empty buffer means no match
  if (buffer.length === 0) return -1

  // Normalize byteOffset
  if (typeof byteOffset === 'string') {
    encoding = byteOffset
    byteOffset = 0
  } else if (byteOffset > 0x7fffffff) {
    byteOffset = 0x7fffffff
  } else if (byteOffset < -0x80000000) {
    byteOffset = -0x80000000
  }
  byteOffset = +byteOffset // Coerce to Number.
  if (numberIsNaN(byteOffset)) {
    // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
    byteOffset = dir ? 0 : (buffer.length - 1)
  }

  // Normalize byteOffset: negative offsets start from the end of the buffer
  if (byteOffset < 0) byteOffset = buffer.length + byteOffset
  if (byteOffset >= buffer.length) {
    if (dir) return -1
    else byteOffset = buffer.length - 1
  } else if (byteOffset < 0) {
    if (dir) byteOffset = 0
    else return -1
  }

  // Normalize val
  if (typeof val === 'string') {
    val = Buffer.from(val, encoding)
  }

  // Finally, search either indexOf (if dir is true) or lastIndexOf
  if (Buffer.isBuffer(val)) {
    // Special case: looking for empty string/buffer always fails
    if (val.length === 0) {
      return -1
    }
    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)
  } else if (typeof val === 'number') {
    val = val & 0xFF // Search for a byte value [0-255]
    if (typeof Uint8Array.prototype.indexOf === 'function') {
      if (dir) {
        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)
      } else {
        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)
      }
    }
    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)
  }

  throw new TypeError('val must be string, number or Buffer')
}

function arrayIndexOf (arr, val, byteOffset, encoding, dir) {
  var indexSize = 1
  var arrLength = arr.length
  var valLength = val.length

  if (encoding !== undefined) {
    encoding = String(encoding).toLowerCase()
    if (encoding === 'ucs2' || encoding === 'ucs-2' ||
        encoding === 'utf16le' || encoding === 'utf-16le') {
      if (arr.length < 2 || val.length < 2) {
        return -1
      }
      indexSize = 2
      arrLength /= 2
      valLength /= 2
      byteOffset /= 2
    }
  }

  function read (buf, i) {
    if (indexSize === 1) {
      return buf[i]
    } else {
      return buf.readUInt16BE(i * indexSize)
    }
  }

  var i
  if (dir) {
    var foundIndex = -1
    for (i = byteOffset; i < arrLength; i++) {
      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
        if (foundIndex === -1) foundIndex = i
        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize
      } else {
        if (foundIndex !== -1) i -= i - foundIndex
        foundIndex = -1
      }
    }
  } else {
    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength
    for (i = byteOffset; i >= 0; i--) {
      var found = true
      for (var j = 0; j < valLength; j++) {
        if (read(arr, i + j) !== read(val, j)) {
          found = false
          break
        }
      }
      if (found) return i
    }
  }

  return -1
}

Buffer.prototype.includes = function includes (val, byteOffset, encoding) {
  return this.indexOf(val, byteOffset, encoding) !== -1
}

Buffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)
}

Buffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)
}

function hexWrite (buf, string, offset, length) {
  offset = Number(offset) || 0
  var remaining = buf.length - offset
  if (!length) {
    length = remaining
  } else {
    length = Number(length)
    if (length > remaining) {
      length = remaining
    }
  }

  var strLen = string.length

  if (length > strLen / 2) {
    length = strLen / 2
  }
  for (var i = 0; i < length; ++i) {
    var parsed = parseInt(string.substr(i * 2, 2), 16)
    if (numberIsNaN(parsed)) return i
    buf[offset + i] = parsed
  }
  return i
}

function utf8Write (buf, string, offset, length) {
  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)
}

function asciiWrite (buf, string, offset, length) {
  return blitBuffer(asciiToBytes(string), buf, offset, length)
}

function latin1Write (buf, string, offset, length) {
  return asciiWrite(buf, string, offset, length)
}

function base64Write (buf, string, offset, length) {
  return blitBuffer(base64ToBytes(string), buf, offset, length)
}

function ucs2Write (buf, string, offset, length) {
  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)
}

Buffer.prototype.write = function write (string, offset, length, encoding) {
  // Buffer#write(string)
  if (offset === undefined) {
    encoding = 'utf8'
    length = this.length
    offset = 0
  // Buffer#write(string, encoding)
  } else if (length === undefined && typeof offset === 'string') {
    encoding = offset
    length = this.length
    offset = 0
  // Buffer#write(string, offset[, length][, encoding])
  } else if (isFinite(offset)) {
    offset = offset >>> 0
    if (isFinite(length)) {
      length = length >>> 0
      if (encoding === undefined) encoding = 'utf8'
    } else {
      encoding = length
      length = undefined
    }
  } else {
    throw new Error(
      'Buffer.write(string, encoding, offset[, length]) is no longer supported'
    )
  }

  var remaining = this.length - offset
  if (length === undefined || length > remaining) length = remaining

  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
    throw new RangeError('Attempt to write outside buffer bounds')
  }

  if (!encoding) encoding = 'utf8'

  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'hex':
        return hexWrite(this, string, offset, length)

      case 'utf8':
      case 'utf-8':
        return utf8Write(this, string, offset, length)

      case 'ascii':
        return asciiWrite(this, string, offset, length)

      case 'latin1':
      case 'binary':
        return latin1Write(this, string, offset, length)

      case 'base64':
        // Warning: maxLength not taken into account in base64Write
        return base64Write(this, string, offset, length)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return ucs2Write(this, string, offset, length)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}

Buffer.prototype.toJSON = function toJSON () {
  return {
    type: 'Buffer',
    data: Array.prototype.slice.call(this._arr || this, 0)
  }
}

function base64Slice (buf, start, end) {
  if (start === 0 && end === buf.length) {
    return base64.fromByteArray(buf)
  } else {
    return base64.fromByteArray(buf.slice(start, end))
  }
}

function utf8Slice (buf, start, end) {
  end = Math.min(buf.length, end)
  var res = []

  var i = start
  while (i < end) {
    var firstByte = buf[i]
    var codePoint = null
    var bytesPerSequence = (firstByte > 0xEF) ? 4
      : (firstByte > 0xDF) ? 3
        : (firstByte > 0xBF) ? 2
          : 1

    if (i + bytesPerSequence <= end) {
      var secondByte, thirdByte, fourthByte, tempCodePoint

      switch (bytesPerSequence) {
        case 1:
          if (firstByte < 0x80) {
            codePoint = firstByte
          }
          break
        case 2:
          secondByte = buf[i + 1]
          if ((secondByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)
            if (tempCodePoint > 0x7F) {
              codePoint = tempCodePoint
            }
          }
          break
        case 3:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)
            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
              codePoint = tempCodePoint
            }
          }
          break
        case 4:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          fourthByte = buf[i + 3]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)
            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
              codePoint = tempCodePoint
            }
          }
      }
    }

    if (codePoint === null) {
      // we did not generate a valid codePoint so insert a
      // replacement char (U+FFFD) and advance only 1 byte
      codePoint = 0xFFFD
      bytesPerSequence = 1
    } else if (codePoint > 0xFFFF) {
      // encode to utf16 (surrogate pair dance)
      codePoint -= 0x10000
      res.push(codePoint >>> 10 & 0x3FF | 0xD800)
      codePoint = 0xDC00 | codePoint & 0x3FF
    }

    res.push(codePoint)
    i += bytesPerSequence
  }

  return decodeCodePointsArray(res)
}

// Based on http://stackoverflow.com/a/22747272/680742, the browser with
// the lowest limit is Chrome, with 0x10000 args.
// We go 1 magnitude less, for safety
var MAX_ARGUMENTS_LENGTH = 0x1000

function decodeCodePointsArray (codePoints) {
  var len = codePoints.length
  if (len <= MAX_ARGUMENTS_LENGTH) {
    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
  }

  // Decode in chunks to avoid "call stack size exceeded".
  var res = ''
  var i = 0
  while (i < len) {
    res += String.fromCharCode.apply(
      String,
      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
    )
  }
  return res
}

function asciiSlice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i] & 0x7F)
  }
  return ret
}

function latin1Slice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i])
  }
  return ret
}

function hexSlice (buf, start, end) {
  var len = buf.length

  if (!start || start < 0) start = 0
  if (!end || end < 0 || end > len) end = len

  var out = ''
  for (var i = start; i < end; ++i) {
    out += toHex(buf[i])
  }
  return out
}

function utf16leSlice (buf, start, end) {
  var bytes = buf.slice(start, end)
  var res = ''
  for (var i = 0; i < bytes.length; i += 2) {
    res += String.fromCharCode(bytes[i] + (bytes[i + 1] * 256))
  }
  return res
}

Buffer.prototype.slice = function slice (start, end) {
  var len = this.length
  start = ~~start
  end = end === undefined ? len : ~~end

  if (start < 0) {
    start += len
    if (start < 0) start = 0
  } else if (start > len) {
    start = len
  }

  if (end < 0) {
    end += len
    if (end < 0) end = 0
  } else if (end > len) {
    end = len
  }

  if (end < start) end = start

  var newBuf = this.subarray(start, end)
  // Return an augmented `Uint8Array` instance
  newBuf.__proto__ = Buffer.prototype
  return newBuf
}

/*
 * Need to make sure that buffer isn't trying to write out of bounds.
 */
function checkOffset (offset, ext, length) {
  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')
  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')
}

Buffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }

  return val
}

Buffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) {
    checkOffset(offset, byteLength, this.length)
  }

  var val = this[offset + --byteLength]
  var mul = 1
  while (byteLength > 0 && (mul *= 0x100)) {
    val += this[offset + --byteLength] * mul
  }

  return val
}

Buffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 1, this.length)
  return this[offset]
}

Buffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 2, this.length)
  return this[offset] | (this[offset + 1] << 8)
}

Buffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 2, this.length)
  return (this[offset] << 8) | this[offset + 1]
}

Buffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)

  return ((this[offset]) |
      (this[offset + 1] << 8) |
      (this[offset + 2] << 16)) +
      (this[offset + 3] * 0x1000000)
}

Buffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] * 0x1000000) +
    ((this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    this[offset + 3])
}

Buffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var i = byteLength
  var mul = 1
  var val = this[offset + --i]
  while (i > 0 && (mul *= 0x100)) {
    val += this[offset + --i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readInt8 = function readInt8 (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 1, this.length)
  if (!(this[offset] & 0x80)) return (this[offset])
  return ((0xff - this[offset] + 1) * -1)
}

Buffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset] | (this[offset + 1] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset + 1] | (this[offset] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset]) |
    (this[offset + 1] << 8) |
    (this[offset + 2] << 16) |
    (this[offset + 3] << 24)
}

Buffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] << 24) |
    (this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    (this[offset + 3])
}

Buffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, true, 23, 4)
}

Buffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, false, 23, 4)
}

Buffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, true, 52, 8)
}

Buffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, false, 52, 8)
}

function checkInt (buf, value, offset, ext, max, min) {
  if (!Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance')
  if (value > max || value < min) throw new RangeError('"value" argument is out of bounds')
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
}

Buffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1
    checkInt(this, value, offset, byteLength, maxBytes, 0)
  }

  var mul = 1
  var i = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1
    checkInt(this, value, offset, byteLength, maxBytes, 0)
  }

  var i = byteLength - 1
  var mul = 1
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)
  this[offset] = (value & 0xff)
  return offset + 1
}

Buffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  this[offset] = (value & 0xff)
  this[offset + 1] = (value >>> 8)
  return offset + 2
}

Buffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  this[offset] = (value >>> 8)
  this[offset + 1] = (value & 0xff)
  return offset + 2
}

Buffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  this[offset + 3] = (value >>> 24)
  this[offset + 2] = (value >>> 16)
  this[offset + 1] = (value >>> 8)
  this[offset] = (value & 0xff)
  return offset + 4
}

Buffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  this[offset] = (value >>> 24)
  this[offset + 1] = (value >>> 16)
  this[offset + 2] = (value >>> 8)
  this[offset + 3] = (value & 0xff)
  return offset + 4
}

Buffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    var limit = Math.pow(2, (8 * byteLength) - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = 0
  var mul = 1
  var sub = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
      sub = 1
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    var limit = Math.pow(2, (8 * byteLength) - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = byteLength - 1
  var mul = 1
  var sub = 0
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
      sub = 1
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)
  if (value < 0) value = 0xff + value + 1
  this[offset] = (value & 0xff)
  return offset + 1
}

Buffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  this[offset] = (value & 0xff)
  this[offset + 1] = (value >>> 8)
  return offset + 2
}

Buffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  this[offset] = (value >>> 8)
  this[offset + 1] = (value & 0xff)
  return offset + 2
}

Buffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  this[offset] = (value & 0xff)
  this[offset + 1] = (value >>> 8)
  this[offset + 2] = (value >>> 16)
  this[offset + 3] = (value >>> 24)
  return offset + 4
}

Buffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  if (value < 0) value = 0xffffffff + value + 1
  this[offset] = (value >>> 24)
  this[offset + 1] = (value >>> 16)
  this[offset + 2] = (value >>> 8)
  this[offset + 3] = (value & 0xff)
  return offset + 4
}

function checkIEEE754 (buf, value, offset, ext, max, min) {
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
  if (offset < 0) throw new RangeError('Index out of range')
}

function writeFloat (buf, value, offset, littleEndian, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)
  }
  ieee754.write(buf, value, offset, littleEndian, 23, 4)
  return offset + 4
}

Buffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {
  return writeFloat(this, value, offset, true, noAssert)
}

Buffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {
  return writeFloat(this, value, offset, false, noAssert)
}

function writeDouble (buf, value, offset, littleEndian, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)
  }
  ieee754.write(buf, value, offset, littleEndian, 52, 8)
  return offset + 8
}

Buffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {
  return writeDouble(this, value, offset, true, noAssert)
}

Buffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {
  return writeDouble(this, value, offset, false, noAssert)
}

// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
Buffer.prototype.copy = function copy (target, targetStart, start, end) {
  if (!Buffer.isBuffer(target)) throw new TypeError('argument should be a Buffer')
  if (!start) start = 0
  if (!end && end !== 0) end = this.length
  if (targetStart >= target.length) targetStart = target.length
  if (!targetStart) targetStart = 0
  if (end > 0 && end < start) end = start

  // Copy 0 bytes; we're done
  if (end === start) return 0
  if (target.length === 0 || this.length === 0) return 0

  // Fatal error conditions
  if (targetStart < 0) {
    throw new RangeError('targetStart out of bounds')
  }
  if (start < 0 || start >= this.length) throw new RangeError('Index out of range')
  if (end < 0) throw new RangeError('sourceEnd out of bounds')

  // Are we oob?
  if (end > this.length) end = this.length
  if (target.length - targetStart < end - start) {
    end = target.length - targetStart + start
  }

  var len = end - start

  if (this === target && typeof Uint8Array.prototype.copyWithin === 'function') {
    // Use built-in when available, missing from IE11
    this.copyWithin(targetStart, start, end)
  } else if (this === target && start < targetStart && targetStart < end) {
    // descending copy from end
    for (var i = len - 1; i >= 0; --i) {
      target[i + targetStart] = this[i + start]
    }
  } else {
    Uint8Array.prototype.set.call(
      target,
      this.subarray(start, end),
      targetStart
    )
  }

  return len
}

// Usage:
//    buffer.fill(number[, offset[, end]])
//    buffer.fill(buffer[, offset[, end]])
//    buffer.fill(string[, offset[, end]][, encoding])
Buffer.prototype.fill = function fill (val, start, end, encoding) {
  // Handle string cases:
  if (typeof val === 'string') {
    if (typeof start === 'string') {
      encoding = start
      start = 0
      end = this.length
    } else if (typeof end === 'string') {
      encoding = end
      end = this.length
    }
    if (encoding !== undefined && typeof encoding !== 'string') {
      throw new TypeError('encoding must be a string')
    }
    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
      throw new TypeError('Unknown encoding: ' + encoding)
    }
    if (val.length === 1) {
      var code = val.charCodeAt(0)
      if ((encoding === 'utf8' && code < 128) ||
          encoding === 'latin1') {
        // Fast path: If `val` fits into a single byte, use that numeric value.
        val = code
      }
    }
  } else if (typeof val === 'number') {
    val = val & 255
  }

  // Invalid ranges are not set to a default, so can range check early.
  if (start < 0 || this.length < start || this.length < end) {
    throw new RangeError('Out of range index')
  }

  if (end <= start) {
    return this
  }

  start = start >>> 0
  end = end === undefined ? this.length : end >>> 0

  if (!val) val = 0

  var i
  if (typeof val === 'number') {
    for (i = start; i < end; ++i) {
      this[i] = val
    }
  } else {
    var bytes = Buffer.isBuffer(val)
      ? val
      : Buffer.from(val, encoding)
    var len = bytes.length
    if (len === 0) {
      throw new TypeError('The value "' + val +
        '" is invalid for argument "value"')
    }
    for (i = 0; i < end - start; ++i) {
      this[i + start] = bytes[i % len]
    }
  }

  return this
}

// HELPER FUNCTIONS
// ================

var INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g

function base64clean (str) {
  // Node takes equal signs as end of the Base64 encoding
  str = str.split('=')[0]
  // Node strips out invalid characters like \n and \t from the string, base64-js does not
  str = str.trim().replace(INVALID_BASE64_RE, '')
  // Node converts strings with length < 2 to ''
  if (str.length < 2) return ''
  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
  while (str.length % 4 !== 0) {
    str = str + '='
  }
  return str
}

function toHex (n) {
  if (n < 16) return '0' + n.toString(16)
  return n.toString(16)
}

function utf8ToBytes (string, units) {
  units = units || Infinity
  var codePoint
  var length = string.length
  var leadSurrogate = null
  var bytes = []

  for (var i = 0; i < length; ++i) {
    codePoint = string.charCodeAt(i)

    // is surrogate component
    if (codePoint > 0xD7FF && codePoint < 0xE000) {
      // last char was a lead
      if (!leadSurrogate) {
        // no lead yet
        if (codePoint > 0xDBFF) {
          // unexpected trail
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        } else if (i + 1 === length) {
          // unpaired lead
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        }

        // valid lead
        leadSurrogate = codePoint

        continue
      }

      // 2 leads in a row
      if (codePoint < 0xDC00) {
        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
        leadSurrogate = codePoint
        continue
      }

      // valid surrogate pair
      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000
    } else if (leadSurrogate) {
      // valid bmp char, but last char was a lead
      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
    }

    leadSurrogate = null

    // encode utf8
    if (codePoint < 0x80) {
      if ((units -= 1) < 0) break
      bytes.push(codePoint)
    } else if (codePoint < 0x800) {
      if ((units -= 2) < 0) break
      bytes.push(
        codePoint >> 0x6 | 0xC0,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x10000) {
      if ((units -= 3) < 0) break
      bytes.push(
        codePoint >> 0xC | 0xE0,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x110000) {
      if ((units -= 4) < 0) break
      bytes.push(
        codePoint >> 0x12 | 0xF0,
        codePoint >> 0xC & 0x3F | 0x80,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else {
      throw new Error('Invalid code point')
    }
  }

  return bytes
}

function asciiToBytes (str) {
  var byteArray = []
  for (var i = 0; i < str.length; ++i) {
    // Node's code seems to be doing this and not & 0x7F..
    byteArray.push(str.charCodeAt(i) & 0xFF)
  }
  return byteArray
}

function utf16leToBytes (str, units) {
  var c, hi, lo
  var byteArray = []
  for (var i = 0; i < str.length; ++i) {
    if ((units -= 2) < 0) break

    c = str.charCodeAt(i)
    hi = c >> 8
    lo = c % 256
    byteArray.push(lo)
    byteArray.push(hi)
  }

  return byteArray
}

function base64ToBytes (str) {
  return base64.toByteArray(base64clean(str))
}

function blitBuffer (src, dst, offset, length) {
  for (var i = 0; i < length; ++i) {
    if ((i + offset >= dst.length) || (i >= src.length)) break
    dst[i + offset] = src[i]
  }
  return i
}

// ArrayBuffer or Uint8Array objects from other contexts (i.e. iframes) do not pass
// the `instanceof` check but they should be treated as of that type.
// See: https://github.com/feross/buffer/issues/166
function isInstance (obj, type) {
  return obj instanceof type ||
    (obj != null && obj.constructor != null && obj.constructor.name != null &&
      obj.constructor.name === type.name)
}
function numberIsNaN (obj) {
  // For IE11 support
  return obj !== obj // eslint-disable-line no-self-compare
}

}).call(this)}).call(this,require("buffer").Buffer)
},{"base64-js":20,"buffer":53,"ieee754":114}],54:[function(require,module,exports){
'use strict';

var GetIntrinsic = require('get-intrinsic');

var callBind = require('./');

var $indexOf = callBind(GetIntrinsic('String.prototype.indexOf'));

module.exports = function callBoundIntrinsic(name, allowMissing) {
	var intrinsic = GetIntrinsic(name, !!allowMissing);
	if (typeof intrinsic === 'function' && $indexOf(name, '.prototype.') > -1) {
		return callBind(intrinsic);
	}
	return intrinsic;
};

},{"./":55,"get-intrinsic":94}],55:[function(require,module,exports){
'use strict';

var bind = require('function-bind');
var GetIntrinsic = require('get-intrinsic');

var $apply = GetIntrinsic('%Function.prototype.apply%');
var $call = GetIntrinsic('%Function.prototype.call%');
var $reflectApply = GetIntrinsic('%Reflect.apply%', true) || bind.call($call, $apply);

var $gOPD = GetIntrinsic('%Object.getOwnPropertyDescriptor%', true);
var $defineProperty = GetIntrinsic('%Object.defineProperty%', true);
var $max = GetIntrinsic('%Math.max%');

if ($defineProperty) {
	try {
		$defineProperty({}, 'a', { value: 1 });
	} catch (e) {
		// IE 8 has a broken defineProperty
		$defineProperty = null;
	}
}

module.exports = function callBind(originalFunction) {
	var func = $reflectApply(bind, $call, arguments);
	if ($gOPD && $defineProperty) {
		var desc = $gOPD(func, 'length');
		if (desc.configurable) {
			// original length, plus the receiver, minus any additional arguments (after the receiver)
			$defineProperty(
				func,
				'length',
				{ value: 1 + $max(0, originalFunction.length - (arguments.length - 1)) }
			);
		}
	}
	return func;
};

var applyBind = function applyBind() {
	return $reflectApply(bind, $apply, arguments);
};

if ($defineProperty) {
	$defineProperty(module.exports, 'apply', { value: applyBind });
} else {
	module.exports.apply = applyBind;
}

},{"function-bind":93,"get-intrinsic":94}],56:[function(require,module,exports){
var Buffer = require('safe-buffer').Buffer
var Transform = require('stream').Transform
var StringDecoder = require('string_decoder').StringDecoder
var inherits = require('inherits')

function CipherBase (hashMode) {
  Transform.call(this)
  this.hashMode = typeof hashMode === 'string'
  if (this.hashMode) {
    this[hashMode] = this._finalOrDigest
  } else {
    this.final = this._finalOrDigest
  }
  if (this._final) {
    this.__final = this._final
    this._final = null
  }
  this._decoder = null
  this._encoding = null
}
inherits(CipherBase, Transform)

CipherBase.prototype.update = function (data, inputEnc, outputEnc) {
  if (typeof data === 'string') {
    data = Buffer.from(data, inputEnc)
  }

  var outData = this._update(data)
  if (this.hashMode) return this

  if (outputEnc) {
    outData = this._toString(outData, outputEnc)
  }

  return outData
}

CipherBase.prototype.setAutoPadding = function () {}
CipherBase.prototype.getAuthTag = function () {
  throw new Error('trying to get auth tag in unsupported state')
}

CipherBase.prototype.setAuthTag = function () {
  throw new Error('trying to set auth tag in unsupported state')
}

CipherBase.prototype.setAAD = function () {
  throw new Error('trying to set aad in unsupported state')
}

CipherBase.prototype._transform = function (data, _, next) {
  var err
  try {
    if (this.hashMode) {
      this._update(data)
    } else {
      this.push(this._update(data))
    }
  } catch (e) {
    err = e
  } finally {
    next(err)
  }
}
CipherBase.prototype._flush = function (done) {
  var err
  try {
    this.push(this.__final())
  } catch (e) {
    err = e
  }

  done(err)
}
CipherBase.prototype._finalOrDigest = function (outputEnc) {
  var outData = this.__final() || Buffer.alloc(0)
  if (outputEnc) {
    outData = this._toString(outData, outputEnc, true)
  }
  return outData
}

CipherBase.prototype._toString = function (value, enc, fin) {
  if (!this._decoder) {
    this._decoder = new StringDecoder(enc)
    this._encoding = enc
  }

  if (this._encoding !== enc) throw new Error('can\'t switch encodings')

  var out = this._decoder.write(value)
  if (fin) {
    out += this._decoder.end()
  }

  return out
}

module.exports = CipherBase

},{"inherits":115,"safe-buffer":161,"stream":171,"string_decoder":172}],57:[function(require,module,exports){
(function (Buffer){(function (){
var elliptic = require('elliptic')
var BN = require('bn.js')

module.exports = function createECDH (curve) {
  return new ECDH(curve)
}

var aliases = {
  secp256k1: {
    name: 'secp256k1',
    byteLength: 32
  },
  secp224r1: {
    name: 'p224',
    byteLength: 28
  },
  prime256v1: {
    name: 'p256',
    byteLength: 32
  },
  prime192v1: {
    name: 'p192',
    byteLength: 24
  },
  ed25519: {
    name: 'ed25519',
    byteLength: 32
  },
  secp384r1: {
    name: 'p384',
    byteLength: 48
  },
  secp521r1: {
    name: 'p521',
    byteLength: 66
  }
}

aliases.p224 = aliases.secp224r1
aliases.p256 = aliases.secp256r1 = aliases.prime256v1
aliases.p192 = aliases.secp192r1 = aliases.prime192v1
aliases.p384 = aliases.secp384r1
aliases.p521 = aliases.secp521r1

function ECDH (curve) {
  this.curveType = aliases[curve]
  if (!this.curveType) {
    this.curveType = {
      name: curve
    }
  }
  this.curve = new elliptic.ec(this.curveType.name) // eslint-disable-line new-cap
  this.keys = void 0
}

ECDH.prototype.generateKeys = function (enc, format) {
  this.keys = this.curve.genKeyPair()
  return this.getPublicKey(enc, format)
}

ECDH.prototype.computeSecret = function (other, inenc, enc) {
  inenc = inenc || 'utf8'
  if (!Buffer.isBuffer(other)) {
    other = new Buffer(other, inenc)
  }
  var otherPub = this.curve.keyFromPublic(other).getPublic()
  var out = otherPub.mul(this.keys.getPrivate()).getX()
  return formatReturnValue(out, enc, this.curveType.byteLength)
}

ECDH.prototype.getPublicKey = function (enc, format) {
  var key = this.keys.getPublic(format === 'compressed', true)
  if (format === 'hybrid') {
    if (key[key.length - 1] % 2) {
      key[0] = 7
    } else {
      key[0] = 6
    }
  }
  return formatReturnValue(key, enc)
}

ECDH.prototype.getPrivateKey = function (enc) {
  return formatReturnValue(this.keys.getPrivate(), enc)
}

ECDH.prototype.setPublicKey = function (pub, enc) {
  enc = enc || 'utf8'
  if (!Buffer.isBuffer(pub)) {
    pub = new Buffer(pub, enc)
  }
  this.keys._importPublic(pub)
  return this
}

ECDH.prototype.setPrivateKey = function (priv, enc) {
  enc = enc || 'utf8'
  if (!Buffer.isBuffer(priv)) {
    priv = new Buffer(priv, enc)
  }

  var _priv = new BN(priv)
  _priv = _priv.toString(16)
  this.keys = this.curve.genKeyPair()
  this.keys._importPrivate(_priv)
  return this
}

function formatReturnValue (bn, enc, len) {
  if (!Array.isArray(bn)) {
    bn = bn.toArray()
  }
  var buf = new Buffer(bn)
  if (len && buf.length < len) {
    var zeros = new Buffer(len - buf.length)
    zeros.fill(0)
    buf = Buffer.concat([zeros, buf])
  }
  if (!enc) {
    return buf
  } else {
    return buf.toString(enc)
  }
}

}).call(this)}).call(this,require("buffer").Buffer)
},{"bn.js":21,"buffer":53,"elliptic":73}],58:[function(require,module,exports){
'use strict'
var inherits = require('inherits')
var MD5 = require('md5.js')
var RIPEMD160 = require('ripemd160')
var sha = require('sha.js')
var Base = require('cipher-base')

function Hash (hash) {
  Base.call(this, 'digest')

  this._hash = hash
}

inherits(Hash, Base)

Hash.prototype._update = function (data) {
  this._hash.update(data)
}

Hash.prototype._final = function () {
  return this._hash.digest()
}

module.exports = function createHash (alg) {
  alg = alg.toLowerCase()
  if (alg === 'md5') return new MD5()
  if (alg === 'rmd160' || alg === 'ripemd160') return new RIPEMD160()

  return new Hash(sha(alg))
}

},{"cipher-base":56,"inherits":115,"md5.js":121,"ripemd160":160,"sha.js":164}],59:[function(require,module,exports){
var MD5 = require('md5.js')

module.exports = function (buffer) {
  return new MD5().update(buffer).digest()
}

},{"md5.js":121}],60:[function(require,module,exports){
'use strict'
var inherits = require('inherits')
var Legacy = require('./legacy')
var Base = require('cipher-base')
var Buffer = require('safe-buffer').Buffer
var md5 = require('create-hash/md5')
var RIPEMD160 = require('ripemd160')

var sha = require('sha.js')

var ZEROS = Buffer.alloc(128)

function Hmac (alg, key) {
  Base.call(this, 'digest')
  if (typeof key === 'string') {
    key = Buffer.from(key)
  }

  var blocksize = (alg === 'sha512' || alg === 'sha384') ? 128 : 64

  this._alg = alg
  this._key = key
  if (key.length > blocksize) {
    var hash = alg === 'rmd160' ? new RIPEMD160() : sha(alg)
    key = hash.update(key).digest()
  } else if (key.length < blocksize) {
    key = Buffer.concat([key, ZEROS], blocksize)
  }

  var ipad = this._ipad = Buffer.allocUnsafe(blocksize)
  var opad = this._opad = Buffer.allocUnsafe(blocksize)

  for (var i = 0; i < blocksize; i++) {
    ipad[i] = key[i] ^ 0x36
    opad[i] = key[i] ^ 0x5C
  }
  this._hash = alg === 'rmd160' ? new RIPEMD160() : sha(alg)
  this._hash.update(ipad)
}

inherits(Hmac, Base)

Hmac.prototype._update = function (data) {
  this._hash.update(data)
}

Hmac.prototype._final = function () {
  var h = this._hash.digest()
  var hash = this._alg === 'rmd160' ? new RIPEMD160() : sha(this._alg)
  return hash.update(this._opad).update(h).digest()
}

module.exports = function createHmac (alg, key) {
  alg = alg.toLowerCase()
  if (alg === 'rmd160' || alg === 'ripemd160') {
    return new Hmac('rmd160', key)
  }
  if (alg === 'md5') {
    return new Legacy(md5, key)
  }
  return new Hmac(alg, key)
}

},{"./legacy":61,"cipher-base":56,"create-hash/md5":59,"inherits":115,"ripemd160":160,"safe-buffer":161,"sha.js":164}],61:[function(require,module,exports){
'use strict'
var inherits = require('inherits')
var Buffer = require('safe-buffer').Buffer

var Base = require('cipher-base')

var ZEROS = Buffer.alloc(128)
var blocksize = 64

function Hmac (alg, key) {
  Base.call(this, 'digest')
  if (typeof key === 'string') {
    key = Buffer.from(key)
  }

  this._alg = alg
  this._key = key

  if (key.length > blocksize) {
    key = alg(key)
  } else if (key.length < blocksize) {
    key = Buffer.concat([key, ZEROS], blocksize)
  }

  var ipad = this._ipad = Buffer.allocUnsafe(blocksize)
  var opad = this._opad = Buffer.allocUnsafe(blocksize)

  for (var i = 0; i < blocksize; i++) {
    ipad[i] = key[i] ^ 0x36
    opad[i] = key[i] ^ 0x5C
  }

  this._hash = [ipad]
}

inherits(Hmac, Base)

Hmac.prototype._update = function (data) {
  this._hash.push(data)
}

Hmac.prototype._final = function () {
  var h = this._alg(Buffer.concat(this._hash))
  return this._alg(Buffer.concat([this._opad, h]))
}
module.exports = Hmac

},{"cipher-base":56,"inherits":115,"safe-buffer":161}],62:[function(require,module,exports){
'use strict'

exports.randomBytes = exports.rng = exports.pseudoRandomBytes = exports.prng = require('randombytes')
exports.createHash = exports.Hash = require('create-hash')
exports.createHmac = exports.Hmac = require('create-hmac')

var algos = require('browserify-sign/algos')
var algoKeys = Object.keys(algos)
var hashes = ['sha1', 'sha224', 'sha256', 'sha384', 'sha512', 'md5', 'rmd160'].concat(algoKeys)
exports.getHashes = function () {
  return hashes
}

var p = require('pbkdf2')
exports.pbkdf2 = p.pbkdf2
exports.pbkdf2Sync = p.pbkdf2Sync

var aes = require('browserify-cipher')

exports.Cipher = aes.Cipher
exports.createCipher = aes.createCipher
exports.Cipheriv = aes.Cipheriv
exports.createCipheriv = aes.createCipheriv
exports.Decipher = aes.Decipher
exports.createDecipher = aes.createDecipher
exports.Decipheriv = aes.Decipheriv
exports.createDecipheriv = aes.createDecipheriv
exports.getCiphers = aes.getCiphers
exports.listCiphers = aes.listCiphers

var dh = require('diffie-hellman')

exports.DiffieHellmanGroup = dh.DiffieHellmanGroup
exports.createDiffieHellmanGroup = dh.createDiffieHellmanGroup
exports.getDiffieHellman = dh.getDiffieHellman
exports.createDiffieHellman = dh.createDiffieHellman
exports.DiffieHellman = dh.DiffieHellman

var sign = require('browserify-sign')

exports.createSign = sign.createSign
exports.Sign = sign.Sign
exports.createVerify = sign.createVerify
exports.Verify = sign.Verify

exports.createECDH = require('create-ecdh')

var publicEncrypt = require('public-encrypt')

exports.publicEncrypt = publicEncrypt.publicEncrypt
exports.privateEncrypt = publicEncrypt.privateEncrypt
exports.publicDecrypt = publicEncrypt.publicDecrypt
exports.privateDecrypt = publicEncrypt.privateDecrypt

// the least I can do is make error messages for the rest of the node.js/crypto api.
// ;[
//   'createCredentials'
// ].forEach(function (name) {
//   exports[name] = function () {
//     throw new Error([
//       'sorry, ' + name + ' is not implemented yet',
//       'we accept pull requests',
//       'https://github.com/crypto-browserify/crypto-browserify'
//     ].join('\n'))
//   }
// })

var rf = require('randomfill')

exports.randomFill = rf.randomFill
exports.randomFillSync = rf.randomFillSync

exports.createCredentials = function () {
  throw new Error([
    'sorry, createCredentials is not implemented yet',
    'we accept pull requests',
    'https://github.com/crypto-browserify/crypto-browserify'
  ].join('\n'))
}

exports.constants = {
  'DH_CHECK_P_NOT_SAFE_PRIME': 2,
  'DH_CHECK_P_NOT_PRIME': 1,
  'DH_UNABLE_TO_CHECK_GENERATOR': 4,
  'DH_NOT_SUITABLE_GENERATOR': 8,
  'NPN_ENABLED': 1,
  'ALPN_ENABLED': 1,
  'RSA_PKCS1_PADDING': 1,
  'RSA_SSLV23_PADDING': 2,
  'RSA_NO_PADDING': 3,
  'RSA_PKCS1_OAEP_PADDING': 4,
  'RSA_X931_PADDING': 5,
  'RSA_PKCS1_PSS_PADDING': 6,
  'POINT_CONVERSION_COMPRESSED': 2,
  'POINT_CONVERSION_UNCOMPRESSED': 4,
  'POINT_CONVERSION_HYBRID': 6
}

},{"browserify-cipher":42,"browserify-sign":49,"browserify-sign/algos":46,"create-ecdh":57,"create-hash":58,"create-hmac":60,"diffie-hellman":69,"pbkdf2":130,"public-encrypt":137,"randombytes":143,"randomfill":144}],63:[function(require,module,exports){
'use strict';

exports.utils = require('./des/utils');
exports.Cipher = require('./des/cipher');
exports.DES = require('./des/des');
exports.CBC = require('./des/cbc');
exports.EDE = require('./des/ede');

},{"./des/cbc":64,"./des/cipher":65,"./des/des":66,"./des/ede":67,"./des/utils":68}],64:[function(require,module,exports){
'use strict';

var assert = require('minimalistic-assert');
var inherits = require('inherits');

var proto = {};

function CBCState(iv) {
  assert.equal(iv.length, 8, 'Invalid IV length');

  this.iv = new Array(8);
  for (var i = 0; i < this.iv.length; i++)
    this.iv[i] = iv[i];
}

function instantiate(Base) {
  function CBC(options) {
    Base.call(this, options);
    this._cbcInit();
  }
  inherits(CBC, Base);

  var keys = Object.keys(proto);
  for (var i = 0; i < keys.length; i++) {
    var key = keys[i];
    CBC.prototype[key] = proto[key];
  }

  CBC.create = function create(options) {
    return new CBC(options);
  };

  return CBC;
}

exports.instantiate = instantiate;

proto._cbcInit = function _cbcInit() {
  var state = new CBCState(this.options.iv);
  this._cbcState = state;
};

proto._update = function _update(inp, inOff, out, outOff) {
  var state = this._cbcState;
  var superProto = this.constructor.super_.prototype;

  var iv = state.iv;
  if (this.type === 'encrypt') {
    for (var i = 0; i < this.blockSize; i++)
      iv[i] ^= inp[inOff + i];

    superProto._update.call(this, iv, 0, out, outOff);

    for (var i = 0; i < this.blockSize; i++)
      iv[i] = out[outOff + i];
  } else {
    superProto._update.call(this, inp, inOff, out, outOff);

    for (var i = 0; i < this.blockSize; i++)
      out[outOff + i] ^= iv[i];

    for (var i = 0; i < this.blockSize; i++)
      iv[i] = inp[inOff + i];
  }
};

},{"inherits":115,"minimalistic-assert":123}],65:[function(require,module,exports){
'use strict';

var assert = require('minimalistic-assert');

function Cipher(options) {
  this.options = options;

  this.type = this.options.type;
  this.blockSize = 8;
  this._init();

  this.buffer = new Array(this.blockSize);
  this.bufferOff = 0;
}
module.exports = Cipher;

Cipher.prototype._init = function _init() {
  // Might be overrided
};

Cipher.prototype.update = function update(data) {
  if (data.length === 0)
    return [];

  if (this.type === 'decrypt')
    return this._updateDecrypt(data);
  else
    return this._updateEncrypt(data);
};

Cipher.prototype._buffer = function _buffer(data, off) {
  // Append data to buffer
  var min = Math.min(this.buffer.length - this.bufferOff, data.length - off);
  for (var i = 0; i < min; i++)
    this.buffer[this.bufferOff + i] = data[off + i];
  this.bufferOff += min;

  // Shift next
  return min;
};

Cipher.prototype._flushBuffer = function _flushBuffer(out, off) {
  this._update(this.buffer, 0, out, off);
  this.bufferOff = 0;
  return this.blockSize;
};

Cipher.prototype._updateEncrypt = function _updateEncrypt(data) {
  var inputOff = 0;
  var outputOff = 0;

  var count = ((this.bufferOff + data.length) / this.blockSize) | 0;
  var out = new Array(count * this.blockSize);

  if (this.bufferOff !== 0) {
    inputOff += this._buffer(data, inputOff);

    if (this.bufferOff === this.buffer.length)
      outputOff += this._flushBuffer(out, outputOff);
  }

  // Write blocks
  var max = data.length - ((data.length - inputOff) % this.blockSize);
  for (; inputOff < max; inputOff += this.blockSize) {
    this._update(data, inputOff, out, outputOff);
    outputOff += this.blockSize;
  }

  // Queue rest
  for (; inputOff < data.length; inputOff++, this.bufferOff++)
    this.buffer[this.bufferOff] = data[inputOff];

  return out;
};

Cipher.prototype._updateDecrypt = function _updateDecrypt(data) {
  var inputOff = 0;
  var outputOff = 0;

  var count = Math.ceil((this.bufferOff + data.length) / this.blockSize) - 1;
  var out = new Array(count * this.blockSize);

  // TODO(indutny): optimize it, this is far from optimal
  for (; count > 0; count--) {
    inputOff += this._buffer(data, inputOff);
    outputOff += this._flushBuffer(out, outputOff);
  }

  // Buffer rest of the input
  inputOff += this._buffer(data, inputOff);

  return out;
};

Cipher.prototype.final = function final(buffer) {
  var first;
  if (buffer)
    first = this.update(buffer);

  var last;
  if (this.type === 'encrypt')
    last = this._finalEncrypt();
  else
    last = this._finalDecrypt();

  if (first)
    return first.concat(last);
  else
    return last;
};

Cipher.prototype._pad = function _pad(buffer, off) {
  if (off === 0)
    return false;

  while (off < buffer.length)
    buffer[off++] = 0;

  return true;
};

Cipher.prototype._finalEncrypt = function _finalEncrypt() {
  if (!this._pad(this.buffer, this.bufferOff))
    return [];

  var out = new Array(this.blockSize);
  this._update(this.buffer, 0, out, 0);
  return out;
};

Cipher.prototype._unpad = function _unpad(buffer) {
  return buffer;
};

Cipher.prototype._finalDecrypt = function _finalDecrypt() {
  assert.equal(this.bufferOff, this.blockSize, 'Not enough data to decrypt');
  var out = new Array(this.blockSize);
  this._flushBuffer(out, 0);

  return this._unpad(out);
};

},{"minimalistic-assert":123}],66:[function(require,module,exports){
'use strict';

var assert = require('minimalistic-assert');
var inherits = require('inherits');

var utils = require('./utils');
var Cipher = require('./cipher');

function DESState() {
  this.tmp = new Array(2);
  this.keys = null;
}

function DES(options) {
  Cipher.call(this, options);

  var state = new DESState();
  this._desState = state;

  this.deriveKeys(state, options.key);
}
inherits(DES, Cipher);
module.exports = DES;

DES.create = function create(options) {
  return new DES(options);
};

var shiftTable = [
  1, 1, 2, 2, 2, 2, 2, 2,
  1, 2, 2, 2, 2, 2, 2, 1
];

DES.prototype.deriveKeys = function deriveKeys(state, key) {
  state.keys = new Array(16 * 2);

  assert.equal(key.length, this.blockSize, 'Invalid key length');

  var kL = utils.readUInt32BE(key, 0);
  var kR = utils.readUInt32BE(key, 4);

  utils.pc1(kL, kR, state.tmp, 0);
  kL = state.tmp[0];
  kR = state.tmp[1];
  for (var i = 0; i < state.keys.length; i += 2) {
    var shift = shiftTable[i >>> 1];
    kL = utils.r28shl(kL, shift);
    kR = utils.r28shl(kR, shift);
    utils.pc2(kL, kR, state.keys, i);
  }
};

DES.prototype._update = function _update(inp, inOff, out, outOff) {
  var state = this._desState;

  var l = utils.readUInt32BE(inp, inOff);
  var r = utils.readUInt32BE(inp, inOff + 4);

  // Initial Permutation
  utils.ip(l, r, state.tmp, 0);
  l = state.tmp[0];
  r = state.tmp[1];

  if (this.type === 'encrypt')
    this._encrypt(state, l, r, state.tmp, 0);
  else
    this._decrypt(state, l, r, state.tmp, 0);

  l = state.tmp[0];
  r = state.tmp[1];

  utils.writeUInt32BE(out, l, outOff);
  utils.writeUInt32BE(out, r, outOff + 4);
};

DES.prototype._pad = function _pad(buffer, off) {
  var value = buffer.length - off;
  for (var i = off; i < buffer.length; i++)
    buffer[i] = value;

  return true;
};

DES.prototype._unpad = function _unpad(buffer) {
  var pad = buffer[buffer.length - 1];
  for (var i = buffer.length - pad; i < buffer.length; i++)
    assert.equal(buffer[i], pad);

  return buffer.slice(0, buffer.length - pad);
};

DES.prototype._encrypt = function _encrypt(state, lStart, rStart, out, off) {
  var l = lStart;
  var r = rStart;

  // Apply f() x16 times
  for (var i = 0; i < state.keys.length; i += 2) {
    var keyL = state.keys[i];
    var keyR = state.keys[i + 1];

    // f(r, k)
    utils.expand(r, state.tmp, 0);

    keyL ^= state.tmp[0];
    keyR ^= state.tmp[1];
    var s = utils.substitute(keyL, keyR);
    var f = utils.permute(s);

    var t = r;
    r = (l ^ f) >>> 0;
    l = t;
  }

  // Reverse Initial Permutation
  utils.rip(r, l, out, off);
};

DES.prototype._decrypt = function _decrypt(state, lStart, rStart, out, off) {
  var l = rStart;
  var r = lStart;

  // Apply f() x16 times
  for (var i = state.keys.length - 2; i >= 0; i -= 2) {
    var keyL = state.keys[i];
    var keyR = state.keys[i + 1];

    // f(r, k)
    utils.expand(l, state.tmp, 0);

    keyL ^= state.tmp[0];
    keyR ^= state.tmp[1];
    var s = utils.substitute(keyL, keyR);
    var f = utils.permute(s);

    var t = l;
    l = (r ^ f) >>> 0;
    r = t;
  }

  // Reverse Initial Permutation
  utils.rip(l, r, out, off);
};

},{"./cipher":65,"./utils":68,"inherits":115,"minimalistic-assert":123}],67:[function(require,module,exports){
'use strict';

var assert = require('minimalistic-assert');
var inherits = require('inherits');

var Cipher = require('./cipher');
var DES = require('./des');

function EDEState(type, key) {
  assert.equal(key.length, 24, 'Invalid key length');

  var k1 = key.slice(0, 8);
  var k2 = key.slice(8, 16);
  var k3 = key.slice(16, 24);

  if (type === 'encrypt') {
    this.ciphers = [
      DES.create({ type: 'encrypt', key: k1 }),
      DES.create({ type: 'decrypt', key: k2 }),
      DES.create({ type: 'encrypt', key: k3 })
    ];
  } else {
    this.ciphers = [
      DES.create({ type: 'decrypt', key: k3 }),
      DES.create({ type: 'encrypt', key: k2 }),
      DES.create({ type: 'decrypt', key: k1 })
    ];
  }
}

function EDE(options) {
  Cipher.call(this, options);

  var state = new EDEState(this.type, this.options.key);
  this._edeState = state;
}
inherits(EDE, Cipher);

module.exports = EDE;

EDE.create = function create(options) {
  return new EDE(options);
};

EDE.prototype._update = function _update(inp, inOff, out, outOff) {
  var state = this._edeState;

  state.ciphers[0]._update(inp, inOff, out, outOff);
  state.ciphers[1]._update(out, outOff, out, outOff);
  state.ciphers[2]._update(out, outOff, out, outOff);
};

EDE.prototype._pad = DES.prototype._pad;
EDE.prototype._unpad = DES.prototype._unpad;

},{"./cipher":65,"./des":66,"inherits":115,"minimalistic-assert":123}],68:[function(require,module,exports){
'use strict';

exports.readUInt32BE = function readUInt32BE(bytes, off) {
  var res =  (bytes[0 + off] << 24) |
             (bytes[1 + off] << 16) |
             (bytes[2 + off] << 8) |
             bytes[3 + off];
  return res >>> 0;
};

exports.writeUInt32BE = function writeUInt32BE(bytes, value, off) {
  bytes[0 + off] = value >>> 24;
  bytes[1 + off] = (value >>> 16) & 0xff;
  bytes[2 + off] = (value >>> 8) & 0xff;
  bytes[3 + off] = value & 0xff;
};

exports.ip = function ip(inL, inR, out, off) {
  var outL = 0;
  var outR = 0;

  for (var i = 6; i >= 0; i -= 2) {
    for (var j = 0; j <= 24; j += 8) {
      outL <<= 1;
      outL |= (inR >>> (j + i)) & 1;
    }
    for (var j = 0; j <= 24; j += 8) {
      outL <<= 1;
      outL |= (inL >>> (j + i)) & 1;
    }
  }

  for (var i = 6; i >= 0; i -= 2) {
    for (var j = 1; j <= 25; j += 8) {
      outR <<= 1;
      outR |= (inR >>> (j + i)) & 1;
    }
    for (var j = 1; j <= 25; j += 8) {
      outR <<= 1;
      outR |= (inL >>> (j + i)) & 1;
    }
  }

  out[off + 0] = outL >>> 0;
  out[off + 1] = outR >>> 0;
};

exports.rip = function rip(inL, inR, out, off) {
  var outL = 0;
  var outR = 0;

  for (var i = 0; i < 4; i++) {
    for (var j = 24; j >= 0; j -= 8) {
      outL <<= 1;
      outL |= (inR >>> (j + i)) & 1;
      outL <<= 1;
      outL |= (inL >>> (j + i)) & 1;
    }
  }
  for (var i = 4; i < 8; i++) {
    for (var j = 24; j >= 0; j -= 8) {
      outR <<= 1;
      outR |= (inR >>> (j + i)) & 1;
      outR <<= 1;
      outR |= (inL >>> (j + i)) & 1;
    }
  }

  out[off + 0] = outL >>> 0;
  out[off + 1] = outR >>> 0;
};

exports.pc1 = function pc1(inL, inR, out, off) {
  var outL = 0;
  var outR = 0;

  // 7, 15, 23, 31, 39, 47, 55, 63
  // 6, 14, 22, 30, 39, 47, 55, 63
  // 5, 13, 21, 29, 39, 47, 55, 63
  // 4, 12, 20, 28
  for (var i = 7; i >= 5; i--) {
    for (var j = 0; j <= 24; j += 8) {
      outL <<= 1;
      outL |= (inR >> (j + i)) & 1;
    }
    for (var j = 0; j <= 24; j += 8) {
      outL <<= 1;
      outL |= (inL >> (j + i)) & 1;
    }
  }
  for (var j = 0; j <= 24; j += 8) {
    outL <<= 1;
    outL |= (inR >> (j + i)) & 1;
  }

  // 1, 9, 17, 25, 33, 41, 49, 57
  // 2, 10, 18, 26, 34, 42, 50, 58
  // 3, 11, 19, 27, 35, 43, 51, 59
  // 36, 44, 52, 60
  for (var i = 1; i <= 3; i++) {
    for (var j = 0; j <= 24; j += 8) {
      outR <<= 1;
      outR |= (inR >> (j + i)) & 1;
    }
    for (var j = 0; j <= 24; j += 8) {
      outR <<= 1;
      outR |= (inL >> (j + i)) & 1;
    }
  }
  for (var j = 0; j <= 24; j += 8) {
    outR <<= 1;
    outR |= (inL >> (j + i)) & 1;
  }

  out[off + 0] = outL >>> 0;
  out[off + 1] = outR >>> 0;
};

exports.r28shl = function r28shl(num, shift) {
  return ((num << shift) & 0xfffffff) | (num >>> (28 - shift));
};

var pc2table = [
  // inL => outL
  14, 11, 17, 4, 27, 23, 25, 0,
  13, 22, 7, 18, 5, 9, 16, 24,
  2, 20, 12, 21, 1, 8, 15, 26,

  // inR => outR
  15, 4, 25, 19, 9, 1, 26, 16,
  5, 11, 23, 8, 12, 7, 17, 0,
  22, 3, 10, 14, 6, 20, 27, 24
];

exports.pc2 = function pc2(inL, inR, out, off) {
  var outL = 0;
  var outR = 0;

  var len = pc2table.length >>> 1;
  for (var i = 0; i < len; i++) {
    outL <<= 1;
    outL |= (inL >>> pc2table[i]) & 0x1;
  }
  for (var i = len; i < pc2table.length; i++) {
    outR <<= 1;
    outR |= (inR >>> pc2table[i]) & 0x1;
  }

  out[off + 0] = outL >>> 0;
  out[off + 1] = outR >>> 0;
};

exports.expand = function expand(r, out, off) {
  var outL = 0;
  var outR = 0;

  outL = ((r & 1) << 5) | (r >>> 27);
  for (var i = 23; i >= 15; i -= 4) {
    outL <<= 6;
    outL |= (r >>> i) & 0x3f;
  }
  for (var i = 11; i >= 3; i -= 4) {
    outR |= (r >>> i) & 0x3f;
    outR <<= 6;
  }
  outR |= ((r & 0x1f) << 1) | (r >>> 31);

  out[off + 0] = outL >>> 0;
  out[off + 1] = outR >>> 0;
};

var sTable = [
  14, 0, 4, 15, 13, 7, 1, 4, 2, 14, 15, 2, 11, 13, 8, 1,
  3, 10, 10, 6, 6, 12, 12, 11, 5, 9, 9, 5, 0, 3, 7, 8,
  4, 15, 1, 12, 14, 8, 8, 2, 13, 4, 6, 9, 2, 1, 11, 7,
  15, 5, 12, 11, 9, 3, 7, 14, 3, 10, 10, 0, 5, 6, 0, 13,

  15, 3, 1, 13, 8, 4, 14, 7, 6, 15, 11, 2, 3, 8, 4, 14,
  9, 12, 7, 0, 2, 1, 13, 10, 12, 6, 0, 9, 5, 11, 10, 5,
  0, 13, 14, 8, 7, 10, 11, 1, 10, 3, 4, 15, 13, 4, 1, 2,
  5, 11, 8, 6, 12, 7, 6, 12, 9, 0, 3, 5, 2, 14, 15, 9,

  10, 13, 0, 7, 9, 0, 14, 9, 6, 3, 3, 4, 15, 6, 5, 10,
  1, 2, 13, 8, 12, 5, 7, 14, 11, 12, 4, 11, 2, 15, 8, 1,
  13, 1, 6, 10, 4, 13, 9, 0, 8, 6, 15, 9, 3, 8, 0, 7,
  11, 4, 1, 15, 2, 14, 12, 3, 5, 11, 10, 5, 14, 2, 7, 12,

  7, 13, 13, 8, 14, 11, 3, 5, 0, 6, 6, 15, 9, 0, 10, 3,
  1, 4, 2, 7, 8, 2, 5, 12, 11, 1, 12, 10, 4, 14, 15, 9,
  10, 3, 6, 15, 9, 0, 0, 6, 12, 10, 11, 1, 7, 13, 13, 8,
  15, 9, 1, 4, 3, 5, 14, 11, 5, 12, 2, 7, 8, 2, 4, 14,

  2, 14, 12, 11, 4, 2, 1, 12, 7, 4, 10, 7, 11, 13, 6, 1,
  8, 5, 5, 0, 3, 15, 15, 10, 13, 3, 0, 9, 14, 8, 9, 6,
  4, 11, 2, 8, 1, 12, 11, 7, 10, 1, 13, 14, 7, 2, 8, 13,
  15, 6, 9, 15, 12, 0, 5, 9, 6, 10, 3, 4, 0, 5, 14, 3,

  12, 10, 1, 15, 10, 4, 15, 2, 9, 7, 2, 12, 6, 9, 8, 5,
  0, 6, 13, 1, 3, 13, 4, 14, 14, 0, 7, 11, 5, 3, 11, 8,
  9, 4, 14, 3, 15, 2, 5, 12, 2, 9, 8, 5, 12, 15, 3, 10,
  7, 11, 0, 14, 4, 1, 10, 7, 1, 6, 13, 0, 11, 8, 6, 13,

  4, 13, 11, 0, 2, 11, 14, 7, 15, 4, 0, 9, 8, 1, 13, 10,
  3, 14, 12, 3, 9, 5, 7, 12, 5, 2, 10, 15, 6, 8, 1, 6,
  1, 6, 4, 11, 11, 13, 13, 8, 12, 1, 3, 4, 7, 10, 14, 7,
  10, 9, 15, 5, 6, 0, 8, 15, 0, 14, 5, 2, 9, 3, 2, 12,

  13, 1, 2, 15, 8, 13, 4, 8, 6, 10, 15, 3, 11, 7, 1, 4,
  10, 12, 9, 5, 3, 6, 14, 11, 5, 0, 0, 14, 12, 9, 7, 2,
  7, 2, 11, 1, 4, 14, 1, 7, 9, 4, 12, 10, 14, 8, 2, 13,
  0, 15, 6, 12, 10, 9, 13, 0, 15, 3, 3, 5, 5, 6, 8, 11
];

exports.substitute = function substitute(inL, inR) {
  var out = 0;
  for (var i = 0; i < 4; i++) {
    var b = (inL >>> (18 - i * 6)) & 0x3f;
    var sb = sTable[i * 0x40 + b];

    out <<= 4;
    out |= sb;
  }
  for (var i = 0; i < 4; i++) {
    var b = (inR >>> (18 - i * 6)) & 0x3f;
    var sb = sTable[4 * 0x40 + i * 0x40 + b];

    out <<= 4;
    out |= sb;
  }
  return out >>> 0;
};

var permuteTable = [
  16, 25, 12, 11, 3, 20, 4, 15, 31, 17, 9, 6, 27, 14, 1, 22,
  30, 24, 8, 18, 0, 5, 29, 23, 13, 19, 2, 26, 10, 21, 28, 7
];

exports.permute = function permute(num) {
  var out = 0;
  for (var i = 0; i < permuteTable.length; i++) {
    out <<= 1;
    out |= (num >>> permuteTable[i]) & 0x1;
  }
  return out >>> 0;
};

exports.padSplit = function padSplit(num, size, group) {
  var str = num.toString(2);
  while (str.length < size)
    str = '0' + str;

  var out = [];
  for (var i = 0; i < size; i += group)
    out.push(str.slice(i, i + group));
  return out.join(' ');
};

},{}],69:[function(require,module,exports){
(function (Buffer){(function (){
var generatePrime = require('./lib/generatePrime')
var primes = require('./lib/primes.json')

var DH = require('./lib/dh')

function getDiffieHellman (mod) {
  var prime = new Buffer(primes[mod].prime, 'hex')
  var gen = new Buffer(primes[mod].gen, 'hex')

  return new DH(prime, gen)
}

var ENCODINGS = {
  'binary': true, 'hex': true, 'base64': true
}

function createDiffieHellman (prime, enc, generator, genc) {
  if (Buffer.isBuffer(enc) || ENCODINGS[enc] === undefined) {
    return createDiffieHellman(prime, 'binary', enc, generator)
  }

  enc = enc || 'binary'
  genc = genc || 'binary'
  generator = generator || new Buffer([2])

  if (!Buffer.isBuffer(generator)) {
    generator = new Buffer(generator, genc)
  }

  if (typeof prime === 'number') {
    return new DH(generatePrime(prime, generator), generator, true)
  }

  if (!Buffer.isBuffer(prime)) {
    prime = new Buffer(prime, enc)
  }

  return new DH(prime, generator, true)
}

exports.DiffieHellmanGroup = exports.createDiffieHellmanGroup = exports.getDiffieHellman = getDiffieHellman
exports.createDiffieHellman = exports.DiffieHellman = createDiffieHellman

}).call(this)}).call(this,require("buffer").Buffer)
},{"./lib/dh":70,"./lib/generatePrime":71,"./lib/primes.json":72,"buffer":53}],70:[function(require,module,exports){
(function (Buffer){(function (){
var BN = require('bn.js');
var MillerRabin = require('miller-rabin');
var millerRabin = new MillerRabin();
var TWENTYFOUR = new BN(24);
var ELEVEN = new BN(11);
var TEN = new BN(10);
var THREE = new BN(3);
var SEVEN = new BN(7);
var primes = require('./generatePrime');
var randomBytes = require('randombytes');
module.exports = DH;

function setPublicKey(pub, enc) {
  enc = enc || 'utf8';
  if (!Buffer.isBuffer(pub)) {
    pub = new Buffer(pub, enc);
  }
  this._pub = new BN(pub);
  return this;
}

function setPrivateKey(priv, enc) {
  enc = enc || 'utf8';
  if (!Buffer.isBuffer(priv)) {
    priv = new Buffer(priv, enc);
  }
  this._priv = new BN(priv);
  return this;
}

var primeCache = {};
function checkPrime(prime, generator) {
  var gen = generator.toString('hex');
  var hex = [gen, prime.toString(16)].join('_');
  if (hex in primeCache) {
    return primeCache[hex];
  }
  var error = 0;

  if (prime.isEven() ||
    !primes.simpleSieve ||
    !primes.fermatTest(prime) ||
    !millerRabin.test(prime)) {
    //not a prime so +1
    error += 1;

    if (gen === '02' || gen === '05') {
      // we'd be able to check the generator
      // it would fail so +8
      error += 8;
    } else {
      //we wouldn't be able to test the generator
      // so +4
      error += 4;
    }
    primeCache[hex] = error;
    return error;
  }
  if (!millerRabin.test(prime.shrn(1))) {
    //not a safe prime
    error += 2;
  }
  var rem;
  switch (gen) {
    case '02':
      if (prime.mod(TWENTYFOUR).cmp(ELEVEN)) {
        // unsuidable generator
        error += 8;
      }
      break;
    case '05':
      rem = prime.mod(TEN);
      if (rem.cmp(THREE) && rem.cmp(SEVEN)) {
        // prime mod 10 needs to equal 3 or 7
        error += 8;
      }
      break;
    default:
      error += 4;
  }
  primeCache[hex] = error;
  return error;
}

function DH(prime, generator, malleable) {
  this.setGenerator(generator);
  this.__prime = new BN(prime);
  this._prime = BN.mont(this.__prime);
  this._primeLen = prime.length;
  this._pub = undefined;
  this._priv = undefined;
  this._primeCode = undefined;
  if (malleable) {
    this.setPublicKey = setPublicKey;
    this.setPrivateKey = setPrivateKey;
  } else {
    this._primeCode = 8;
  }
}
Object.defineProperty(DH.prototype, 'verifyError', {
  enumerable: true,
  get: function () {
    if (typeof this._primeCode !== 'number') {
      this._primeCode = checkPrime(this.__prime, this.__gen);
    }
    return this._primeCode;
  }
});
DH.prototype.generateKeys = function () {
  if (!this._priv) {
    this._priv = new BN(randomBytes(this._primeLen));
  }
  this._pub = this._gen.toRed(this._prime).redPow(this._priv).fromRed();
  return this.getPublicKey();
};

DH.prototype.computeSecret = function (other) {
  other = new BN(other);
  other = other.toRed(this._prime);
  var secret = other.redPow(this._priv).fromRed();
  var out = new Buffer(secret.toArray());
  var prime = this.getPrime();
  if (out.length < prime.length) {
    var front = new Buffer(prime.length - out.length);
    front.fill(0);
    out = Buffer.concat([front, out]);
  }
  return out;
};

DH.prototype.getPublicKey = function getPublicKey(enc) {
  return formatReturnValue(this._pub, enc);
};

DH.prototype.getPrivateKey = function getPrivateKey(enc) {
  return formatReturnValue(this._priv, enc);
};

DH.prototype.getPrime = function (enc) {
  return formatReturnValue(this.__prime, enc);
};

DH.prototype.getGenerator = function (enc) {
  return formatReturnValue(this._gen, enc);
};

DH.prototype.setGenerator = function (gen, enc) {
  enc = enc || 'utf8';
  if (!Buffer.isBuffer(gen)) {
    gen = new Buffer(gen, enc);
  }
  this.__gen = gen;
  this._gen = new BN(gen);
  return this;
};

function formatReturnValue(bn, enc) {
  var buf = new Buffer(bn.toArray());
  if (!enc) {
    return buf;
  } else {
    return buf.toString(enc);
  }
}

}).call(this)}).call(this,require("buffer").Buffer)
},{"./generatePrime":71,"bn.js":21,"buffer":53,"miller-rabin":122,"randombytes":143}],71:[function(require,module,exports){
var randomBytes = require('randombytes');
module.exports = findPrime;
findPrime.simpleSieve = simpleSieve;
findPrime.fermatTest = fermatTest;
var BN = require('bn.js');
var TWENTYFOUR = new BN(24);
var MillerRabin = require('miller-rabin');
var millerRabin = new MillerRabin();
var ONE = new BN(1);
var TWO = new BN(2);
var FIVE = new BN(5);
var SIXTEEN = new BN(16);
var EIGHT = new BN(8);
var TEN = new BN(10);
var THREE = new BN(3);
var SEVEN = new BN(7);
var ELEVEN = new BN(11);
var FOUR = new BN(4);
var TWELVE = new BN(12);
var primes = null;

function _getPrimes() {
  if (primes !== null)
    return primes;

  var limit = 0x100000;
  var res = [];
  res[0] = 2;
  for (var i = 1, k = 3; k < limit; k += 2) {
    var sqrt = Math.ceil(Math.sqrt(k));
    for (var j = 0; j < i && res[j] <= sqrt; j++)
      if (k % res[j] === 0)
        break;

    if (i !== j && res[j] <= sqrt)
      continue;

    res[i++] = k;
  }
  primes = res;
  return res;
}

function simpleSieve(p) {
  var primes = _getPrimes();

  for (var i = 0; i < primes.length; i++)
    if (p.modn(primes[i]) === 0) {
      if (p.cmpn(primes[i]) === 0) {
        return true;
      } else {
        return false;
      }
    }

  return true;
}

function fermatTest(p) {
  var red = BN.mont(p);
  return TWO.toRed(red).redPow(p.subn(1)).fromRed().cmpn(1) === 0;
}

function findPrime(bits, gen) {
  if (bits < 16) {
    // this is what openssl does
    if (gen === 2 || gen === 5) {
      return new BN([0x8c, 0x7b]);
    } else {
      return new BN([0x8c, 0x27]);
    }
  }
  gen = new BN(gen);

  var num, n2;

  while (true) {
    num = new BN(randomBytes(Math.ceil(bits / 8)));
    while (num.bitLength() > bits) {
      num.ishrn(1);
    }
    if (num.isEven()) {
      num.iadd(ONE);
    }
    if (!num.testn(1)) {
      num.iadd(TWO);
    }
    if (!gen.cmp(TWO)) {
      while (num.mod(TWENTYFOUR).cmp(ELEVEN)) {
        num.iadd(FOUR);
      }
    } else if (!gen.cmp(FIVE)) {
      while (num.mod(TEN).cmp(THREE)) {
        num.iadd(FOUR);
      }
    }
    n2 = num.shrn(1);
    if (simpleSieve(n2) && simpleSieve(num) &&
      fermatTest(n2) && fermatTest(num) &&
      millerRabin.test(n2) && millerRabin.test(num)) {
      return num;
    }
  }

}

},{"bn.js":21,"miller-rabin":122,"randombytes":143}],72:[function(require,module,exports){
module.exports={
    "modp1": {
        "gen": "02",
        "prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a63a3620ffffffffffffffff"
    },
    "modp2": {
        "gen": "02",
        "prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece65381ffffffffffffffff"
    },
    "modp5": {
        "gen": "02",
        "prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca237327ffffffffffffffff"
    },
    "modp14": {
        "gen": "02",
        "prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aacaa68ffffffffffffffff"
    },
    "modp15": {
        "gen": "02",
        "prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a93ad2caffffffffffffffff"
    },
    "modp16": {
        "gen": "02",
        "prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a92108011a723c12a787e6d788719a10bdba5b2699c327186af4e23c1a946834b6150bda2583e9ca2ad44ce8dbbbc2db04de8ef92e8efc141fbecaa6287c59474e6bc05d99b2964fa090c3a2233ba186515be7ed1f612970cee2d7afb81bdd762170481cd0069127d5b05aa993b4ea988d8fddc186ffb7dc90a6c08f4df435c934063199ffffffffffffffff"
    },
    "modp17": {
        "gen": "02",
        "prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a92108011a723c12a787e6d788719a10bdba5b2699c327186af4e23c1a946834b6150bda2583e9ca2ad44ce8dbbbc2db04de8ef92e8efc141fbecaa6287c59474e6bc05d99b2964fa090c3a2233ba186515be7ed1f612970cee2d7afb81bdd762170481cd0069127d5b05aa993b4ea988d8fddc186ffb7dc90a6c08f4df435c93402849236c3fab4d27c7026c1d4dcb2602646dec9751e763dba37bdf8ff9406ad9e530ee5db382f413001aeb06a53ed9027d831179727b0865a8918da3edbebcf9b14ed44ce6cbaced4bb1bdb7f1447e6cc254b332051512bd7af426fb8f401378cd2bf5983ca01c64b92ecf032ea15d1721d03f482d7ce6e74fef6d55e702f46980c82b5a84031900b1c9e59e7c97fbec7e8f323a97a7e36cc88be0f1d45b7ff585ac54bd407b22b4154aacc8f6d7ebf48e1d814cc5ed20f8037e0a79715eef29be32806a1d58bb7c5da76f550aa3d8a1fbff0eb19ccb1a313d55cda56c9ec2ef29632387fe8d76e3c0468043e8f663f4860ee12bf2d5b0b7474d6e694f91e6dcc4024ffffffffffffffff"
    },
    "modp18": {
        "gen": "02",
        "prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a92108011a723c12a787e6d788719a10bdba5b2699c327186af4e23c1a946834b6150bda2583e9ca2ad44ce8dbbbc2db04de8ef92e8efc141fbecaa6287c59474e6bc05d99b2964fa090c3a2233ba186515be7ed1f612970cee2d7afb81bdd762170481cd0069127d5b05aa993b4ea988d8fddc186ffb7dc90a6c08f4df435c93402849236c3fab4d27c7026c1d4dcb2602646dec9751e763dba37bdf8ff9406ad9e530ee5db382f413001aeb06a53ed9027d831179727b0865a8918da3edbebcf9b14ed44ce6cbaced4bb1bdb7f1447e6cc254b332051512bd7af426fb8f401378cd2bf5983ca01c64b92ecf032ea15d1721d03f482d7ce6e74fef6d55e702f46980c82b5a84031900b1c9e59e7c97fbec7e8f323a97a7e36cc88be0f1d45b7ff585ac54bd407b22b4154aacc8f6d7ebf48e1d814cc5ed20f8037e0a79715eef29be32806a1d58bb7c5da76f550aa3d8a1fbff0eb19ccb1a313d55cda56c9ec2ef29632387fe8d76e3c0468043e8f663f4860ee12bf2d5b0b7474d6e694f91e6dbe115974a3926f12fee5e438777cb6a932df8cd8bec4d073b931ba3bc832b68d9dd300741fa7bf8afc47ed2576f6936ba424663aab639c5ae4f5683423b4742bf1c978238f16cbe39d652de3fdb8befc848ad922222e04a4037c0713eb57a81a23f0c73473fc646cea306b4bcbc8862f8385ddfa9d4b7fa2c087e879683303ed5bdd3a062b3cf5b3a278a66d2a13f83f44f82ddf310ee074ab6a364597e899a0255dc164f31cc50846851df9ab48195ded7ea1b1d510bd7ee74d73faf36bc31ecfa268359046f4eb879f924009438b481c6cd7889a002ed5ee382bc9190da6fc026e479558e4475677e9aa9e3050e2765694dfc81f56e880b96e7160c980dd98edd3dfffffffffffffffff"
    }
}
},{}],73:[function(require,module,exports){
'use strict';

var elliptic = exports;

elliptic.version = require('../package.json').version;
elliptic.utils = require('./elliptic/utils');
elliptic.rand = require('brorand');
elliptic.curve = require('./elliptic/curve');
elliptic.curves = require('./elliptic/curves');

// Protocols
elliptic.ec = require('./elliptic/ec');
elliptic.eddsa = require('./elliptic/eddsa');

},{"../package.json":88,"./elliptic/curve":76,"./elliptic/curves":79,"./elliptic/ec":80,"./elliptic/eddsa":83,"./elliptic/utils":87,"brorand":23}],74:[function(require,module,exports){
'use strict';

var BN = require('bn.js');
var utils = require('../utils');
var getNAF = utils.getNAF;
var getJSF = utils.getJSF;
var assert = utils.assert;

function BaseCurve(type, conf) {
  this.type = type;
  this.p = new BN(conf.p, 16);

  // Use Montgomery, when there is no fast reduction for the prime
  this.red = conf.prime ? BN.red(conf.prime) : BN.mont(this.p);

  // Useful for many curves
  this.zero = new BN(0).toRed(this.red);
  this.one = new BN(1).toRed(this.red);
  this.two = new BN(2).toRed(this.red);

  // Curve configuration, optional
  this.n = conf.n && new BN(conf.n, 16);
  this.g = conf.g && this.pointFromJSON(conf.g, conf.gRed);

  // Temporary arrays
  this._wnafT1 = new Array(4);
  this._wnafT2 = new Array(4);
  this._wnafT3 = new Array(4);
  this._wnafT4 = new Array(4);

  this._bitLength = this.n ? this.n.bitLength() : 0;

  // Generalized Greg Maxwell's trick
  var adjustCount = this.n && this.p.div(this.n);
  if (!adjustCount || adjustCount.cmpn(100) > 0) {
    this.redN = null;
  } else {
    this._maxwellTrick = true;
    this.redN = this.n.toRed(this.red);
  }
}
module.exports = BaseCurve;

BaseCurve.prototype.point = function point() {
  throw new Error('Not implemented');
};

BaseCurve.prototype.validate = function validate() {
  throw new Error('Not implemented');
};

BaseCurve.prototype._fixedNafMul = function _fixedNafMul(p, k) {
  assert(p.precomputed);
  var doubles = p._getDoubles();

  var naf = getNAF(k, 1, this._bitLength);
  var I = (1 << (doubles.step + 1)) - (doubles.step % 2 === 0 ? 2 : 1);
  I /= 3;

  // Translate into more windowed form
  var repr = [];
  var j;
  var nafW;
  for (j = 0; j < naf.length; j += doubles.step) {
    nafW = 0;
    for (var l = j + doubles.step - 1; l >= j; l--)
      nafW = (nafW << 1) + naf[l];
    repr.push(nafW);
  }

  var a = this.jpoint(null, null, null);
  var b = this.jpoint(null, null, null);
  for (var i = I; i > 0; i--) {
    for (j = 0; j < repr.length; j++) {
      nafW = repr[j];
      if (nafW === i)
        b = b.mixedAdd(doubles.points[j]);
      else if (nafW === -i)
        b = b.mixedAdd(doubles.points[j].neg());
    }
    a = a.add(b);
  }
  return a.toP();
};

BaseCurve.prototype._wnafMul = function _wnafMul(p, k) {
  var w = 4;

  // Precompute window
  var nafPoints = p._getNAFPoints(w);
  w = nafPoints.wnd;
  var wnd = nafPoints.points;

  // Get NAF form
  var naf = getNAF(k, w, this._bitLength);

  // Add `this`*(N+1) for every w-NAF index
  var acc = this.jpoint(null, null, null);
  for (var i = naf.length - 1; i >= 0; i--) {
    // Count zeroes
    for (var l = 0; i >= 0 && naf[i] === 0; i--)
      l++;
    if (i >= 0)
      l++;
    acc = acc.dblp(l);

    if (i < 0)
      break;
    var z = naf[i];
    assert(z !== 0);
    if (p.type === 'affine') {
      // J +- P
      if (z > 0)
        acc = acc.mixedAdd(wnd[(z - 1) >> 1]);
      else
        acc = acc.mixedAdd(wnd[(-z - 1) >> 1].neg());
    } else {
      // J +- J
      if (z > 0)
        acc = acc.add(wnd[(z - 1) >> 1]);
      else
        acc = acc.add(wnd[(-z - 1) >> 1].neg());
    }
  }
  return p.type === 'affine' ? acc.toP() : acc;
};

BaseCurve.prototype._wnafMulAdd = function _wnafMulAdd(defW,
  points,
  coeffs,
  len,
  jacobianResult) {
  var wndWidth = this._wnafT1;
  var wnd = this._wnafT2;
  var naf = this._wnafT3;

  // Fill all arrays
  var max = 0;
  var i;
  var j;
  var p;
  for (i = 0; i < len; i++) {
    p = points[i];
    var nafPoints = p._getNAFPoints(defW);
    wndWidth[i] = nafPoints.wnd;
    wnd[i] = nafPoints.points;
  }

  // Comb small window NAFs
  for (i = len - 1; i >= 1; i -= 2) {
    var a = i - 1;
    var b = i;
    if (wndWidth[a] !== 1 || wndWidth[b] !== 1) {
      naf[a] = getNAF(coeffs[a], wndWidth[a], this._bitLength);
      naf[b] = getNAF(coeffs[b], wndWidth[b], this._bitLength);
      max = Math.max(naf[a].length, max);
      max = Math.max(naf[b].length, max);
      continue;
    }

    var comb = [
      points[a], /* 1 */
      null, /* 3 */
      null, /* 5 */
      points[b], /* 7 */
    ];

    // Try to avoid Projective points, if possible
    if (points[a].y.cmp(points[b].y) === 0) {
      comb[1] = points[a].add(points[b]);
      comb[2] = points[a].toJ().mixedAdd(points[b].neg());
    } else if (points[a].y.cmp(points[b].y.redNeg()) === 0) {
      comb[1] = points[a].toJ().mixedAdd(points[b]);
      comb[2] = points[a].add(points[b].neg());
    } else {
      comb[1] = points[a].toJ().mixedAdd(points[b]);
      comb[2] = points[a].toJ().mixedAdd(points[b].neg());
    }

    var index = [
      -3, /* -1 -1 */
      -1, /* -1 0 */
      -5, /* -1 1 */
      -7, /* 0 -1 */
      0, /* 0 0 */
      7, /* 0 1 */
      5, /* 1 -1 */
      1, /* 1 0 */
      3,  /* 1 1 */
    ];

    var jsf = getJSF(coeffs[a], coeffs[b]);
    max = Math.max(jsf[0].length, max);
    naf[a] = new Array(max);
    naf[b] = new Array(max);
    for (j = 0; j < max; j++) {
      var ja = jsf[0][j] | 0;
      var jb = jsf[1][j] | 0;

      naf[a][j] = index[(ja + 1) * 3 + (jb + 1)];
      naf[b][j] = 0;
      wnd[a] = comb;
    }
  }

  var acc = this.jpoint(null, null, null);
  var tmp = this._wnafT4;
  for (i = max; i >= 0; i--) {
    var k = 0;

    while (i >= 0) {
      var zero = true;
      for (j = 0; j < len; j++) {
        tmp[j] = naf[j][i] | 0;
        if (tmp[j] !== 0)
          zero = false;
      }
      if (!zero)
        break;
      k++;
      i--;
    }
    if (i >= 0)
      k++;
    acc = acc.dblp(k);
    if (i < 0)
      break;

    for (j = 0; j < len; j++) {
      var z = tmp[j];
      p;
      if (z === 0)
        continue;
      else if (z > 0)
        p = wnd[j][(z - 1) >> 1];
      else if (z < 0)
        p = wnd[j][(-z - 1) >> 1].neg();

      if (p.type === 'affine')
        acc = acc.mixedAdd(p);
      else
        acc = acc.add(p);
    }
  }
  // Zeroify references
  for (i = 0; i < len; i++)
    wnd[i] = null;

  if (jacobianResult)
    return acc;
  else
    return acc.toP();
};

function BasePoint(curve, type) {
  this.curve = curve;
  this.type = type;
  this.precomputed = null;
}
BaseCurve.BasePoint = BasePoint;

BasePoint.prototype.eq = function eq(/*other*/) {
  throw new Error('Not implemented');
};

BasePoint.prototype.validate = function validate() {
  return this.curve.validate(this);
};

BaseCurve.prototype.decodePoint = function decodePoint(bytes, enc) {
  bytes = utils.toArray(bytes, enc);

  var len = this.p.byteLength();

  // uncompressed, hybrid-odd, hybrid-even
  if ((bytes[0] === 0x04 || bytes[0] === 0x06 || bytes[0] === 0x07) &&
      bytes.length - 1 === 2 * len) {
    if (bytes[0] === 0x06)
      assert(bytes[bytes.length - 1] % 2 === 0);
    else if (bytes[0] === 0x07)
      assert(bytes[bytes.length - 1] % 2 === 1);

    var res =  this.point(bytes.slice(1, 1 + len),
      bytes.slice(1 + len, 1 + 2 * len));

    return res;
  } else if ((bytes[0] === 0x02 || bytes[0] === 0x03) &&
              bytes.length - 1 === len) {
    return this.pointFromX(bytes.slice(1, 1 + len), bytes[0] === 0x03);
  }
  throw new Error('Unknown point format');
};

BasePoint.prototype.encodeCompressed = function encodeCompressed(enc) {
  return this.encode(enc, true);
};

BasePoint.prototype._encode = function _encode(compact) {
  var len = this.curve.p.byteLength();
  var x = this.getX().toArray('be', len);

  if (compact)
    return [ this.getY().isEven() ? 0x02 : 0x03 ].concat(x);

  return [ 0x04 ].concat(x, this.getY().toArray('be', len));
};

BasePoint.prototype.encode = function encode(enc, compact) {
  return utils.encode(this._encode(compact), enc);
};

BasePoint.prototype.precompute = function precompute(power) {
  if (this.precomputed)
    return this;

  var precomputed = {
    doubles: null,
    naf: null,
    beta: null,
  };
  precomputed.naf = this._getNAFPoints(8);
  precomputed.doubles = this._getDoubles(4, power);
  precomputed.beta = this._getBeta();
  this.precomputed = precomputed;

  return this;
};

BasePoint.prototype._hasDoubles = function _hasDoubles(k) {
  if (!this.precomputed)
    return false;

  var doubles = this.precomputed.doubles;
  if (!doubles)
    return false;

  return doubles.points.length >= Math.ceil((k.bitLength() + 1) / doubles.step);
};

BasePoint.prototype._getDoubles = function _getDoubles(step, power) {
  if (this.precomputed && this.precomputed.doubles)
    return this.precomputed.doubles;

  var doubles = [ this ];
  var acc = this;
  for (var i = 0; i < power; i += step) {
    for (var j = 0; j < step; j++)
      acc = acc.dbl();
    doubles.push(acc);
  }
  return {
    step: step,
    points: doubles,
  };
};

BasePoint.prototype._getNAFPoints = function _getNAFPoints(wnd) {
  if (this.precomputed && this.precomputed.naf)
    return this.precomputed.naf;

  var res = [ this ];
  var max = (1 << wnd) - 1;
  var dbl = max === 1 ? null : this.dbl();
  for (var i = 1; i < max; i++)
    res[i] = res[i - 1].add(dbl);
  return {
    wnd: wnd,
    points: res,
  };
};

BasePoint.prototype._getBeta = function _getBeta() {
  return null;
};

BasePoint.prototype.dblp = function dblp(k) {
  var r = this;
  for (var i = 0; i < k; i++)
    r = r.dbl();
  return r;
};

},{"../utils":87,"bn.js":21}],75:[function(require,module,exports){
'use strict';

var utils = require('../utils');
var BN = require('bn.js');
var inherits = require('inherits');
var Base = require('./base');

var assert = utils.assert;

function EdwardsCurve(conf) {
  // NOTE: Important as we are creating point in Base.call()
  this.twisted = (conf.a | 0) !== 1;
  this.mOneA = this.twisted && (conf.a | 0) === -1;
  this.extended = this.mOneA;

  Base.call(this, 'edwards', conf);

  this.a = new BN(conf.a, 16).umod(this.red.m);
  this.a = this.a.toRed(this.red);
  this.c = new BN(conf.c, 16).toRed(this.red);
  this.c2 = this.c.redSqr();
  this.d = new BN(conf.d, 16).toRed(this.red);
  this.dd = this.d.redAdd(this.d);

  assert(!this.twisted || this.c.fromRed().cmpn(1) === 0);
  this.oneC = (conf.c | 0) === 1;
}
inherits(EdwardsCurve, Base);
module.exports = EdwardsCurve;

EdwardsCurve.prototype._mulA = function _mulA(num) {
  if (this.mOneA)
    return num.redNeg();
  else
    return this.a.redMul(num);
};

EdwardsCurve.prototype._mulC = function _mulC(num) {
  if (this.oneC)
    return num;
  else
    return this.c.redMul(num);
};

// Just for compatibility with Short curve
EdwardsCurve.prototype.jpoint = function jpoint(x, y, z, t) {
  return this.point(x, y, z, t);
};

EdwardsCurve.prototype.pointFromX = function pointFromX(x, odd) {
  x = new BN(x, 16);
  if (!x.red)
    x = x.toRed(this.red);

  var x2 = x.redSqr();
  var rhs = this.c2.redSub(this.a.redMul(x2));
  var lhs = this.one.redSub(this.c2.redMul(this.d).redMul(x2));

  var y2 = rhs.redMul(lhs.redInvm());
  var y = y2.redSqrt();
  if (y.redSqr().redSub(y2).cmp(this.zero) !== 0)
    throw new Error('invalid point');

  var isOdd = y.fromRed().isOdd();
  if (odd && !isOdd || !odd && isOdd)
    y = y.redNeg();

  return this.point(x, y);
};

EdwardsCurve.prototype.pointFromY = function pointFromY(y, odd) {
  y = new BN(y, 16);
  if (!y.red)
    y = y.toRed(this.red);

  // x^2 = (y^2 - c^2) / (c^2 d y^2 - a)
  var y2 = y.redSqr();
  var lhs = y2.redSub(this.c2);
  var rhs = y2.redMul(this.d).redMul(this.c2).redSub(this.a);
  var x2 = lhs.redMul(rhs.redInvm());

  if (x2.cmp(this.zero) === 0) {
    if (odd)
      throw new Error('invalid point');
    else
      return this.point(this.zero, y);
  }

  var x = x2.redSqrt();
  if (x.redSqr().redSub(x2).cmp(this.zero) !== 0)
    throw new Error('invalid point');

  if (x.fromRed().isOdd() !== odd)
    x = x.redNeg();

  return this.point(x, y);
};

EdwardsCurve.prototype.validate = function validate(point) {
  if (point.isInfinity())
    return true;

  // Curve: A * X^2 + Y^2 = C^2 * (1 + D * X^2 * Y^2)
  point.normalize();

  var x2 = point.x.redSqr();
  var y2 = point.y.redSqr();
  var lhs = x2.redMul(this.a).redAdd(y2);
  var rhs = this.c2.redMul(this.one.redAdd(this.d.redMul(x2).redMul(y2)));

  return lhs.cmp(rhs) === 0;
};

function Point(curve, x, y, z, t) {
  Base.BasePoint.call(this, curve, 'projective');
  if (x === null && y === null && z === null) {
    this.x = this.curve.zero;
    this.y = this.curve.one;
    this.z = this.curve.one;
    this.t = this.curve.zero;
    this.zOne = true;
  } else {
    this.x = new BN(x, 16);
    this.y = new BN(y, 16);
    this.z = z ? new BN(z, 16) : this.curve.one;
    this.t = t && new BN(t, 16);
    if (!this.x.red)
      this.x = this.x.toRed(this.curve.red);
    if (!this.y.red)
      this.y = this.y.toRed(this.curve.red);
    if (!this.z.red)
      this.z = this.z.toRed(this.curve.red);
    if (this.t && !this.t.red)
      this.t = this.t.toRed(this.curve.red);
    this.zOne = this.z === this.curve.one;

    // Use extended coordinates
    if (this.curve.extended && !this.t) {
      this.t = this.x.redMul(this.y);
      if (!this.zOne)
        this.t = this.t.redMul(this.z.redInvm());
    }
  }
}
inherits(Point, Base.BasePoint);

EdwardsCurve.prototype.pointFromJSON = function pointFromJSON(obj) {
  return Point.fromJSON(this, obj);
};

EdwardsCurve.prototype.point = function point(x, y, z, t) {
  return new Point(this, x, y, z, t);
};

Point.fromJSON = function fromJSON(curve, obj) {
  return new Point(curve, obj[0], obj[1], obj[2]);
};

Point.prototype.inspect = function inspect() {
  if (this.isInfinity())
    return '<EC Point Infinity>';
  return '<EC Point x: ' + this.x.fromRed().toString(16, 2) +
      ' y: ' + this.y.fromRed().toString(16, 2) +
      ' z: ' + this.z.fromRed().toString(16, 2) + '>';
};

Point.prototype.isInfinity = function isInfinity() {
  // XXX This code assumes that zero is always zero in red
  return this.x.cmpn(0) === 0 &&
    (this.y.cmp(this.z) === 0 ||
    (this.zOne && this.y.cmp(this.curve.c) === 0));
};

Point.prototype._extDbl = function _extDbl() {
  // hyperelliptic.org/EFD/g1p/auto-twisted-extended-1.html
  //     #doubling-dbl-2008-hwcd
  // 4M + 4S

  // A = X1^2
  var a = this.x.redSqr();
  // B = Y1^2
  var b = this.y.redSqr();
  // C = 2 * Z1^2
  var c = this.z.redSqr();
  c = c.redIAdd(c);
  // D = a * A
  var d = this.curve._mulA(a);
  // E = (X1 + Y1)^2 - A - B
  var e = this.x.redAdd(this.y).redSqr().redISub(a).redISub(b);
  // G = D + B
  var g = d.redAdd(b);
  // F = G - C
  var f = g.redSub(c);
  // H = D - B
  var h = d.redSub(b);
  // X3 = E * F
  var nx = e.redMul(f);
  // Y3 = G * H
  var ny = g.redMul(h);
  // T3 = E * H
  var nt = e.redMul(h);
  // Z3 = F * G
  var nz = f.redMul(g);
  return this.curve.point(nx, ny, nz, nt);
};

Point.prototype._projDbl = function _projDbl() {
  // hyperelliptic.org/EFD/g1p/auto-twisted-projective.html
  //     #doubling-dbl-2008-bbjlp
  //     #doubling-dbl-2007-bl
  // and others
  // Generally 3M + 4S or 2M + 4S

  // B = (X1 + Y1)^2
  var b = this.x.redAdd(this.y).redSqr();
  // C = X1^2
  var c = this.x.redSqr();
  // D = Y1^2
  var d = this.y.redSqr();

  var nx;
  var ny;
  var nz;
  var e;
  var h;
  var j;
  if (this.curve.twisted) {
    // E = a * C
    e = this.curve._mulA(c);
    // F = E + D
    var f = e.redAdd(d);
    if (this.zOne) {
      // X3 = (B - C - D) * (F - 2)
      nx = b.redSub(c).redSub(d).redMul(f.redSub(this.curve.two));
      // Y3 = F * (E - D)
      ny = f.redMul(e.redSub(d));
      // Z3 = F^2 - 2 * F
      nz = f.redSqr().redSub(f).redSub(f);
    } else {
      // H = Z1^2
      h = this.z.redSqr();
      // J = F - 2 * H
      j = f.redSub(h).redISub(h);
      // X3 = (B-C-D)*J
      nx = b.redSub(c).redISub(d).redMul(j);
      // Y3 = F * (E - D)
      ny = f.redMul(e.redSub(d));
      // Z3 = F * J
      nz = f.redMul(j);
    }
  } else {
    // E = C + D
    e = c.redAdd(d);
    // H = (c * Z1)^2
    h = this.curve._mulC(this.z).redSqr();
    // J = E - 2 * H
    j = e.redSub(h).redSub(h);
    // X3 = c * (B - E) * J
    nx = this.curve._mulC(b.redISub(e)).redMul(j);
    // Y3 = c * E * (C - D)
    ny = this.curve._mulC(e).redMul(c.redISub(d));
    // Z3 = E * J
    nz = e.redMul(j);
  }
  return this.curve.point(nx, ny, nz);
};

Point.prototype.dbl = function dbl() {
  if (this.isInfinity())
    return this;

  // Double in extended coordinates
  if (this.curve.extended)
    return this._extDbl();
  else
    return this._projDbl();
};

Point.prototype._extAdd = function _extAdd(p) {
  // hyperelliptic.org/EFD/g1p/auto-twisted-extended-1.html
  //     #addition-add-2008-hwcd-3
  // 8M

  // A = (Y1 - X1) * (Y2 - X2)
  var a = this.y.redSub(this.x).redMul(p.y.redSub(p.x));
  // B = (Y1 + X1) * (Y2 + X2)
  var b = this.y.redAdd(this.x).redMul(p.y.redAdd(p.x));
  // C = T1 * k * T2
  var c = this.t.redMul(this.curve.dd).redMul(p.t);
  // D = Z1 * 2 * Z2
  var d = this.z.redMul(p.z.redAdd(p.z));
  // E = B - A
  var e = b.redSub(a);
  // F = D - C
  var f = d.redSub(c);
  // G = D + C
  var g = d.redAdd(c);
  // H = B + A
  var h = b.redAdd(a);
  // X3 = E * F
  var nx = e.redMul(f);
  // Y3 = G * H
  var ny = g.redMul(h);
  // T3 = E * H
  var nt = e.redMul(h);
  // Z3 = F * G
  var nz = f.redMul(g);
  return this.curve.point(nx, ny, nz, nt);
};

Point.prototype._projAdd = function _projAdd(p) {
  // hyperelliptic.org/EFD/g1p/auto-twisted-projective.html
  //     #addition-add-2008-bbjlp
  //     #addition-add-2007-bl
  // 10M + 1S

  // A = Z1 * Z2
  var a = this.z.redMul(p.z);
  // B = A^2
  var b = a.redSqr();
  // C = X1 * X2
  var c = this.x.redMul(p.x);
  // D = Y1 * Y2
  var d = this.y.redMul(p.y);
  // E = d * C * D
  var e = this.curve.d.redMul(c).redMul(d);
  // F = B - E
  var f = b.redSub(e);
  // G = B + E
  var g = b.redAdd(e);
  // X3 = A * F * ((X1 + Y1) * (X2 + Y2) - C - D)
  var tmp = this.x.redAdd(this.y).redMul(p.x.redAdd(p.y)).redISub(c).redISub(d);
  var nx = a.redMul(f).redMul(tmp);
  var ny;
  var nz;
  if (this.curve.twisted) {
    // Y3 = A * G * (D - a * C)
    ny = a.redMul(g).redMul(d.redSub(this.curve._mulA(c)));
    // Z3 = F * G
    nz = f.redMul(g);
  } else {
    // Y3 = A * G * (D - C)
    ny = a.redMul(g).redMul(d.redSub(c));
    // Z3 = c * F * G
    nz = this.curve._mulC(f).redMul(g);
  }
  return this.curve.point(nx, ny, nz);
};

Point.prototype.add = function add(p) {
  if (this.isInfinity())
    return p;
  if (p.isInfinity())
    return this;

  if (this.curve.extended)
    return this._extAdd(p);
  else
    return this._projAdd(p);
};

Point.prototype.mul = function mul(k) {
  if (this._hasDoubles(k))
    return this.curve._fixedNafMul(this, k);
  else
    return this.curve._wnafMul(this, k);
};

Point.prototype.mulAdd = function mulAdd(k1, p, k2) {
  return this.curve._wnafMulAdd(1, [ this, p ], [ k1, k2 ], 2, false);
};

Point.prototype.jmulAdd = function jmulAdd(k1, p, k2) {
  return this.curve._wnafMulAdd(1, [ this, p ], [ k1, k2 ], 2, true);
};

Point.prototype.normalize = function normalize() {
  if (this.zOne)
    return this;

  // Normalize coordinates
  var zi = this.z.redInvm();
  this.x = this.x.redMul(zi);
  this.y = this.y.redMul(zi);
  if (this.t)
    this.t = this.t.redMul(zi);
  this.z = this.curve.one;
  this.zOne = true;
  return this;
};

Point.prototype.neg = function neg() {
  return this.curve.point(this.x.redNeg(),
    this.y,
    this.z,
    this.t && this.t.redNeg());
};

Point.prototype.getX = function getX() {
  this.normalize();
  return this.x.fromRed();
};

Point.prototype.getY = function getY() {
  this.normalize();
  return this.y.fromRed();
};

Point.prototype.eq = function eq(other) {
  return this === other ||
         this.getX().cmp(other.getX()) === 0 &&
         this.getY().cmp(other.getY()) === 0;
};

Point.prototype.eqXToP = function eqXToP(x) {
  var rx = x.toRed(this.curve.red).redMul(this.z);
  if (this.x.cmp(rx) === 0)
    return true;

  var xc = x.clone();
  var t = this.curve.redN.redMul(this.z);
  for (;;) {
    xc.iadd(this.curve.n);
    if (xc.cmp(this.curve.p) >= 0)
      return false;

    rx.redIAdd(t);
    if (this.x.cmp(rx) === 0)
      return true;
  }
};

// Compatibility with BaseCurve
Point.prototype.toP = Point.prototype.normalize;
Point.prototype.mixedAdd = Point.prototype.add;

},{"../utils":87,"./base":74,"bn.js":21,"inherits":115}],76:[function(require,module,exports){
'use strict';

var curve = exports;

curve.base = require('./base');
curve.short = require('./short');
curve.mont = require('./mont');
curve.edwards = require('./edwards');

},{"./base":74,"./edwards":75,"./mont":77,"./short":78}],77:[function(require,module,exports){
'use strict';

var BN = require('bn.js');
var inherits = require('inherits');
var Base = require('./base');

var utils = require('../utils');

function MontCurve(conf) {
  Base.call(this, 'mont', conf);

  this.a = new BN(conf.a, 16).toRed(this.red);
  this.b = new BN(conf.b, 16).toRed(this.red);
  this.i4 = new BN(4).toRed(this.red).redInvm();
  this.two = new BN(2).toRed(this.red);
  this.a24 = this.i4.redMul(this.a.redAdd(this.two));
}
inherits(MontCurve, Base);
module.exports = MontCurve;

MontCurve.prototype.validate = function validate(point) {
  var x = point.normalize().x;
  var x2 = x.redSqr();
  var rhs = x2.redMul(x).redAdd(x2.redMul(this.a)).redAdd(x);
  var y = rhs.redSqrt();

  return y.redSqr().cmp(rhs) === 0;
};

function Point(curve, x, z) {
  Base.BasePoint.call(this, curve, 'projective');
  if (x === null && z === null) {
    this.x = this.curve.one;
    this.z = this.curve.zero;
  } else {
    this.x = new BN(x, 16);
    this.z = new BN(z, 16);
    if (!this.x.red)
      this.x = this.x.toRed(this.curve.red);
    if (!this.z.red)
      this.z = this.z.toRed(this.curve.red);
  }
}
inherits(Point, Base.BasePoint);

MontCurve.prototype.decodePoint = function decodePoint(bytes, enc) {
  return this.point(utils.toArray(bytes, enc), 1);
};

MontCurve.prototype.point = function point(x, z) {
  return new Point(this, x, z);
};

MontCurve.prototype.pointFromJSON = function pointFromJSON(obj) {
  return Point.fromJSON(this, obj);
};

Point.prototype.precompute = function precompute() {
  // No-op
};

Point.prototype._encode = function _encode() {
  return this.getX().toArray('be', this.curve.p.byteLength());
};

Point.fromJSON = function fromJSON(curve, obj) {
  return new Point(curve, obj[0], obj[1] || curve.one);
};

Point.prototype.inspect = function inspect() {
  if (this.isInfinity())
    return '<EC Point Infinity>';
  return '<EC Point x: ' + this.x.fromRed().toString(16, 2) +
      ' z: ' + this.z.fromRed().toString(16, 2) + '>';
};

Point.prototype.isInfinity = function isInfinity() {
  // XXX This code assumes that zero is always zero in red
  return this.z.cmpn(0) === 0;
};

Point.prototype.dbl = function dbl() {
  // http://hyperelliptic.org/EFD/g1p/auto-montgom-xz.html#doubling-dbl-1987-m-3
  // 2M + 2S + 4A

  // A = X1 + Z1
  var a = this.x.redAdd(this.z);
  // AA = A^2
  var aa = a.redSqr();
  // B = X1 - Z1
  var b = this.x.redSub(this.z);
  // BB = B^2
  var bb = b.redSqr();
  // C = AA - BB
  var c = aa.redSub(bb);
  // X3 = AA * BB
  var nx = aa.redMul(bb);
  // Z3 = C * (BB + A24 * C)
  var nz = c.redMul(bb.redAdd(this.curve.a24.redMul(c)));
  return this.curve.point(nx, nz);
};

Point.prototype.add = function add() {
  throw new Error('Not supported on Montgomery curve');
};

Point.prototype.diffAdd = function diffAdd(p, diff) {
  // http://hyperelliptic.org/EFD/g1p/auto-montgom-xz.html#diffadd-dadd-1987-m-3
  // 4M + 2S + 6A

  // A = X2 + Z2
  var a = this.x.redAdd(this.z);
  // B = X2 - Z2
  var b = this.x.redSub(this.z);
  // C = X3 + Z3
  var c = p.x.redAdd(p.z);
  // D = X3 - Z3
  var d = p.x.redSub(p.z);
  // DA = D * A
  var da = d.redMul(a);
  // CB = C * B
  var cb = c.redMul(b);
  // X5 = Z1 * (DA + CB)^2
  var nx = diff.z.redMul(da.redAdd(cb).redSqr());
  // Z5 = X1 * (DA - CB)^2
  var nz = diff.x.redMul(da.redISub(cb).redSqr());
  return this.curve.point(nx, nz);
};

Point.prototype.mul = function mul(k) {
  var t = k.clone();
  var a = this; // (N / 2) * Q + Q
  var b = this.curve.point(null, null); // (N / 2) * Q
  var c = this; // Q

  for (var bits = []; t.cmpn(0) !== 0; t.iushrn(1))
    bits.push(t.andln(1));

  for (var i = bits.length - 1; i >= 0; i--) {
    if (bits[i] === 0) {
      // N * Q + Q = ((N / 2) * Q + Q)) + (N / 2) * Q
      a = a.diffAdd(b, c);
      // N * Q = 2 * ((N / 2) * Q + Q))
      b = b.dbl();
    } else {
      // N * Q = ((N / 2) * Q + Q) + ((N / 2) * Q)
      b = a.diffAdd(b, c);
      // N * Q + Q = 2 * ((N / 2) * Q + Q)
      a = a.dbl();
    }
  }
  return b;
};

Point.prototype.mulAdd = function mulAdd() {
  throw new Error('Not supported on Montgomery curve');
};

Point.prototype.jumlAdd = function jumlAdd() {
  throw new Error('Not supported on Montgomery curve');
};

Point.prototype.eq = function eq(other) {
  return this.getX().cmp(other.getX()) === 0;
};

Point.prototype.normalize = function normalize() {
  this.x = this.x.redMul(this.z.redInvm());
  this.z = this.curve.one;
  return this;
};

Point.prototype.getX = function getX() {
  // Normalize coordinates
  this.normalize();

  return this.x.fromRed();
};

},{"../utils":87,"./base":74,"bn.js":21,"inherits":115}],78:[function(require,module,exports){
'use strict';

var utils = require('../utils');
var BN = require('bn.js');
var inherits = require('inherits');
var Base = require('./base');

var assert = utils.assert;

function ShortCurve(conf) {
  Base.call(this, 'short', conf);

  this.a = new BN(conf.a, 16).toRed(this.red);
  this.b = new BN(conf.b, 16).toRed(this.red);
  this.tinv = this.two.redInvm();

  this.zeroA = this.a.fromRed().cmpn(0) === 0;
  this.threeA = this.a.fromRed().sub(this.p).cmpn(-3) === 0;

  // If the curve is endomorphic, precalculate beta and lambda
  this.endo = this._getEndomorphism(conf);
  this._endoWnafT1 = new Array(4);
  this._endoWnafT2 = new Array(4);
}
inherits(ShortCurve, Base);
module.exports = ShortCurve;

ShortCurve.prototype._getEndomorphism = function _getEndomorphism(conf) {
  // No efficient endomorphism
  if (!this.zeroA || !this.g || !this.n || this.p.modn(3) !== 1)
    return;

  // Compute beta and lambda, that lambda * P = (beta * Px; Py)
  var beta;
  var lambda;
  if (conf.beta) {
    beta = new BN(conf.beta, 16).toRed(this.red);
  } else {
    var betas = this._getEndoRoots(this.p);
    // Choose the smallest beta
    beta = betas[0].cmp(betas[1]) < 0 ? betas[0] : betas[1];
    beta = beta.toRed(this.red);
  }
  if (conf.lambda) {
    lambda = new BN(conf.lambda, 16);
  } else {
    // Choose the lambda that is matching selected beta
    var lambdas = this._getEndoRoots(this.n);
    if (this.g.mul(lambdas[0]).x.cmp(this.g.x.redMul(beta)) === 0) {
      lambda = lambdas[0];
    } else {
      lambda = lambdas[1];
      assert(this.g.mul(lambda).x.cmp(this.g.x.redMul(beta)) === 0);
    }
  }

  // Get basis vectors, used for balanced length-two representation
  var basis;
  if (conf.basis) {
    basis = conf.basis.map(function(vec) {
      return {
        a: new BN(vec.a, 16),
        b: new BN(vec.b, 16),
      };
    });
  } else {
    basis = this._getEndoBasis(lambda);
  }

  return {
    beta: beta,
    lambda: lambda,
    basis: basis,
  };
};

ShortCurve.prototype._getEndoRoots = function _getEndoRoots(num) {
  // Find roots of for x^2 + x + 1 in F
  // Root = (-1 +- Sqrt(-3)) / 2
  //
  var red = num === this.p ? this.red : BN.mont(num);
  var tinv = new BN(2).toRed(red).redInvm();
  var ntinv = tinv.redNeg();

  var s = new BN(3).toRed(red).redNeg().redSqrt().redMul(tinv);

  var l1 = ntinv.redAdd(s).fromRed();
  var l2 = ntinv.redSub(s).fromRed();
  return [ l1, l2 ];
};

ShortCurve.prototype._getEndoBasis = function _getEndoBasis(lambda) {
  // aprxSqrt >= sqrt(this.n)
  var aprxSqrt = this.n.ushrn(Math.floor(this.n.bitLength() / 2));

  // 3.74
  // Run EGCD, until r(L + 1) < aprxSqrt
  var u = lambda;
  var v = this.n.clone();
  var x1 = new BN(1);
  var y1 = new BN(0);
  var x2 = new BN(0);
  var y2 = new BN(1);

  // NOTE: all vectors are roots of: a + b * lambda = 0 (mod n)
  var a0;
  var b0;
  // First vector
  var a1;
  var b1;
  // Second vector
  var a2;
  var b2;

  var prevR;
  var i = 0;
  var r;
  var x;
  while (u.cmpn(0) !== 0) {
    var q = v.div(u);
    r = v.sub(q.mul(u));
    x = x2.sub(q.mul(x1));
    var y = y2.sub(q.mul(y1));

    if (!a1 && r.cmp(aprxSqrt) < 0) {
      a0 = prevR.neg();
      b0 = x1;
      a1 = r.neg();
      b1 = x;
    } else if (a1 && ++i === 2) {
      break;
    }
    prevR = r;

    v = u;
    u = r;
    x2 = x1;
    x1 = x;
    y2 = y1;
    y1 = y;
  }
  a2 = r.neg();
  b2 = x;

  var len1 = a1.sqr().add(b1.sqr());
  var len2 = a2.sqr().add(b2.sqr());
  if (len2.cmp(len1) >= 0) {
    a2 = a0;
    b2 = b0;
  }

  // Normalize signs
  if (a1.negative) {
    a1 = a1.neg();
    b1 = b1.neg();
  }
  if (a2.negative) {
    a2 = a2.neg();
    b2 = b2.neg();
  }

  return [
    { a: a1, b: b1 },
    { a: a2, b: b2 },
  ];
};

ShortCurve.prototype._endoSplit = function _endoSplit(k) {
  var basis = this.endo.basis;
  var v1 = basis[0];
  var v2 = basis[1];

  var c1 = v2.b.mul(k).divRound(this.n);
  var c2 = v1.b.neg().mul(k).divRound(this.n);

  var p1 = c1.mul(v1.a);
  var p2 = c2.mul(v2.a);
  var q1 = c1.mul(v1.b);
  var q2 = c2.mul(v2.b);

  // Calculate answer
  var k1 = k.sub(p1).sub(p2);
  var k2 = q1.add(q2).neg();
  return { k1: k1, k2: k2 };
};

ShortCurve.prototype.pointFromX = function pointFromX(x, odd) {
  x = new BN(x, 16);
  if (!x.red)
    x = x.toRed(this.red);

  var y2 = x.redSqr().redMul(x).redIAdd(x.redMul(this.a)).redIAdd(this.b);
  var y = y2.redSqrt();
  if (y.redSqr().redSub(y2).cmp(this.zero) !== 0)
    throw new Error('invalid point');

  // XXX Is there any way to tell if the number is odd without converting it
  // to non-red form?
  var isOdd = y.fromRed().isOdd();
  if (odd && !isOdd || !odd && isOdd)
    y = y.redNeg();

  return this.point(x, y);
};

ShortCurve.prototype.validate = function validate(point) {
  if (point.inf)
    return true;

  var x = point.x;
  var y = point.y;

  var ax = this.a.redMul(x);
  var rhs = x.redSqr().redMul(x).redIAdd(ax).redIAdd(this.b);
  return y.redSqr().redISub(rhs).cmpn(0) === 0;
};

ShortCurve.prototype._endoWnafMulAdd =
    function _endoWnafMulAdd(points, coeffs, jacobianResult) {
      var npoints = this._endoWnafT1;
      var ncoeffs = this._endoWnafT2;
      for (var i = 0; i < points.length; i++) {
        var split = this._endoSplit(coeffs[i]);
        var p = points[i];
        var beta = p._getBeta();

        if (split.k1.negative) {
          split.k1.ineg();
          p = p.neg(true);
        }
        if (split.k2.negative) {
          split.k2.ineg();
          beta = beta.neg(true);
        }

        npoints[i * 2] = p;
        npoints[i * 2 + 1] = beta;
        ncoeffs[i * 2] = split.k1;
        ncoeffs[i * 2 + 1] = split.k2;
      }
      var res = this._wnafMulAdd(1, npoints, ncoeffs, i * 2, jacobianResult);

      // Clean-up references to points and coefficients
      for (var j = 0; j < i * 2; j++) {
        npoints[j] = null;
        ncoeffs[j] = null;
      }
      return res;
    };

function Point(curve, x, y, isRed) {
  Base.BasePoint.call(this, curve, 'affine');
  if (x === null && y === null) {
    this.x = null;
    this.y = null;
    this.inf = true;
  } else {
    this.x = new BN(x, 16);
    this.y = new BN(y, 16);
    // Force redgomery representation when loading from JSON
    if (isRed) {
      this.x.forceRed(this.curve.red);
      this.y.forceRed(this.curve.red);
    }
    if (!this.x.red)
      this.x = this.x.toRed(this.curve.red);
    if (!this.y.red)
      this.y = this.y.toRed(this.curve.red);
    this.inf = false;
  }
}
inherits(Point, Base.BasePoint);

ShortCurve.prototype.point = function point(x, y, isRed) {
  return new Point(this, x, y, isRed);
};

ShortCurve.prototype.pointFromJSON = function pointFromJSON(obj, red) {
  return Point.fromJSON(this, obj, red);
};

Point.prototype._getBeta = function _getBeta() {
  if (!this.curve.endo)
    return;

  var pre = this.precomputed;
  if (pre && pre.beta)
    return pre.beta;

  var beta = this.curve.point(this.x.redMul(this.curve.endo.beta), this.y);
  if (pre) {
    var curve = this.curve;
    var endoMul = function(p) {
      return curve.point(p.x.redMul(curve.endo.beta), p.y);
    };
    pre.beta = beta;
    beta.precomputed = {
      beta: null,
      naf: pre.naf && {
        wnd: pre.naf.wnd,
        points: pre.naf.points.map(endoMul),
      },
      doubles: pre.doubles && {
        step: pre.doubles.step,
        points: pre.doubles.points.map(endoMul),
      },
    };
  }
  return beta;
};

Point.prototype.toJSON = function toJSON() {
  if (!this.precomputed)
    return [ this.x, this.y ];

  return [ this.x, this.y, this.precomputed && {
    doubles: this.precomputed.doubles && {
      step: this.precomputed.doubles.step,
      points: this.precomputed.doubles.points.slice(1),
    },
    naf: this.precomputed.naf && {
      wnd: this.precomputed.naf.wnd,
      points: this.precomputed.naf.points.slice(1),
    },
  } ];
};

Point.fromJSON = function fromJSON(curve, obj, red) {
  if (typeof obj === 'string')
    obj = JSON.parse(obj);
  var res = curve.point(obj[0], obj[1], red);
  if (!obj[2])
    return res;

  function obj2point(obj) {
    return curve.point(obj[0], obj[1], red);
  }

  var pre = obj[2];
  res.precomputed = {
    beta: null,
    doubles: pre.doubles && {
      step: pre.doubles.step,
      points: [ res ].concat(pre.doubles.points.map(obj2point)),
    },
    naf: pre.naf && {
      wnd: pre.naf.wnd,
      points: [ res ].concat(pre.naf.points.map(obj2point)),
    },
  };
  return res;
};

Point.prototype.inspect = function inspect() {
  if (this.isInfinity())
    return '<EC Point Infinity>';
  return '<EC Point x: ' + this.x.fromRed().toString(16, 2) +
      ' y: ' + this.y.fromRed().toString(16, 2) + '>';
};

Point.prototype.isInfinity = function isInfinity() {
  return this.inf;
};

Point.prototype.add = function add(p) {
  // O + P = P
  if (this.inf)
    return p;

  // P + O = P
  if (p.inf)
    return this;

  // P + P = 2P
  if (this.eq(p))
    return this.dbl();

  // P + (-P) = O
  if (this.neg().eq(p))
    return this.curve.point(null, null);

  // P + Q = O
  if (this.x.cmp(p.x) === 0)
    return this.curve.point(null, null);

  var c = this.y.redSub(p.y);
  if (c.cmpn(0) !== 0)
    c = c.redMul(this.x.redSub(p.x).redInvm());
  var nx = c.redSqr().redISub(this.x).redISub(p.x);
  var ny = c.redMul(this.x.redSub(nx)).redISub(this.y);
  return this.curve.point(nx, ny);
};

Point.prototype.dbl = function dbl() {
  if (this.inf)
    return this;

  // 2P = O
  var ys1 = this.y.redAdd(this.y);
  if (ys1.cmpn(0) === 0)
    return this.curve.point(null, null);

  var a = this.curve.a;

  var x2 = this.x.redSqr();
  var dyinv = ys1.redInvm();
  var c = x2.redAdd(x2).redIAdd(x2).redIAdd(a).redMul(dyinv);

  var nx = c.redSqr().redISub(this.x.redAdd(this.x));
  var ny = c.redMul(this.x.redSub(nx)).redISub(this.y);
  return this.curve.point(nx, ny);
};

Point.prototype.getX = function getX() {
  return this.x.fromRed();
};

Point.prototype.getY = function getY() {
  return this.y.fromRed();
};

Point.prototype.mul = function mul(k) {
  k = new BN(k, 16);
  if (this.isInfinity())
    return this;
  else if (this._hasDoubles(k))
    return this.curve._fixedNafMul(this, k);
  else if (this.curve.endo)
    return this.curve._endoWnafMulAdd([ this ], [ k ]);
  else
    return this.curve._wnafMul(this, k);
};

Point.prototype.mulAdd = function mulAdd(k1, p2, k2) {
  var points = [ this, p2 ];
  var coeffs = [ k1, k2 ];
  if (this.curve.endo)
    return this.curve._endoWnafMulAdd(points, coeffs);
  else
    return this.curve._wnafMulAdd(1, points, coeffs, 2);
};

Point.prototype.jmulAdd = function jmulAdd(k1, p2, k2) {
  var points = [ this, p2 ];
  var coeffs = [ k1, k2 ];
  if (this.curve.endo)
    return this.curve._endoWnafMulAdd(points, coeffs, true);
  else
    return this.curve._wnafMulAdd(1, points, coeffs, 2, true);
};

Point.prototype.eq = function eq(p) {
  return this === p ||
         this.inf === p.inf &&
             (this.inf || this.x.cmp(p.x) === 0 && this.y.cmp(p.y) === 0);
};

Point.prototype.neg = function neg(_precompute) {
  if (this.inf)
    return this;

  var res = this.curve.point(this.x, this.y.redNeg());
  if (_precompute && this.precomputed) {
    var pre = this.precomputed;
    var negate = function(p) {
      return p.neg();
    };
    res.precomputed = {
      naf: pre.naf && {
        wnd: pre.naf.wnd,
        points: pre.naf.points.map(negate),
      },
      doubles: pre.doubles && {
        step: pre.doubles.step,
        points: pre.doubles.points.map(negate),
      },
    };
  }
  return res;
};

Point.prototype.toJ = function toJ() {
  if (this.inf)
    return this.curve.jpoint(null, null, null);

  var res = this.curve.jpoint(this.x, this.y, this.curve.one);
  return res;
};

function JPoint(curve, x, y, z) {
  Base.BasePoint.call(this, curve, 'jacobian');
  if (x === null && y === null && z === null) {
    this.x = this.curve.one;
    this.y = this.curve.one;
    this.z = new BN(0);
  } else {
    this.x = new BN(x, 16);
    this.y = new BN(y, 16);
    this.z = new BN(z, 16);
  }
  if (!this.x.red)
    this.x = this.x.toRed(this.curve.red);
  if (!this.y.red)
    this.y = this.y.toRed(this.curve.red);
  if (!this.z.red)
    this.z = this.z.toRed(this.curve.red);

  this.zOne = this.z === this.curve.one;
}
inherits(JPoint, Base.BasePoint);

ShortCurve.prototype.jpoint = function jpoint(x, y, z) {
  return new JPoint(this, x, y, z);
};

JPoint.prototype.toP = function toP() {
  if (this.isInfinity())
    return this.curve.point(null, null);

  var zinv = this.z.redInvm();
  var zinv2 = zinv.redSqr();
  var ax = this.x.redMul(zinv2);
  var ay = this.y.redMul(zinv2).redMul(zinv);

  return this.curve.point(ax, ay);
};

JPoint.prototype.neg = function neg() {
  return this.curve.jpoint(this.x, this.y.redNeg(), this.z);
};

JPoint.prototype.add = function add(p) {
  // O + P = P
  if (this.isInfinity())
    return p;

  // P + O = P
  if (p.isInfinity())
    return this;

  // 12M + 4S + 7A
  var pz2 = p.z.redSqr();
  var z2 = this.z.redSqr();
  var u1 = this.x.redMul(pz2);
  var u2 = p.x.redMul(z2);
  var s1 = this.y.redMul(pz2.redMul(p.z));
  var s2 = p.y.redMul(z2.redMul(this.z));

  var h = u1.redSub(u2);
  var r = s1.redSub(s2);
  if (h.cmpn(0) === 0) {
    if (r.cmpn(0) !== 0)
      return this.curve.jpoint(null, null, null);
    else
      return this.dbl();
  }

  var h2 = h.redSqr();
  var h3 = h2.redMul(h);
  var v = u1.redMul(h2);

  var nx = r.redSqr().redIAdd(h3).redISub(v).redISub(v);
  var ny = r.redMul(v.redISub(nx)).redISub(s1.redMul(h3));
  var nz = this.z.redMul(p.z).redMul(h);

  return this.curve.jpoint(nx, ny, nz);
};

JPoint.prototype.mixedAdd = function mixedAdd(p) {
  // O + P = P
  if (this.isInfinity())
    return p.toJ();

  // P + O = P
  if (p.isInfinity())
    return this;

  // 8M + 3S + 7A
  var z2 = this.z.redSqr();
  var u1 = this.x;
  var u2 = p.x.redMul(z2);
  var s1 = this.y;
  var s2 = p.y.redMul(z2).redMul(this.z);

  var h = u1.redSub(u2);
  var r = s1.redSub(s2);
  if (h.cmpn(0) === 0) {
    if (r.cmpn(0) !== 0)
      return this.curve.jpoint(null, null, null);
    else
      return this.dbl();
  }

  var h2 = h.redSqr();
  var h3 = h2.redMul(h);
  var v = u1.redMul(h2);

  var nx = r.redSqr().redIAdd(h3).redISub(v).redISub(v);
  var ny = r.redMul(v.redISub(nx)).redISub(s1.redMul(h3));
  var nz = this.z.redMul(h);

  return this.curve.jpoint(nx, ny, nz);
};

JPoint.prototype.dblp = function dblp(pow) {
  if (pow === 0)
    return this;
  if (this.isInfinity())
    return this;
  if (!pow)
    return this.dbl();

  var i;
  if (this.curve.zeroA || this.curve.threeA) {
    var r = this;
    for (i = 0; i < pow; i++)
      r = r.dbl();
    return r;
  }

  // 1M + 2S + 1A + N * (4S + 5M + 8A)
  // N = 1 => 6M + 6S + 9A
  var a = this.curve.a;
  var tinv = this.curve.tinv;

  var jx = this.x;
  var jy = this.y;
  var jz = this.z;
  var jz4 = jz.redSqr().redSqr();

  // Reuse results
  var jyd = jy.redAdd(jy);
  for (i = 0; i < pow; i++) {
    var jx2 = jx.redSqr();
    var jyd2 = jyd.redSqr();
    var jyd4 = jyd2.redSqr();
    var c = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a.redMul(jz4));

    var t1 = jx.redMul(jyd2);
    var nx = c.redSqr().redISub(t1.redAdd(t1));
    var t2 = t1.redISub(nx);
    var dny = c.redMul(t2);
    dny = dny.redIAdd(dny).redISub(jyd4);
    var nz = jyd.redMul(jz);
    if (i + 1 < pow)
      jz4 = jz4.redMul(jyd4);

    jx = nx;
    jz = nz;
    jyd = dny;
  }

  return this.curve.jpoint(jx, jyd.redMul(tinv), jz);
};

JPoint.prototype.dbl = function dbl() {
  if (this.isInfinity())
    return this;

  if (this.curve.zeroA)
    return this._zeroDbl();
  else if (this.curve.threeA)
    return this._threeDbl();
  else
    return this._dbl();
};

JPoint.prototype._zeroDbl = function _zeroDbl() {
  var nx;
  var ny;
  var nz;
  // Z = 1
  if (this.zOne) {
    // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html
    //     #doubling-mdbl-2007-bl
    // 1M + 5S + 14A

    // XX = X1^2
    var xx = this.x.redSqr();
    // YY = Y1^2
    var yy = this.y.redSqr();
    // YYYY = YY^2
    var yyyy = yy.redSqr();
    // S = 2 * ((X1 + YY)^2 - XX - YYYY)
    var s = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
    s = s.redIAdd(s);
    // M = 3 * XX + a; a = 0
    var m = xx.redAdd(xx).redIAdd(xx);
    // T = M ^ 2 - 2*S
    var t = m.redSqr().redISub(s).redISub(s);

    // 8 * YYYY
    var yyyy8 = yyyy.redIAdd(yyyy);
    yyyy8 = yyyy8.redIAdd(yyyy8);
    yyyy8 = yyyy8.redIAdd(yyyy8);

    // X3 = T
    nx = t;
    // Y3 = M * (S - T) - 8 * YYYY
    ny = m.redMul(s.redISub(t)).redISub(yyyy8);
    // Z3 = 2*Y1
    nz = this.y.redAdd(this.y);
  } else {
    // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html
    //     #doubling-dbl-2009-l
    // 2M + 5S + 13A

    // A = X1^2
    var a = this.x.redSqr();
    // B = Y1^2
    var b = this.y.redSqr();
    // C = B^2
    var c = b.redSqr();
    // D = 2 * ((X1 + B)^2 - A - C)
    var d = this.x.redAdd(b).redSqr().redISub(a).redISub(c);
    d = d.redIAdd(d);
    // E = 3 * A
    var e = a.redAdd(a).redIAdd(a);
    // F = E^2
    var f = e.redSqr();

    // 8 * C
    var c8 = c.redIAdd(c);
    c8 = c8.redIAdd(c8);
    c8 = c8.redIAdd(c8);

    // X3 = F - 2 * D
    nx = f.redISub(d).redISub(d);
    // Y3 = E * (D - X3) - 8 * C
    ny = e.redMul(d.redISub(nx)).redISub(c8);
    // Z3 = 2 * Y1 * Z1
    nz = this.y.redMul(this.z);
    nz = nz.redIAdd(nz);
  }

  return this.curve.jpoint(nx, ny, nz);
};

JPoint.prototype._threeDbl = function _threeDbl() {
  var nx;
  var ny;
  var nz;
  // Z = 1
  if (this.zOne) {
    // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-3.html
    //     #doubling-mdbl-2007-bl
    // 1M + 5S + 15A

    // XX = X1^2
    var xx = this.x.redSqr();
    // YY = Y1^2
    var yy = this.y.redSqr();
    // YYYY = YY^2
    var yyyy = yy.redSqr();
    // S = 2 * ((X1 + YY)^2 - XX - YYYY)
    var s = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
    s = s.redIAdd(s);
    // M = 3 * XX + a
    var m = xx.redAdd(xx).redIAdd(xx).redIAdd(this.curve.a);
    // T = M^2 - 2 * S
    var t = m.redSqr().redISub(s).redISub(s);
    // X3 = T
    nx = t;
    // Y3 = M * (S - T) - 8 * YYYY
    var yyyy8 = yyyy.redIAdd(yyyy);
    yyyy8 = yyyy8.redIAdd(yyyy8);
    yyyy8 = yyyy8.redIAdd(yyyy8);
    ny = m.redMul(s.redISub(t)).redISub(yyyy8);
    // Z3 = 2 * Y1
    nz = this.y.redAdd(this.y);
  } else {
    // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-3.html#doubling-dbl-2001-b
    // 3M + 5S

    // delta = Z1^2
    var delta = this.z.redSqr();
    // gamma = Y1^2
    var gamma = this.y.redSqr();
    // beta = X1 * gamma
    var beta = this.x.redMul(gamma);
    // alpha = 3 * (X1 - delta) * (X1 + delta)
    var alpha = this.x.redSub(delta).redMul(this.x.redAdd(delta));
    alpha = alpha.redAdd(alpha).redIAdd(alpha);
    // X3 = alpha^2 - 8 * beta
    var beta4 = beta.redIAdd(beta);
    beta4 = beta4.redIAdd(beta4);
    var beta8 = beta4.redAdd(beta4);
    nx = alpha.redSqr().redISub(beta8);
    // Z3 = (Y1 + Z1)^2 - gamma - delta
    nz = this.y.redAdd(this.z).redSqr().redISub(gamma).redISub(delta);
    // Y3 = alpha * (4 * beta - X3) - 8 * gamma^2
    var ggamma8 = gamma.redSqr();
    ggamma8 = ggamma8.redIAdd(ggamma8);
    ggamma8 = ggamma8.redIAdd(ggamma8);
    ggamma8 = ggamma8.redIAdd(ggamma8);
    ny = alpha.redMul(beta4.redISub(nx)).redISub(ggamma8);
  }

  return this.curve.jpoint(nx, ny, nz);
};

JPoint.prototype._dbl = function _dbl() {
  var a = this.curve.a;

  // 4M + 6S + 10A
  var jx = this.x;
  var jy = this.y;
  var jz = this.z;
  var jz4 = jz.redSqr().redSqr();

  var jx2 = jx.redSqr();
  var jy2 = jy.redSqr();

  var c = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a.redMul(jz4));

  var jxd4 = jx.redAdd(jx);
  jxd4 = jxd4.redIAdd(jxd4);
  var t1 = jxd4.redMul(jy2);
  var nx = c.redSqr().redISub(t1.redAdd(t1));
  var t2 = t1.redISub(nx);

  var jyd8 = jy2.redSqr();
  jyd8 = jyd8.redIAdd(jyd8);
  jyd8 = jyd8.redIAdd(jyd8);
  jyd8 = jyd8.redIAdd(jyd8);
  var ny = c.redMul(t2).redISub(jyd8);
  var nz = jy.redAdd(jy).redMul(jz);

  return this.curve.jpoint(nx, ny, nz);
};

JPoint.prototype.trpl = function trpl() {
  if (!this.curve.zeroA)
    return this.dbl().add(this);

  // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html#tripling-tpl-2007-bl
  // 5M + 10S + ...

  // XX = X1^2
  var xx = this.x.redSqr();
  // YY = Y1^2
  var yy = this.y.redSqr();
  // ZZ = Z1^2
  var zz = this.z.redSqr();
  // YYYY = YY^2
  var yyyy = yy.redSqr();
  // M = 3 * XX + a * ZZ2; a = 0
  var m = xx.redAdd(xx).redIAdd(xx);
  // MM = M^2
  var mm = m.redSqr();
  // E = 6 * ((X1 + YY)^2 - XX - YYYY) - MM
  var e = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
  e = e.redIAdd(e);
  e = e.redAdd(e).redIAdd(e);
  e = e.redISub(mm);
  // EE = E^2
  var ee = e.redSqr();
  // T = 16*YYYY
  var t = yyyy.redIAdd(yyyy);
  t = t.redIAdd(t);
  t = t.redIAdd(t);
  t = t.redIAdd(t);
  // U = (M + E)^2 - MM - EE - T
  var u = m.redIAdd(e).redSqr().redISub(mm).redISub(ee).redISub(t);
  // X3 = 4 * (X1 * EE - 4 * YY * U)
  var yyu4 = yy.redMul(u);
  yyu4 = yyu4.redIAdd(yyu4);
  yyu4 = yyu4.redIAdd(yyu4);
  var nx = this.x.redMul(ee).redISub(yyu4);
  nx = nx.redIAdd(nx);
  nx = nx.redIAdd(nx);
  // Y3 = 8 * Y1 * (U * (T - U) - E * EE)
  var ny = this.y.redMul(u.redMul(t.redISub(u)).redISub(e.redMul(ee)));
  ny = ny.redIAdd(ny);
  ny = ny.redIAdd(ny);
  ny = ny.redIAdd(ny);
  // Z3 = (Z1 + E)^2 - ZZ - EE
  var nz = this.z.redAdd(e).redSqr().redISub(zz).redISub(ee);

  return this.curve.jpoint(nx, ny, nz);
};

JPoint.prototype.mul = function mul(k, kbase) {
  k = new BN(k, kbase);

  return this.curve._wnafMul(this, k);
};

JPoint.prototype.eq = function eq(p) {
  if (p.type === 'affine')
    return this.eq(p.toJ());

  if (this === p)
    return true;

  // x1 * z2^2 == x2 * z1^2
  var z2 = this.z.redSqr();
  var pz2 = p.z.redSqr();
  if (this.x.redMul(pz2).redISub(p.x.redMul(z2)).cmpn(0) !== 0)
    return false;

  // y1 * z2^3 == y2 * z1^3
  var z3 = z2.redMul(this.z);
  var pz3 = pz2.redMul(p.z);
  return this.y.redMul(pz3).redISub(p.y.redMul(z3)).cmpn(0) === 0;
};

JPoint.prototype.eqXToP = function eqXToP(x) {
  var zs = this.z.redSqr();
  var rx = x.toRed(this.curve.red).redMul(zs);
  if (this.x.cmp(rx) === 0)
    return true;

  var xc = x.clone();
  var t = this.curve.redN.redMul(zs);
  for (;;) {
    xc.iadd(this.curve.n);
    if (xc.cmp(this.curve.p) >= 0)
      return false;

    rx.redIAdd(t);
    if (this.x.cmp(rx) === 0)
      return true;
  }
};

JPoint.prototype.inspect = function inspect() {
  if (this.isInfinity())
    return '<EC JPoint Infinity>';
  return '<EC JPoint x: ' + this.x.toString(16, 2) +
      ' y: ' + this.y.toString(16, 2) +
      ' z: ' + this.z.toString(16, 2) + '>';
};

JPoint.prototype.isInfinity = function isInfinity() {
  // XXX This code assumes that zero is always zero in red
  return this.z.cmpn(0) === 0;
};

},{"../utils":87,"./base":74,"bn.js":21,"inherits":115}],79:[function(require,module,exports){
'use strict';

var curves = exports;

var hash = require('hash.js');
var curve = require('./curve');
var utils = require('./utils');

var assert = utils.assert;

function PresetCurve(options) {
  if (options.type === 'short')
    this.curve = new curve.short(options);
  else if (options.type === 'edwards')
    this.curve = new curve.edwards(options);
  else
    this.curve = new curve.mont(options);
  this.g = this.curve.g;
  this.n = this.curve.n;
  this.hash = options.hash;

  assert(this.g.validate(), 'Invalid curve');
  assert(this.g.mul(this.n).isInfinity(), 'Invalid curve, G*N != O');
}
curves.PresetCurve = PresetCurve;

function defineCurve(name, options) {
  Object.defineProperty(curves, name, {
    configurable: true,
    enumerable: true,
    get: function() {
      var curve = new PresetCurve(options);
      Object.defineProperty(curves, name, {
        configurable: true,
        enumerable: true,
        value: curve,
      });
      return curve;
    },
  });
}

defineCurve('p192', {
  type: 'short',
  prime: 'p192',
  p: 'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff',
  a: 'ffffffff ffffffff ffffffff fffffffe ffffffff fffffffc',
  b: '64210519 e59c80e7 0fa7e9ab 72243049 feb8deec c146b9b1',
  n: 'ffffffff ffffffff ffffffff 99def836 146bc9b1 b4d22831',
  hash: hash.sha256,
  gRed: false,
  g: [
    '188da80e b03090f6 7cbf20eb 43a18800 f4ff0afd 82ff1012',
    '07192b95 ffc8da78 631011ed 6b24cdd5 73f977a1 1e794811',
  ],
});

defineCurve('p224', {
  type: 'short',
  prime: 'p224',
  p: 'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001',
  a: 'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff fffffffe',
  b: 'b4050a85 0c04b3ab f5413256 5044b0b7 d7bfd8ba 270b3943 2355ffb4',
  n: 'ffffffff ffffffff ffffffff ffff16a2 e0b8f03e 13dd2945 5c5c2a3d',
  hash: hash.sha256,
  gRed: false,
  g: [
    'b70e0cbd 6bb4bf7f 321390b9 4a03c1d3 56c21122 343280d6 115c1d21',
    'bd376388 b5f723fb 4c22dfe6 cd4375a0 5a074764 44d58199 85007e34',
  ],
});

defineCurve('p256', {
  type: 'short',
  prime: null,
  p: 'ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff ffffffff',
  a: 'ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff fffffffc',
  b: '5ac635d8 aa3a93e7 b3ebbd55 769886bc 651d06b0 cc53b0f6 3bce3c3e 27d2604b',
  n: 'ffffffff 00000000 ffffffff ffffffff bce6faad a7179e84 f3b9cac2 fc632551',
  hash: hash.sha256,
  gRed: false,
  g: [
    '6b17d1f2 e12c4247 f8bce6e5 63a440f2 77037d81 2deb33a0 f4a13945 d898c296',
    '4fe342e2 fe1a7f9b 8ee7eb4a 7c0f9e16 2bce3357 6b315ece cbb64068 37bf51f5',
  ],
});

defineCurve('p384', {
  type: 'short',
  prime: null,
  p: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
     'fffffffe ffffffff 00000000 00000000 ffffffff',
  a: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
     'fffffffe ffffffff 00000000 00000000 fffffffc',
  b: 'b3312fa7 e23ee7e4 988e056b e3f82d19 181d9c6e fe814112 0314088f ' +
     '5013875a c656398d 8a2ed19d 2a85c8ed d3ec2aef',
  n: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff c7634d81 ' +
     'f4372ddf 581a0db2 48b0a77a ecec196a ccc52973',
  hash: hash.sha384,
  gRed: false,
  g: [
    'aa87ca22 be8b0537 8eb1c71e f320ad74 6e1d3b62 8ba79b98 59f741e0 82542a38 ' +
    '5502f25d bf55296c 3a545e38 72760ab7',
    '3617de4a 96262c6f 5d9e98bf 9292dc29 f8f41dbd 289a147c e9da3113 b5f0b8c0 ' +
    '0a60b1ce 1d7e819d 7a431d7c 90ea0e5f',
  ],
});

defineCurve('p521', {
  type: 'short',
  prime: null,
  p: '000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
     'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
     'ffffffff ffffffff ffffffff ffffffff ffffffff',
  a: '000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
     'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
     'ffffffff ffffffff ffffffff ffffffff fffffffc',
  b: '00000051 953eb961 8e1c9a1f 929a21a0 b68540ee a2da725b ' +
     '99b315f3 b8b48991 8ef109e1 56193951 ec7e937b 1652c0bd ' +
     '3bb1bf07 3573df88 3d2c34f1 ef451fd4 6b503f00',
  n: '000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
     'ffffffff ffffffff fffffffa 51868783 bf2f966b 7fcc0148 ' +
     'f709a5d0 3bb5c9b8 899c47ae bb6fb71e 91386409',
  hash: hash.sha512,
  gRed: false,
  g: [
    '000000c6 858e06b7 0404e9cd 9e3ecb66 2395b442 9c648139 ' +
    '053fb521 f828af60 6b4d3dba a14b5e77 efe75928 fe1dc127 ' +
    'a2ffa8de 3348b3c1 856a429b f97e7e31 c2e5bd66',
    '00000118 39296a78 9a3bc004 5c8a5fb4 2c7d1bd9 98f54449 ' +
    '579b4468 17afbd17 273e662c 97ee7299 5ef42640 c550b901 ' +
    '3fad0761 353c7086 a272c240 88be9476 9fd16650',
  ],
});

defineCurve('curve25519', {
  type: 'mont',
  prime: 'p25519',
  p: '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed',
  a: '76d06',
  b: '1',
  n: '1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed',
  hash: hash.sha256,
  gRed: false,
  g: [
    '9',
  ],
});

defineCurve('ed25519', {
  type: 'edwards',
  prime: 'p25519',
  p: '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed',
  a: '-1',
  c: '1',
  // -121665 * (121666^(-1)) (mod P)
  d: '52036cee2b6ffe73 8cc740797779e898 00700a4d4141d8ab 75eb4dca135978a3',
  n: '1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed',
  hash: hash.sha256,
  gRed: false,
  g: [
    '216936d3cd6e53fec0a4e231fdd6dc5c692cc7609525a7b2c9562d608f25d51a',

    // 4/5
    '6666666666666666666666666666666666666666666666666666666666666658',
  ],
});

var pre;
try {
  pre = require('./precomputed/secp256k1');
} catch (e) {
  pre = undefined;
}

defineCurve('secp256k1', {
  type: 'short',
  prime: 'k256',
  p: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f',
  a: '0',
  b: '7',
  n: 'ffffffff ffffffff ffffffff fffffffe baaedce6 af48a03b bfd25e8c d0364141',
  h: '1',
  hash: hash.sha256,

  // Precomputed endomorphism
  beta: '7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee',
  lambda: '5363ad4cc05c30e0a5261c028812645a122e22ea20816678df02967c1b23bd72',
  basis: [
    {
      a: '3086d221a7d46bcde86c90e49284eb15',
      b: '-e4437ed6010e88286f547fa90abfe4c3',
    },
    {
      a: '114ca50f7a8e2f3f657c1108d9d44cfd8',
      b: '3086d221a7d46bcde86c90e49284eb15',
    },
  ],

  gRed: false,
  g: [
    '79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798',
    '483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8',
    pre,
  ],
});

},{"./curve":76,"./precomputed/secp256k1":86,"./utils":87,"hash.js":101}],80:[function(require,module,exports){
'use strict';

var BN = require('bn.js');
var HmacDRBG = require('hmac-drbg');
var utils = require('../utils');
var curves = require('../curves');
var rand = require('brorand');
var assert = utils.assert;

var KeyPair = require('./key');
var Signature = require('./signature');

function EC(options) {
  if (!(this instanceof EC))
    return new EC(options);

  // Shortcut `elliptic.ec(curve-name)`
  if (typeof options === 'string') {
    assert(Object.prototype.hasOwnProperty.call(curves, options),
      'Unknown curve ' + options);

    options = curves[options];
  }

  // Shortcut for `elliptic.ec(elliptic.curves.curveName)`
  if (options instanceof curves.PresetCurve)
    options = { curve: options };

  this.curve = options.curve.curve;
  this.n = this.curve.n;
  this.nh = this.n.ushrn(1);
  this.g = this.curve.g;

  // Point on curve
  this.g = options.curve.g;
  this.g.precompute(options.curve.n.bitLength() + 1);

  // Hash for function for DRBG
  this.hash = options.hash || options.curve.hash;
}
module.exports = EC;

EC.prototype.keyPair = function keyPair(options) {
  return new KeyPair(this, options);
};

EC.prototype.keyFromPrivate = function keyFromPrivate(priv, enc) {
  return KeyPair.fromPrivate(this, priv, enc);
};

EC.prototype.keyFromPublic = function keyFromPublic(pub, enc) {
  return KeyPair.fromPublic(this, pub, enc);
};

EC.prototype.genKeyPair = function genKeyPair(options) {
  if (!options)
    options = {};

  // Instantiate Hmac_DRBG
  var drbg = new HmacDRBG({
    hash: this.hash,
    pers: options.pers,
    persEnc: options.persEnc || 'utf8',
    entropy: options.entropy || rand(this.hash.hmacStrength),
    entropyEnc: options.entropy && options.entropyEnc || 'utf8',
    nonce: this.n.toArray(),
  });

  var bytes = this.n.byteLength();
  var ns2 = this.n.sub(new BN(2));
  for (;;) {
    var priv = new BN(drbg.generate(bytes));
    if (priv.cmp(ns2) > 0)
      continue;

    priv.iaddn(1);
    return this.keyFromPrivate(priv);
  }
};

EC.prototype._truncateToN = function _truncateToN(msg, truncOnly) {
  var delta = msg.byteLength() * 8 - this.n.bitLength();
  if (delta > 0)
    msg = msg.ushrn(delta);
  if (!truncOnly && msg.cmp(this.n) >= 0)
    return msg.sub(this.n);
  else
    return msg;
};

EC.prototype.sign = function sign(msg, key, enc, options) {
  if (typeof enc === 'object') {
    options = enc;
    enc = null;
  }
  if (!options)
    options = {};

  key = this.keyFromPrivate(key, enc);
  msg = this._truncateToN(new BN(msg, 16));

  // Zero-extend key to provide enough entropy
  var bytes = this.n.byteLength();
  var bkey = key.getPrivate().toArray('be', bytes);

  // Zero-extend nonce to have the same byte size as N
  var nonce = msg.toArray('be', bytes);

  // Instantiate Hmac_DRBG
  var drbg = new HmacDRBG({
    hash: this.hash,
    entropy: bkey,
    nonce: nonce,
    pers: options.pers,
    persEnc: options.persEnc || 'utf8',
  });

  // Number of bytes to generate
  var ns1 = this.n.sub(new BN(1));

  for (var iter = 0; ; iter++) {
    var k = options.k ?
      options.k(iter) :
      new BN(drbg.generate(this.n.byteLength()));
    k = this._truncateToN(k, true);
    if (k.cmpn(1) <= 0 || k.cmp(ns1) >= 0)
      continue;

    var kp = this.g.mul(k);
    if (kp.isInfinity())
      continue;

    var kpX = kp.getX();
    var r = kpX.umod(this.n);
    if (r.cmpn(0) === 0)
      continue;

    var s = k.invm(this.n).mul(r.mul(key.getPrivate()).iadd(msg));
    s = s.umod(this.n);
    if (s.cmpn(0) === 0)
      continue;

    var recoveryParam = (kp.getY().isOdd() ? 1 : 0) |
                        (kpX.cmp(r) !== 0 ? 2 : 0);

    // Use complement of `s`, if it is > `n / 2`
    if (options.canonical && s.cmp(this.nh) > 0) {
      s = this.n.sub(s);
      recoveryParam ^= 1;
    }

    return new Signature({ r: r, s: s, recoveryParam: recoveryParam });
  }
};

EC.prototype.verify = function verify(msg, signature, key, enc) {
  msg = this._truncateToN(new BN(msg, 16));
  key = this.keyFromPublic(key, enc);
  signature = new Signature(signature, 'hex');

  // Perform primitive values validation
  var r = signature.r;
  var s = signature.s;
  if (r.cmpn(1) < 0 || r.cmp(this.n) >= 0)
    return false;
  if (s.cmpn(1) < 0 || s.cmp(this.n) >= 0)
    return false;

  // Validate signature
  var sinv = s.invm(this.n);
  var u1 = sinv.mul(msg).umod(this.n);
  var u2 = sinv.mul(r).umod(this.n);
  var p;

  if (!this.curve._maxwellTrick) {
    p = this.g.mulAdd(u1, key.getPublic(), u2);
    if (p.isInfinity())
      return false;

    return p.getX().umod(this.n).cmp(r) === 0;
  }

  // NOTE: Greg Maxwell's trick, inspired by:
  // https://git.io/vad3K

  p = this.g.jmulAdd(u1, key.getPublic(), u2);
  if (p.isInfinity())
    return false;

  // Compare `p.x` of Jacobian point with `r`,
  // this will do `p.x == r * p.z^2` instead of multiplying `p.x` by the
  // inverse of `p.z^2`
  return p.eqXToP(r);
};

EC.prototype.recoverPubKey = function(msg, signature, j, enc) {
  assert((3 & j) === j, 'The recovery param is more than two bits');
  signature = new Signature(signature, enc);

  var n = this.n;
  var e = new BN(msg);
  var r = signature.r;
  var s = signature.s;

  // A set LSB signifies that the y-coordinate is odd
  var isYOdd = j & 1;
  var isSecondKey = j >> 1;
  if (r.cmp(this.curve.p.umod(this.curve.n)) >= 0 && isSecondKey)
    throw new Error('Unable to find sencond key candinate');

  // 1.1. Let x = r + jn.
  if (isSecondKey)
    r = this.curve.pointFromX(r.add(this.curve.n), isYOdd);
  else
    r = this.curve.pointFromX(r, isYOdd);

  var rInv = signature.r.invm(n);
  var s1 = n.sub(e).mul(rInv).umod(n);
  var s2 = s.mul(rInv).umod(n);

  // 1.6.1 Compute Q = r^-1 (sR -  eG)
  //               Q = r^-1 (sR + -eG)
  return this.g.mulAdd(s1, r, s2);
};

EC.prototype.getKeyRecoveryParam = function(e, signature, Q, enc) {
  signature = new Signature(signature, enc);
  if (signature.recoveryParam !== null)
    return signature.recoveryParam;

  for (var i = 0; i < 4; i++) {
    var Qprime;
    try {
      Qprime = this.recoverPubKey(e, signature, i);
    } catch (e) {
      continue;
    }

    if (Qprime.eq(Q))
      return i;
  }
  throw new Error('Unable to find valid recovery factor');
};

},{"../curves":79,"../utils":87,"./key":81,"./signature":82,"bn.js":21,"brorand":23,"hmac-drbg":113}],81:[function(require,module,exports){
'use strict';

var BN = require('bn.js');
var utils = require('../utils');
var assert = utils.assert;

function KeyPair(ec, options) {
  this.ec = ec;
  this.priv = null;
  this.pub = null;

  // KeyPair(ec, { priv: ..., pub: ... })
  if (options.priv)
    this._importPrivate(options.priv, options.privEnc);
  if (options.pub)
    this._importPublic(options.pub, options.pubEnc);
}
module.exports = KeyPair;

KeyPair.fromPublic = function fromPublic(ec, pub, enc) {
  if (pub instanceof KeyPair)
    return pub;

  return new KeyPair(ec, {
    pub: pub,
    pubEnc: enc,
  });
};

KeyPair.fromPrivate = function fromPrivate(ec, priv, enc) {
  if (priv instanceof KeyPair)
    return priv;

  return new KeyPair(ec, {
    priv: priv,
    privEnc: enc,
  });
};

KeyPair.prototype.validate = function validate() {
  var pub = this.getPublic();

  if (pub.isInfinity())
    return { result: false, reason: 'Invalid public key' };
  if (!pub.validate())
    return { result: false, reason: 'Public key is not a point' };
  if (!pub.mul(this.ec.curve.n).isInfinity())
    return { result: false, reason: 'Public key * N != O' };

  return { result: true, reason: null };
};

KeyPair.prototype.getPublic = function getPublic(compact, enc) {
  // compact is optional argument
  if (typeof compact === 'string') {
    enc = compact;
    compact = null;
  }

  if (!this.pub)
    this.pub = this.ec.g.mul(this.priv);

  if (!enc)
    return this.pub;

  return this.pub.encode(enc, compact);
};

KeyPair.prototype.getPrivate = function getPrivate(enc) {
  if (enc === 'hex')
    return this.priv.toString(16, 2);
  else
    return this.priv;
};

KeyPair.prototype._importPrivate = function _importPrivate(key, enc) {
  this.priv = new BN(key, enc || 16);

  // Ensure that the priv won't be bigger than n, otherwise we may fail
  // in fixed multiplication method
  this.priv = this.priv.umod(this.ec.curve.n);
};

KeyPair.prototype._importPublic = function _importPublic(key, enc) {
  if (key.x || key.y) {
    // Montgomery points only have an `x` coordinate.
    // Weierstrass/Edwards points on the other hand have both `x` and
    // `y` coordinates.
    if (this.ec.curve.type === 'mont') {
      assert(key.x, 'Need x coordinate');
    } else if (this.ec.curve.type === 'short' ||
               this.ec.curve.type === 'edwards') {
      assert(key.x && key.y, 'Need both x and y coordinate');
    }
    this.pub = this.ec.curve.point(key.x, key.y);
    return;
  }
  this.pub = this.ec.curve.decodePoint(key, enc);
};

// ECDH
KeyPair.prototype.derive = function derive(pub) {
  if(!pub.validate()) {
    assert(pub.validate(), 'public point not validated');
  }
  return pub.mul(this.priv).getX();
};

// ECDSA
KeyPair.prototype.sign = function sign(msg, enc, options) {
  return this.ec.sign(msg, this, enc, options);
};

KeyPair.prototype.verify = function verify(msg, signature) {
  return this.ec.verify(msg, signature, this);
};

KeyPair.prototype.inspect = function inspect() {
  return '<Key priv: ' + (this.priv && this.priv.toString(16, 2)) +
         ' pub: ' + (this.pub && this.pub.inspect()) + ' >';
};

},{"../utils":87,"bn.js":21}],82:[function(require,module,exports){
'use strict';

var BN = require('bn.js');

var utils = require('../utils');
var assert = utils.assert;

function Signature(options, enc) {
  if (options instanceof Signature)
    return options;

  if (this._importDER(options, enc))
    return;

  assert(options.r && options.s, 'Signature without r or s');
  this.r = new BN(options.r, 16);
  this.s = new BN(options.s, 16);
  if (options.recoveryParam === undefined)
    this.recoveryParam = null;
  else
    this.recoveryParam = options.recoveryParam;
}
module.exports = Signature;

function Position() {
  this.place = 0;
}

function getLength(buf, p) {
  var initial = buf[p.place++];
  if (!(initial & 0x80)) {
    return initial;
  }
  var octetLen = initial & 0xf;

  // Indefinite length or overflow
  if (octetLen === 0 || octetLen > 4) {
    return false;
  }

  var val = 0;
  for (var i = 0, off = p.place; i < octetLen; i++, off++) {
    val <<= 8;
    val |= buf[off];
    val >>>= 0;
  }

  // Leading zeroes
  if (val <= 0x7f) {
    return false;
  }

  p.place = off;
  return val;
}

function rmPadding(buf) {
  var i = 0;
  var len = buf.length - 1;
  while (!buf[i] && !(buf[i + 1] & 0x80) && i < len) {
    i++;
  }
  if (i === 0) {
    return buf;
  }
  return buf.slice(i);
}

Signature.prototype._importDER = function _importDER(data, enc) {
  data = utils.toArray(data, enc);
  var p = new Position();
  if (data[p.place++] !== 0x30) {
    return false;
  }
  var len = getLength(data, p);
  if (len === false) {
    return false;
  }
  if ((len + p.place) !== data.length) {
    return false;
  }
  if (data[p.place++] !== 0x02) {
    return false;
  }
  var rlen = getLength(data, p);
  if (rlen === false) {
    return false;
  }
  var r = data.slice(p.place, rlen + p.place);
  p.place += rlen;
  if (data[p.place++] !== 0x02) {
    return false;
  }
  var slen = getLength(data, p);
  if (slen === false) {
    return false;
  }
  if (data.length !== slen + p.place) {
    return false;
  }
  var s = data.slice(p.place, slen + p.place);
  if (r[0] === 0) {
    if (r[1] & 0x80) {
      r = r.slice(1);
    } else {
      // Leading zeroes
      return false;
    }
  }
  if (s[0] === 0) {
    if (s[1] & 0x80) {
      s = s.slice(1);
    } else {
      // Leading zeroes
      return false;
    }
  }

  this.r = new BN(r);
  this.s = new BN(s);
  this.recoveryParam = null;

  return true;
};

function constructLength(arr, len) {
  if (len < 0x80) {
    arr.push(len);
    return;
  }
  var octets = 1 + (Math.log(len) / Math.LN2 >>> 3);
  arr.push(octets | 0x80);
  while (--octets) {
    arr.push((len >>> (octets << 3)) & 0xff);
  }
  arr.push(len);
}

Signature.prototype.toDER = function toDER(enc) {
  var r = this.r.toArray();
  var s = this.s.toArray();

  // Pad values
  if (r[0] & 0x80)
    r = [ 0 ].concat(r);
  // Pad values
  if (s[0] & 0x80)
    s = [ 0 ].concat(s);

  r = rmPadding(r);
  s = rmPadding(s);

  while (!s[0] && !(s[1] & 0x80)) {
    s = s.slice(1);
  }
  var arr = [ 0x02 ];
  constructLength(arr, r.length);
  arr = arr.concat(r);
  arr.push(0x02);
  constructLength(arr, s.length);
  var backHalf = arr.concat(s);
  var res = [ 0x30 ];
  constructLength(res, backHalf.length);
  res = res.concat(backHalf);
  return utils.encode(res, enc);
};

},{"../utils":87,"bn.js":21}],83:[function(require,module,exports){
'use strict';

var hash = require('hash.js');
var curves = require('../curves');
var utils = require('../utils');
var assert = utils.assert;
var parseBytes = utils.parseBytes;
var KeyPair = require('./key');
var Signature = require('./signature');

function EDDSA(curve) {
  assert(curve === 'ed25519', 'only tested with ed25519 so far');

  if (!(this instanceof EDDSA))
    return new EDDSA(curve);

  curve = curves[curve].curve;
  this.curve = curve;
  this.g = curve.g;
  this.g.precompute(curve.n.bitLength() + 1);

  this.pointClass = curve.point().constructor;
  this.encodingLength = Math.ceil(curve.n.bitLength() / 8);
  this.hash = hash.sha512;
}

module.exports = EDDSA;

/**
* @param {Array|String} message - message bytes
* @param {Array|String|KeyPair} secret - secret bytes or a keypair
* @returns {Signature} - signature
*/
EDDSA.prototype.sign = function sign(message, secret) {
  message = parseBytes(message);
  var key = this.keyFromSecret(secret);
  var r = this.hashInt(key.messagePrefix(), message);
  var R = this.g.mul(r);
  var Rencoded = this.encodePoint(R);
  var s_ = this.hashInt(Rencoded, key.pubBytes(), message)
    .mul(key.priv());
  var S = r.add(s_).umod(this.curve.n);
  return this.makeSignature({ R: R, S: S, Rencoded: Rencoded });
};

/**
* @param {Array} message - message bytes
* @param {Array|String|Signature} sig - sig bytes
* @param {Array|String|Point|KeyPair} pub - public key
* @returns {Boolean} - true if public key matches sig of message
*/
EDDSA.prototype.verify = function verify(message, sig, pub) {
  message = parseBytes(message);
  sig = this.makeSignature(sig);
  var key = this.keyFromPublic(pub);
  var h = this.hashInt(sig.Rencoded(), key.pubBytes(), message);
  var SG = this.g.mul(sig.S());
  var RplusAh = sig.R().add(key.pub().mul(h));
  return RplusAh.eq(SG);
};

EDDSA.prototype.hashInt = function hashInt() {
  var hash = this.hash();
  for (var i = 0; i < arguments.length; i++)
    hash.update(arguments[i]);
  return utils.intFromLE(hash.digest()).umod(this.curve.n);
};

EDDSA.prototype.keyFromPublic = function keyFromPublic(pub) {
  return KeyPair.fromPublic(this, pub);
};

EDDSA.prototype.keyFromSecret = function keyFromSecret(secret) {
  return KeyPair.fromSecret(this, secret);
};

EDDSA.prototype.makeSignature = function makeSignature(sig) {
  if (sig instanceof Signature)
    return sig;
  return new Signature(this, sig);
};

/**
* * https://tools.ietf.org/html/draft-josefsson-eddsa-ed25519-03#section-5.2
*
* EDDSA defines methods for encoding and decoding points and integers. These are
* helper convenience methods, that pass along to utility functions implied
* parameters.
*
*/
EDDSA.prototype.encodePoint = function encodePoint(point) {
  var enc = point.getY().toArray('le', this.encodingLength);
  enc[this.encodingLength - 1] |= point.getX().isOdd() ? 0x80 : 0;
  return enc;
};

EDDSA.prototype.decodePoint = function decodePoint(bytes) {
  bytes = utils.parseBytes(bytes);

  var lastIx = bytes.length - 1;
  var normed = bytes.slice(0, lastIx).concat(bytes[lastIx] & ~0x80);
  var xIsOdd = (bytes[lastIx] & 0x80) !== 0;

  var y = utils.intFromLE(normed);
  return this.curve.pointFromY(y, xIsOdd);
};

EDDSA.prototype.encodeInt = function encodeInt(num) {
  return num.toArray('le', this.encodingLength);
};

EDDSA.prototype.decodeInt = function decodeInt(bytes) {
  return utils.intFromLE(bytes);
};

EDDSA.prototype.isPoint = function isPoint(val) {
  return val instanceof this.pointClass;
};

},{"../curves":79,"../utils":87,"./key":84,"./signature":85,"hash.js":101}],84:[function(require,module,exports){
'use strict';

var utils = require('../utils');
var assert = utils.assert;
var parseBytes = utils.parseBytes;
var cachedProperty = utils.cachedProperty;

/**
* @param {EDDSA} eddsa - instance
* @param {Object} params - public/private key parameters
*
* @param {Array<Byte>} [params.secret] - secret seed bytes
* @param {Point} [params.pub] - public key point (aka `A` in eddsa terms)
* @param {Array<Byte>} [params.pub] - public key point encoded as bytes
*
*/
function KeyPair(eddsa, params) {
  this.eddsa = eddsa;
  this._secret = parseBytes(params.secret);
  if (eddsa.isPoint(params.pub))
    this._pub = params.pub;
  else
    this._pubBytes = parseBytes(params.pub);
}

KeyPair.fromPublic = function fromPublic(eddsa, pub) {
  if (pub instanceof KeyPair)
    return pub;
  return new KeyPair(eddsa, { pub: pub });
};

KeyPair.fromSecret = function fromSecret(eddsa, secret) {
  if (secret instanceof KeyPair)
    return secret;
  return new KeyPair(eddsa, { secret: secret });
};

KeyPair.prototype.secret = function secret() {
  return this._secret;
};

cachedProperty(KeyPair, 'pubBytes', function pubBytes() {
  return this.eddsa.encodePoint(this.pub());
});

cachedProperty(KeyPair, 'pub', function pub() {
  if (this._pubBytes)
    return this.eddsa.decodePoint(this._pubBytes);
  return this.eddsa.g.mul(this.priv());
});

cachedProperty(KeyPair, 'privBytes', function privBytes() {
  var eddsa = this.eddsa;
  var hash = this.hash();
  var lastIx = eddsa.encodingLength - 1;

  var a = hash.slice(0, eddsa.encodingLength);
  a[0] &= 248;
  a[lastIx] &= 127;
  a[lastIx] |= 64;

  return a;
});

cachedProperty(KeyPair, 'priv', function priv() {
  return this.eddsa.decodeInt(this.privBytes());
});

cachedProperty(KeyPair, 'hash', function hash() {
  return this.eddsa.hash().update(this.secret()).digest();
});

cachedProperty(KeyPair, 'messagePrefix', function messagePrefix() {
  return this.hash().slice(this.eddsa.encodingLength);
});

KeyPair.prototype.sign = function sign(message) {
  assert(this._secret, 'KeyPair can only verify');
  return this.eddsa.sign(message, this);
};

KeyPair.prototype.verify = function verify(message, sig) {
  return this.eddsa.verify(message, sig, this);
};

KeyPair.prototype.getSecret = function getSecret(enc) {
  assert(this._secret, 'KeyPair is public only');
  return utils.encode(this.secret(), enc);
};

KeyPair.prototype.getPublic = function getPublic(enc) {
  return utils.encode(this.pubBytes(), enc);
};

module.exports = KeyPair;

},{"../utils":87}],85:[function(require,module,exports){
'use strict';

var BN = require('bn.js');
var utils = require('../utils');
var assert = utils.assert;
var cachedProperty = utils.cachedProperty;
var parseBytes = utils.parseBytes;

/**
* @param {EDDSA} eddsa - eddsa instance
* @param {Array<Bytes>|Object} sig -
* @param {Array<Bytes>|Point} [sig.R] - R point as Point or bytes
* @param {Array<Bytes>|bn} [sig.S] - S scalar as bn or bytes
* @param {Array<Bytes>} [sig.Rencoded] - R point encoded
* @param {Array<Bytes>} [sig.Sencoded] - S scalar encoded
*/
function Signature(eddsa, sig) {
  this.eddsa = eddsa;

  if (typeof sig !== 'object')
    sig = parseBytes(sig);

  if (Array.isArray(sig)) {
    sig = {
      R: sig.slice(0, eddsa.encodingLength),
      S: sig.slice(eddsa.encodingLength),
    };
  }

  assert(sig.R && sig.S, 'Signature without R or S');

  if (eddsa.isPoint(sig.R))
    this._R = sig.R;
  if (sig.S instanceof BN)
    this._S = sig.S;

  this._Rencoded = Array.isArray(sig.R) ? sig.R : sig.Rencoded;
  this._Sencoded = Array.isArray(sig.S) ? sig.S : sig.Sencoded;
}

cachedProperty(Signature, 'S', function S() {
  return this.eddsa.decodeInt(this.Sencoded());
});

cachedProperty(Signature, 'R', function R() {
  return this.eddsa.decodePoint(this.Rencoded());
});

cachedProperty(Signature, 'Rencoded', function Rencoded() {
  return this.eddsa.encodePoint(this.R());
});

cachedProperty(Signature, 'Sencoded', function Sencoded() {
  return this.eddsa.encodeInt(this.S());
});

Signature.prototype.toBytes = function toBytes() {
  return this.Rencoded().concat(this.Sencoded());
};

Signature.prototype.toHex = function toHex() {
  return utils.encode(this.toBytes(), 'hex').toUpperCase();
};

module.exports = Signature;

},{"../utils":87,"bn.js":21}],86:[function(require,module,exports){
module.exports = {
  doubles: {
    step: 4,
    points: [
      [
        'e60fce93b59e9ec53011aabc21c23e97b2a31369b87a5ae9c44ee89e2a6dec0a',
        'f7e3507399e595929db99f34f57937101296891e44d23f0be1f32cce69616821',
      ],
      [
        '8282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508',
        '11f8a8098557dfe45e8256e830b60ace62d613ac2f7b17bed31b6eaff6e26caf',
      ],
      [
        '175e159f728b865a72f99cc6c6fc846de0b93833fd2222ed73fce5b551e5b739',
        'd3506e0d9e3c79eba4ef97a51ff71f5eacb5955add24345c6efa6ffee9fed695',
      ],
      [
        '363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640',
        '4e273adfc732221953b445397f3363145b9a89008199ecb62003c7f3bee9de9',
      ],
      [
        '8b4b5f165df3c2be8c6244b5b745638843e4a781a15bcd1b69f79a55dffdf80c',
        '4aad0a6f68d308b4b3fbd7813ab0da04f9e336546162ee56b3eff0c65fd4fd36',
      ],
      [
        '723cbaa6e5db996d6bf771c00bd548c7b700dbffa6c0e77bcb6115925232fcda',
        '96e867b5595cc498a921137488824d6e2660a0653779494801dc069d9eb39f5f',
      ],
      [
        'eebfa4d493bebf98ba5feec812c2d3b50947961237a919839a533eca0e7dd7fa',
        '5d9a8ca3970ef0f269ee7edaf178089d9ae4cdc3a711f712ddfd4fdae1de8999',
      ],
      [
        '100f44da696e71672791d0a09b7bde459f1215a29b3c03bfefd7835b39a48db0',
        'cdd9e13192a00b772ec8f3300c090666b7ff4a18ff5195ac0fbd5cd62bc65a09',
      ],
      [
        'e1031be262c7ed1b1dc9227a4a04c017a77f8d4464f3b3852c8acde6e534fd2d',
        '9d7061928940405e6bb6a4176597535af292dd419e1ced79a44f18f29456a00d',
      ],
      [
        'feea6cae46d55b530ac2839f143bd7ec5cf8b266a41d6af52d5e688d9094696d',
        'e57c6b6c97dce1bab06e4e12bf3ecd5c981c8957cc41442d3155debf18090088',
      ],
      [
        'da67a91d91049cdcb367be4be6ffca3cfeed657d808583de33fa978bc1ec6cb1',
        '9bacaa35481642bc41f463f7ec9780e5dec7adc508f740a17e9ea8e27a68be1d',
      ],
      [
        '53904faa0b334cdda6e000935ef22151ec08d0f7bb11069f57545ccc1a37b7c0',
        '5bc087d0bc80106d88c9eccac20d3c1c13999981e14434699dcb096b022771c8',
      ],
      [
        '8e7bcd0bd35983a7719cca7764ca906779b53a043a9b8bcaeff959f43ad86047',
        '10b7770b2a3da4b3940310420ca9514579e88e2e47fd68b3ea10047e8460372a',
      ],
      [
        '385eed34c1cdff21e6d0818689b81bde71a7f4f18397e6690a841e1599c43862',
        '283bebc3e8ea23f56701de19e9ebf4576b304eec2086dc8cc0458fe5542e5453',
      ],
      [
        '6f9d9b803ecf191637c73a4413dfa180fddf84a5947fbc9c606ed86c3fac3a7',
        '7c80c68e603059ba69b8e2a30e45c4d47ea4dd2f5c281002d86890603a842160',
      ],
      [
        '3322d401243c4e2582a2147c104d6ecbf774d163db0f5e5313b7e0e742d0e6bd',
        '56e70797e9664ef5bfb019bc4ddaf9b72805f63ea2873af624f3a2e96c28b2a0',
      ],
      [
        '85672c7d2de0b7da2bd1770d89665868741b3f9af7643397721d74d28134ab83',
        '7c481b9b5b43b2eb6374049bfa62c2e5e77f17fcc5298f44c8e3094f790313a6',
      ],
      [
        '948bf809b1988a46b06c9f1919413b10f9226c60f668832ffd959af60c82a0a',
        '53a562856dcb6646dc6b74c5d1c3418c6d4dff08c97cd2bed4cb7f88d8c8e589',
      ],
      [
        '6260ce7f461801c34f067ce0f02873a8f1b0e44dfc69752accecd819f38fd8e8',
        'bc2da82b6fa5b571a7f09049776a1ef7ecd292238051c198c1a84e95b2b4ae17',
      ],
      [
        'e5037de0afc1d8d43d8348414bbf4103043ec8f575bfdc432953cc8d2037fa2d',
        '4571534baa94d3b5f9f98d09fb990bddbd5f5b03ec481f10e0e5dc841d755bda',
      ],
      [
        'e06372b0f4a207adf5ea905e8f1771b4e7e8dbd1c6a6c5b725866a0ae4fce725',
        '7a908974bce18cfe12a27bb2ad5a488cd7484a7787104870b27034f94eee31dd',
      ],
      [
        '213c7a715cd5d45358d0bbf9dc0ce02204b10bdde2a3f58540ad6908d0559754',
        '4b6dad0b5ae462507013ad06245ba190bb4850f5f36a7eeddff2c27534b458f2',
      ],
      [
        '4e7c272a7af4b34e8dbb9352a5419a87e2838c70adc62cddf0cc3a3b08fbd53c',
        '17749c766c9d0b18e16fd09f6def681b530b9614bff7dd33e0b3941817dcaae6',
      ],
      [
        'fea74e3dbe778b1b10f238ad61686aa5c76e3db2be43057632427e2840fb27b6',
        '6e0568db9b0b13297cf674deccb6af93126b596b973f7b77701d3db7f23cb96f',
      ],
      [
        '76e64113f677cf0e10a2570d599968d31544e179b760432952c02a4417bdde39',
        'c90ddf8dee4e95cf577066d70681f0d35e2a33d2b56d2032b4b1752d1901ac01',
      ],
      [
        'c738c56b03b2abe1e8281baa743f8f9a8f7cc643df26cbee3ab150242bcbb891',
        '893fb578951ad2537f718f2eacbfbbbb82314eef7880cfe917e735d9699a84c3',
      ],
      [
        'd895626548b65b81e264c7637c972877d1d72e5f3a925014372e9f6588f6c14b',
        'febfaa38f2bc7eae728ec60818c340eb03428d632bb067e179363ed75d7d991f',
      ],
      [
        'b8da94032a957518eb0f6433571e8761ceffc73693e84edd49150a564f676e03',
        '2804dfa44805a1e4d7c99cc9762808b092cc584d95ff3b511488e4e74efdf6e7',
      ],
      [
        'e80fea14441fb33a7d8adab9475d7fab2019effb5156a792f1a11778e3c0df5d',
        'eed1de7f638e00771e89768ca3ca94472d155e80af322ea9fcb4291b6ac9ec78',
      ],
      [
        'a301697bdfcd704313ba48e51d567543f2a182031efd6915ddc07bbcc4e16070',
        '7370f91cfb67e4f5081809fa25d40f9b1735dbf7c0a11a130c0d1a041e177ea1',
      ],
      [
        '90ad85b389d6b936463f9d0512678de208cc330b11307fffab7ac63e3fb04ed4',
        'e507a3620a38261affdcbd9427222b839aefabe1582894d991d4d48cb6ef150',
      ],
      [
        '8f68b9d2f63b5f339239c1ad981f162ee88c5678723ea3351b7b444c9ec4c0da',
        '662a9f2dba063986de1d90c2b6be215dbbea2cfe95510bfdf23cbf79501fff82',
      ],
      [
        'e4f3fb0176af85d65ff99ff9198c36091f48e86503681e3e6686fd5053231e11',
        '1e63633ad0ef4f1c1661a6d0ea02b7286cc7e74ec951d1c9822c38576feb73bc',
      ],
      [
        '8c00fa9b18ebf331eb961537a45a4266c7034f2f0d4e1d0716fb6eae20eae29e',
        'efa47267fea521a1a9dc343a3736c974c2fadafa81e36c54e7d2a4c66702414b',
      ],
      [
        'e7a26ce69dd4829f3e10cec0a9e98ed3143d084f308b92c0997fddfc60cb3e41',
        '2a758e300fa7984b471b006a1aafbb18d0a6b2c0420e83e20e8a9421cf2cfd51',
      ],
      [
        'b6459e0ee3662ec8d23540c223bcbdc571cbcb967d79424f3cf29eb3de6b80ef',
        '67c876d06f3e06de1dadf16e5661db3c4b3ae6d48e35b2ff30bf0b61a71ba45',
      ],
      [
        'd68a80c8280bb840793234aa118f06231d6f1fc67e73c5a5deda0f5b496943e8',
        'db8ba9fff4b586d00c4b1f9177b0e28b5b0e7b8f7845295a294c84266b133120',
      ],
      [
        '324aed7df65c804252dc0270907a30b09612aeb973449cea4095980fc28d3d5d',
        '648a365774b61f2ff130c0c35aec1f4f19213b0c7e332843967224af96ab7c84',
      ],
      [
        '4df9c14919cde61f6d51dfdbe5fee5dceec4143ba8d1ca888e8bd373fd054c96',
        '35ec51092d8728050974c23a1d85d4b5d506cdc288490192ebac06cad10d5d',
      ],
      [
        '9c3919a84a474870faed8a9c1cc66021523489054d7f0308cbfc99c8ac1f98cd',
        'ddb84f0f4a4ddd57584f044bf260e641905326f76c64c8e6be7e5e03d4fc599d',
      ],
      [
        '6057170b1dd12fdf8de05f281d8e06bb91e1493a8b91d4cc5a21382120a959e5',
        '9a1af0b26a6a4807add9a2daf71df262465152bc3ee24c65e899be932385a2a8',
      ],
      [
        'a576df8e23a08411421439a4518da31880cef0fba7d4df12b1a6973eecb94266',
        '40a6bf20e76640b2c92b97afe58cd82c432e10a7f514d9f3ee8be11ae1b28ec8',
      ],
      [
        '7778a78c28dec3e30a05fe9629de8c38bb30d1f5cf9a3a208f763889be58ad71',
        '34626d9ab5a5b22ff7098e12f2ff580087b38411ff24ac563b513fc1fd9f43ac',
      ],
      [
        '928955ee637a84463729fd30e7afd2ed5f96274e5ad7e5cb09eda9c06d903ac',
        'c25621003d3f42a827b78a13093a95eeac3d26efa8a8d83fc5180e935bcd091f',
      ],
      [
        '85d0fef3ec6db109399064f3a0e3b2855645b4a907ad354527aae75163d82751',
        '1f03648413a38c0be29d496e582cf5663e8751e96877331582c237a24eb1f962',
      ],
      [
        'ff2b0dce97eece97c1c9b6041798b85dfdfb6d8882da20308f5404824526087e',
        '493d13fef524ba188af4c4dc54d07936c7b7ed6fb90e2ceb2c951e01f0c29907',
      ],
      [
        '827fbbe4b1e880ea9ed2b2e6301b212b57f1ee148cd6dd28780e5e2cf856e241',
        'c60f9c923c727b0b71bef2c67d1d12687ff7a63186903166d605b68baec293ec',
      ],
      [
        'eaa649f21f51bdbae7be4ae34ce6e5217a58fdce7f47f9aa7f3b58fa2120e2b3',
        'be3279ed5bbbb03ac69a80f89879aa5a01a6b965f13f7e59d47a5305ba5ad93d',
      ],
      [
        'e4a42d43c5cf169d9391df6decf42ee541b6d8f0c9a137401e23632dda34d24f',
        '4d9f92e716d1c73526fc99ccfb8ad34ce886eedfa8d8e4f13a7f7131deba9414',
      ],
      [
        '1ec80fef360cbdd954160fadab352b6b92b53576a88fea4947173b9d4300bf19',
        'aeefe93756b5340d2f3a4958a7abbf5e0146e77f6295a07b671cdc1cc107cefd',
      ],
      [
        '146a778c04670c2f91b00af4680dfa8bce3490717d58ba889ddb5928366642be',
        'b318e0ec3354028add669827f9d4b2870aaa971d2f7e5ed1d0b297483d83efd0',
      ],
      [
        'fa50c0f61d22e5f07e3acebb1aa07b128d0012209a28b9776d76a8793180eef9',
        '6b84c6922397eba9b72cd2872281a68a5e683293a57a213b38cd8d7d3f4f2811',
      ],
      [
        'da1d61d0ca721a11b1a5bf6b7d88e8421a288ab5d5bba5220e53d32b5f067ec2',
        '8157f55a7c99306c79c0766161c91e2966a73899d279b48a655fba0f1ad836f1',
      ],
      [
        'a8e282ff0c9706907215ff98e8fd416615311de0446f1e062a73b0610d064e13',
        '7f97355b8db81c09abfb7f3c5b2515888b679a3e50dd6bd6cef7c73111f4cc0c',
      ],
      [
        '174a53b9c9a285872d39e56e6913cab15d59b1fa512508c022f382de8319497c',
        'ccc9dc37abfc9c1657b4155f2c47f9e6646b3a1d8cb9854383da13ac079afa73',
      ],
      [
        '959396981943785c3d3e57edf5018cdbe039e730e4918b3d884fdff09475b7ba',
        '2e7e552888c331dd8ba0386a4b9cd6849c653f64c8709385e9b8abf87524f2fd',
      ],
      [
        'd2a63a50ae401e56d645a1153b109a8fcca0a43d561fba2dbb51340c9d82b151',
        'e82d86fb6443fcb7565aee58b2948220a70f750af484ca52d4142174dcf89405',
      ],
      [
        '64587e2335471eb890ee7896d7cfdc866bacbdbd3839317b3436f9b45617e073',
        'd99fcdd5bf6902e2ae96dd6447c299a185b90a39133aeab358299e5e9faf6589',
      ],
      [
        '8481bde0e4e4d885b3a546d3e549de042f0aa6cea250e7fd358d6c86dd45e458',
        '38ee7b8cba5404dd84a25bf39cecb2ca900a79c42b262e556d64b1b59779057e',
      ],
      [
        '13464a57a78102aa62b6979ae817f4637ffcfed3c4b1ce30bcd6303f6caf666b',
        '69be159004614580ef7e433453ccb0ca48f300a81d0942e13f495a907f6ecc27',
      ],
      [
        'bc4a9df5b713fe2e9aef430bcc1dc97a0cd9ccede2f28588cada3a0d2d83f366',
        'd3a81ca6e785c06383937adf4b798caa6e8a9fbfa547b16d758d666581f33c1',
      ],
      [
        '8c28a97bf8298bc0d23d8c749452a32e694b65e30a9472a3954ab30fe5324caa',
        '40a30463a3305193378fedf31f7cc0eb7ae784f0451cb9459e71dc73cbef9482',
      ],
      [
        '8ea9666139527a8c1dd94ce4f071fd23c8b350c5a4bb33748c4ba111faccae0',
        '620efabbc8ee2782e24e7c0cfb95c5d735b783be9cf0f8e955af34a30e62b945',
      ],
      [
        'dd3625faef5ba06074669716bbd3788d89bdde815959968092f76cc4eb9a9787',
        '7a188fa3520e30d461da2501045731ca941461982883395937f68d00c644a573',
      ],
      [
        'f710d79d9eb962297e4f6232b40e8f7feb2bc63814614d692c12de752408221e',
        'ea98e67232d3b3295d3b535532115ccac8612c721851617526ae47a9c77bfc82',
      ],
    ],
  },
  naf: {
    wnd: 7,
    points: [
      [
        'f9308a019258c31049344f85f89d5229b531c845836f99b08601f113bce036f9',
        '388f7b0f632de8140fe337e62a37f3566500a99934c2231b6cb9fd7584b8e672',
      ],
      [
        '2f8bde4d1a07209355b4a7250a5c5128e88b84bddc619ab7cba8d569b240efe4',
        'd8ac222636e5e3d6d4dba9dda6c9c426f788271bab0d6840dca87d3aa6ac62d6',
      ],
      [
        '5cbdf0646e5db4eaa398f365f2ea7a0e3d419b7e0330e39ce92bddedcac4f9bc',
        '6aebca40ba255960a3178d6d861a54dba813d0b813fde7b5a5082628087264da',
      ],
      [
        'acd484e2f0c7f65309ad178a9f559abde09796974c57e714c35f110dfc27ccbe',
        'cc338921b0a7d9fd64380971763b61e9add888a4375f8e0f05cc262ac64f9c37',
      ],
      [
        '774ae7f858a9411e5ef4246b70c65aac5649980be5c17891bbec17895da008cb',
        'd984a032eb6b5e190243dd56d7b7b365372db1e2dff9d6a8301d74c9c953c61b',
      ],
      [
        'f28773c2d975288bc7d1d205c3748651b075fbc6610e58cddeeddf8f19405aa8',
        'ab0902e8d880a89758212eb65cdaf473a1a06da521fa91f29b5cb52db03ed81',
      ],
      [
        'd7924d4f7d43ea965a465ae3095ff41131e5946f3c85f79e44adbcf8e27e080e',
        '581e2872a86c72a683842ec228cc6defea40af2bd896d3a5c504dc9ff6a26b58',
      ],
      [
        'defdea4cdb677750a420fee807eacf21eb9898ae79b9768766e4faa04a2d4a34',
        '4211ab0694635168e997b0ead2a93daeced1f4a04a95c0f6cfb199f69e56eb77',
      ],
      [
        '2b4ea0a797a443d293ef5cff444f4979f06acfebd7e86d277475656138385b6c',
        '85e89bc037945d93b343083b5a1c86131a01f60c50269763b570c854e5c09b7a',
      ],
      [
        '352bbf4a4cdd12564f93fa332ce333301d9ad40271f8107181340aef25be59d5',
        '321eb4075348f534d59c18259dda3e1f4a1b3b2e71b1039c67bd3d8bcf81998c',
      ],
      [
        '2fa2104d6b38d11b0230010559879124e42ab8dfeff5ff29dc9cdadd4ecacc3f',
        '2de1068295dd865b64569335bd5dd80181d70ecfc882648423ba76b532b7d67',
      ],
      [
        '9248279b09b4d68dab21a9b066edda83263c3d84e09572e269ca0cd7f5453714',
        '73016f7bf234aade5d1aa71bdea2b1ff3fc0de2a887912ffe54a32ce97cb3402',
      ],
      [
        'daed4f2be3a8bf278e70132fb0beb7522f570e144bf615c07e996d443dee8729',
        'a69dce4a7d6c98e8d4a1aca87ef8d7003f83c230f3afa726ab40e52290be1c55',
      ],
      [
        'c44d12c7065d812e8acf28d7cbb19f9011ecd9e9fdf281b0e6a3b5e87d22e7db',
        '2119a460ce326cdc76c45926c982fdac0e106e861edf61c5a039063f0e0e6482',
      ],
      [
        '6a245bf6dc698504c89a20cfded60853152b695336c28063b61c65cbd269e6b4',
        'e022cf42c2bd4a708b3f5126f16a24ad8b33ba48d0423b6efd5e6348100d8a82',
      ],
      [
        '1697ffa6fd9de627c077e3d2fe541084ce13300b0bec1146f95ae57f0d0bd6a5',
        'b9c398f186806f5d27561506e4557433a2cf15009e498ae7adee9d63d01b2396',
      ],
      [
        '605bdb019981718b986d0f07e834cb0d9deb8360ffb7f61df982345ef27a7479',
        '2972d2de4f8d20681a78d93ec96fe23c26bfae84fb14db43b01e1e9056b8c49',
      ],
      [
        '62d14dab4150bf497402fdc45a215e10dcb01c354959b10cfe31c7e9d87ff33d',
        '80fc06bd8cc5b01098088a1950eed0db01aa132967ab472235f5642483b25eaf',
      ],
      [
        '80c60ad0040f27dade5b4b06c408e56b2c50e9f56b9b8b425e555c2f86308b6f',
        '1c38303f1cc5c30f26e66bad7fe72f70a65eed4cbe7024eb1aa01f56430bd57a',
      ],
      [
        '7a9375ad6167ad54aa74c6348cc54d344cc5dc9487d847049d5eabb0fa03c8fb',
        'd0e3fa9eca8726909559e0d79269046bdc59ea10c70ce2b02d499ec224dc7f7',
      ],
      [
        'd528ecd9b696b54c907a9ed045447a79bb408ec39b68df504bb51f459bc3ffc9',
        'eecf41253136e5f99966f21881fd656ebc4345405c520dbc063465b521409933',
      ],
      [
        '49370a4b5f43412ea25f514e8ecdad05266115e4a7ecb1387231808f8b45963',
        '758f3f41afd6ed428b3081b0512fd62a54c3f3afbb5b6764b653052a12949c9a',
      ],
      [
        '77f230936ee88cbbd73df930d64702ef881d811e0e1498e2f1c13eb1fc345d74',
        '958ef42a7886b6400a08266e9ba1b37896c95330d97077cbbe8eb3c7671c60d6',
      ],
      [
        'f2dac991cc4ce4b9ea44887e5c7c0bce58c80074ab9d4dbaeb28531b7739f530',
        'e0dedc9b3b2f8dad4da1f32dec2531df9eb5fbeb0598e4fd1a117dba703a3c37',
      ],
      [
        '463b3d9f662621fb1b4be8fbbe2520125a216cdfc9dae3debcba4850c690d45b',
        '5ed430d78c296c3543114306dd8622d7c622e27c970a1de31cb377b01af7307e',
      ],
      [
        'f16f804244e46e2a09232d4aff3b59976b98fac14328a2d1a32496b49998f247',
        'cedabd9b82203f7e13d206fcdf4e33d92a6c53c26e5cce26d6579962c4e31df6',
      ],
      [
        'caf754272dc84563b0352b7a14311af55d245315ace27c65369e15f7151d41d1',
        'cb474660ef35f5f2a41b643fa5e460575f4fa9b7962232a5c32f908318a04476',
      ],
      [
        '2600ca4b282cb986f85d0f1709979d8b44a09c07cb86d7c124497bc86f082120',
        '4119b88753c15bd6a693b03fcddbb45d5ac6be74ab5f0ef44b0be9475a7e4b40',
      ],
      [
        '7635ca72d7e8432c338ec53cd12220bc01c48685e24f7dc8c602a7746998e435',
        '91b649609489d613d1d5e590f78e6d74ecfc061d57048bad9e76f302c5b9c61',
      ],
      [
        '754e3239f325570cdbbf4a87deee8a66b7f2b33479d468fbc1a50743bf56cc18',
        '673fb86e5bda30fb3cd0ed304ea49a023ee33d0197a695d0c5d98093c536683',
      ],
      [
        'e3e6bd1071a1e96aff57859c82d570f0330800661d1c952f9fe2694691d9b9e8',
        '59c9e0bba394e76f40c0aa58379a3cb6a5a2283993e90c4167002af4920e37f5',
      ],
      [
        '186b483d056a033826ae73d88f732985c4ccb1f32ba35f4b4cc47fdcf04aa6eb',
        '3b952d32c67cf77e2e17446e204180ab21fb8090895138b4a4a797f86e80888b',
      ],
      [
        'df9d70a6b9876ce544c98561f4be4f725442e6d2b737d9c91a8321724ce0963f',
        '55eb2dafd84d6ccd5f862b785dc39d4ab157222720ef9da217b8c45cf2ba2417',
      ],
      [
        '5edd5cc23c51e87a497ca815d5dce0f8ab52554f849ed8995de64c5f34ce7143',
        'efae9c8dbc14130661e8cec030c89ad0c13c66c0d17a2905cdc706ab7399a868',
      ],
      [
        '290798c2b6476830da12fe02287e9e777aa3fba1c355b17a722d362f84614fba',
        'e38da76dcd440621988d00bcf79af25d5b29c094db2a23146d003afd41943e7a',
      ],
      [
        'af3c423a95d9f5b3054754efa150ac39cd29552fe360257362dfdecef4053b45',
        'f98a3fd831eb2b749a93b0e6f35cfb40c8cd5aa667a15581bc2feded498fd9c6',
      ],
      [
        '766dbb24d134e745cccaa28c99bf274906bb66b26dcf98df8d2fed50d884249a',
        '744b1152eacbe5e38dcc887980da38b897584a65fa06cedd2c924f97cbac5996',
      ],
      [
        '59dbf46f8c94759ba21277c33784f41645f7b44f6c596a58ce92e666191abe3e',
        'c534ad44175fbc300f4ea6ce648309a042ce739a7919798cd85e216c4a307f6e',
      ],
      [
        'f13ada95103c4537305e691e74e9a4a8dd647e711a95e73cb62dc6018cfd87b8',
        'e13817b44ee14de663bf4bc808341f326949e21a6a75c2570778419bdaf5733d',
      ],
      [
        '7754b4fa0e8aced06d4167a2c59cca4cda1869c06ebadfb6488550015a88522c',
        '30e93e864e669d82224b967c3020b8fa8d1e4e350b6cbcc537a48b57841163a2',
      ],
      [
        '948dcadf5990e048aa3874d46abef9d701858f95de8041d2a6828c99e2262519',
        'e491a42537f6e597d5d28a3224b1bc25df9154efbd2ef1d2cbba2cae5347d57e',
      ],
      [
        '7962414450c76c1689c7b48f8202ec37fb224cf5ac0bfa1570328a8a3d7c77ab',
        '100b610ec4ffb4760d5c1fc133ef6f6b12507a051f04ac5760afa5b29db83437',
      ],
      [
        '3514087834964b54b15b160644d915485a16977225b8847bb0dd085137ec47ca',
        'ef0afbb2056205448e1652c48e8127fc6039e77c15c2378b7e7d15a0de293311',
      ],
      [
        'd3cc30ad6b483e4bc79ce2c9dd8bc54993e947eb8df787b442943d3f7b527eaf',
        '8b378a22d827278d89c5e9be8f9508ae3c2ad46290358630afb34db04eede0a4',
      ],
      [
        '1624d84780732860ce1c78fcbfefe08b2b29823db913f6493975ba0ff4847610',
        '68651cf9b6da903e0914448c6cd9d4ca896878f5282be4c8cc06e2a404078575',
      ],
      [
        '733ce80da955a8a26902c95633e62a985192474b5af207da6df7b4fd5fc61cd4',
        'f5435a2bd2badf7d485a4d8b8db9fcce3e1ef8e0201e4578c54673bc1dc5ea1d',
      ],
      [
        '15d9441254945064cf1a1c33bbd3b49f8966c5092171e699ef258dfab81c045c',
        'd56eb30b69463e7234f5137b73b84177434800bacebfc685fc37bbe9efe4070d',
      ],
      [
        'a1d0fcf2ec9de675b612136e5ce70d271c21417c9d2b8aaaac138599d0717940',
        'edd77f50bcb5a3cab2e90737309667f2641462a54070f3d519212d39c197a629',
      ],
      [
        'e22fbe15c0af8ccc5780c0735f84dbe9a790badee8245c06c7ca37331cb36980',
        'a855babad5cd60c88b430a69f53a1a7a38289154964799be43d06d77d31da06',
      ],
      [
        '311091dd9860e8e20ee13473c1155f5f69635e394704eaa74009452246cfa9b3',
        '66db656f87d1f04fffd1f04788c06830871ec5a64feee685bd80f0b1286d8374',
      ],
      [
        '34c1fd04d301be89b31c0442d3e6ac24883928b45a9340781867d4232ec2dbdf',
        '9414685e97b1b5954bd46f730174136d57f1ceeb487443dc5321857ba73abee',
      ],
      [
        'f219ea5d6b54701c1c14de5b557eb42a8d13f3abbcd08affcc2a5e6b049b8d63',
        '4cb95957e83d40b0f73af4544cccf6b1f4b08d3c07b27fb8d8c2962a400766d1',
      ],
      [
        'd7b8740f74a8fbaab1f683db8f45de26543a5490bca627087236912469a0b448',
        'fa77968128d9c92ee1010f337ad4717eff15db5ed3c049b3411e0315eaa4593b',
      ],
      [
        '32d31c222f8f6f0ef86f7c98d3a3335ead5bcd32abdd94289fe4d3091aa824bf',
        '5f3032f5892156e39ccd3d7915b9e1da2e6dac9e6f26e961118d14b8462e1661',
      ],
      [
        '7461f371914ab32671045a155d9831ea8793d77cd59592c4340f86cbc18347b5',
        '8ec0ba238b96bec0cbdddcae0aa442542eee1ff50c986ea6b39847b3cc092ff6',
      ],
      [
        'ee079adb1df1860074356a25aa38206a6d716b2c3e67453d287698bad7b2b2d6',
        '8dc2412aafe3be5c4c5f37e0ecc5f9f6a446989af04c4e25ebaac479ec1c8c1e',
      ],
      [
        '16ec93e447ec83f0467b18302ee620f7e65de331874c9dc72bfd8616ba9da6b5',
        '5e4631150e62fb40d0e8c2a7ca5804a39d58186a50e497139626778e25b0674d',
      ],
      [
        'eaa5f980c245f6f038978290afa70b6bd8855897f98b6aa485b96065d537bd99',
        'f65f5d3e292c2e0819a528391c994624d784869d7e6ea67fb18041024edc07dc',
      ],
      [
        '78c9407544ac132692ee1910a02439958ae04877151342ea96c4b6b35a49f51',
        'f3e0319169eb9b85d5404795539a5e68fa1fbd583c064d2462b675f194a3ddb4',
      ],
      [
        '494f4be219a1a77016dcd838431aea0001cdc8ae7a6fc688726578d9702857a5',
        '42242a969283a5f339ba7f075e36ba2af925ce30d767ed6e55f4b031880d562c',
      ],
      [
        'a598a8030da6d86c6bc7f2f5144ea549d28211ea58faa70ebf4c1e665c1fe9b5',
        '204b5d6f84822c307e4b4a7140737aec23fc63b65b35f86a10026dbd2d864e6b',
      ],
      [
        'c41916365abb2b5d09192f5f2dbeafec208f020f12570a184dbadc3e58595997',
        '4f14351d0087efa49d245b328984989d5caf9450f34bfc0ed16e96b58fa9913',
      ],
      [
        '841d6063a586fa475a724604da03bc5b92a2e0d2e0a36acfe4c73a5514742881',
        '73867f59c0659e81904f9a1c7543698e62562d6744c169ce7a36de01a8d6154',
      ],
      [
        '5e95bb399a6971d376026947f89bde2f282b33810928be4ded112ac4d70e20d5',
        '39f23f366809085beebfc71181313775a99c9aed7d8ba38b161384c746012865',
      ],
      [
        '36e4641a53948fd476c39f8a99fd974e5ec07564b5315d8bf99471bca0ef2f66',
        'd2424b1b1abe4eb8164227b085c9aa9456ea13493fd563e06fd51cf5694c78fc',
      ],
      [
        '336581ea7bfbbb290c191a2f507a41cf5643842170e914faeab27c2c579f726',
        'ead12168595fe1be99252129b6e56b3391f7ab1410cd1e0ef3dcdcabd2fda224',
      ],
      [
        '8ab89816dadfd6b6a1f2634fcf00ec8403781025ed6890c4849742706bd43ede',
        '6fdcef09f2f6d0a044e654aef624136f503d459c3e89845858a47a9129cdd24e',
      ],
      [
        '1e33f1a746c9c5778133344d9299fcaa20b0938e8acff2544bb40284b8c5fb94',
        '60660257dd11b3aa9c8ed618d24edff2306d320f1d03010e33a7d2057f3b3b6',
      ],
      [
        '85b7c1dcb3cec1b7ee7f30ded79dd20a0ed1f4cc18cbcfcfa410361fd8f08f31',
        '3d98a9cdd026dd43f39048f25a8847f4fcafad1895d7a633c6fed3c35e999511',
      ],
      [
        '29df9fbd8d9e46509275f4b125d6d45d7fbe9a3b878a7af872a2800661ac5f51',
        'b4c4fe99c775a606e2d8862179139ffda61dc861c019e55cd2876eb2a27d84b',
      ],
      [
        'a0b1cae06b0a847a3fea6e671aaf8adfdfe58ca2f768105c8082b2e449fce252',
        'ae434102edde0958ec4b19d917a6a28e6b72da1834aff0e650f049503a296cf2',
      ],
      [
        '4e8ceafb9b3e9a136dc7ff67e840295b499dfb3b2133e4ba113f2e4c0e121e5',
        'cf2174118c8b6d7a4b48f6d534ce5c79422c086a63460502b827ce62a326683c',
      ],
      [
        'd24a44e047e19b6f5afb81c7ca2f69080a5076689a010919f42725c2b789a33b',
        '6fb8d5591b466f8fc63db50f1c0f1c69013f996887b8244d2cdec417afea8fa3',
      ],
      [
        'ea01606a7a6c9cdd249fdfcfacb99584001edd28abbab77b5104e98e8e3b35d4',
        '322af4908c7312b0cfbfe369f7a7b3cdb7d4494bc2823700cfd652188a3ea98d',
      ],
      [
        'af8addbf2b661c8a6c6328655eb96651252007d8c5ea31be4ad196de8ce2131f',
        '6749e67c029b85f52a034eafd096836b2520818680e26ac8f3dfbcdb71749700',
      ],
      [
        'e3ae1974566ca06cc516d47e0fb165a674a3dabcfca15e722f0e3450f45889',
        '2aeabe7e4531510116217f07bf4d07300de97e4874f81f533420a72eeb0bd6a4',
      ],
      [
        '591ee355313d99721cf6993ffed1e3e301993ff3ed258802075ea8ced397e246',
        'b0ea558a113c30bea60fc4775460c7901ff0b053d25ca2bdeee98f1a4be5d196',
      ],
      [
        '11396d55fda54c49f19aa97318d8da61fa8584e47b084945077cf03255b52984',
        '998c74a8cd45ac01289d5833a7beb4744ff536b01b257be4c5767bea93ea57a4',
      ],
      [
        '3c5d2a1ba39c5a1790000738c9e0c40b8dcdfd5468754b6405540157e017aa7a',
        'b2284279995a34e2f9d4de7396fc18b80f9b8b9fdd270f6661f79ca4c81bd257',
      ],
      [
        'cc8704b8a60a0defa3a99a7299f2e9c3fbc395afb04ac078425ef8a1793cc030',
        'bdd46039feed17881d1e0862db347f8cf395b74fc4bcdc4e940b74e3ac1f1b13',
      ],
      [
        'c533e4f7ea8555aacd9777ac5cad29b97dd4defccc53ee7ea204119b2889b197',
        '6f0a256bc5efdf429a2fb6242f1a43a2d9b925bb4a4b3a26bb8e0f45eb596096',
      ],
      [
        'c14f8f2ccb27d6f109f6d08d03cc96a69ba8c34eec07bbcf566d48e33da6593',
        'c359d6923bb398f7fd4473e16fe1c28475b740dd098075e6c0e8649113dc3a38',
      ],
      [
        'a6cbc3046bc6a450bac24789fa17115a4c9739ed75f8f21ce441f72e0b90e6ef',
        '21ae7f4680e889bb130619e2c0f95a360ceb573c70603139862afd617fa9b9f',
      ],
      [
        '347d6d9a02c48927ebfb86c1359b1caf130a3c0267d11ce6344b39f99d43cc38',
        '60ea7f61a353524d1c987f6ecec92f086d565ab687870cb12689ff1e31c74448',
      ],
      [
        'da6545d2181db8d983f7dcb375ef5866d47c67b1bf31c8cf855ef7437b72656a',
        '49b96715ab6878a79e78f07ce5680c5d6673051b4935bd897fea824b77dc208a',
      ],
      [
        'c40747cc9d012cb1a13b8148309c6de7ec25d6945d657146b9d5994b8feb1111',
        '5ca560753be2a12fc6de6caf2cb489565db936156b9514e1bb5e83037e0fa2d4',
      ],
      [
        '4e42c8ec82c99798ccf3a610be870e78338c7f713348bd34c8203ef4037f3502',
        '7571d74ee5e0fb92a7a8b33a07783341a5492144cc54bcc40a94473693606437',
      ],
      [
        '3775ab7089bc6af823aba2e1af70b236d251cadb0c86743287522a1b3b0dedea',
        'be52d107bcfa09d8bcb9736a828cfa7fac8db17bf7a76a2c42ad961409018cf7',
      ],
      [
        'cee31cbf7e34ec379d94fb814d3d775ad954595d1314ba8846959e3e82f74e26',
        '8fd64a14c06b589c26b947ae2bcf6bfa0149ef0be14ed4d80f448a01c43b1c6d',
      ],
      [
        'b4f9eaea09b6917619f6ea6a4eb5464efddb58fd45b1ebefcdc1a01d08b47986',
        '39e5c9925b5a54b07433a4f18c61726f8bb131c012ca542eb24a8ac07200682a',
      ],
      [
        'd4263dfc3d2df923a0179a48966d30ce84e2515afc3dccc1b77907792ebcc60e',
        '62dfaf07a0f78feb30e30d6295853ce189e127760ad6cf7fae164e122a208d54',
      ],
      [
        '48457524820fa65a4f8d35eb6930857c0032acc0a4a2de422233eeda897612c4',
        '25a748ab367979d98733c38a1fa1c2e7dc6cc07db2d60a9ae7a76aaa49bd0f77',
      ],
      [
        'dfeeef1881101f2cb11644f3a2afdfc2045e19919152923f367a1767c11cceda',
        'ecfb7056cf1de042f9420bab396793c0c390bde74b4bbdff16a83ae09a9a7517',
      ],
      [
        '6d7ef6b17543f8373c573f44e1f389835d89bcbc6062ced36c82df83b8fae859',
        'cd450ec335438986dfefa10c57fea9bcc521a0959b2d80bbf74b190dca712d10',
      ],
      [
        'e75605d59102a5a2684500d3b991f2e3f3c88b93225547035af25af66e04541f',
        'f5c54754a8f71ee540b9b48728473e314f729ac5308b06938360990e2bfad125',
      ],
      [
        'eb98660f4c4dfaa06a2be453d5020bc99a0c2e60abe388457dd43fefb1ed620c',
        '6cb9a8876d9cb8520609af3add26cd20a0a7cd8a9411131ce85f44100099223e',
      ],
      [
        '13e87b027d8514d35939f2e6892b19922154596941888336dc3563e3b8dba942',
        'fef5a3c68059a6dec5d624114bf1e91aac2b9da568d6abeb2570d55646b8adf1',
      ],
      [
        'ee163026e9fd6fe017c38f06a5be6fc125424b371ce2708e7bf4491691e5764a',
        '1acb250f255dd61c43d94ccc670d0f58f49ae3fa15b96623e5430da0ad6c62b2',
      ],
      [
        'b268f5ef9ad51e4d78de3a750c2dc89b1e626d43505867999932e5db33af3d80',
        '5f310d4b3c99b9ebb19f77d41c1dee018cf0d34fd4191614003e945a1216e423',
      ],
      [
        'ff07f3118a9df035e9fad85eb6c7bfe42b02f01ca99ceea3bf7ffdba93c4750d',
        '438136d603e858a3a5c440c38eccbaddc1d2942114e2eddd4740d098ced1f0d8',
      ],
      [
        '8d8b9855c7c052a34146fd20ffb658bea4b9f69e0d825ebec16e8c3ce2b526a1',
        'cdb559eedc2d79f926baf44fb84ea4d44bcf50fee51d7ceb30e2e7f463036758',
      ],
      [
        '52db0b5384dfbf05bfa9d472d7ae26dfe4b851ceca91b1eba54263180da32b63',
        'c3b997d050ee5d423ebaf66a6db9f57b3180c902875679de924b69d84a7b375',
      ],
      [
        'e62f9490d3d51da6395efd24e80919cc7d0f29c3f3fa48c6fff543becbd43352',
        '6d89ad7ba4876b0b22c2ca280c682862f342c8591f1daf5170e07bfd9ccafa7d',
      ],
      [
        '7f30ea2476b399b4957509c88f77d0191afa2ff5cb7b14fd6d8e7d65aaab1193',
        'ca5ef7d4b231c94c3b15389a5f6311e9daff7bb67b103e9880ef4bff637acaec',
      ],
      [
        '5098ff1e1d9f14fb46a210fada6c903fef0fb7b4a1dd1d9ac60a0361800b7a00',
        '9731141d81fc8f8084d37c6e7542006b3ee1b40d60dfe5362a5b132fd17ddc0',
      ],
      [
        '32b78c7de9ee512a72895be6b9cbefa6e2f3c4ccce445c96b9f2c81e2778ad58',
        'ee1849f513df71e32efc3896ee28260c73bb80547ae2275ba497237794c8753c',
      ],
      [
        'e2cb74fddc8e9fbcd076eef2a7c72b0ce37d50f08269dfc074b581550547a4f7',
        'd3aa2ed71c9dd2247a62df062736eb0baddea9e36122d2be8641abcb005cc4a4',
      ],
      [
        '8438447566d4d7bedadc299496ab357426009a35f235cb141be0d99cd10ae3a8',
        'c4e1020916980a4da5d01ac5e6ad330734ef0d7906631c4f2390426b2edd791f',
      ],
      [
        '4162d488b89402039b584c6fc6c308870587d9c46f660b878ab65c82c711d67e',
        '67163e903236289f776f22c25fb8a3afc1732f2b84b4e95dbda47ae5a0852649',
      ],
      [
        '3fad3fa84caf0f34f0f89bfd2dcf54fc175d767aec3e50684f3ba4a4bf5f683d',
        'cd1bc7cb6cc407bb2f0ca647c718a730cf71872e7d0d2a53fa20efcdfe61826',
      ],
      [
        '674f2600a3007a00568c1a7ce05d0816c1fb84bf1370798f1c69532faeb1a86b',
        '299d21f9413f33b3edf43b257004580b70db57da0b182259e09eecc69e0d38a5',
      ],
      [
        'd32f4da54ade74abb81b815ad1fb3b263d82d6c692714bcff87d29bd5ee9f08f',
        'f9429e738b8e53b968e99016c059707782e14f4535359d582fc416910b3eea87',
      ],
      [
        '30e4e670435385556e593657135845d36fbb6931f72b08cb1ed954f1e3ce3ff6',
        '462f9bce619898638499350113bbc9b10a878d35da70740dc695a559eb88db7b',
      ],
      [
        'be2062003c51cc3004682904330e4dee7f3dcd10b01e580bf1971b04d4cad297',
        '62188bc49d61e5428573d48a74e1c655b1c61090905682a0d5558ed72dccb9bc',
      ],
      [
        '93144423ace3451ed29e0fb9ac2af211cb6e84a601df5993c419859fff5df04a',
        '7c10dfb164c3425f5c71a3f9d7992038f1065224f72bb9d1d902a6d13037b47c',
      ],
      [
        'b015f8044f5fcbdcf21ca26d6c34fb8197829205c7b7d2a7cb66418c157b112c',
        'ab8c1e086d04e813744a655b2df8d5f83b3cdc6faa3088c1d3aea1454e3a1d5f',
      ],
      [
        'd5e9e1da649d97d89e4868117a465a3a4f8a18de57a140d36b3f2af341a21b52',
        '4cb04437f391ed73111a13cc1d4dd0db1693465c2240480d8955e8592f27447a',
      ],
      [
        'd3ae41047dd7ca065dbf8ed77b992439983005cd72e16d6f996a5316d36966bb',
        'bd1aeb21ad22ebb22a10f0303417c6d964f8cdd7df0aca614b10dc14d125ac46',
      ],
      [
        '463e2763d885f958fc66cdd22800f0a487197d0a82e377b49f80af87c897b065',
        'bfefacdb0e5d0fd7df3a311a94de062b26b80c61fbc97508b79992671ef7ca7f',
      ],
      [
        '7985fdfd127c0567c6f53ec1bb63ec3158e597c40bfe747c83cddfc910641917',
        '603c12daf3d9862ef2b25fe1de289aed24ed291e0ec6708703a5bd567f32ed03',
      ],
      [
        '74a1ad6b5f76e39db2dd249410eac7f99e74c59cb83d2d0ed5ff1543da7703e9',
        'cc6157ef18c9c63cd6193d83631bbea0093e0968942e8c33d5737fd790e0db08',
      ],
      [
        '30682a50703375f602d416664ba19b7fc9bab42c72747463a71d0896b22f6da3',
        '553e04f6b018b4fa6c8f39e7f311d3176290d0e0f19ca73f17714d9977a22ff8',
      ],
      [
        '9e2158f0d7c0d5f26c3791efefa79597654e7a2b2464f52b1ee6c1347769ef57',
        '712fcdd1b9053f09003a3481fa7762e9ffd7c8ef35a38509e2fbf2629008373',
      ],
      [
        '176e26989a43c9cfeba4029c202538c28172e566e3c4fce7322857f3be327d66',
        'ed8cc9d04b29eb877d270b4878dc43c19aefd31f4eee09ee7b47834c1fa4b1c3',
      ],
      [
        '75d46efea3771e6e68abb89a13ad747ecf1892393dfc4f1b7004788c50374da8',
        '9852390a99507679fd0b86fd2b39a868d7efc22151346e1a3ca4726586a6bed8',
      ],
      [
        '809a20c67d64900ffb698c4c825f6d5f2310fb0451c869345b7319f645605721',
        '9e994980d9917e22b76b061927fa04143d096ccc54963e6a5ebfa5f3f8e286c1',
      ],
      [
        '1b38903a43f7f114ed4500b4eac7083fdefece1cf29c63528d563446f972c180',
        '4036edc931a60ae889353f77fd53de4a2708b26b6f5da72ad3394119daf408f9',
      ],
    ],
  },
};

},{}],87:[function(require,module,exports){
'use strict';

var utils = exports;
var BN = require('bn.js');
var minAssert = require('minimalistic-assert');
var minUtils = require('minimalistic-crypto-utils');

utils.assert = minAssert;
utils.toArray = minUtils.toArray;
utils.zero2 = minUtils.zero2;
utils.toHex = minUtils.toHex;
utils.encode = minUtils.encode;

// Represent num in a w-NAF form
function getNAF(num, w, bits) {
  var naf = new Array(Math.max(num.bitLength(), bits) + 1);
  naf.fill(0);

  var ws = 1 << (w + 1);
  var k = num.clone();

  for (var i = 0; i < naf.length; i++) {
    var z;
    var mod = k.andln(ws - 1);
    if (k.isOdd()) {
      if (mod > (ws >> 1) - 1)
        z = (ws >> 1) - mod;
      else
        z = mod;
      k.isubn(z);
    } else {
      z = 0;
    }

    naf[i] = z;
    k.iushrn(1);
  }

  return naf;
}
utils.getNAF = getNAF;

// Represent k1, k2 in a Joint Sparse Form
function getJSF(k1, k2) {
  var jsf = [
    [],
    [],
  ];

  k1 = k1.clone();
  k2 = k2.clone();
  var d1 = 0;
  var d2 = 0;
  var m8;
  while (k1.cmpn(-d1) > 0 || k2.cmpn(-d2) > 0) {
    // First phase
    var m14 = (k1.andln(3) + d1) & 3;
    var m24 = (k2.andln(3) + d2) & 3;
    if (m14 === 3)
      m14 = -1;
    if (m24 === 3)
      m24 = -1;
    var u1;
    if ((m14 & 1) === 0) {
      u1 = 0;
    } else {
      m8 = (k1.andln(7) + d1) & 7;
      if ((m8 === 3 || m8 === 5) && m24 === 2)
        u1 = -m14;
      else
        u1 = m14;
    }
    jsf[0].push(u1);

    var u2;
    if ((m24 & 1) === 0) {
      u2 = 0;
    } else {
      m8 = (k2.andln(7) + d2) & 7;
      if ((m8 === 3 || m8 === 5) && m14 === 2)
        u2 = -m24;
      else
        u2 = m24;
    }
    jsf[1].push(u2);

    // Second phase
    if (2 * d1 === u1 + 1)
      d1 = 1 - d1;
    if (2 * d2 === u2 + 1)
      d2 = 1 - d2;
    k1.iushrn(1);
    k2.iushrn(1);
  }

  return jsf;
}
utils.getJSF = getJSF;

function cachedProperty(obj, name, computer) {
  var key = '_' + name;
  obj.prototype[name] = function cachedProperty() {
    return this[key] !== undefined ? this[key] :
      this[key] = computer.call(this);
  };
}
utils.cachedProperty = cachedProperty;

function parseBytes(bytes) {
  return typeof bytes === 'string' ? utils.toArray(bytes, 'hex') :
    bytes;
}
utils.parseBytes = parseBytes;

function intFromLE(bytes) {
  return new BN(bytes, 'hex', 'le');
}
utils.intFromLE = intFromLE;


},{"bn.js":21,"minimalistic-assert":123,"minimalistic-crypto-utils":124}],88:[function(require,module,exports){
module.exports={
  "name": "elliptic",
  "version": "6.5.4",
  "description": "EC cryptography",
  "main": "lib/elliptic.js",
  "files": [
    "lib"
  ],
  "scripts": {
    "lint": "eslint lib test",
    "lint:fix": "npm run lint -- --fix",
    "unit": "istanbul test _mocha --reporter=spec test/index.js",
    "test": "npm run lint && npm run unit",
    "version": "grunt dist && git add dist/"
  },
  "repository": {
    "type": "git",
    "url": "git@github.com:indutny/elliptic"
  },
  "keywords": [
    "EC",
    "Elliptic",
    "curve",
    "Cryptography"
  ],
  "author": "Fedor Indutny <fedor@indutny.com>",
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/indutny/elliptic/issues"
  },
  "homepage": "https://github.com/indutny/elliptic",
  "devDependencies": {
    "brfs": "^2.0.2",
    "coveralls": "^3.1.0",
    "eslint": "^7.6.0",
    "grunt": "^1.2.1",
    "grunt-browserify": "^5.3.0",
    "grunt-cli": "^1.3.2",
    "grunt-contrib-connect": "^3.0.0",
    "grunt-contrib-copy": "^1.0.0",
    "grunt-contrib-uglify": "^5.0.0",
    "grunt-mocha-istanbul": "^5.0.2",
    "grunt-saucelabs": "^9.0.1",
    "istanbul": "^0.4.5",
    "mocha": "^8.0.1"
  },
  "dependencies": {
    "bn.js": "^4.11.9",
    "brorand": "^1.1.0",
    "hash.js": "^1.0.0",
    "hmac-drbg": "^1.0.1",
    "inherits": "^2.0.4",
    "minimalistic-assert": "^1.0.1",
    "minimalistic-crypto-utils": "^1.0.1"
  }
}

},{}],89:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

'use strict';

var R = typeof Reflect === 'object' ? Reflect : null
var ReflectApply = R && typeof R.apply === 'function'
  ? R.apply
  : function ReflectApply(target, receiver, args) {
    return Function.prototype.apply.call(target, receiver, args);
  }

var ReflectOwnKeys
if (R && typeof R.ownKeys === 'function') {
  ReflectOwnKeys = R.ownKeys
} else if (Object.getOwnPropertySymbols) {
  ReflectOwnKeys = function ReflectOwnKeys(target) {
    return Object.getOwnPropertyNames(target)
      .concat(Object.getOwnPropertySymbols(target));
  };
} else {
  ReflectOwnKeys = function ReflectOwnKeys(target) {
    return Object.getOwnPropertyNames(target);
  };
}

function ProcessEmitWarning(warning) {
  if (console && console.warn) console.warn(warning);
}

var NumberIsNaN = Number.isNaN || function NumberIsNaN(value) {
  return value !== value;
}

function EventEmitter() {
  EventEmitter.init.call(this);
}
module.exports = EventEmitter;
module.exports.once = once;

// Backwards-compat with node 0.10.x
EventEmitter.EventEmitter = EventEmitter;

EventEmitter.prototype._events = undefined;
EventEmitter.prototype._eventsCount = 0;
EventEmitter.prototype._maxListeners = undefined;

// By default EventEmitters will print a warning if more than 10 listeners are
// added to it. This is a useful default which helps finding memory leaks.
var defaultMaxListeners = 10;

function checkListener(listener) {
  if (typeof listener !== 'function') {
    throw new TypeError('The "listener" argument must be of type Function. Received type ' + typeof listener);
  }
}

Object.defineProperty(EventEmitter, 'defaultMaxListeners', {
  enumerable: true,
  get: function() {
    return defaultMaxListeners;
  },
  set: function(arg) {
    if (typeof arg !== 'number' || arg < 0 || NumberIsNaN(arg)) {
      throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received ' + arg + '.');
    }
    defaultMaxListeners = arg;
  }
});

EventEmitter.init = function() {

  if (this._events === undefined ||
      this._events === Object.getPrototypeOf(this)._events) {
    this._events = Object.create(null);
    this._eventsCount = 0;
  }

  this._maxListeners = this._maxListeners || undefined;
};

// Obviously not all Emitters should be limited to 10. This function allows
// that to be increased. Set to zero for unlimited.
EventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {
  if (typeof n !== 'number' || n < 0 || NumberIsNaN(n)) {
    throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received ' + n + '.');
  }
  this._maxListeners = n;
  return this;
};

function _getMaxListeners(that) {
  if (that._maxListeners === undefined)
    return EventEmitter.defaultMaxListeners;
  return that._maxListeners;
}

EventEmitter.prototype.getMaxListeners = function getMaxListeners() {
  return _getMaxListeners(this);
};

EventEmitter.prototype.emit = function emit(type) {
  var args = [];
  for (var i = 1; i < arguments.length; i++) args.push(arguments[i]);
  var doError = (type === 'error');

  var events = this._events;
  if (events !== undefined)
    doError = (doError && events.error === undefined);
  else if (!doError)
    return false;

  // If there is no 'error' event listener then throw.
  if (doError) {
    var er;
    if (args.length > 0)
      er = args[0];
    if (er instanceof Error) {
      // Note: The comments on the `throw` lines are intentional, they show
      // up in Node's output if this results in an unhandled exception.
      throw er; // Unhandled 'error' event
    }
    // At least give some kind of context to the user
    var err = new Error('Unhandled error.' + (er ? ' (' + er.message + ')' : ''));
    err.context = er;
    throw err; // Unhandled 'error' event
  }

  var handler = events[type];

  if (handler === undefined)
    return false;

  if (typeof handler === 'function') {
    ReflectApply(handler, this, args);
  } else {
    var len = handler.length;
    var listeners = arrayClone(handler, len);
    for (var i = 0; i < len; ++i)
      ReflectApply(listeners[i], this, args);
  }

  return true;
};

function _addListener(target, type, listener, prepend) {
  var m;
  var events;
  var existing;

  checkListener(listener);

  events = target._events;
  if (events === undefined) {
    events = target._events = Object.create(null);
    target._eventsCount = 0;
  } else {
    // To avoid recursion in the case that type === "newListener"! Before
    // adding it to the listeners, first emit "newListener".
    if (events.newListener !== undefined) {
      target.emit('newListener', type,
                  listener.listener ? listener.listener : listener);

      // Re-assign `events` because a newListener handler could have caused the
      // this._events to be assigned to a new object
      events = target._events;
    }
    existing = events[type];
  }

  if (existing === undefined) {
    // Optimize the case of one listener. Don't need the extra array object.
    existing = events[type] = listener;
    ++target._eventsCount;
  } else {
    if (typeof existing === 'function') {
      // Adding the second element, need to change to array.
      existing = events[type] =
        prepend ? [listener, existing] : [existing, listener];
      // If we've already got an array, just append.
    } else if (prepend) {
      existing.unshift(listener);
    } else {
      existing.push(listener);
    }

    // Check for listener leak
    m = _getMaxListeners(target);
    if (m > 0 && existing.length > m && !existing.warned) {
      existing.warned = true;
      // No error code for this since it is a Warning
      // eslint-disable-next-line no-restricted-syntax
      var w = new Error('Possible EventEmitter memory leak detected. ' +
                          existing.length + ' ' + String(type) + ' listeners ' +
                          'added. Use emitter.setMaxListeners() to ' +
                          'increase limit');
      w.name = 'MaxListenersExceededWarning';
      w.emitter = target;
      w.type = type;
      w.count = existing.length;
      ProcessEmitWarning(w);
    }
  }

  return target;
}

EventEmitter.prototype.addListener = function addListener(type, listener) {
  return _addListener(this, type, listener, false);
};

EventEmitter.prototype.on = EventEmitter.prototype.addListener;

EventEmitter.prototype.prependListener =
    function prependListener(type, listener) {
      return _addListener(this, type, listener, true);
    };

function onceWrapper() {
  if (!this.fired) {
    this.target.removeListener(this.type, this.wrapFn);
    this.fired = true;
    if (arguments.length === 0)
      return this.listener.call(this.target);
    return this.listener.apply(this.target, arguments);
  }
}

function _onceWrap(target, type, listener) {
  var state = { fired: false, wrapFn: undefined, target: target, type: type, listener: listener };
  var wrapped = onceWrapper.bind(state);
  wrapped.listener = listener;
  state.wrapFn = wrapped;
  return wrapped;
}

EventEmitter.prototype.once = function once(type, listener) {
  checkListener(listener);
  this.on(type, _onceWrap(this, type, listener));
  return this;
};

EventEmitter.prototype.prependOnceListener =
    function prependOnceListener(type, listener) {
      checkListener(listener);
      this.prependListener(type, _onceWrap(this, type, listener));
      return this;
    };

// Emits a 'removeListener' event if and only if the listener was removed.
EventEmitter.prototype.removeListener =
    function removeListener(type, listener) {
      var list, events, position, i, originalListener;

      checkListener(listener);

      events = this._events;
      if (events === undefined)
        return this;

      list = events[type];
      if (list === undefined)
        return this;

      if (list === listener || list.listener === listener) {
        if (--this._eventsCount === 0)
          this._events = Object.create(null);
        else {
          delete events[type];
          if (events.removeListener)
            this.emit('removeListener', type, list.listener || listener);
        }
      } else if (typeof list !== 'function') {
        position = -1;

        for (i = list.length - 1; i >= 0; i--) {
          if (list[i] === listener || list[i].listener === listener) {
            originalListener = list[i].listener;
            position = i;
            break;
          }
        }

        if (position < 0)
          return this;

        if (position === 0)
          list.shift();
        else {
          spliceOne(list, position);
        }

        if (list.length === 1)
          events[type] = list[0];

        if (events.removeListener !== undefined)
          this.emit('removeListener', type, originalListener || listener);
      }

      return this;
    };

EventEmitter.prototype.off = EventEmitter.prototype.removeListener;

EventEmitter.prototype.removeAllListeners =
    function removeAllListeners(type) {
      var listeners, events, i;

      events = this._events;
      if (events === undefined)
        return this;

      // not listening for removeListener, no need to emit
      if (events.removeListener === undefined) {
        if (arguments.length === 0) {
          this._events = Object.create(null);
          this._eventsCount = 0;
        } else if (events[type] !== undefined) {
          if (--this._eventsCount === 0)
            this._events = Object.create(null);
          else
            delete events[type];
        }
        return this;
      }

      // emit removeListener for all listeners on all events
      if (arguments.length === 0) {
        var keys = Object.keys(events);
        var key;
        for (i = 0; i < keys.length; ++i) {
          key = keys[i];
          if (key === 'removeListener') continue;
          this.removeAllListeners(key);
        }
        this.removeAllListeners('removeListener');
        this._events = Object.create(null);
        this._eventsCount = 0;
        return this;
      }

      listeners = events[type];

      if (typeof listeners === 'function') {
        this.removeListener(type, listeners);
      } else if (listeners !== undefined) {
        // LIFO order
        for (i = listeners.length - 1; i >= 0; i--) {
          this.removeListener(type, listeners[i]);
        }
      }

      return this;
    };

function _listeners(target, type, unwrap) {
  var events = target._events;

  if (events === undefined)
    return [];

  var evlistener = events[type];
  if (evlistener === undefined)
    return [];

  if (typeof evlistener === 'function')
    return unwrap ? [evlistener.listener || evlistener] : [evlistener];

  return unwrap ?
    unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);
}

EventEmitter.prototype.listeners = function listeners(type) {
  return _listeners(this, type, true);
};

EventEmitter.prototype.rawListeners = function rawListeners(type) {
  return _listeners(this, type, false);
};

EventEmitter.listenerCount = function(emitter, type) {
  if (typeof emitter.listenerCount === 'function') {
    return emitter.listenerCount(type);
  } else {
    return listenerCount.call(emitter, type);
  }
};

EventEmitter.prototype.listenerCount = listenerCount;
function listenerCount(type) {
  var events = this._events;

  if (events !== undefined) {
    var evlistener = events[type];

    if (typeof evlistener === 'function') {
      return 1;
    } else if (evlistener !== undefined) {
      return evlistener.length;
    }
  }

  return 0;
}

EventEmitter.prototype.eventNames = function eventNames() {
  return this._eventsCount > 0 ? ReflectOwnKeys(this._events) : [];
};

function arrayClone(arr, n) {
  var copy = new Array(n);
  for (var i = 0; i < n; ++i)
    copy[i] = arr[i];
  return copy;
}

function spliceOne(list, index) {
  for (; index + 1 < list.length; index++)
    list[index] = list[index + 1];
  list.pop();
}

function unwrapListeners(arr) {
  var ret = new Array(arr.length);
  for (var i = 0; i < ret.length; ++i) {
    ret[i] = arr[i].listener || arr[i];
  }
  return ret;
}

function once(emitter, name) {
  return new Promise(function (resolve, reject) {
    function errorListener(err) {
      emitter.removeListener(name, resolver);
      reject(err);
    }

    function resolver() {
      if (typeof emitter.removeListener === 'function') {
        emitter.removeListener('error', errorListener);
      }
      resolve([].slice.call(arguments));
    };

    eventTargetAgnosticAddListener(emitter, name, resolver, { once: true });
    if (name !== 'error') {
      addErrorHandlerIfEventEmitter(emitter, errorListener, { once: true });
    }
  });
}

function addErrorHandlerIfEventEmitter(emitter, handler, flags) {
  if (typeof emitter.on === 'function') {
    eventTargetAgnosticAddListener(emitter, 'error', handler, flags);
  }
}

function eventTargetAgnosticAddListener(emitter, name, listener, flags) {
  if (typeof emitter.on === 'function') {
    if (flags.once) {
      emitter.once(name, listener);
    } else {
      emitter.on(name, listener);
    }
  } else if (typeof emitter.addEventListener === 'function') {
    // EventTarget does not have `error` event semantics like Node
    // EventEmitters, we do not listen for `error` events here.
    emitter.addEventListener(name, function wrapListener(arg) {
      // IE does not have builtin `{ once: true }` support so we
      // have to do it manually.
      if (flags.once) {
        emitter.removeEventListener(name, wrapListener);
      }
      listener(arg);
    });
  } else {
    throw new TypeError('The "emitter" argument must be of type EventEmitter. Received type ' + typeof emitter);
  }
}

},{}],90:[function(require,module,exports){
var Buffer = require('safe-buffer').Buffer
var MD5 = require('md5.js')

/* eslint-disable camelcase */
function EVP_BytesToKey (password, salt, keyBits, ivLen) {
  if (!Buffer.isBuffer(password)) password = Buffer.from(password, 'binary')
  if (salt) {
    if (!Buffer.isBuffer(salt)) salt = Buffer.from(salt, 'binary')
    if (salt.length !== 8) throw new RangeError('salt should be Buffer with 8 byte length')
  }

  var keyLen = keyBits / 8
  var key = Buffer.alloc(keyLen)
  var iv = Buffer.alloc(ivLen || 0)
  var tmp = Buffer.alloc(0)

  while (keyLen > 0 || ivLen > 0) {
    var hash = new MD5()
    hash.update(tmp)
    hash.update(password)
    if (salt) hash.update(salt)
    tmp = hash.digest()

    var used = 0

    if (keyLen > 0) {
      var keyStart = key.length - keyLen
      used = Math.min(keyLen, tmp.length)
      tmp.copy(key, keyStart, 0, used)
      keyLen -= used
    }

    if (used < tmp.length && ivLen > 0) {
      var ivStart = iv.length - ivLen
      var length = Math.min(ivLen, tmp.length - used)
      tmp.copy(iv, ivStart, used, used + length)
      ivLen -= length
    }
  }

  tmp.fill(0)
  return { key: key, iv: iv }
}

module.exports = EVP_BytesToKey

},{"md5.js":121,"safe-buffer":161}],91:[function(require,module,exports){
'use strict';

var isCallable = require('is-callable');

var toStr = Object.prototype.toString;
var hasOwnProperty = Object.prototype.hasOwnProperty;

var forEachArray = function forEachArray(array, iterator, receiver) {
    for (var i = 0, len = array.length; i < len; i++) {
        if (hasOwnProperty.call(array, i)) {
            if (receiver == null) {
                iterator(array[i], i, array);
            } else {
                iterator.call(receiver, array[i], i, array);
            }
        }
    }
};

var forEachString = function forEachString(string, iterator, receiver) {
    for (var i = 0, len = string.length; i < len; i++) {
        // no such thing as a sparse string.
        if (receiver == null) {
            iterator(string.charAt(i), i, string);
        } else {
            iterator.call(receiver, string.charAt(i), i, string);
        }
    }
};

var forEachObject = function forEachObject(object, iterator, receiver) {
    for (var k in object) {
        if (hasOwnProperty.call(object, k)) {
            if (receiver == null) {
                iterator(object[k], k, object);
            } else {
                iterator.call(receiver, object[k], k, object);
            }
        }
    }
};

var forEach = function forEach(list, iterator, thisArg) {
    if (!isCallable(iterator)) {
        throw new TypeError('iterator must be a function');
    }

    var receiver;
    if (arguments.length >= 3) {
        receiver = thisArg;
    }

    if (toStr.call(list) === '[object Array]') {
        forEachArray(list, iterator, receiver);
    } else if (typeof list === 'string') {
        forEachString(list, iterator, receiver);
    } else {
        forEachObject(list, iterator, receiver);
    }
};

module.exports = forEach;

},{"is-callable":118}],92:[function(require,module,exports){
'use strict';

/* eslint no-invalid-this: 1 */

var ERROR_MESSAGE = 'Function.prototype.bind called on incompatible ';
var slice = Array.prototype.slice;
var toStr = Object.prototype.toString;
var funcType = '[object Function]';

module.exports = function bind(that) {
    var target = this;
    if (typeof target !== 'function' || toStr.call(target) !== funcType) {
        throw new TypeError(ERROR_MESSAGE + target);
    }
    var args = slice.call(arguments, 1);

    var bound;
    var binder = function () {
        if (this instanceof bound) {
            var result = target.apply(
                this,
                args.concat(slice.call(arguments))
            );
            if (Object(result) === result) {
                return result;
            }
            return this;
        } else {
            return target.apply(
                that,
                args.concat(slice.call(arguments))
            );
        }
    };

    var boundLength = Math.max(0, target.length - args.length);
    var boundArgs = [];
    for (var i = 0; i < boundLength; i++) {
        boundArgs.push('$' + i);
    }

    bound = Function('binder', 'return function (' + boundArgs.join(',') + '){ return binder.apply(this,arguments); }')(binder);

    if (target.prototype) {
        var Empty = function Empty() {};
        Empty.prototype = target.prototype;
        bound.prototype = new Empty();
        Empty.prototype = null;
    }

    return bound;
};

},{}],93:[function(require,module,exports){
'use strict';

var implementation = require('./implementation');

module.exports = Function.prototype.bind || implementation;

},{"./implementation":92}],94:[function(require,module,exports){
'use strict';

var undefined;

var $SyntaxError = SyntaxError;
var $Function = Function;
var $TypeError = TypeError;

// eslint-disable-next-line consistent-return
var getEvalledConstructor = function (expressionSyntax) {
	try {
		return $Function('"use strict"; return (' + expressionSyntax + ').constructor;')();
	} catch (e) {}
};

var $gOPD = Object.getOwnPropertyDescriptor;
if ($gOPD) {
	try {
		$gOPD({}, '');
	} catch (e) {
		$gOPD = null; // this is IE 8, which has a broken gOPD
	}
}

var throwTypeError = function () {
	throw new $TypeError();
};
var ThrowTypeError = $gOPD
	? (function () {
		try {
			// eslint-disable-next-line no-unused-expressions, no-caller, no-restricted-properties
			arguments.callee; // IE 8 does not throw here
			return throwTypeError;
		} catch (calleeThrows) {
			try {
				// IE 8 throws on Object.getOwnPropertyDescriptor(arguments, '')
				return $gOPD(arguments, 'callee').get;
			} catch (gOPDthrows) {
				return throwTypeError;
			}
		}
	}())
	: throwTypeError;

var hasSymbols = require('has-symbols')();

var getProto = Object.getPrototypeOf || function (x) { return x.__proto__; }; // eslint-disable-line no-proto

var needsEval = {};

var TypedArray = typeof Uint8Array === 'undefined' ? undefined : getProto(Uint8Array);

var INTRINSICS = {
	'%AggregateError%': typeof AggregateError === 'undefined' ? undefined : AggregateError,
	'%Array%': Array,
	'%ArrayBuffer%': typeof ArrayBuffer === 'undefined' ? undefined : ArrayBuffer,
	'%ArrayIteratorPrototype%': hasSymbols ? getProto([][Symbol.iterator]()) : undefined,
	'%AsyncFromSyncIteratorPrototype%': undefined,
	'%AsyncFunction%': needsEval,
	'%AsyncGenerator%': needsEval,
	'%AsyncGeneratorFunction%': needsEval,
	'%AsyncIteratorPrototype%': needsEval,
	'%Atomics%': typeof Atomics === 'undefined' ? undefined : Atomics,
	'%BigInt%': typeof BigInt === 'undefined' ? undefined : BigInt,
	'%BigInt64Array%': typeof BigInt64Array === 'undefined' ? undefined : BigInt64Array,
	'%BigUint64Array%': typeof BigUint64Array === 'undefined' ? undefined : BigUint64Array,
	'%Boolean%': Boolean,
	'%DataView%': typeof DataView === 'undefined' ? undefined : DataView,
	'%Date%': Date,
	'%decodeURI%': decodeURI,
	'%decodeURIComponent%': decodeURIComponent,
	'%encodeURI%': encodeURI,
	'%encodeURIComponent%': encodeURIComponent,
	'%Error%': Error,
	'%eval%': eval, // eslint-disable-line no-eval
	'%EvalError%': EvalError,
	'%Float32Array%': typeof Float32Array === 'undefined' ? undefined : Float32Array,
	'%Float64Array%': typeof Float64Array === 'undefined' ? undefined : Float64Array,
	'%FinalizationRegistry%': typeof FinalizationRegistry === 'undefined' ? undefined : FinalizationRegistry,
	'%Function%': $Function,
	'%GeneratorFunction%': needsEval,
	'%Int8Array%': typeof Int8Array === 'undefined' ? undefined : Int8Array,
	'%Int16Array%': typeof Int16Array === 'undefined' ? undefined : Int16Array,
	'%Int32Array%': typeof Int32Array === 'undefined' ? undefined : Int32Array,
	'%isFinite%': isFinite,
	'%isNaN%': isNaN,
	'%IteratorPrototype%': hasSymbols ? getProto(getProto([][Symbol.iterator]())) : undefined,
	'%JSON%': typeof JSON === 'object' ? JSON : undefined,
	'%Map%': typeof Map === 'undefined' ? undefined : Map,
	'%MapIteratorPrototype%': typeof Map === 'undefined' || !hasSymbols ? undefined : getProto(new Map()[Symbol.iterator]()),
	'%Math%': Math,
	'%Number%': Number,
	'%Object%': Object,
	'%parseFloat%': parseFloat,
	'%parseInt%': parseInt,
	'%Promise%': typeof Promise === 'undefined' ? undefined : Promise,
	'%Proxy%': typeof Proxy === 'undefined' ? undefined : Proxy,
	'%RangeError%': RangeError,
	'%ReferenceError%': ReferenceError,
	'%Reflect%': typeof Reflect === 'undefined' ? undefined : Reflect,
	'%RegExp%': RegExp,
	'%Set%': typeof Set === 'undefined' ? undefined : Set,
	'%SetIteratorPrototype%': typeof Set === 'undefined' || !hasSymbols ? undefined : getProto(new Set()[Symbol.iterator]()),
	'%SharedArrayBuffer%': typeof SharedArrayBuffer === 'undefined' ? undefined : SharedArrayBuffer,
	'%String%': String,
	'%StringIteratorPrototype%': hasSymbols ? getProto(''[Symbol.iterator]()) : undefined,
	'%Symbol%': hasSymbols ? Symbol : undefined,
	'%SyntaxError%': $SyntaxError,
	'%ThrowTypeError%': ThrowTypeError,
	'%TypedArray%': TypedArray,
	'%TypeError%': $TypeError,
	'%Uint8Array%': typeof Uint8Array === 'undefined' ? undefined : Uint8Array,
	'%Uint8ClampedArray%': typeof Uint8ClampedArray === 'undefined' ? undefined : Uint8ClampedArray,
	'%Uint16Array%': typeof Uint16Array === 'undefined' ? undefined : Uint16Array,
	'%Uint32Array%': typeof Uint32Array === 'undefined' ? undefined : Uint32Array,
	'%URIError%': URIError,
	'%WeakMap%': typeof WeakMap === 'undefined' ? undefined : WeakMap,
	'%WeakRef%': typeof WeakRef === 'undefined' ? undefined : WeakRef,
	'%WeakSet%': typeof WeakSet === 'undefined' ? undefined : WeakSet
};

try {
	null.error; // eslint-disable-line no-unused-expressions
} catch (e) {
	// https://github.com/tc39/proposal-shadowrealm/pull/384#issuecomment-1364264229
	var errorProto = getProto(getProto(e));
	INTRINSICS['%Error.prototype%'] = errorProto;
}

var doEval = function doEval(name) {
	var value;
	if (name === '%AsyncFunction%') {
		value = getEvalledConstructor('async function () {}');
	} else if (name === '%GeneratorFunction%') {
		value = getEvalledConstructor('function* () {}');
	} else if (name === '%AsyncGeneratorFunction%') {
		value = getEvalledConstructor('async function* () {}');
	} else if (name === '%AsyncGenerator%') {
		var fn = doEval('%AsyncGeneratorFunction%');
		if (fn) {
			value = fn.prototype;
		}
	} else if (name === '%AsyncIteratorPrototype%') {
		var gen = doEval('%AsyncGenerator%');
		if (gen) {
			value = getProto(gen.prototype);
		}
	}

	INTRINSICS[name] = value;

	return value;
};

var LEGACY_ALIASES = {
	'%ArrayBufferPrototype%': ['ArrayBuffer', 'prototype'],
	'%ArrayPrototype%': ['Array', 'prototype'],
	'%ArrayProto_entries%': ['Array', 'prototype', 'entries'],
	'%ArrayProto_forEach%': ['Array', 'prototype', 'forEach'],
	'%ArrayProto_keys%': ['Array', 'prototype', 'keys'],
	'%ArrayProto_values%': ['Array', 'prototype', 'values'],
	'%AsyncFunctionPrototype%': ['AsyncFunction', 'prototype'],
	'%AsyncGenerator%': ['AsyncGeneratorFunction', 'prototype'],
	'%AsyncGeneratorPrototype%': ['AsyncGeneratorFunction', 'prototype', 'prototype'],
	'%BooleanPrototype%': ['Boolean', 'prototype'],
	'%DataViewPrototype%': ['DataView', 'prototype'],
	'%DatePrototype%': ['Date', 'prototype'],
	'%ErrorPrototype%': ['Error', 'prototype'],
	'%EvalErrorPrototype%': ['EvalError', 'prototype'],
	'%Float32ArrayPrototype%': ['Float32Array', 'prototype'],
	'%Float64ArrayPrototype%': ['Float64Array', 'prototype'],
	'%FunctionPrototype%': ['Function', 'prototype'],
	'%Generator%': ['GeneratorFunction', 'prototype'],
	'%GeneratorPrototype%': ['GeneratorFunction', 'prototype', 'prototype'],
	'%Int8ArrayPrototype%': ['Int8Array', 'prototype'],
	'%Int16ArrayPrototype%': ['Int16Array', 'prototype'],
	'%Int32ArrayPrototype%': ['Int32Array', 'prototype'],
	'%JSONParse%': ['JSON', 'parse'],
	'%JSONStringify%': ['JSON', 'stringify'],
	'%MapPrototype%': ['Map', 'prototype'],
	'%NumberPrototype%': ['Number', 'prototype'],
	'%ObjectPrototype%': ['Object', 'prototype'],
	'%ObjProto_toString%': ['Object', 'prototype', 'toString'],
	'%ObjProto_valueOf%': ['Object', 'prototype', 'valueOf'],
	'%PromisePrototype%': ['Promise', 'prototype'],
	'%PromiseProto_then%': ['Promise', 'prototype', 'then'],
	'%Promise_all%': ['Promise', 'all'],
	'%Promise_reject%': ['Promise', 'reject'],
	'%Promise_resolve%': ['Promise', 'resolve'],
	'%RangeErrorPrototype%': ['RangeError', 'prototype'],
	'%ReferenceErrorPrototype%': ['ReferenceError', 'prototype'],
	'%RegExpPrototype%': ['RegExp', 'prototype'],
	'%SetPrototype%': ['Set', 'prototype'],
	'%SharedArrayBufferPrototype%': ['SharedArrayBuffer', 'prototype'],
	'%StringPrototype%': ['String', 'prototype'],
	'%SymbolPrototype%': ['Symbol', 'prototype'],
	'%SyntaxErrorPrototype%': ['SyntaxError', 'prototype'],
	'%TypedArrayPrototype%': ['TypedArray', 'prototype'],
	'%TypeErrorPrototype%': ['TypeError', 'prototype'],
	'%Uint8ArrayPrototype%': ['Uint8Array', 'prototype'],
	'%Uint8ClampedArrayPrototype%': ['Uint8ClampedArray', 'prototype'],
	'%Uint16ArrayPrototype%': ['Uint16Array', 'prototype'],
	'%Uint32ArrayPrototype%': ['Uint32Array', 'prototype'],
	'%URIErrorPrototype%': ['URIError', 'prototype'],
	'%WeakMapPrototype%': ['WeakMap', 'prototype'],
	'%WeakSetPrototype%': ['WeakSet', 'prototype']
};

var bind = require('function-bind');
var hasOwn = require('has');
var $concat = bind.call(Function.call, Array.prototype.concat);
var $spliceApply = bind.call(Function.apply, Array.prototype.splice);
var $replace = bind.call(Function.call, String.prototype.replace);
var $strSlice = bind.call(Function.call, String.prototype.slice);
var $exec = bind.call(Function.call, RegExp.prototype.exec);

/* adapted from https://github.com/lodash/lodash/blob/4.17.15/dist/lodash.js#L6735-L6744 */
var rePropName = /[^%.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|%$))/g;
var reEscapeChar = /\\(\\)?/g; /** Used to match backslashes in property paths. */
var stringToPath = function stringToPath(string) {
	var first = $strSlice(string, 0, 1);
	var last = $strSlice(string, -1);
	if (first === '%' && last !== '%') {
		throw new $SyntaxError('invalid intrinsic syntax, expected closing `%`');
	} else if (last === '%' && first !== '%') {
		throw new $SyntaxError('invalid intrinsic syntax, expected opening `%`');
	}
	var result = [];
	$replace(string, rePropName, function (match, number, quote, subString) {
		result[result.length] = quote ? $replace(subString, reEscapeChar, '$1') : number || match;
	});
	return result;
};
/* end adaptation */

var getBaseIntrinsic = function getBaseIntrinsic(name, allowMissing) {
	var intrinsicName = name;
	var alias;
	if (hasOwn(LEGACY_ALIASES, intrinsicName)) {
		alias = LEGACY_ALIASES[intrinsicName];
		intrinsicName = '%' + alias[0] + '%';
	}

	if (hasOwn(INTRINSICS, intrinsicName)) {
		var value = INTRINSICS[intrinsicName];
		if (value === needsEval) {
			value = doEval(intrinsicName);
		}
		if (typeof value === 'undefined' && !allowMissing) {
			throw new $TypeError('intrinsic ' + name + ' exists, but is not available. Please file an issue!');
		}

		return {
			alias: alias,
			name: intrinsicName,
			value: value
		};
	}

	throw new $SyntaxError('intrinsic ' + name + ' does not exist!');
};

module.exports = function GetIntrinsic(name, allowMissing) {
	if (typeof name !== 'string' || name.length === 0) {
		throw new $TypeError('intrinsic name must be a non-empty string');
	}
	if (arguments.length > 1 && typeof allowMissing !== 'boolean') {
		throw new $TypeError('"allowMissing" argument must be a boolean');
	}

	if ($exec(/^%?[^%]*%?$/, name) === null) {
		throw new $SyntaxError('`%` may not be present anywhere but at the beginning and end of the intrinsic name');
	}
	var parts = stringToPath(name);
	var intrinsicBaseName = parts.length > 0 ? parts[0] : '';

	var intrinsic = getBaseIntrinsic('%' + intrinsicBaseName + '%', allowMissing);
	var intrinsicRealName = intrinsic.name;
	var value = intrinsic.value;
	var skipFurtherCaching = false;

	var alias = intrinsic.alias;
	if (alias) {
		intrinsicBaseName = alias[0];
		$spliceApply(parts, $concat([0, 1], alias));
	}

	for (var i = 1, isOwn = true; i < parts.length; i += 1) {
		var part = parts[i];
		var first = $strSlice(part, 0, 1);
		var last = $strSlice(part, -1);
		if (
			(
				(first === '"' || first === "'" || first === '`')
				|| (last === '"' || last === "'" || last === '`')
			)
			&& first !== last
		) {
			throw new $SyntaxError('property names with quotes must have matching quotes');
		}
		if (part === 'constructor' || !isOwn) {
			skipFurtherCaching = true;
		}

		intrinsicBaseName += '.' + part;
		intrinsicRealName = '%' + intrinsicBaseName + '%';

		if (hasOwn(INTRINSICS, intrinsicRealName)) {
			value = INTRINSICS[intrinsicRealName];
		} else if (value != null) {
			if (!(part in value)) {
				if (!allowMissing) {
					throw new $TypeError('base intrinsic for ' + name + ' exists, but the property is not available.');
				}
				return void undefined;
			}
			if ($gOPD && (i + 1) >= parts.length) {
				var desc = $gOPD(value, part);
				isOwn = !!desc;

				// By convention, when a data property is converted to an accessor
				// property to emulate a data property that does not suffer from
				// the override mistake, that accessor's getter is marked with
				// an `originalValue` property. Here, when we detect this, we
				// uphold the illusion by pretending to see that original data
				// property, i.e., returning the value rather than the getter
				// itself.
				if (isOwn && 'get' in desc && !('originalValue' in desc.get)) {
					value = desc.get;
				} else {
					value = value[part];
				}
			} else {
				isOwn = hasOwn(value, part);
				value = value[part];
			}

			if (isOwn && !skipFurtherCaching) {
				INTRINSICS[intrinsicRealName] = value;
			}
		}
	}
	return value;
};

},{"function-bind":93,"has":99,"has-symbols":96}],95:[function(require,module,exports){
'use strict';

var GetIntrinsic = require('get-intrinsic');

var $gOPD = GetIntrinsic('%Object.getOwnPropertyDescriptor%', true);

if ($gOPD) {
	try {
		$gOPD([], 'length');
	} catch (e) {
		// IE 8 has a broken gOPD
		$gOPD = null;
	}
}

module.exports = $gOPD;

},{"get-intrinsic":94}],96:[function(require,module,exports){
'use strict';

var origSymbol = typeof Symbol !== 'undefined' && Symbol;
var hasSymbolSham = require('./shams');

module.exports = function hasNativeSymbols() {
	if (typeof origSymbol !== 'function') { return false; }
	if (typeof Symbol !== 'function') { return false; }
	if (typeof origSymbol('foo') !== 'symbol') { return false; }
	if (typeof Symbol('bar') !== 'symbol') { return false; }

	return hasSymbolSham();
};

},{"./shams":97}],97:[function(require,module,exports){
'use strict';

/* eslint complexity: [2, 18], max-statements: [2, 33] */
module.exports = function hasSymbols() {
	if (typeof Symbol !== 'function' || typeof Object.getOwnPropertySymbols !== 'function') { return false; }
	if (typeof Symbol.iterator === 'symbol') { return true; }

	var obj = {};
	var sym = Symbol('test');
	var symObj = Object(sym);
	if (typeof sym === 'string') { return false; }

	if (Object.prototype.toString.call(sym) !== '[object Symbol]') { return false; }
	if (Object.prototype.toString.call(symObj) !== '[object Symbol]') { return false; }

	// temp disabled per https://github.com/ljharb/object.assign/issues/17
	// if (sym instanceof Symbol) { return false; }
	// temp disabled per https://github.com/WebReflection/get-own-property-symbols/issues/4
	// if (!(symObj instanceof Symbol)) { return false; }

	// if (typeof Symbol.prototype.toString !== 'function') { return false; }
	// if (String(sym) !== Symbol.prototype.toString.call(sym)) { return false; }

	var symVal = 42;
	obj[sym] = symVal;
	for (sym in obj) { return false; } // eslint-disable-line no-restricted-syntax, no-unreachable-loop
	if (typeof Object.keys === 'function' && Object.keys(obj).length !== 0) { return false; }

	if (typeof Object.getOwnPropertyNames === 'function' && Object.getOwnPropertyNames(obj).length !== 0) { return false; }

	var syms = Object.getOwnPropertySymbols(obj);
	if (syms.length !== 1 || syms[0] !== sym) { return false; }

	if (!Object.prototype.propertyIsEnumerable.call(obj, sym)) { return false; }

	if (typeof Object.getOwnPropertyDescriptor === 'function') {
		var descriptor = Object.getOwnPropertyDescriptor(obj, sym);
		if (descriptor.value !== symVal || descriptor.enumerable !== true) { return false; }
	}

	return true;
};

},{}],98:[function(require,module,exports){
'use strict';

var hasSymbols = require('has-symbols/shams');

module.exports = function hasToStringTagShams() {
	return hasSymbols() && !!Symbol.toStringTag;
};

},{"has-symbols/shams":97}],99:[function(require,module,exports){
'use strict';

var bind = require('function-bind');

module.exports = bind.call(Function.call, Object.prototype.hasOwnProperty);

},{"function-bind":93}],100:[function(require,module,exports){
'use strict'
var Buffer = require('safe-buffer').Buffer
var Transform = require('readable-stream').Transform
var inherits = require('inherits')

function throwIfNotStringOrBuffer (val, prefix) {
  if (!Buffer.isBuffer(val) && typeof val !== 'string') {
    throw new TypeError(prefix + ' must be a string or a buffer')
  }
}

function HashBase (blockSize) {
  Transform.call(this)

  this._block = Buffer.allocUnsafe(blockSize)
  this._blockSize = blockSize
  this._blockOffset = 0
  this._length = [0, 0, 0, 0]

  this._finalized = false
}

inherits(HashBase, Transform)

HashBase.prototype._transform = function (chunk, encoding, callback) {
  var error = null
  try {
    this.update(chunk, encoding)
  } catch (err) {
    error = err
  }

  callback(error)
}

HashBase.prototype._flush = function (callback) {
  var error = null
  try {
    this.push(this.digest())
  } catch (err) {
    error = err
  }

  callback(error)
}

HashBase.prototype.update = function (data, encoding) {
  throwIfNotStringOrBuffer(data, 'Data')
  if (this._finalized) throw new Error('Digest already called')
  if (!Buffer.isBuffer(data)) data = Buffer.from(data, encoding)

  // consume data
  var block = this._block
  var offset = 0
  while (this._blockOffset + data.length - offset >= this._blockSize) {
    for (var i = this._blockOffset; i < this._blockSize;) block[i++] = data[offset++]
    this._update()
    this._blockOffset = 0
  }
  while (offset < data.length) block[this._blockOffset++] = data[offset++]

  // update length
  for (var j = 0, carry = data.length * 8; carry > 0; ++j) {
    this._length[j] += carry
    carry = (this._length[j] / 0x0100000000) | 0
    if (carry > 0) this._length[j] -= 0x0100000000 * carry
  }

  return this
}

HashBase.prototype._update = function () {
  throw new Error('_update is not implemented')
}

HashBase.prototype.digest = function (encoding) {
  if (this._finalized) throw new Error('Digest already called')
  this._finalized = true

  var digest = this._digest()
  if (encoding !== undefined) digest = digest.toString(encoding)

  // reset state
  this._block.fill(0)
  this._blockOffset = 0
  for (var i = 0; i < 4; ++i) this._length[i] = 0

  return digest
}

HashBase.prototype._digest = function () {
  throw new Error('_digest is not implemented')
}

module.exports = HashBase

},{"inherits":115,"readable-stream":159,"safe-buffer":161}],101:[function(require,module,exports){
var hash = exports;

hash.utils = require('./hash/utils');
hash.common = require('./hash/common');
hash.sha = require('./hash/sha');
hash.ripemd = require('./hash/ripemd');
hash.hmac = require('./hash/hmac');

// Proxy hash functions to the main object
hash.sha1 = hash.sha.sha1;
hash.sha256 = hash.sha.sha256;
hash.sha224 = hash.sha.sha224;
hash.sha384 = hash.sha.sha384;
hash.sha512 = hash.sha.sha512;
hash.ripemd160 = hash.ripemd.ripemd160;

},{"./hash/common":102,"./hash/hmac":103,"./hash/ripemd":104,"./hash/sha":105,"./hash/utils":112}],102:[function(require,module,exports){
'use strict';

var utils = require('./utils');
var assert = require('minimalistic-assert');

function BlockHash() {
  this.pending = null;
  this.pendingTotal = 0;
  this.blockSize = this.constructor.blockSize;
  this.outSize = this.constructor.outSize;
  this.hmacStrength = this.constructor.hmacStrength;
  this.padLength = this.constructor.padLength / 8;
  this.endian = 'big';

  this._delta8 = this.blockSize / 8;
  this._delta32 = this.blockSize / 32;
}
exports.BlockHash = BlockHash;

BlockHash.prototype.update = function update(msg, enc) {
  // Convert message to array, pad it, and join into 32bit blocks
  msg = utils.toArray(msg, enc);
  if (!this.pending)
    this.pending = msg;
  else
    this.pending = this.pending.concat(msg);
  this.pendingTotal += msg.length;

  // Enough data, try updating
  if (this.pending.length >= this._delta8) {
    msg = this.pending;

    // Process pending data in blocks
    var r = msg.length % this._delta8;
    this.pending = msg.slice(msg.length - r, msg.length);
    if (this.pending.length === 0)
      this.pending = null;

    msg = utils.join32(msg, 0, msg.length - r, this.endian);
    for (var i = 0; i < msg.length; i += this._delta32)
      this._update(msg, i, i + this._delta32);
  }

  return this;
};

BlockHash.prototype.digest = function digest(enc) {
  this.update(this._pad());
  assert(this.pending === null);

  return this._digest(enc);
};

BlockHash.prototype._pad = function pad() {
  var len = this.pendingTotal;
  var bytes = this._delta8;
  var k = bytes - ((len + this.padLength) % bytes);
  var res = new Array(k + this.padLength);
  res[0] = 0x80;
  for (var i = 1; i < k; i++)
    res[i] = 0;

  // Append length
  len <<= 3;
  if (this.endian === 'big') {
    for (var t = 8; t < this.padLength; t++)
      res[i++] = 0;

    res[i++] = 0;
    res[i++] = 0;
    res[i++] = 0;
    res[i++] = 0;
    res[i++] = (len >>> 24) & 0xff;
    res[i++] = (len >>> 16) & 0xff;
    res[i++] = (len >>> 8) & 0xff;
    res[i++] = len & 0xff;
  } else {
    res[i++] = len & 0xff;
    res[i++] = (len >>> 8) & 0xff;
    res[i++] = (len >>> 16) & 0xff;
    res[i++] = (len >>> 24) & 0xff;
    res[i++] = 0;
    res[i++] = 0;
    res[i++] = 0;
    res[i++] = 0;

    for (t = 8; t < this.padLength; t++)
      res[i++] = 0;
  }

  return res;
};

},{"./utils":112,"minimalistic-assert":123}],103:[function(require,module,exports){
'use strict';

var utils = require('./utils');
var assert = require('minimalistic-assert');

function Hmac(hash, key, enc) {
  if (!(this instanceof Hmac))
    return new Hmac(hash, key, enc);
  this.Hash = hash;
  this.blockSize = hash.blockSize / 8;
  this.outSize = hash.outSize / 8;
  this.inner = null;
  this.outer = null;

  this._init(utils.toArray(key, enc));
}
module.exports = Hmac;

Hmac.prototype._init = function init(key) {
  // Shorten key, if needed
  if (key.length > this.blockSize)
    key = new this.Hash().update(key).digest();
  assert(key.length <= this.blockSize);

  // Add padding to key
  for (var i = key.length; i < this.blockSize; i++)
    key.push(0);

  for (i = 0; i < key.length; i++)
    key[i] ^= 0x36;
  this.inner = new this.Hash().update(key);

  // 0x36 ^ 0x5c = 0x6a
  for (i = 0; i < key.length; i++)
    key[i] ^= 0x6a;
  this.outer = new this.Hash().update(key);
};

Hmac.prototype.update = function update(msg, enc) {
  this.inner.update(msg, enc);
  return this;
};

Hmac.prototype.digest = function digest(enc) {
  this.outer.update(this.inner.digest());
  return this.outer.digest(enc);
};

},{"./utils":112,"minimalistic-assert":123}],104:[function(require,module,exports){
'use strict';

var utils = require('./utils');
var common = require('./common');

var rotl32 = utils.rotl32;
var sum32 = utils.sum32;
var sum32_3 = utils.sum32_3;
var sum32_4 = utils.sum32_4;
var BlockHash = common.BlockHash;

function RIPEMD160() {
  if (!(this instanceof RIPEMD160))
    return new RIPEMD160();

  BlockHash.call(this);

  this.h = [ 0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0 ];
  this.endian = 'little';
}
utils.inherits(RIPEMD160, BlockHash);
exports.ripemd160 = RIPEMD160;

RIPEMD160.blockSize = 512;
RIPEMD160.outSize = 160;
RIPEMD160.hmacStrength = 192;
RIPEMD160.padLength = 64;

RIPEMD160.prototype._update = function update(msg, start) {
  var A = this.h[0];
  var B = this.h[1];
  var C = this.h[2];
  var D = this.h[3];
  var E = this.h[4];
  var Ah = A;
  var Bh = B;
  var Ch = C;
  var Dh = D;
  var Eh = E;
  for (var j = 0; j < 80; j++) {
    var T = sum32(
      rotl32(
        sum32_4(A, f(j, B, C, D), msg[r[j] + start], K(j)),
        s[j]),
      E);
    A = E;
    E = D;
    D = rotl32(C, 10);
    C = B;
    B = T;
    T = sum32(
      rotl32(
        sum32_4(Ah, f(79 - j, Bh, Ch, Dh), msg[rh[j] + start], Kh(j)),
        sh[j]),
      Eh);
    Ah = Eh;
    Eh = Dh;
    Dh = rotl32(Ch, 10);
    Ch = Bh;
    Bh = T;
  }
  T = sum32_3(this.h[1], C, Dh);
  this.h[1] = sum32_3(this.h[2], D, Eh);
  this.h[2] = sum32_3(this.h[3], E, Ah);
  this.h[3] = sum32_3(this.h[4], A, Bh);
  this.h[4] = sum32_3(this.h[0], B, Ch);
  this.h[0] = T;
};

RIPEMD160.prototype._digest = function digest(enc) {
  if (enc === 'hex')
    return utils.toHex32(this.h, 'little');
  else
    return utils.split32(this.h, 'little');
};

function f(j, x, y, z) {
  if (j <= 15)
    return x ^ y ^ z;
  else if (j <= 31)
    return (x & y) | ((~x) & z);
  else if (j <= 47)
    return (x | (~y)) ^ z;
  else if (j <= 63)
    return (x & z) | (y & (~z));
  else
    return x ^ (y | (~z));
}

function K(j) {
  if (j <= 15)
    return 0x00000000;
  else if (j <= 31)
    return 0x5a827999;
  else if (j <= 47)
    return 0x6ed9eba1;
  else if (j <= 63)
    return 0x8f1bbcdc;
  else
    return 0xa953fd4e;
}

function Kh(j) {
  if (j <= 15)
    return 0x50a28be6;
  else if (j <= 31)
    return 0x5c4dd124;
  else if (j <= 47)
    return 0x6d703ef3;
  else if (j <= 63)
    return 0x7a6d76e9;
  else
    return 0x00000000;
}

var r = [
  0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,
  7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8,
  3, 10, 14, 4, 9, 15, 8, 1, 2, 7, 0, 6, 13, 11, 5, 12,
  1, 9, 11, 10, 0, 8, 12, 4, 13, 3, 7, 15, 14, 5, 6, 2,
  4, 0, 5, 9, 7, 12, 2, 10, 14, 1, 3, 8, 11, 6, 15, 13
];

var rh = [
  5, 14, 7, 0, 9, 2, 11, 4, 13, 6, 15, 8, 1, 10, 3, 12,
  6, 11, 3, 7, 0, 13, 5, 10, 14, 15, 8, 12, 4, 9, 1, 2,
  15, 5, 1, 3, 7, 14, 6, 9, 11, 8, 12, 2, 10, 0, 4, 13,
  8, 6, 4, 1, 3, 11, 15, 0, 5, 12, 2, 13, 9, 7, 10, 14,
  12, 15, 10, 4, 1, 5, 8, 7, 6, 2, 13, 14, 0, 3, 9, 11
];

var s = [
  11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8,
  7, 6, 8, 13, 11, 9, 7, 15, 7, 12, 15, 9, 11, 7, 13, 12,
  11, 13, 6, 7, 14, 9, 13, 15, 14, 8, 13, 6, 5, 12, 7, 5,
  11, 12, 14, 15, 14, 15, 9, 8, 9, 14, 5, 6, 8, 6, 5, 12,
  9, 15, 5, 11, 6, 8, 13, 12, 5, 12, 13, 14, 11, 8, 5, 6
];

var sh = [
  8, 9, 9, 11, 13, 15, 15, 5, 7, 7, 8, 11, 14, 14, 12, 6,
  9, 13, 15, 7, 12, 8, 9, 11, 7, 7, 12, 7, 6, 15, 13, 11,
  9, 7, 15, 11, 8, 6, 6, 14, 12, 13, 5, 14, 13, 13, 7, 5,
  15, 5, 8, 11, 14, 14, 6, 14, 6, 9, 12, 9, 12, 5, 15, 8,
  8, 5, 12, 9, 12, 5, 14, 6, 8, 13, 6, 5, 15, 13, 11, 11
];

},{"./common":102,"./utils":112}],105:[function(require,module,exports){
'use strict';

exports.sha1 = require('./sha/1');
exports.sha224 = require('./sha/224');
exports.sha256 = require('./sha/256');
exports.sha384 = require('./sha/384');
exports.sha512 = require('./sha/512');

},{"./sha/1":106,"./sha/224":107,"./sha/256":108,"./sha/384":109,"./sha/512":110}],106:[function(require,module,exports){
'use strict';

var utils = require('../utils');
var common = require('../common');
var shaCommon = require('./common');

var rotl32 = utils.rotl32;
var sum32 = utils.sum32;
var sum32_5 = utils.sum32_5;
var ft_1 = shaCommon.ft_1;
var BlockHash = common.BlockHash;

var sha1_K = [
  0x5A827999, 0x6ED9EBA1,
  0x8F1BBCDC, 0xCA62C1D6
];

function SHA1() {
  if (!(this instanceof SHA1))
    return new SHA1();

  BlockHash.call(this);
  this.h = [
    0x67452301, 0xefcdab89, 0x98badcfe,
    0x10325476, 0xc3d2e1f0 ];
  this.W = new Array(80);
}

utils.inherits(SHA1, BlockHash);
module.exports = SHA1;

SHA1.blockSize = 512;
SHA1.outSize = 160;
SHA1.hmacStrength = 80;
SHA1.padLength = 64;

SHA1.prototype._update = function _update(msg, start) {
  var W = this.W;

  for (var i = 0; i < 16; i++)
    W[i] = msg[start + i];

  for(; i < W.length; i++)
    W[i] = rotl32(W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16], 1);

  var a = this.h[0];
  var b = this.h[1];
  var c = this.h[2];
  var d = this.h[3];
  var e = this.h[4];

  for (i = 0; i < W.length; i++) {
    var s = ~~(i / 20);
    var t = sum32_5(rotl32(a, 5), ft_1(s, b, c, d), e, W[i], sha1_K[s]);
    e = d;
    d = c;
    c = rotl32(b, 30);
    b = a;
    a = t;
  }

  this.h[0] = sum32(this.h[0], a);
  this.h[1] = sum32(this.h[1], b);
  this.h[2] = sum32(this.h[2], c);
  this.h[3] = sum32(this.h[3], d);
  this.h[4] = sum32(this.h[4], e);
};

SHA1.prototype._digest = function digest(enc) {
  if (enc === 'hex')
    return utils.toHex32(this.h, 'big');
  else
    return utils.split32(this.h, 'big');
};

},{"../common":102,"../utils":112,"./common":111}],107:[function(require,module,exports){
'use strict';

var utils = require('../utils');
var SHA256 = require('./256');

function SHA224() {
  if (!(this instanceof SHA224))
    return new SHA224();

  SHA256.call(this);
  this.h = [
    0xc1059ed8, 0x367cd507, 0x3070dd17, 0xf70e5939,
    0xffc00b31, 0x68581511, 0x64f98fa7, 0xbefa4fa4 ];
}
utils.inherits(SHA224, SHA256);
module.exports = SHA224;

SHA224.blockSize = 512;
SHA224.outSize = 224;
SHA224.hmacStrength = 192;
SHA224.padLength = 64;

SHA224.prototype._digest = function digest(enc) {
  // Just truncate output
  if (enc === 'hex')
    return utils.toHex32(this.h.slice(0, 7), 'big');
  else
    return utils.split32(this.h.slice(0, 7), 'big');
};


},{"../utils":112,"./256":108}],108:[function(require,module,exports){
'use strict';

var utils = require('../utils');
var common = require('../common');
var shaCommon = require('./common');
var assert = require('minimalistic-assert');

var sum32 = utils.sum32;
var sum32_4 = utils.sum32_4;
var sum32_5 = utils.sum32_5;
var ch32 = shaCommon.ch32;
var maj32 = shaCommon.maj32;
var s0_256 = shaCommon.s0_256;
var s1_256 = shaCommon.s1_256;
var g0_256 = shaCommon.g0_256;
var g1_256 = shaCommon.g1_256;

var BlockHash = common.BlockHash;

var sha256_K = [
  0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5,
  0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,
  0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3,
  0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,
  0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc,
  0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,
  0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7,
  0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,
  0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13,
  0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,
  0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3,
  0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,
  0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5,
  0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,
  0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208,
  0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2
];

function SHA256() {
  if (!(this instanceof SHA256))
    return new SHA256();

  BlockHash.call(this);
  this.h = [
    0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a,
    0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19
  ];
  this.k = sha256_K;
  this.W = new Array(64);
}
utils.inherits(SHA256, BlockHash);
module.exports = SHA256;

SHA256.blockSize = 512;
SHA256.outSize = 256;
SHA256.hmacStrength = 192;
SHA256.padLength = 64;

SHA256.prototype._update = function _update(msg, start) {
  var W = this.W;

  for (var i = 0; i < 16; i++)
    W[i] = msg[start + i];
  for (; i < W.length; i++)
    W[i] = sum32_4(g1_256(W[i - 2]), W[i - 7], g0_256(W[i - 15]), W[i - 16]);

  var a = this.h[0];
  var b = this.h[1];
  var c = this.h[2];
  var d = this.h[3];
  var e = this.h[4];
  var f = this.h[5];
  var g = this.h[6];
  var h = this.h[7];

  assert(this.k.length === W.length);
  for (i = 0; i < W.length; i++) {
    var T1 = sum32_5(h, s1_256(e), ch32(e, f, g), this.k[i], W[i]);
    var T2 = sum32(s0_256(a), maj32(a, b, c));
    h = g;
    g = f;
    f = e;
    e = sum32(d, T1);
    d = c;
    c = b;
    b = a;
    a = sum32(T1, T2);
  }

  this.h[0] = sum32(this.h[0], a);
  this.h[1] = sum32(this.h[1], b);
  this.h[2] = sum32(this.h[2], c);
  this.h[3] = sum32(this.h[3], d);
  this.h[4] = sum32(this.h[4], e);
  this.h[5] = sum32(this.h[5], f);
  this.h[6] = sum32(this.h[6], g);
  this.h[7] = sum32(this.h[7], h);
};

SHA256.prototype._digest = function digest(enc) {
  if (enc === 'hex')
    return utils.toHex32(this.h, 'big');
  else
    return utils.split32(this.h, 'big');
};

},{"../common":102,"../utils":112,"./common":111,"minimalistic-assert":123}],109:[function(require,module,exports){
'use strict';

var utils = require('../utils');

var SHA512 = require('./512');

function SHA384() {
  if (!(this instanceof SHA384))
    return new SHA384();

  SHA512.call(this);
  this.h = [
    0xcbbb9d5d, 0xc1059ed8,
    0x629a292a, 0x367cd507,
    0x9159015a, 0x3070dd17,
    0x152fecd8, 0xf70e5939,
    0x67332667, 0xffc00b31,
    0x8eb44a87, 0x68581511,
    0xdb0c2e0d, 0x64f98fa7,
    0x47b5481d, 0xbefa4fa4 ];
}
utils.inherits(SHA384, SHA512);
module.exports = SHA384;

SHA384.blockSize = 1024;
SHA384.outSize = 384;
SHA384.hmacStrength = 192;
SHA384.padLength = 128;

SHA384.prototype._digest = function digest(enc) {
  if (enc === 'hex')
    return utils.toHex32(this.h.slice(0, 12), 'big');
  else
    return utils.split32(this.h.slice(0, 12), 'big');
};

},{"../utils":112,"./512":110}],110:[function(require,module,exports){
'use strict';

var utils = require('../utils');
var common = require('../common');
var assert = require('minimalistic-assert');

var rotr64_hi = utils.rotr64_hi;
var rotr64_lo = utils.rotr64_lo;
var shr64_hi = utils.shr64_hi;
var shr64_lo = utils.shr64_lo;
var sum64 = utils.sum64;
var sum64_hi = utils.sum64_hi;
var sum64_lo = utils.sum64_lo;
var sum64_4_hi = utils.sum64_4_hi;
var sum64_4_lo = utils.sum64_4_lo;
var sum64_5_hi = utils.sum64_5_hi;
var sum64_5_lo = utils.sum64_5_lo;

var BlockHash = common.BlockHash;

var sha512_K = [
  0x428a2f98, 0xd728ae22, 0x71374491, 0x23ef65cd,
  0xb5c0fbcf, 0xec4d3b2f, 0xe9b5dba5, 0x8189dbbc,
  0x3956c25b, 0xf348b538, 0x59f111f1, 0xb605d019,
  0x923f82a4, 0xaf194f9b, 0xab1c5ed5, 0xda6d8118,
  0xd807aa98, 0xa3030242, 0x12835b01, 0x45706fbe,
  0x243185be, 0x4ee4b28c, 0x550c7dc3, 0xd5ffb4e2,
  0x72be5d74, 0xf27b896f, 0x80deb1fe, 0x3b1696b1,
  0x9bdc06a7, 0x25c71235, 0xc19bf174, 0xcf692694,
  0xe49b69c1, 0x9ef14ad2, 0xefbe4786, 0x384f25e3,
  0x0fc19dc6, 0x8b8cd5b5, 0x240ca1cc, 0x77ac9c65,
  0x2de92c6f, 0x592b0275, 0x4a7484aa, 0x6ea6e483,
  0x5cb0a9dc, 0xbd41fbd4, 0x76f988da, 0x831153b5,
  0x983e5152, 0xee66dfab, 0xa831c66d, 0x2db43210,
  0xb00327c8, 0x98fb213f, 0xbf597fc7, 0xbeef0ee4,
  0xc6e00bf3, 0x3da88fc2, 0xd5a79147, 0x930aa725,
  0x06ca6351, 0xe003826f, 0x14292967, 0x0a0e6e70,
  0x27b70a85, 0x46d22ffc, 0x2e1b2138, 0x5c26c926,
  0x4d2c6dfc, 0x5ac42aed, 0x53380d13, 0x9d95b3df,
  0x650a7354, 0x8baf63de, 0x766a0abb, 0x3c77b2a8,
  0x81c2c92e, 0x47edaee6, 0x92722c85, 0x1482353b,
  0xa2bfe8a1, 0x4cf10364, 0xa81a664b, 0xbc423001,
  0xc24b8b70, 0xd0f89791, 0xc76c51a3, 0x0654be30,
  0xd192e819, 0xd6ef5218, 0xd6990624, 0x5565a910,
  0xf40e3585, 0x5771202a, 0x106aa070, 0x32bbd1b8,
  0x19a4c116, 0xb8d2d0c8, 0x1e376c08, 0x5141ab53,
  0x2748774c, 0xdf8eeb99, 0x34b0bcb5, 0xe19b48a8,
  0x391c0cb3, 0xc5c95a63, 0x4ed8aa4a, 0xe3418acb,
  0x5b9cca4f, 0x7763e373, 0x682e6ff3, 0xd6b2b8a3,
  0x748f82ee, 0x5defb2fc, 0x78a5636f, 0x43172f60,
  0x84c87814, 0xa1f0ab72, 0x8cc70208, 0x1a6439ec,
  0x90befffa, 0x23631e28, 0xa4506ceb, 0xde82bde9,
  0xbef9a3f7, 0xb2c67915, 0xc67178f2, 0xe372532b,
  0xca273ece, 0xea26619c, 0xd186b8c7, 0x21c0c207,
  0xeada7dd6, 0xcde0eb1e, 0xf57d4f7f, 0xee6ed178,
  0x06f067aa, 0x72176fba, 0x0a637dc5, 0xa2c898a6,
  0x113f9804, 0xbef90dae, 0x1b710b35, 0x131c471b,
  0x28db77f5, 0x23047d84, 0x32caab7b, 0x40c72493,
  0x3c9ebe0a, 0x15c9bebc, 0x431d67c4, 0x9c100d4c,
  0x4cc5d4be, 0xcb3e42b6, 0x597f299c, 0xfc657e2a,
  0x5fcb6fab, 0x3ad6faec, 0x6c44198c, 0x4a475817
];

function SHA512() {
  if (!(this instanceof SHA512))
    return new SHA512();

  BlockHash.call(this);
  this.h = [
    0x6a09e667, 0xf3bcc908,
    0xbb67ae85, 0x84caa73b,
    0x3c6ef372, 0xfe94f82b,
    0xa54ff53a, 0x5f1d36f1,
    0x510e527f, 0xade682d1,
    0x9b05688c, 0x2b3e6c1f,
    0x1f83d9ab, 0xfb41bd6b,
    0x5be0cd19, 0x137e2179 ];
  this.k = sha512_K;
  this.W = new Array(160);
}
utils.inherits(SHA512, BlockHash);
module.exports = SHA512;

SHA512.blockSize = 1024;
SHA512.outSize = 512;
SHA512.hmacStrength = 192;
SHA512.padLength = 128;

SHA512.prototype._prepareBlock = function _prepareBlock(msg, start) {
  var W = this.W;

  // 32 x 32bit words
  for (var i = 0; i < 32; i++)
    W[i] = msg[start + i];
  for (; i < W.length; i += 2) {
    var c0_hi = g1_512_hi(W[i - 4], W[i - 3]);  // i - 2
    var c0_lo = g1_512_lo(W[i - 4], W[i - 3]);
    var c1_hi = W[i - 14];  // i - 7
    var c1_lo = W[i - 13];
    var c2_hi = g0_512_hi(W[i - 30], W[i - 29]);  // i - 15
    var c2_lo = g0_512_lo(W[i - 30], W[i - 29]);
    var c3_hi = W[i - 32];  // i - 16
    var c3_lo = W[i - 31];

    W[i] = sum64_4_hi(
      c0_hi, c0_lo,
      c1_hi, c1_lo,
      c2_hi, c2_lo,
      c3_hi, c3_lo);
    W[i + 1] = sum64_4_lo(
      c0_hi, c0_lo,
      c1_hi, c1_lo,
      c2_hi, c2_lo,
      c3_hi, c3_lo);
  }
};

SHA512.prototype._update = function _update(msg, start) {
  this._prepareBlock(msg, start);

  var W = this.W;

  var ah = this.h[0];
  var al = this.h[1];
  var bh = this.h[2];
  var bl = this.h[3];
  var ch = this.h[4];
  var cl = this.h[5];
  var dh = this.h[6];
  var dl = this.h[7];
  var eh = this.h[8];
  var el = this.h[9];
  var fh = this.h[10];
  var fl = this.h[11];
  var gh = this.h[12];
  var gl = this.h[13];
  var hh = this.h[14];
  var hl = this.h[15];

  assert(this.k.length === W.length);
  for (var i = 0; i < W.length; i += 2) {
    var c0_hi = hh;
    var c0_lo = hl;
    var c1_hi = s1_512_hi(eh, el);
    var c1_lo = s1_512_lo(eh, el);
    var c2_hi = ch64_hi(eh, el, fh, fl, gh, gl);
    var c2_lo = ch64_lo(eh, el, fh, fl, gh, gl);
    var c3_hi = this.k[i];
    var c3_lo = this.k[i + 1];
    var c4_hi = W[i];
    var c4_lo = W[i + 1];

    var T1_hi = sum64_5_hi(
      c0_hi, c0_lo,
      c1_hi, c1_lo,
      c2_hi, c2_lo,
      c3_hi, c3_lo,
      c4_hi, c4_lo);
    var T1_lo = sum64_5_lo(
      c0_hi, c0_lo,
      c1_hi, c1_lo,
      c2_hi, c2_lo,
      c3_hi, c3_lo,
      c4_hi, c4_lo);

    c0_hi = s0_512_hi(ah, al);
    c0_lo = s0_512_lo(ah, al);
    c1_hi = maj64_hi(ah, al, bh, bl, ch, cl);
    c1_lo = maj64_lo(ah, al, bh, bl, ch, cl);

    var T2_hi = sum64_hi(c0_hi, c0_lo, c1_hi, c1_lo);
    var T2_lo = sum64_lo(c0_hi, c0_lo, c1_hi, c1_lo);

    hh = gh;
    hl = gl;

    gh = fh;
    gl = fl;

    fh = eh;
    fl = el;

    eh = sum64_hi(dh, dl, T1_hi, T1_lo);
    el = sum64_lo(dl, dl, T1_hi, T1_lo);

    dh = ch;
    dl = cl;

    ch = bh;
    cl = bl;

    bh = ah;
    bl = al;

    ah = sum64_hi(T1_hi, T1_lo, T2_hi, T2_lo);
    al = sum64_lo(T1_hi, T1_lo, T2_hi, T2_lo);
  }

  sum64(this.h, 0, ah, al);
  sum64(this.h, 2, bh, bl);
  sum64(this.h, 4, ch, cl);
  sum64(this.h, 6, dh, dl);
  sum64(this.h, 8, eh, el);
  sum64(this.h, 10, fh, fl);
  sum64(this.h, 12, gh, gl);
  sum64(this.h, 14, hh, hl);
};

SHA512.prototype._digest = function digest(enc) {
  if (enc === 'hex')
    return utils.toHex32(this.h, 'big');
  else
    return utils.split32(this.h, 'big');
};

function ch64_hi(xh, xl, yh, yl, zh) {
  var r = (xh & yh) ^ ((~xh) & zh);
  if (r < 0)
    r += 0x100000000;
  return r;
}

function ch64_lo(xh, xl, yh, yl, zh, zl) {
  var r = (xl & yl) ^ ((~xl) & zl);
  if (r < 0)
    r += 0x100000000;
  return r;
}

function maj64_hi(xh, xl, yh, yl, zh) {
  var r = (xh & yh) ^ (xh & zh) ^ (yh & zh);
  if (r < 0)
    r += 0x100000000;
  return r;
}

function maj64_lo(xh, xl, yh, yl, zh, zl) {
  var r = (xl & yl) ^ (xl & zl) ^ (yl & zl);
  if (r < 0)
    r += 0x100000000;
  return r;
}

function s0_512_hi(xh, xl) {
  var c0_hi = rotr64_hi(xh, xl, 28);
  var c1_hi = rotr64_hi(xl, xh, 2);  // 34
  var c2_hi = rotr64_hi(xl, xh, 7);  // 39

  var r = c0_hi ^ c1_hi ^ c2_hi;
  if (r < 0)
    r += 0x100000000;
  return r;
}

function s0_512_lo(xh, xl) {
  var c0_lo = rotr64_lo(xh, xl, 28);
  var c1_lo = rotr64_lo(xl, xh, 2);  // 34
  var c2_lo = rotr64_lo(xl, xh, 7);  // 39

  var r = c0_lo ^ c1_lo ^ c2_lo;
  if (r < 0)
    r += 0x100000000;
  return r;
}

function s1_512_hi(xh, xl) {
  var c0_hi = rotr64_hi(xh, xl, 14);
  var c1_hi = rotr64_hi(xh, xl, 18);
  var c2_hi = rotr64_hi(xl, xh, 9);  // 41

  var r = c0_hi ^ c1_hi ^ c2_hi;
  if (r < 0)
    r += 0x100000000;
  return r;
}

function s1_512_lo(xh, xl) {
  var c0_lo = rotr64_lo(xh, xl, 14);
  var c1_lo = rotr64_lo(xh, xl, 18);
  var c2_lo = rotr64_lo(xl, xh, 9);  // 41

  var r = c0_lo ^ c1_lo ^ c2_lo;
  if (r < 0)
    r += 0x100000000;
  return r;
}

function g0_512_hi(xh, xl) {
  var c0_hi = rotr64_hi(xh, xl, 1);
  var c1_hi = rotr64_hi(xh, xl, 8);
  var c2_hi = shr64_hi(xh, xl, 7);

  var r = c0_hi ^ c1_hi ^ c2_hi;
  if (r < 0)
    r += 0x100000000;
  return r;
}

function g0_512_lo(xh, xl) {
  var c0_lo = rotr64_lo(xh, xl, 1);
  var c1_lo = rotr64_lo(xh, xl, 8);
  var c2_lo = shr64_lo(xh, xl, 7);

  var r = c0_lo ^ c1_lo ^ c2_lo;
  if (r < 0)
    r += 0x100000000;
  return r;
}

function g1_512_hi(xh, xl) {
  var c0_hi = rotr64_hi(xh, xl, 19);
  var c1_hi = rotr64_hi(xl, xh, 29);  // 61
  var c2_hi = shr64_hi(xh, xl, 6);

  var r = c0_hi ^ c1_hi ^ c2_hi;
  if (r < 0)
    r += 0x100000000;
  return r;
}

function g1_512_lo(xh, xl) {
  var c0_lo = rotr64_lo(xh, xl, 19);
  var c1_lo = rotr64_lo(xl, xh, 29);  // 61
  var c2_lo = shr64_lo(xh, xl, 6);

  var r = c0_lo ^ c1_lo ^ c2_lo;
  if (r < 0)
    r += 0x100000000;
  return r;
}

},{"../common":102,"../utils":112,"minimalistic-assert":123}],111:[function(require,module,exports){
'use strict';

var utils = require('../utils');
var rotr32 = utils.rotr32;

function ft_1(s, x, y, z) {
  if (s === 0)
    return ch32(x, y, z);
  if (s === 1 || s === 3)
    return p32(x, y, z);
  if (s === 2)
    return maj32(x, y, z);
}
exports.ft_1 = ft_1;

function ch32(x, y, z) {
  return (x & y) ^ ((~x) & z);
}
exports.ch32 = ch32;

function maj32(x, y, z) {
  return (x & y) ^ (x & z) ^ (y & z);
}
exports.maj32 = maj32;

function p32(x, y, z) {
  return x ^ y ^ z;
}
exports.p32 = p32;

function s0_256(x) {
  return rotr32(x, 2) ^ rotr32(x, 13) ^ rotr32(x, 22);
}
exports.s0_256 = s0_256;

function s1_256(x) {
  return rotr32(x, 6) ^ rotr32(x, 11) ^ rotr32(x, 25);
}
exports.s1_256 = s1_256;

function g0_256(x) {
  return rotr32(x, 7) ^ rotr32(x, 18) ^ (x >>> 3);
}
exports.g0_256 = g0_256;

function g1_256(x) {
  return rotr32(x, 17) ^ rotr32(x, 19) ^ (x >>> 10);
}
exports.g1_256 = g1_256;

},{"../utils":112}],112:[function(require,module,exports){
'use strict';

var assert = require('minimalistic-assert');
var inherits = require('inherits');

exports.inherits = inherits;

function isSurrogatePair(msg, i) {
  if ((msg.charCodeAt(i) & 0xFC00) !== 0xD800) {
    return false;
  }
  if (i < 0 || i + 1 >= msg.length) {
    return false;
  }
  return (msg.charCodeAt(i + 1) & 0xFC00) === 0xDC00;
}

function toArray(msg, enc) {
  if (Array.isArray(msg))
    return msg.slice();
  if (!msg)
    return [];
  var res = [];
  if (typeof msg === 'string') {
    if (!enc) {
      // Inspired by stringToUtf8ByteArray() in closure-library by Google
      // https://github.com/google/closure-library/blob/8598d87242af59aac233270742c8984e2b2bdbe0/closure/goog/crypt/crypt.js#L117-L143
      // Apache License 2.0
      // https://github.com/google/closure-library/blob/master/LICENSE
      var p = 0;
      for (var i = 0; i < msg.length; i++) {
        var c = msg.charCodeAt(i);
        if (c < 128) {
          res[p++] = c;
        } else if (c < 2048) {
          res[p++] = (c >> 6) | 192;
          res[p++] = (c & 63) | 128;
        } else if (isSurrogatePair(msg, i)) {
          c = 0x10000 + ((c & 0x03FF) << 10) + (msg.charCodeAt(++i) & 0x03FF);
          res[p++] = (c >> 18) | 240;
          res[p++] = ((c >> 12) & 63) | 128;
          res[p++] = ((c >> 6) & 63) | 128;
          res[p++] = (c & 63) | 128;
        } else {
          res[p++] = (c >> 12) | 224;
          res[p++] = ((c >> 6) & 63) | 128;
          res[p++] = (c & 63) | 128;
        }
      }
    } else if (enc === 'hex') {
      msg = msg.replace(/[^a-z0-9]+/ig, '');
      if (msg.length % 2 !== 0)
        msg = '0' + msg;
      for (i = 0; i < msg.length; i += 2)
        res.push(parseInt(msg[i] + msg[i + 1], 16));
    }
  } else {
    for (i = 0; i < msg.length; i++)
      res[i] = msg[i] | 0;
  }
  return res;
}
exports.toArray = toArray;

function toHex(msg) {
  var res = '';
  for (var i = 0; i < msg.length; i++)
    res += zero2(msg[i].toString(16));
  return res;
}
exports.toHex = toHex;

function htonl(w) {
  var res = (w >>> 24) |
            ((w >>> 8) & 0xff00) |
            ((w << 8) & 0xff0000) |
            ((w & 0xff) << 24);
  return res >>> 0;
}
exports.htonl = htonl;

function toHex32(msg, endian) {
  var res = '';
  for (var i = 0; i < msg.length; i++) {
    var w = msg[i];
    if (endian === 'little')
      w = htonl(w);
    res += zero8(w.toString(16));
  }
  return res;
}
exports.toHex32 = toHex32;

function zero2(word) {
  if (word.length === 1)
    return '0' + word;
  else
    return word;
}
exports.zero2 = zero2;

function zero8(word) {
  if (word.length === 7)
    return '0' + word;
  else if (word.length === 6)
    return '00' + word;
  else if (word.length === 5)
    return '000' + word;
  else if (word.length === 4)
    return '0000' + word;
  else if (word.length === 3)
    return '00000' + word;
  else if (word.length === 2)
    return '000000' + word;
  else if (word.length === 1)
    return '0000000' + word;
  else
    return word;
}
exports.zero8 = zero8;

function join32(msg, start, end, endian) {
  var len = end - start;
  assert(len % 4 === 0);
  var res = new Array(len / 4);
  for (var i = 0, k = start; i < res.length; i++, k += 4) {
    var w;
    if (endian === 'big')
      w = (msg[k] << 24) | (msg[k + 1] << 16) | (msg[k + 2] << 8) | msg[k + 3];
    else
      w = (msg[k + 3] << 24) | (msg[k + 2] << 16) | (msg[k + 1] << 8) | msg[k];
    res[i] = w >>> 0;
  }
  return res;
}
exports.join32 = join32;

function split32(msg, endian) {
  var res = new Array(msg.length * 4);
  for (var i = 0, k = 0; i < msg.length; i++, k += 4) {
    var m = msg[i];
    if (endian === 'big') {
      res[k] = m >>> 24;
      res[k + 1] = (m >>> 16) & 0xff;
      res[k + 2] = (m >>> 8) & 0xff;
      res[k + 3] = m & 0xff;
    } else {
      res[k + 3] = m >>> 24;
      res[k + 2] = (m >>> 16) & 0xff;
      res[k + 1] = (m >>> 8) & 0xff;
      res[k] = m & 0xff;
    }
  }
  return res;
}
exports.split32 = split32;

function rotr32(w, b) {
  return (w >>> b) | (w << (32 - b));
}
exports.rotr32 = rotr32;

function rotl32(w, b) {
  return (w << b) | (w >>> (32 - b));
}
exports.rotl32 = rotl32;

function sum32(a, b) {
  return (a + b) >>> 0;
}
exports.sum32 = sum32;

function sum32_3(a, b, c) {
  return (a + b + c) >>> 0;
}
exports.sum32_3 = sum32_3;

function sum32_4(a, b, c, d) {
  return (a + b + c + d) >>> 0;
}
exports.sum32_4 = sum32_4;

function sum32_5(a, b, c, d, e) {
  return (a + b + c + d + e) >>> 0;
}
exports.sum32_5 = sum32_5;

function sum64(buf, pos, ah, al) {
  var bh = buf[pos];
  var bl = buf[pos + 1];

  var lo = (al + bl) >>> 0;
  var hi = (lo < al ? 1 : 0) + ah + bh;
  buf[pos] = hi >>> 0;
  buf[pos + 1] = lo;
}
exports.sum64 = sum64;

function sum64_hi(ah, al, bh, bl) {
  var lo = (al + bl) >>> 0;
  var hi = (lo < al ? 1 : 0) + ah + bh;
  return hi >>> 0;
}
exports.sum64_hi = sum64_hi;

function sum64_lo(ah, al, bh, bl) {
  var lo = al + bl;
  return lo >>> 0;
}
exports.sum64_lo = sum64_lo;

function sum64_4_hi(ah, al, bh, bl, ch, cl, dh, dl) {
  var carry = 0;
  var lo = al;
  lo = (lo + bl) >>> 0;
  carry += lo < al ? 1 : 0;
  lo = (lo + cl) >>> 0;
  carry += lo < cl ? 1 : 0;
  lo = (lo + dl) >>> 0;
  carry += lo < dl ? 1 : 0;

  var hi = ah + bh + ch + dh + carry;
  return hi >>> 0;
}
exports.sum64_4_hi = sum64_4_hi;

function sum64_4_lo(ah, al, bh, bl, ch, cl, dh, dl) {
  var lo = al + bl + cl + dl;
  return lo >>> 0;
}
exports.sum64_4_lo = sum64_4_lo;

function sum64_5_hi(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {
  var carry = 0;
  var lo = al;
  lo = (lo + bl) >>> 0;
  carry += lo < al ? 1 : 0;
  lo = (lo + cl) >>> 0;
  carry += lo < cl ? 1 : 0;
  lo = (lo + dl) >>> 0;
  carry += lo < dl ? 1 : 0;
  lo = (lo + el) >>> 0;
  carry += lo < el ? 1 : 0;

  var hi = ah + bh + ch + dh + eh + carry;
  return hi >>> 0;
}
exports.sum64_5_hi = sum64_5_hi;

function sum64_5_lo(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {
  var lo = al + bl + cl + dl + el;

  return lo >>> 0;
}
exports.sum64_5_lo = sum64_5_lo;

function rotr64_hi(ah, al, num) {
  var r = (al << (32 - num)) | (ah >>> num);
  return r >>> 0;
}
exports.rotr64_hi = rotr64_hi;

function rotr64_lo(ah, al, num) {
  var r = (ah << (32 - num)) | (al >>> num);
  return r >>> 0;
}
exports.rotr64_lo = rotr64_lo;

function shr64_hi(ah, al, num) {
  return ah >>> num;
}
exports.shr64_hi = shr64_hi;

function shr64_lo(ah, al, num) {
  var r = (ah << (32 - num)) | (al >>> num);
  return r >>> 0;
}
exports.shr64_lo = shr64_lo;

},{"inherits":115,"minimalistic-assert":123}],113:[function(require,module,exports){
'use strict';

var hash = require('hash.js');
var utils = require('minimalistic-crypto-utils');
var assert = require('minimalistic-assert');

function HmacDRBG(options) {
  if (!(this instanceof HmacDRBG))
    return new HmacDRBG(options);
  this.hash = options.hash;
  this.predResist = !!options.predResist;

  this.outLen = this.hash.outSize;
  this.minEntropy = options.minEntropy || this.hash.hmacStrength;

  this._reseed = null;
  this.reseedInterval = null;
  this.K = null;
  this.V = null;

  var entropy = utils.toArray(options.entropy, options.entropyEnc || 'hex');
  var nonce = utils.toArray(options.nonce, options.nonceEnc || 'hex');
  var pers = utils.toArray(options.pers, options.persEnc || 'hex');
  assert(entropy.length >= (this.minEntropy / 8),
         'Not enough entropy. Minimum is: ' + this.minEntropy + ' bits');
  this._init(entropy, nonce, pers);
}
module.exports = HmacDRBG;

HmacDRBG.prototype._init = function init(entropy, nonce, pers) {
  var seed = entropy.concat(nonce).concat(pers);

  this.K = new Array(this.outLen / 8);
  this.V = new Array(this.outLen / 8);
  for (var i = 0; i < this.V.length; i++) {
    this.K[i] = 0x00;
    this.V[i] = 0x01;
  }

  this._update(seed);
  this._reseed = 1;
  this.reseedInterval = 0x1000000000000;  // 2^48
};

HmacDRBG.prototype._hmac = function hmac() {
  return new hash.hmac(this.hash, this.K);
};

HmacDRBG.prototype._update = function update(seed) {
  var kmac = this._hmac()
                 .update(this.V)
                 .update([ 0x00 ]);
  if (seed)
    kmac = kmac.update(seed);
  this.K = kmac.digest();
  this.V = this._hmac().update(this.V).digest();
  if (!seed)
    return;

  this.K = this._hmac()
               .update(this.V)
               .update([ 0x01 ])
               .update(seed)
               .digest();
  this.V = this._hmac().update(this.V).digest();
};

HmacDRBG.prototype.reseed = function reseed(entropy, entropyEnc, add, addEnc) {
  // Optional entropy enc
  if (typeof entropyEnc !== 'string') {
    addEnc = add;
    add = entropyEnc;
    entropyEnc = null;
  }

  entropy = utils.toArray(entropy, entropyEnc);
  add = utils.toArray(add, addEnc);

  assert(entropy.length >= (this.minEntropy / 8),
         'Not enough entropy. Minimum is: ' + this.minEntropy + ' bits');

  this._update(entropy.concat(add || []));
  this._reseed = 1;
};

HmacDRBG.prototype.generate = function generate(len, enc, add, addEnc) {
  if (this._reseed > this.reseedInterval)
    throw new Error('Reseed is required');

  // Optional encoding
  if (typeof enc !== 'string') {
    addEnc = add;
    add = enc;
    enc = null;
  }

  // Optional additional data
  if (add) {
    add = utils.toArray(add, addEnc || 'hex');
    this._update(add);
  }

  var temp = [];
  while (temp.length < len) {
    this.V = this._hmac().update(this.V).digest();
    temp = temp.concat(this.V);
  }

  var res = temp.slice(0, len);
  this._update(add);
  this._reseed++;
  return utils.encode(res, enc);
};

},{"hash.js":101,"minimalistic-assert":123,"minimalistic-crypto-utils":124}],114:[function(require,module,exports){
/*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */
exports.read = function (buffer, offset, isLE, mLen, nBytes) {
  var e, m
  var eLen = (nBytes * 8) - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var nBits = -7
  var i = isLE ? (nBytes - 1) : 0
  var d = isLE ? -1 : 1
  var s = buffer[offset + i]

  i += d

  e = s & ((1 << (-nBits)) - 1)
  s >>= (-nBits)
  nBits += eLen
  for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}

  m = e & ((1 << (-nBits)) - 1)
  e >>= (-nBits)
  nBits += mLen
  for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}

  if (e === 0) {
    e = 1 - eBias
  } else if (e === eMax) {
    return m ? NaN : ((s ? -1 : 1) * Infinity)
  } else {
    m = m + Math.pow(2, mLen)
    e = e - eBias
  }
  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
}

exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
  var e, m, c
  var eLen = (nBytes * 8) - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)
  var i = isLE ? 0 : (nBytes - 1)
  var d = isLE ? 1 : -1
  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0

  value = Math.abs(value)

  if (isNaN(value) || value === Infinity) {
    m = isNaN(value) ? 1 : 0
    e = eMax
  } else {
    e = Math.floor(Math.log(value) / Math.LN2)
    if (value * (c = Math.pow(2, -e)) < 1) {
      e--
      c *= 2
    }
    if (e + eBias >= 1) {
      value += rt / c
    } else {
      value += rt * Math.pow(2, 1 - eBias)
    }
    if (value * c >= 2) {
      e++
      c /= 2
    }

    if (e + eBias >= eMax) {
      m = 0
      e = eMax
    } else if (e + eBias >= 1) {
      m = ((value * c) - 1) * Math.pow(2, mLen)
      e = e + eBias
    } else {
      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)
      e = 0
    }
  }

  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

  e = (e << mLen) | m
  eLen += mLen
  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

  buffer[offset + i - d] |= s * 128
}

},{}],115:[function(require,module,exports){
if (typeof Object.create === 'function') {
  // implementation from standard node.js 'util' module
  module.exports = function inherits(ctor, superCtor) {
    if (superCtor) {
      ctor.super_ = superCtor
      ctor.prototype = Object.create(superCtor.prototype, {
        constructor: {
          value: ctor,
          enumerable: false,
          writable: true,
          configurable: true
        }
      })
    }
  };
} else {
  // old school shim for old browsers
  module.exports = function inherits(ctor, superCtor) {
    if (superCtor) {
      ctor.super_ = superCtor
      var TempCtor = function () {}
      TempCtor.prototype = superCtor.prototype
      ctor.prototype = new TempCtor()
      ctor.prototype.constructor = ctor
    }
  }
}

},{}],116:[function(require,module,exports){
'use strict';

var hasToStringTag = require('has-tostringtag/shams')();
var callBound = require('call-bind/callBound');

var $toString = callBound('Object.prototype.toString');

var isStandardArguments = function isArguments(value) {
	if (hasToStringTag && value && typeof value === 'object' && Symbol.toStringTag in value) {
		return false;
	}
	return $toString(value) === '[object Arguments]';
};

var isLegacyArguments = function isArguments(value) {
	if (isStandardArguments(value)) {
		return true;
	}
	return value !== null &&
		typeof value === 'object' &&
		typeof value.length === 'number' &&
		value.length >= 0 &&
		$toString(value) !== '[object Array]' &&
		$toString(value.callee) === '[object Function]';
};

var supportsStandardArguments = (function () {
	return isStandardArguments(arguments);
}());

isStandardArguments.isLegacyArguments = isLegacyArguments; // for tests

module.exports = supportsStandardArguments ? isStandardArguments : isLegacyArguments;

},{"call-bind/callBound":54,"has-tostringtag/shams":98}],117:[function(require,module,exports){
/*!
 * Determine if an object is a Buffer
 *
 * @author   Feross Aboukhadijeh <https://feross.org>
 * @license  MIT
 */

// The _isBuffer check is for Safari 5-7 support, because it's missing
// Object.prototype.constructor. Remove this eventually
module.exports = function (obj) {
  return obj != null && (isBuffer(obj) || isSlowBuffer(obj) || !!obj._isBuffer)
}

function isBuffer (obj) {
  return !!obj.constructor && typeof obj.constructor.isBuffer === 'function' && obj.constructor.isBuffer(obj)
}

// For Node v0.10 support. Remove this eventually.
function isSlowBuffer (obj) {
  return typeof obj.readFloatLE === 'function' && typeof obj.slice === 'function' && isBuffer(obj.slice(0, 0))
}

},{}],118:[function(require,module,exports){
'use strict';

var fnToStr = Function.prototype.toString;
var reflectApply = typeof Reflect === 'object' && Reflect !== null && Reflect.apply;
var badArrayLike;
var isCallableMarker;
if (typeof reflectApply === 'function' && typeof Object.defineProperty === 'function') {
	try {
		badArrayLike = Object.defineProperty({}, 'length', {
			get: function () {
				throw isCallableMarker;
			}
		});
		isCallableMarker = {};
		// eslint-disable-next-line no-throw-literal
		reflectApply(function () { throw 42; }, null, badArrayLike);
	} catch (_) {
		if (_ !== isCallableMarker) {
			reflectApply = null;
		}
	}
} else {
	reflectApply = null;
}

var constructorRegex = /^\s*class\b/;
var isES6ClassFn = function isES6ClassFunction(value) {
	try {
		var fnStr = fnToStr.call(value);
		return constructorRegex.test(fnStr);
	} catch (e) {
		return false; // not a function
	}
};

var tryFunctionObject = function tryFunctionToStr(value) {
	try {
		if (isES6ClassFn(value)) { return false; }
		fnToStr.call(value);
		return true;
	} catch (e) {
		return false;
	}
};
var toStr = Object.prototype.toString;
var objectClass = '[object Object]';
var fnClass = '[object Function]';
var genClass = '[object GeneratorFunction]';
var ddaClass = '[object HTMLAllCollection]'; // IE 11
var ddaClass2 = '[object HTML document.all class]';
var ddaClass3 = '[object HTMLCollection]'; // IE 9-10
var hasToStringTag = typeof Symbol === 'function' && !!Symbol.toStringTag; // better: use `has-tostringtag`

var isIE68 = !(0 in [,]); // eslint-disable-line no-sparse-arrays, comma-spacing

var isDDA = function isDocumentDotAll() { return false; };
if (typeof document === 'object') {
	// Firefox 3 canonicalizes DDA to undefined when it's not accessed directly
	var all = document.all;
	if (toStr.call(all) === toStr.call(document.all)) {
		isDDA = function isDocumentDotAll(value) {
			/* globals document: false */
			// in IE 6-8, typeof document.all is "object" and it's truthy
			if ((isIE68 || !value) && (typeof value === 'undefined' || typeof value === 'object')) {
				try {
					var str = toStr.call(value);
					return (
						str === ddaClass
						|| str === ddaClass2
						|| str === ddaClass3 // opera 12.16
						|| str === objectClass // IE 6-8
					) && value('') == null; // eslint-disable-line eqeqeq
				} catch (e) { /**/ }
			}
			return false;
		};
	}
}

module.exports = reflectApply
	? function isCallable(value) {
		if (isDDA(value)) { return true; }
		if (!value) { return false; }
		if (typeof value !== 'function' && typeof value !== 'object') { return false; }
		try {
			reflectApply(value, null, badArrayLike);
		} catch (e) {
			if (e !== isCallableMarker) { return false; }
		}
		return !isES6ClassFn(value) && tryFunctionObject(value);
	}
	: function isCallable(value) {
		if (isDDA(value)) { return true; }
		if (!value) { return false; }
		if (typeof value !== 'function' && typeof value !== 'object') { return false; }
		if (hasToStringTag) { return tryFunctionObject(value); }
		if (isES6ClassFn(value)) { return false; }
		var strClass = toStr.call(value);
		if (strClass !== fnClass && strClass !== genClass && !(/^\[object HTML/).test(strClass)) { return false; }
		return tryFunctionObject(value);
	};

},{}],119:[function(require,module,exports){
'use strict';

var toStr = Object.prototype.toString;
var fnToStr = Function.prototype.toString;
var isFnRegex = /^\s*(?:function)?\*/;
var hasToStringTag = require('has-tostringtag/shams')();
var getProto = Object.getPrototypeOf;
var getGeneratorFunc = function () { // eslint-disable-line consistent-return
	if (!hasToStringTag) {
		return false;
	}
	try {
		return Function('return function*() {}')();
	} catch (e) {
	}
};
var GeneratorFunction;

module.exports = function isGeneratorFunction(fn) {
	if (typeof fn !== 'function') {
		return false;
	}
	if (isFnRegex.test(fnToStr.call(fn))) {
		return true;
	}
	if (!hasToStringTag) {
		var str = toStr.call(fn);
		return str === '[object GeneratorFunction]';
	}
	if (!getProto) {
		return false;
	}
	if (typeof GeneratorFunction === 'undefined') {
		var generatorFunc = getGeneratorFunc();
		GeneratorFunction = generatorFunc ? getProto(generatorFunc) : false;
	}
	return getProto(fn) === GeneratorFunction;
};

},{"has-tostringtag/shams":98}],120:[function(require,module,exports){
(function (global){(function (){
'use strict';

var forEach = require('for-each');
var availableTypedArrays = require('available-typed-arrays');
var callBound = require('call-bind/callBound');

var $toString = callBound('Object.prototype.toString');
var hasToStringTag = require('has-tostringtag/shams')();
var gOPD = require('gopd');

var g = typeof globalThis === 'undefined' ? global : globalThis;
var typedArrays = availableTypedArrays();

var $indexOf = callBound('Array.prototype.indexOf', true) || function indexOf(array, value) {
	for (var i = 0; i < array.length; i += 1) {
		if (array[i] === value) {
			return i;
		}
	}
	return -1;
};
var $slice = callBound('String.prototype.slice');
var toStrTags = {};
var getPrototypeOf = Object.getPrototypeOf; // require('getprototypeof');
if (hasToStringTag && gOPD && getPrototypeOf) {
	forEach(typedArrays, function (typedArray) {
		var arr = new g[typedArray]();
		if (Symbol.toStringTag in arr) {
			var proto = getPrototypeOf(arr);
			var descriptor = gOPD(proto, Symbol.toStringTag);
			if (!descriptor) {
				var superProto = getPrototypeOf(proto);
				descriptor = gOPD(superProto, Symbol.toStringTag);
			}
			toStrTags[typedArray] = descriptor.get;
		}
	});
}

var tryTypedArrays = function tryAllTypedArrays(value) {
	var anyTrue = false;
	forEach(toStrTags, function (getter, typedArray) {
		if (!anyTrue) {
			try {
				anyTrue = getter.call(value) === typedArray;
			} catch (e) { /**/ }
		}
	});
	return anyTrue;
};

module.exports = function isTypedArray(value) {
	if (!value || typeof value !== 'object') { return false; }
	if (!hasToStringTag || !(Symbol.toStringTag in value)) {
		var tag = $slice($toString(value), 8, -1);
		return $indexOf(typedArrays, tag) > -1;
	}
	if (!gOPD) { return false; }
	return tryTypedArrays(value);
};

}).call(this)}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"available-typed-arrays":19,"call-bind/callBound":54,"for-each":91,"gopd":95,"has-tostringtag/shams":98}],121:[function(require,module,exports){
'use strict'
var inherits = require('inherits')
var HashBase = require('hash-base')
var Buffer = require('safe-buffer').Buffer

var ARRAY16 = new Array(16)

function MD5 () {
  HashBase.call(this, 64)

  // state
  this._a = 0x67452301
  this._b = 0xefcdab89
  this._c = 0x98badcfe
  this._d = 0x10325476
}

inherits(MD5, HashBase)

MD5.prototype._update = function () {
  var M = ARRAY16
  for (var i = 0; i < 16; ++i) M[i] = this._block.readInt32LE(i * 4)

  var a = this._a
  var b = this._b
  var c = this._c
  var d = this._d

  a = fnF(a, b, c, d, M[0], 0xd76aa478, 7)
  d = fnF(d, a, b, c, M[1], 0xe8c7b756, 12)
  c = fnF(c, d, a, b, M[2], 0x242070db, 17)
  b = fnF(b, c, d, a, M[3], 0xc1bdceee, 22)
  a = fnF(a, b, c, d, M[4], 0xf57c0faf, 7)
  d = fnF(d, a, b, c, M[5], 0x4787c62a, 12)
  c = fnF(c, d, a, b, M[6], 0xa8304613, 17)
  b = fnF(b, c, d, a, M[7], 0xfd469501, 22)
  a = fnF(a, b, c, d, M[8], 0x698098d8, 7)
  d = fnF(d, a, b, c, M[9], 0x8b44f7af, 12)
  c = fnF(c, d, a, b, M[10], 0xffff5bb1, 17)
  b = fnF(b, c, d, a, M[11], 0x895cd7be, 22)
  a = fnF(a, b, c, d, M[12], 0x6b901122, 7)
  d = fnF(d, a, b, c, M[13], 0xfd987193, 12)
  c = fnF(c, d, a, b, M[14], 0xa679438e, 17)
  b = fnF(b, c, d, a, M[15], 0x49b40821, 22)

  a = fnG(a, b, c, d, M[1], 0xf61e2562, 5)
  d = fnG(d, a, b, c, M[6], 0xc040b340, 9)
  c = fnG(c, d, a, b, M[11], 0x265e5a51, 14)
  b = fnG(b, c, d, a, M[0], 0xe9b6c7aa, 20)
  a = fnG(a, b, c, d, M[5], 0xd62f105d, 5)
  d = fnG(d, a, b, c, M[10], 0x02441453, 9)
  c = fnG(c, d, a, b, M[15], 0xd8a1e681, 14)
  b = fnG(b, c, d, a, M[4], 0xe7d3fbc8, 20)
  a = fnG(a, b, c, d, M[9], 0x21e1cde6, 5)
  d = fnG(d, a, b, c, M[14], 0xc33707d6, 9)
  c = fnG(c, d, a, b, M[3], 0xf4d50d87, 14)
  b = fnG(b, c, d, a, M[8], 0x455a14ed, 20)
  a = fnG(a, b, c, d, M[13], 0xa9e3e905, 5)
  d = fnG(d, a, b, c, M[2], 0xfcefa3f8, 9)
  c = fnG(c, d, a, b, M[7], 0x676f02d9, 14)
  b = fnG(b, c, d, a, M[12], 0x8d2a4c8a, 20)

  a = fnH(a, b, c, d, M[5], 0xfffa3942, 4)
  d = fnH(d, a, b, c, M[8], 0x8771f681, 11)
  c = fnH(c, d, a, b, M[11], 0x6d9d6122, 16)
  b = fnH(b, c, d, a, M[14], 0xfde5380c, 23)
  a = fnH(a, b, c, d, M[1], 0xa4beea44, 4)
  d = fnH(d, a, b, c, M[4], 0x4bdecfa9, 11)
  c = fnH(c, d, a, b, M[7], 0xf6bb4b60, 16)
  b = fnH(b, c, d, a, M[10], 0xbebfbc70, 23)
  a = fnH(a, b, c, d, M[13], 0x289b7ec6, 4)
  d = fnH(d, a, b, c, M[0], 0xeaa127fa, 11)
  c = fnH(c, d, a, b, M[3], 0xd4ef3085, 16)
  b = fnH(b, c, d, a, M[6], 0x04881d05, 23)
  a = fnH(a, b, c, d, M[9], 0xd9d4d039, 4)
  d = fnH(d, a, b, c, M[12], 0xe6db99e5, 11)
  c = fnH(c, d, a, b, M[15], 0x1fa27cf8, 16)
  b = fnH(b, c, d, a, M[2], 0xc4ac5665, 23)

  a = fnI(a, b, c, d, M[0], 0xf4292244, 6)
  d = fnI(d, a, b, c, M[7], 0x432aff97, 10)
  c = fnI(c, d, a, b, M[14], 0xab9423a7, 15)
  b = fnI(b, c, d, a, M[5], 0xfc93a039, 21)
  a = fnI(a, b, c, d, M[12], 0x655b59c3, 6)
  d = fnI(d, a, b, c, M[3], 0x8f0ccc92, 10)
  c = fnI(c, d, a, b, M[10], 0xffeff47d, 15)
  b = fnI(b, c, d, a, M[1], 0x85845dd1, 21)
  a = fnI(a, b, c, d, M[8], 0x6fa87e4f, 6)
  d = fnI(d, a, b, c, M[15], 0xfe2ce6e0, 10)
  c = fnI(c, d, a, b, M[6], 0xa3014314, 15)
  b = fnI(b, c, d, a, M[13], 0x4e0811a1, 21)
  a = fnI(a, b, c, d, M[4], 0xf7537e82, 6)
  d = fnI(d, a, b, c, M[11], 0xbd3af235, 10)
  c = fnI(c, d, a, b, M[2], 0x2ad7d2bb, 15)
  b = fnI(b, c, d, a, M[9], 0xeb86d391, 21)

  this._a = (this._a + a) | 0
  this._b = (this._b + b) | 0
  this._c = (this._c + c) | 0
  this._d = (this._d + d) | 0
}

MD5.prototype._digest = function () {
  // create padding and handle blocks
  this._block[this._blockOffset++] = 0x80
  if (this._blockOffset > 56) {
    this._block.fill(0, this._blockOffset, 64)
    this._update()
    this._blockOffset = 0
  }

  this._block.fill(0, this._blockOffset, 56)
  this._block.writeUInt32LE(this._length[0], 56)
  this._block.writeUInt32LE(this._length[1], 60)
  this._update()

  // produce result
  var buffer = Buffer.allocUnsafe(16)
  buffer.writeInt32LE(this._a, 0)
  buffer.writeInt32LE(this._b, 4)
  buffer.writeInt32LE(this._c, 8)
  buffer.writeInt32LE(this._d, 12)
  return buffer
}

function rotl (x, n) {
  return (x << n) | (x >>> (32 - n))
}

function fnF (a, b, c, d, m, k, s) {
  return (rotl((a + ((b & c) | ((~b) & d)) + m + k) | 0, s) + b) | 0
}

function fnG (a, b, c, d, m, k, s) {
  return (rotl((a + ((b & d) | (c & (~d))) + m + k) | 0, s) + b) | 0
}

function fnH (a, b, c, d, m, k, s) {
  return (rotl((a + (b ^ c ^ d) + m + k) | 0, s) + b) | 0
}

function fnI (a, b, c, d, m, k, s) {
  return (rotl((a + ((c ^ (b | (~d)))) + m + k) | 0, s) + b) | 0
}

module.exports = MD5

},{"hash-base":100,"inherits":115,"safe-buffer":161}],122:[function(require,module,exports){
var bn = require('bn.js');
var brorand = require('brorand');

function MillerRabin(rand) {
  this.rand = rand || new brorand.Rand();
}
module.exports = MillerRabin;

MillerRabin.create = function create(rand) {
  return new MillerRabin(rand);
};

MillerRabin.prototype._randbelow = function _randbelow(n) {
  var len = n.bitLength();
  var min_bytes = Math.ceil(len / 8);

  // Generage random bytes until a number less than n is found.
  // This ensures that 0..n-1 have an equal probability of being selected.
  do
    var a = new bn(this.rand.generate(min_bytes));
  while (a.cmp(n) >= 0);

  return a;
};

MillerRabin.prototype._randrange = function _randrange(start, stop) {
  // Generate a random number greater than or equal to start and less than stop.
  var size = stop.sub(start);
  return start.add(this._randbelow(size));
};

MillerRabin.prototype.test = function test(n, k, cb) {
  var len = n.bitLength();
  var red = bn.mont(n);
  var rone = new bn(1).toRed(red);

  if (!k)
    k = Math.max(1, (len / 48) | 0);

  // Find d and s, (n - 1) = (2 ^ s) * d;
  var n1 = n.subn(1);
  for (var s = 0; !n1.testn(s); s++) {}
  var d = n.shrn(s);

  var rn1 = n1.toRed(red);

  var prime = true;
  for (; k > 0; k--) {
    var a = this._randrange(new bn(2), n1);
    if (cb)
      cb(a);

    var x = a.toRed(red).redPow(d);
    if (x.cmp(rone) === 0 || x.cmp(rn1) === 0)
      continue;

    for (var i = 1; i < s; i++) {
      x = x.redSqr();

      if (x.cmp(rone) === 0)
        return false;
      if (x.cmp(rn1) === 0)
        break;
    }

    if (i === s)
      return false;
  }

  return prime;
};

MillerRabin.prototype.getDivisor = function getDivisor(n, k) {
  var len = n.bitLength();
  var red = bn.mont(n);
  var rone = new bn(1).toRed(red);

  if (!k)
    k = Math.max(1, (len / 48) | 0);

  // Find d and s, (n - 1) = (2 ^ s) * d;
  var n1 = n.subn(1);
  for (var s = 0; !n1.testn(s); s++) {}
  var d = n.shrn(s);

  var rn1 = n1.toRed(red);

  for (; k > 0; k--) {
    var a = this._randrange(new bn(2), n1);

    var g = n.gcd(a);
    if (g.cmpn(1) !== 0)
      return g;

    var x = a.toRed(red).redPow(d);
    if (x.cmp(rone) === 0 || x.cmp(rn1) === 0)
      continue;

    for (var i = 1; i < s; i++) {
      x = x.redSqr();

      if (x.cmp(rone) === 0)
        return x.fromRed().subn(1).gcd(n);
      if (x.cmp(rn1) === 0)
        break;
    }

    if (i === s) {
      x = x.redSqr();
      return x.fromRed().subn(1).gcd(n);
    }
  }

  return false;
};

},{"bn.js":21,"brorand":23}],123:[function(require,module,exports){
module.exports = assert;

function assert(val, msg) {
  if (!val)
    throw new Error(msg || 'Assertion failed');
}

assert.equal = function assertEqual(l, r, msg) {
  if (l != r)
    throw new Error(msg || ('Assertion failed: ' + l + ' != ' + r));
};

},{}],124:[function(require,module,exports){
'use strict';

var utils = exports;

function toArray(msg, enc) {
  if (Array.isArray(msg))
    return msg.slice();
  if (!msg)
    return [];
  var res = [];
  if (typeof msg !== 'string') {
    for (var i = 0; i < msg.length; i++)
      res[i] = msg[i] | 0;
    return res;
  }
  if (enc === 'hex') {
    msg = msg.replace(/[^a-z0-9]+/ig, '');
    if (msg.length % 2 !== 0)
      msg = '0' + msg;
    for (var i = 0; i < msg.length; i += 2)
      res.push(parseInt(msg[i] + msg[i + 1], 16));
  } else {
    for (var i = 0; i < msg.length; i++) {
      var c = msg.charCodeAt(i);
      var hi = c >> 8;
      var lo = c & 0xff;
      if (hi)
        res.push(hi, lo);
      else
        res.push(lo);
    }
  }
  return res;
}
utils.toArray = toArray;

function zero2(word) {
  if (word.length === 1)
    return '0' + word;
  else
    return word;
}
utils.zero2 = zero2;

function toHex(msg) {
  var res = '';
  for (var i = 0; i < msg.length; i++)
    res += zero2(msg[i].toString(16));
  return res;
}
utils.toHex = toHex;

utils.encode = function encode(arr, enc) {
  if (enc === 'hex')
    return toHex(arr);
  else
    return arr;
};

},{}],125:[function(require,module,exports){
module.exports={"2.16.840.1.101.3.4.1.1": "aes-128-ecb",
"2.16.840.1.101.3.4.1.2": "aes-128-cbc",
"2.16.840.1.101.3.4.1.3": "aes-128-ofb",
"2.16.840.1.101.3.4.1.4": "aes-128-cfb",
"2.16.840.1.101.3.4.1.21": "aes-192-ecb",
"2.16.840.1.101.3.4.1.22": "aes-192-cbc",
"2.16.840.1.101.3.4.1.23": "aes-192-ofb",
"2.16.840.1.101.3.4.1.24": "aes-192-cfb",
"2.16.840.1.101.3.4.1.41": "aes-256-ecb",
"2.16.840.1.101.3.4.1.42": "aes-256-cbc",
"2.16.840.1.101.3.4.1.43": "aes-256-ofb",
"2.16.840.1.101.3.4.1.44": "aes-256-cfb"
}
},{}],126:[function(require,module,exports){
// from https://github.com/indutny/self-signed/blob/gh-pages/lib/asn1.js
// Fedor, you are amazing.
'use strict'

var asn1 = require('asn1.js')

exports.certificate = require('./certificate')

var RSAPrivateKey = asn1.define('RSAPrivateKey', function () {
  this.seq().obj(
    this.key('version').int(),
    this.key('modulus').int(),
    this.key('publicExponent').int(),
    this.key('privateExponent').int(),
    this.key('prime1').int(),
    this.key('prime2').int(),
    this.key('exponent1').int(),
    this.key('exponent2').int(),
    this.key('coefficient').int()
  )
})
exports.RSAPrivateKey = RSAPrivateKey

var RSAPublicKey = asn1.define('RSAPublicKey', function () {
  this.seq().obj(
    this.key('modulus').int(),
    this.key('publicExponent').int()
  )
})
exports.RSAPublicKey = RSAPublicKey

var PublicKey = asn1.define('SubjectPublicKeyInfo', function () {
  this.seq().obj(
    this.key('algorithm').use(AlgorithmIdentifier),
    this.key('subjectPublicKey').bitstr()
  )
})
exports.PublicKey = PublicKey

var AlgorithmIdentifier = asn1.define('AlgorithmIdentifier', function () {
  this.seq().obj(
    this.key('algorithm').objid(),
    this.key('none').null_().optional(),
    this.key('curve').objid().optional(),
    this.key('params').seq().obj(
      this.key('p').int(),
      this.key('q').int(),
      this.key('g').int()
    ).optional()
  )
})

var PrivateKeyInfo = asn1.define('PrivateKeyInfo', function () {
  this.seq().obj(
    this.key('version').int(),
    this.key('algorithm').use(AlgorithmIdentifier),
    this.key('subjectPrivateKey').octstr()
  )
})
exports.PrivateKey = PrivateKeyInfo
var EncryptedPrivateKeyInfo = asn1.define('EncryptedPrivateKeyInfo', function () {
  this.seq().obj(
    this.key('algorithm').seq().obj(
      this.key('id').objid(),
      this.key('decrypt').seq().obj(
        this.key('kde').seq().obj(
          this.key('id').objid(),
          this.key('kdeparams').seq().obj(
            this.key('salt').octstr(),
            this.key('iters').int()
          )
        ),
        this.key('cipher').seq().obj(
          this.key('algo').objid(),
          this.key('iv').octstr()
        )
      )
    ),
    this.key('subjectPrivateKey').octstr()
  )
})

exports.EncryptedPrivateKey = EncryptedPrivateKeyInfo

var DSAPrivateKey = asn1.define('DSAPrivateKey', function () {
  this.seq().obj(
    this.key('version').int(),
    this.key('p').int(),
    this.key('q').int(),
    this.key('g').int(),
    this.key('pub_key').int(),
    this.key('priv_key').int()
  )
})
exports.DSAPrivateKey = DSAPrivateKey

exports.DSAparam = asn1.define('DSAparam', function () {
  this.int()
})

var ECPrivateKey = asn1.define('ECPrivateKey', function () {
  this.seq().obj(
    this.key('version').int(),
    this.key('privateKey').octstr(),
    this.key('parameters').optional().explicit(0).use(ECParameters),
    this.key('publicKey').optional().explicit(1).bitstr()
  )
})
exports.ECPrivateKey = ECPrivateKey

var ECParameters = asn1.define('ECParameters', function () {
  this.choice({
    namedCurve: this.objid()
  })
})

exports.signature = asn1.define('signature', function () {
  this.seq().obj(
    this.key('r').int(),
    this.key('s').int()
  )
})

},{"./certificate":127,"asn1.js":5}],127:[function(require,module,exports){
// from https://github.com/Rantanen/node-dtls/blob/25a7dc861bda38cfeac93a723500eea4f0ac2e86/Certificate.js
// thanks to @Rantanen

'use strict'

var asn = require('asn1.js')

var Time = asn.define('Time', function () {
  this.choice({
    utcTime: this.utctime(),
    generalTime: this.gentime()
  })
})

var AttributeTypeValue = asn.define('AttributeTypeValue', function () {
  this.seq().obj(
    this.key('type').objid(),
    this.key('value').any()
  )
})

var AlgorithmIdentifier = asn.define('AlgorithmIdentifier', function () {
  this.seq().obj(
    this.key('algorithm').objid(),
    this.key('parameters').optional(),
    this.key('curve').objid().optional()
  )
})

var SubjectPublicKeyInfo = asn.define('SubjectPublicKeyInfo', function () {
  this.seq().obj(
    this.key('algorithm').use(AlgorithmIdentifier),
    this.key('subjectPublicKey').bitstr()
  )
})

var RelativeDistinguishedName = asn.define('RelativeDistinguishedName', function () {
  this.setof(AttributeTypeValue)
})

var RDNSequence = asn.define('RDNSequence', function () {
  this.seqof(RelativeDistinguishedName)
})

var Name = asn.define('Name', function () {
  this.choice({
    rdnSequence: this.use(RDNSequence)
  })
})

var Validity = asn.define('Validity', function () {
  this.seq().obj(
    this.key('notBefore').use(Time),
    this.key('notAfter').use(Time)
  )
})

var Extension = asn.define('Extension', function () {
  this.seq().obj(
    this.key('extnID').objid(),
    this.key('critical').bool().def(false),
    this.key('extnValue').octstr()
  )
})

var TBSCertificate = asn.define('TBSCertificate', function () {
  this.seq().obj(
    this.key('version').explicit(0).int().optional(),
    this.key('serialNumber').int(),
    this.key('signature').use(AlgorithmIdentifier),
    this.key('issuer').use(Name),
    this.key('validity').use(Validity),
    this.key('subject').use(Name),
    this.key('subjectPublicKeyInfo').use(SubjectPublicKeyInfo),
    this.key('issuerUniqueID').implicit(1).bitstr().optional(),
    this.key('subjectUniqueID').implicit(2).bitstr().optional(),
    this.key('extensions').explicit(3).seqof(Extension).optional()
  )
})

var X509Certificate = asn.define('X509Certificate', function () {
  this.seq().obj(
    this.key('tbsCertificate').use(TBSCertificate),
    this.key('signatureAlgorithm').use(AlgorithmIdentifier),
    this.key('signatureValue').bitstr()
  )
})

module.exports = X509Certificate

},{"asn1.js":5}],128:[function(require,module,exports){
// adapted from https://github.com/apatil/pemstrip
var findProc = /Proc-Type: 4,ENCRYPTED[\n\r]+DEK-Info: AES-((?:128)|(?:192)|(?:256))-CBC,([0-9A-H]+)[\n\r]+([0-9A-z\n\r+/=]+)[\n\r]+/m
var startRegex = /^-----BEGIN ((?:.*? KEY)|CERTIFICATE)-----/m
var fullRegex = /^-----BEGIN ((?:.*? KEY)|CERTIFICATE)-----([0-9A-z\n\r+/=]+)-----END \1-----$/m
var evp = require('evp_bytestokey')
var ciphers = require('browserify-aes')
var Buffer = require('safe-buffer').Buffer
module.exports = function (okey, password) {
  var key = okey.toString()
  var match = key.match(findProc)
  var decrypted
  if (!match) {
    var match2 = key.match(fullRegex)
    decrypted = Buffer.from(match2[2].replace(/[\r\n]/g, ''), 'base64')
  } else {
    var suite = 'aes' + match[1]
    var iv = Buffer.from(match[2], 'hex')
    var cipherText = Buffer.from(match[3].replace(/[\r\n]/g, ''), 'base64')
    var cipherKey = evp(password, iv.slice(0, 8), parseInt(match[1], 10)).key
    var out = []
    var cipher = ciphers.createDecipheriv(suite, cipherKey, iv)
    out.push(cipher.update(cipherText))
    out.push(cipher.final())
    decrypted = Buffer.concat(out)
  }
  var tag = key.match(startRegex)[1]
  return {
    tag: tag,
    data: decrypted
  }
}

},{"browserify-aes":27,"evp_bytestokey":90,"safe-buffer":161}],129:[function(require,module,exports){
var asn1 = require('./asn1')
var aesid = require('./aesid.json')
var fixProc = require('./fixProc')
var ciphers = require('browserify-aes')
var compat = require('pbkdf2')
var Buffer = require('safe-buffer').Buffer
module.exports = parseKeys

function parseKeys (buffer) {
  var password
  if (typeof buffer === 'object' && !Buffer.isBuffer(buffer)) {
    password = buffer.passphrase
    buffer = buffer.key
  }
  if (typeof buffer === 'string') {
    buffer = Buffer.from(buffer)
  }

  var stripped = fixProc(buffer, password)

  var type = stripped.tag
  var data = stripped.data
  var subtype, ndata
  switch (type) {
    case 'CERTIFICATE':
      ndata = asn1.certificate.decode(data, 'der').tbsCertificate.subjectPublicKeyInfo
      // falls through
    case 'PUBLIC KEY':
      if (!ndata) {
        ndata = asn1.PublicKey.decode(data, 'der')
      }
      subtype = ndata.algorithm.algorithm.join('.')
      switch (subtype) {
        case '1.2.840.113549.1.1.1':
          return asn1.RSAPublicKey.decode(ndata.subjectPublicKey.data, 'der')
        case '1.2.840.10045.2.1':
          ndata.subjectPrivateKey = ndata.subjectPublicKey
          return {
            type: 'ec',
            data: ndata
          }
        case '1.2.840.10040.4.1':
          ndata.algorithm.params.pub_key = asn1.DSAparam.decode(ndata.subjectPublicKey.data, 'der')
          return {
            type: 'dsa',
            data: ndata.algorithm.params
          }
        default: throw new Error('unknown key id ' + subtype)
      }
      // throw new Error('unknown key type ' + type)
    case 'ENCRYPTED PRIVATE KEY':
      data = asn1.EncryptedPrivateKey.decode(data, 'der')
      data = decrypt(data, password)
      // falls through
    case 'PRIVATE KEY':
      ndata = asn1.PrivateKey.decode(data, 'der')
      subtype = ndata.algorithm.algorithm.join('.')
      switch (subtype) {
        case '1.2.840.113549.1.1.1':
          return asn1.RSAPrivateKey.decode(ndata.subjectPrivateKey, 'der')
        case '1.2.840.10045.2.1':
          return {
            curve: ndata.algorithm.curve,
            privateKey: asn1.ECPrivateKey.decode(ndata.subjectPrivateKey, 'der').privateKey
          }
        case '1.2.840.10040.4.1':
          ndata.algorithm.params.priv_key = asn1.DSAparam.decode(ndata.subjectPrivateKey, 'der')
          return {
            type: 'dsa',
            params: ndata.algorithm.params
          }
        default: throw new Error('unknown key id ' + subtype)
      }
      // throw new Error('unknown key type ' + type)
    case 'RSA PUBLIC KEY':
      return asn1.RSAPublicKey.decode(data, 'der')
    case 'RSA PRIVATE KEY':
      return asn1.RSAPrivateKey.decode(data, 'der')
    case 'DSA PRIVATE KEY':
      return {
        type: 'dsa',
        params: asn1.DSAPrivateKey.decode(data, 'der')
      }
    case 'EC PRIVATE KEY':
      data = asn1.ECPrivateKey.decode(data, 'der')
      return {
        curve: data.parameters.value,
        privateKey: data.privateKey
      }
    default: throw new Error('unknown key type ' + type)
  }
}
parseKeys.signature = asn1.signature
function decrypt (data, password) {
  var salt = data.algorithm.decrypt.kde.kdeparams.salt
  var iters = parseInt(data.algorithm.decrypt.kde.kdeparams.iters.toString(), 10)
  var algo = aesid[data.algorithm.decrypt.cipher.algo.join('.')]
  var iv = data.algorithm.decrypt.cipher.iv
  var cipherText = data.subjectPrivateKey
  var keylen = parseInt(algo.split('-')[1], 10) / 8
  var key = compat.pbkdf2Sync(password, salt, iters, keylen, 'sha1')
  var cipher = ciphers.createDecipheriv(algo, key, iv)
  var out = []
  out.push(cipher.update(cipherText))
  out.push(cipher.final())
  return Buffer.concat(out)
}

},{"./aesid.json":125,"./asn1":126,"./fixProc":128,"browserify-aes":27,"pbkdf2":130,"safe-buffer":161}],130:[function(require,module,exports){
exports.pbkdf2 = require('./lib/async')
exports.pbkdf2Sync = require('./lib/sync')

},{"./lib/async":131,"./lib/sync":134}],131:[function(require,module,exports){
(function (global){(function (){
var Buffer = require('safe-buffer').Buffer

var checkParameters = require('./precondition')
var defaultEncoding = require('./default-encoding')
var sync = require('./sync')
var toBuffer = require('./to-buffer')

var ZERO_BUF
var subtle = global.crypto && global.crypto.subtle
var toBrowser = {
  sha: 'SHA-1',
  'sha-1': 'SHA-1',
  sha1: 'SHA-1',
  sha256: 'SHA-256',
  'sha-256': 'SHA-256',
  sha384: 'SHA-384',
  'sha-384': 'SHA-384',
  'sha-512': 'SHA-512',
  sha512: 'SHA-512'
}
var checks = []
function checkNative (algo) {
  if (global.process && !global.process.browser) {
    return Promise.resolve(false)
  }
  if (!subtle || !subtle.importKey || !subtle.deriveBits) {
    return Promise.resolve(false)
  }
  if (checks[algo] !== undefined) {
    return checks[algo]
  }
  ZERO_BUF = ZERO_BUF || Buffer.alloc(8)
  var prom = browserPbkdf2(ZERO_BUF, ZERO_BUF, 10, 128, algo)
    .then(function () {
      return true
    }).catch(function () {
      return false
    })
  checks[algo] = prom
  return prom
}
var nextTick
function getNextTick () {
  if (nextTick) {
    return nextTick
  }
  if (global.process && global.process.nextTick) {
    nextTick = global.process.nextTick
  } else if (global.queueMicrotask) {
    nextTick = global.queueMicrotask
  } else if (global.setImmediate) {
    nextTick = global.setImmediate
  } else {
    nextTick = global.setTimeout
  }
  return nextTick
}
function browserPbkdf2 (password, salt, iterations, length, algo) {
  return subtle.importKey(
    'raw', password, { name: 'PBKDF2' }, false, ['deriveBits']
  ).then(function (key) {
    return subtle.deriveBits({
      name: 'PBKDF2',
      salt: salt,
      iterations: iterations,
      hash: {
        name: algo
      }
    }, key, length << 3)
  }).then(function (res) {
    return Buffer.from(res)
  })
}

function resolvePromise (promise, callback) {
  promise.then(function (out) {
    getNextTick()(function () {
      callback(null, out)
    })
  }, function (e) {
    getNextTick()(function () {
      callback(e)
    })
  })
}
module.exports = function (password, salt, iterations, keylen, digest, callback) {
  if (typeof digest === 'function') {
    callback = digest
    digest = undefined
  }

  digest = digest || 'sha1'
  var algo = toBrowser[digest.toLowerCase()]

  if (!algo || typeof global.Promise !== 'function') {
    getNextTick()(function () {
      var out
      try {
        out = sync(password, salt, iterations, keylen, digest)
      } catch (e) {
        return callback(e)
      }
      callback(null, out)
    })
    return
  }

  checkParameters(iterations, keylen)
  password = toBuffer(password, defaultEncoding, 'Password')
  salt = toBuffer(salt, defaultEncoding, 'Salt')
  if (typeof callback !== 'function') throw new Error('No callback provided to pbkdf2')

  resolvePromise(checkNative(algo).then(function (resp) {
    if (resp) return browserPbkdf2(password, salt, iterations, keylen, algo)

    return sync(password, salt, iterations, keylen, digest)
  }), callback)
}

}).call(this)}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"./default-encoding":132,"./precondition":133,"./sync":134,"./to-buffer":135,"safe-buffer":161}],132:[function(require,module,exports){
(function (process,global){(function (){
var defaultEncoding
/* istanbul ignore next */
if (global.process && global.process.browser) {
  defaultEncoding = 'utf-8'
} else if (global.process && global.process.version) {
  var pVersionMajor = parseInt(process.version.split('.')[0].slice(1), 10)

  defaultEncoding = pVersionMajor >= 6 ? 'utf-8' : 'binary'
} else {
  defaultEncoding = 'utf-8'
}
module.exports = defaultEncoding

}).call(this)}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"_process":136}],133:[function(require,module,exports){
var MAX_ALLOC = Math.pow(2, 30) - 1 // default in iojs

module.exports = function (iterations, keylen) {
  if (typeof iterations !== 'number') {
    throw new TypeError('Iterations not a number')
  }

  if (iterations < 0) {
    throw new TypeError('Bad iterations')
  }

  if (typeof keylen !== 'number') {
    throw new TypeError('Key length not a number')
  }

  if (keylen < 0 || keylen > MAX_ALLOC || keylen !== keylen) { /* eslint no-self-compare: 0 */
    throw new TypeError('Bad key length')
  }
}

},{}],134:[function(require,module,exports){
var md5 = require('create-hash/md5')
var RIPEMD160 = require('ripemd160')
var sha = require('sha.js')
var Buffer = require('safe-buffer').Buffer

var checkParameters = require('./precondition')
var defaultEncoding = require('./default-encoding')
var toBuffer = require('./to-buffer')

var ZEROS = Buffer.alloc(128)
var sizes = {
  md5: 16,
  sha1: 20,
  sha224: 28,
  sha256: 32,
  sha384: 48,
  sha512: 64,
  rmd160: 20,
  ripemd160: 20
}

function Hmac (alg, key, saltLen) {
  var hash = getDigest(alg)
  var blocksize = (alg === 'sha512' || alg === 'sha384') ? 128 : 64

  if (key.length > blocksize) {
    key = hash(key)
  } else if (key.length < blocksize) {
    key = Buffer.concat([key, ZEROS], blocksize)
  }

  var ipad = Buffer.allocUnsafe(blocksize + sizes[alg])
  var opad = Buffer.allocUnsafe(blocksize + sizes[alg])
  for (var i = 0; i < blocksize; i++) {
    ipad[i] = key[i] ^ 0x36
    opad[i] = key[i] ^ 0x5C
  }

  var ipad1 = Buffer.allocUnsafe(blocksize + saltLen + 4)
  ipad.copy(ipad1, 0, 0, blocksize)
  this.ipad1 = ipad1
  this.ipad2 = ipad
  this.opad = opad
  this.alg = alg
  this.blocksize = blocksize
  this.hash = hash
  this.size = sizes[alg]
}

Hmac.prototype.run = function (data, ipad) {
  data.copy(ipad, this.blocksize)
  var h = this.hash(ipad)
  h.copy(this.opad, this.blocksize)
  return this.hash(this.opad)
}

function getDigest (alg) {
  function shaFunc (data) {
    return sha(alg).update(data).digest()
  }
  function rmd160Func (data) {
    return new RIPEMD160().update(data).digest()
  }

  if (alg === 'rmd160' || alg === 'ripemd160') return rmd160Func
  if (alg === 'md5') return md5
  return shaFunc
}

function pbkdf2 (password, salt, iterations, keylen, digest) {
  checkParameters(iterations, keylen)
  password = toBuffer(password, defaultEncoding, 'Password')
  salt = toBuffer(salt, defaultEncoding, 'Salt')

  digest = digest || 'sha1'

  var hmac = new Hmac(digest, password, salt.length)

  var DK = Buffer.allocUnsafe(keylen)
  var block1 = Buffer.allocUnsafe(salt.length + 4)
  salt.copy(block1, 0, 0, salt.length)

  var destPos = 0
  var hLen = sizes[digest]
  var l = Math.ceil(keylen / hLen)

  for (var i = 1; i <= l; i++) {
    block1.writeUInt32BE(i, salt.length)

    var T = hmac.run(block1, hmac.ipad1)
    var U = T

    for (var j = 1; j < iterations; j++) {
      U = hmac.run(U, hmac.ipad2)
      for (var k = 0; k < hLen; k++) T[k] ^= U[k]
    }

    T.copy(DK, destPos)
    destPos += hLen
  }

  return DK
}

module.exports = pbkdf2

},{"./default-encoding":132,"./precondition":133,"./to-buffer":135,"create-hash/md5":59,"ripemd160":160,"safe-buffer":161,"sha.js":164}],135:[function(require,module,exports){
var Buffer = require('safe-buffer').Buffer

module.exports = function (thing, encoding, name) {
  if (Buffer.isBuffer(thing)) {
    return thing
  } else if (typeof thing === 'string') {
    return Buffer.from(thing, encoding)
  } else if (ArrayBuffer.isView(thing)) {
    return Buffer.from(thing.buffer)
  } else {
    throw new TypeError(name + ' must be a string, a Buffer, a typed array or a DataView')
  }
}

},{"safe-buffer":161}],136:[function(require,module,exports){
// shim for using process in browser
var process = module.exports = {};

// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout () {
    throw new Error('clearTimeout has not been defined');
}
(function () {
    try {
        if (typeof setTimeout === 'function') {
            cachedSetTimeout = setTimeout;
        } else {
            cachedSetTimeout = defaultSetTimout;
        }
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === 'function') {
            cachedClearTimeout = clearTimeout;
        } else {
            cachedClearTimeout = defaultClearTimeout;
        }
    } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
    }
} ())
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) {
        //normal enviroments in sane situations
        return setTimeout(fun, 0);
    }
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch(e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch(e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }


}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) {
        //normal enviroments in sane situations
        return clearTimeout(marker);
    }
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }



}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    if (!draining || !currentQueue) {
        return;
    }
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        runTimeout(drainQueue);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;

process.listeners = function (name) { return [] }

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };

},{}],137:[function(require,module,exports){
exports.publicEncrypt = require('./publicEncrypt')
exports.privateDecrypt = require('./privateDecrypt')

exports.privateEncrypt = function privateEncrypt (key, buf) {
  return exports.publicEncrypt(key, buf, true)
}

exports.publicDecrypt = function publicDecrypt (key, buf) {
  return exports.privateDecrypt(key, buf, true)
}

},{"./privateDecrypt":139,"./publicEncrypt":140}],138:[function(require,module,exports){
var createHash = require('create-hash')
var Buffer = require('safe-buffer').Buffer

module.exports = function (seed, len) {
  var t = Buffer.alloc(0)
  var i = 0
  var c
  while (t.length < len) {
    c = i2ops(i++)
    t = Buffer.concat([t, createHash('sha1').update(seed).update(c).digest()])
  }
  return t.slice(0, len)
}

function i2ops (c) {
  var out = Buffer.allocUnsafe(4)
  out.writeUInt32BE(c, 0)
  return out
}

},{"create-hash":58,"safe-buffer":161}],139:[function(require,module,exports){
var parseKeys = require('parse-asn1')
var mgf = require('./mgf')
var xor = require('./xor')
var BN = require('bn.js')
var crt = require('browserify-rsa')
var createHash = require('create-hash')
var withPublic = require('./withPublic')
var Buffer = require('safe-buffer').Buffer

module.exports = function privateDecrypt (privateKey, enc, reverse) {
  var padding
  if (privateKey.padding) {
    padding = privateKey.padding
  } else if (reverse) {
    padding = 1
  } else {
    padding = 4
  }

  var key = parseKeys(privateKey)
  var k = key.modulus.byteLength()
  if (enc.length > k || new BN(enc).cmp(key.modulus) >= 0) {
    throw new Error('decryption error')
  }
  var msg
  if (reverse) {
    msg = withPublic(new BN(enc), key)
  } else {
    msg = crt(enc, key)
  }
  var zBuffer = Buffer.alloc(k - msg.length)
  msg = Buffer.concat([zBuffer, msg], k)
  if (padding === 4) {
    return oaep(key, msg)
  } else if (padding === 1) {
    return pkcs1(key, msg, reverse)
  } else if (padding === 3) {
    return msg
  } else {
    throw new Error('unknown padding')
  }
}

function oaep (key, msg) {
  var k = key.modulus.byteLength()
  var iHash = createHash('sha1').update(Buffer.alloc(0)).digest()
  var hLen = iHash.length
  if (msg[0] !== 0) {
    throw new Error('decryption error')
  }
  var maskedSeed = msg.slice(1, hLen + 1)
  var maskedDb = msg.slice(hLen + 1)
  var seed = xor(maskedSeed, mgf(maskedDb, hLen))
  var db = xor(maskedDb, mgf(seed, k - hLen - 1))
  if (compare(iHash, db.slice(0, hLen))) {
    throw new Error('decryption error')
  }
  var i = hLen
  while (db[i] === 0) {
    i++
  }
  if (db[i++] !== 1) {
    throw new Error('decryption error')
  }
  return db.slice(i)
}

function pkcs1 (key, msg, reverse) {
  var p1 = msg.slice(0, 2)
  var i = 2
  var status = 0
  while (msg[i++] !== 0) {
    if (i >= msg.length) {
      status++
      break
    }
  }
  var ps = msg.slice(2, i - 1)

  if ((p1.toString('hex') !== '0002' && !reverse) || (p1.toString('hex') !== '0001' && reverse)) {
    status++
  }
  if (ps.length < 8) {
    status++
  }
  if (status) {
    throw new Error('decryption error')
  }
  return msg.slice(i)
}
function compare (a, b) {
  a = Buffer.from(a)
  b = Buffer.from(b)
  var dif = 0
  var len = a.length
  if (a.length !== b.length) {
    dif++
    len = Math.min(a.length, b.length)
  }
  var i = -1
  while (++i < len) {
    dif += (a[i] ^ b[i])
  }
  return dif
}

},{"./mgf":138,"./withPublic":141,"./xor":142,"bn.js":21,"browserify-rsa":45,"create-hash":58,"parse-asn1":129,"safe-buffer":161}],140:[function(require,module,exports){
var parseKeys = require('parse-asn1')
var randomBytes = require('randombytes')
var createHash = require('create-hash')
var mgf = require('./mgf')
var xor = require('./xor')
var BN = require('bn.js')
var withPublic = require('./withPublic')
var crt = require('browserify-rsa')
var Buffer = require('safe-buffer').Buffer

module.exports = function publicEncrypt (publicKey, msg, reverse) {
  var padding
  if (publicKey.padding) {
    padding = publicKey.padding
  } else if (reverse) {
    padding = 1
  } else {
    padding = 4
  }
  var key = parseKeys(publicKey)
  var paddedMsg
  if (padding === 4) {
    paddedMsg = oaep(key, msg)
  } else if (padding === 1) {
    paddedMsg = pkcs1(key, msg, reverse)
  } else if (padding === 3) {
    paddedMsg = new BN(msg)
    if (paddedMsg.cmp(key.modulus) >= 0) {
      throw new Error('data too long for modulus')
    }
  } else {
    throw new Error('unknown padding')
  }
  if (reverse) {
    return crt(paddedMsg, key)
  } else {
    return withPublic(paddedMsg, key)
  }
}

function oaep (key, msg) {
  var k = key.modulus.byteLength()
  var mLen = msg.length
  var iHash = createHash('sha1').update(Buffer.alloc(0)).digest()
  var hLen = iHash.length
  var hLen2 = 2 * hLen
  if (mLen > k - hLen2 - 2) {
    throw new Error('message too long')
  }
  var ps = Buffer.alloc(k - mLen - hLen2 - 2)
  var dblen = k - hLen - 1
  var seed = randomBytes(hLen)
  var maskedDb = xor(Buffer.concat([iHash, ps, Buffer.alloc(1, 1), msg], dblen), mgf(seed, dblen))
  var maskedSeed = xor(seed, mgf(maskedDb, hLen))
  return new BN(Buffer.concat([Buffer.alloc(1), maskedSeed, maskedDb], k))
}
function pkcs1 (key, msg, reverse) {
  var mLen = msg.length
  var k = key.modulus.byteLength()
  if (mLen > k - 11) {
    throw new Error('message too long')
  }
  var ps
  if (reverse) {
    ps = Buffer.alloc(k - mLen - 3, 0xff)
  } else {
    ps = nonZero(k - mLen - 3)
  }
  return new BN(Buffer.concat([Buffer.from([0, reverse ? 1 : 2]), ps, Buffer.alloc(1), msg], k))
}
function nonZero (len) {
  var out = Buffer.allocUnsafe(len)
  var i = 0
  var cache = randomBytes(len * 2)
  var cur = 0
  var num
  while (i < len) {
    if (cur === cache.length) {
      cache = randomBytes(len * 2)
      cur = 0
    }
    num = cache[cur++]
    if (num) {
      out[i++] = num
    }
  }
  return out
}

},{"./mgf":138,"./withPublic":141,"./xor":142,"bn.js":21,"browserify-rsa":45,"create-hash":58,"parse-asn1":129,"randombytes":143,"safe-buffer":161}],141:[function(require,module,exports){
var BN = require('bn.js')
var Buffer = require('safe-buffer').Buffer

function withPublic (paddedMsg, key) {
  return Buffer.from(paddedMsg
    .toRed(BN.mont(key.modulus))
    .redPow(new BN(key.publicExponent))
    .fromRed()
    .toArray())
}

module.exports = withPublic

},{"bn.js":21,"safe-buffer":161}],142:[function(require,module,exports){
module.exports = function xor (a, b) {
  var len = a.length
  var i = -1
  while (++i < len) {
    a[i] ^= b[i]
  }
  return a
}

},{}],143:[function(require,module,exports){
(function (process,global){(function (){
'use strict'

// limit of Crypto.getRandomValues()
// https://developer.mozilla.org/en-US/docs/Web/API/Crypto/getRandomValues
var MAX_BYTES = 65536

// Node supports requesting up to this number of bytes
// https://github.com/nodejs/node/blob/master/lib/internal/crypto/random.js#L48
var MAX_UINT32 = 4294967295

function oldBrowser () {
  throw new Error('Secure random number generation is not supported by this browser.\nUse Chrome, Firefox or Internet Explorer 11')
}

var Buffer = require('safe-buffer').Buffer
var crypto = global.crypto || global.msCrypto

if (crypto && crypto.getRandomValues) {
  module.exports = randomBytes
} else {
  module.exports = oldBrowser
}

function randomBytes (size, cb) {
  // phantomjs needs to throw
  if (size > MAX_UINT32) throw new RangeError('requested too many random bytes')

  var bytes = Buffer.allocUnsafe(size)

  if (size > 0) {  // getRandomValues fails on IE if size == 0
    if (size > MAX_BYTES) { // this is the max bytes crypto.getRandomValues
      // can do at once see https://developer.mozilla.org/en-US/docs/Web/API/window.crypto.getRandomValues
      for (var generated = 0; generated < size; generated += MAX_BYTES) {
        // buffer.slice automatically checks if the end is past the end of
        // the buffer so we don't have to here
        crypto.getRandomValues(bytes.slice(generated, generated + MAX_BYTES))
      }
    } else {
      crypto.getRandomValues(bytes)
    }
  }

  if (typeof cb === 'function') {
    return process.nextTick(function () {
      cb(null, bytes)
    })
  }

  return bytes
}

}).call(this)}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"_process":136,"safe-buffer":161}],144:[function(require,module,exports){
(function (process,global){(function (){
'use strict'

function oldBrowser () {
  throw new Error('secure random number generation not supported by this browser\nuse chrome, FireFox or Internet Explorer 11')
}
var safeBuffer = require('safe-buffer')
var randombytes = require('randombytes')
var Buffer = safeBuffer.Buffer
var kBufferMaxLength = safeBuffer.kMaxLength
var crypto = global.crypto || global.msCrypto
var kMaxUint32 = Math.pow(2, 32) - 1
function assertOffset (offset, length) {
  if (typeof offset !== 'number' || offset !== offset) { // eslint-disable-line no-self-compare
    throw new TypeError('offset must be a number')
  }

  if (offset > kMaxUint32 || offset < 0) {
    throw new TypeError('offset must be a uint32')
  }

  if (offset > kBufferMaxLength || offset > length) {
    throw new RangeError('offset out of range')
  }
}

function assertSize (size, offset, length) {
  if (typeof size !== 'number' || size !== size) { // eslint-disable-line no-self-compare
    throw new TypeError('size must be a number')
  }

  if (size > kMaxUint32 || size < 0) {
    throw new TypeError('size must be a uint32')
  }

  if (size + offset > length || size > kBufferMaxLength) {
    throw new RangeError('buffer too small')
  }
}
if ((crypto && crypto.getRandomValues) || !process.browser) {
  exports.randomFill = randomFill
  exports.randomFillSync = randomFillSync
} else {
  exports.randomFill = oldBrowser
  exports.randomFillSync = oldBrowser
}
function randomFill (buf, offset, size, cb) {
  if (!Buffer.isBuffer(buf) && !(buf instanceof global.Uint8Array)) {
    throw new TypeError('"buf" argument must be a Buffer or Uint8Array')
  }

  if (typeof offset === 'function') {
    cb = offset
    offset = 0
    size = buf.length
  } else if (typeof size === 'function') {
    cb = size
    size = buf.length - offset
  } else if (typeof cb !== 'function') {
    throw new TypeError('"cb" argument must be a function')
  }
  assertOffset(offset, buf.length)
  assertSize(size, offset, buf.length)
  return actualFill(buf, offset, size, cb)
}

function actualFill (buf, offset, size, cb) {
  if (process.browser) {
    var ourBuf = buf.buffer
    var uint = new Uint8Array(ourBuf, offset, size)
    crypto.getRandomValues(uint)
    if (cb) {
      process.nextTick(function () {
        cb(null, buf)
      })
      return
    }
    return buf
  }
  if (cb) {
    randombytes(size, function (err, bytes) {
      if (err) {
        return cb(err)
      }
      bytes.copy(buf, offset)
      cb(null, buf)
    })
    return
  }
  var bytes = randombytes(size)
  bytes.copy(buf, offset)
  return buf
}
function randomFillSync (buf, offset, size) {
  if (typeof offset === 'undefined') {
    offset = 0
  }
  if (!Buffer.isBuffer(buf) && !(buf instanceof global.Uint8Array)) {
    throw new TypeError('"buf" argument must be a Buffer or Uint8Array')
  }

  assertOffset(offset, buf.length)

  if (size === undefined) size = buf.length - offset

  assertSize(size, offset, buf.length)

  return actualFill(buf, offset, size)
}

}).call(this)}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"_process":136,"randombytes":143,"safe-buffer":161}],145:[function(require,module,exports){
'use strict';

function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }

var codes = {};

function createErrorType(code, message, Base) {
  if (!Base) {
    Base = Error;
  }

  function getMessage(arg1, arg2, arg3) {
    if (typeof message === 'string') {
      return message;
    } else {
      return message(arg1, arg2, arg3);
    }
  }

  var NodeError =
  /*#__PURE__*/
  function (_Base) {
    _inheritsLoose(NodeError, _Base);

    function NodeError(arg1, arg2, arg3) {
      return _Base.call(this, getMessage(arg1, arg2, arg3)) || this;
    }

    return NodeError;
  }(Base);

  NodeError.prototype.name = Base.name;
  NodeError.prototype.code = code;
  codes[code] = NodeError;
} // https://github.com/nodejs/node/blob/v10.8.0/lib/internal/errors.js


function oneOf(expected, thing) {
  if (Array.isArray(expected)) {
    var len = expected.length;
    expected = expected.map(function (i) {
      return String(i);
    });

    if (len > 2) {
      return "one of ".concat(thing, " ").concat(expected.slice(0, len - 1).join(', '), ", or ") + expected[len - 1];
    } else if (len === 2) {
      return "one of ".concat(thing, " ").concat(expected[0], " or ").concat(expected[1]);
    } else {
      return "of ".concat(thing, " ").concat(expected[0]);
    }
  } else {
    return "of ".concat(thing, " ").concat(String(expected));
  }
} // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/startsWith


function startsWith(str, search, pos) {
  return str.substr(!pos || pos < 0 ? 0 : +pos, search.length) === search;
} // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/endsWith


function endsWith(str, search, this_len) {
  if (this_len === undefined || this_len > str.length) {
    this_len = str.length;
  }

  return str.substring(this_len - search.length, this_len) === search;
} // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/includes


function includes(str, search, start) {
  if (typeof start !== 'number') {
    start = 0;
  }

  if (start + search.length > str.length) {
    return false;
  } else {
    return str.indexOf(search, start) !== -1;
  }
}

createErrorType('ERR_INVALID_OPT_VALUE', function (name, value) {
  return 'The value "' + value + '" is invalid for option "' + name + '"';
}, TypeError);
createErrorType('ERR_INVALID_ARG_TYPE', function (name, expected, actual) {
  // determiner: 'must be' or 'must not be'
  var determiner;

  if (typeof expected === 'string' && startsWith(expected, 'not ')) {
    determiner = 'must not be';
    expected = expected.replace(/^not /, '');
  } else {
    determiner = 'must be';
  }

  var msg;

  if (endsWith(name, ' argument')) {
    // For cases like 'first argument'
    msg = "The ".concat(name, " ").concat(determiner, " ").concat(oneOf(expected, 'type'));
  } else {
    var type = includes(name, '.') ? 'property' : 'argument';
    msg = "The \"".concat(name, "\" ").concat(type, " ").concat(determiner, " ").concat(oneOf(expected, 'type'));
  }

  msg += ". Received type ".concat(typeof actual);
  return msg;
}, TypeError);
createErrorType('ERR_STREAM_PUSH_AFTER_EOF', 'stream.push() after EOF');
createErrorType('ERR_METHOD_NOT_IMPLEMENTED', function (name) {
  return 'The ' + name + ' method is not implemented';
});
createErrorType('ERR_STREAM_PREMATURE_CLOSE', 'Premature close');
createErrorType('ERR_STREAM_DESTROYED', function (name) {
  return 'Cannot call ' + name + ' after a stream was destroyed';
});
createErrorType('ERR_MULTIPLE_CALLBACK', 'Callback called multiple times');
createErrorType('ERR_STREAM_CANNOT_PIPE', 'Cannot pipe, not readable');
createErrorType('ERR_STREAM_WRITE_AFTER_END', 'write after end');
createErrorType('ERR_STREAM_NULL_VALUES', 'May not write null values to stream', TypeError);
createErrorType('ERR_UNKNOWN_ENCODING', function (arg) {
  return 'Unknown encoding: ' + arg;
}, TypeError);
createErrorType('ERR_STREAM_UNSHIFT_AFTER_END_EVENT', 'stream.unshift() after end event');
module.exports.codes = codes;

},{}],146:[function(require,module,exports){
(function (process){(function (){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// a duplex stream is just a stream that is both readable and writable.
// Since JS doesn't have multiple prototypal inheritance, this class
// prototypally inherits from Readable, and then parasitically from
// Writable.

'use strict';

/*<replacement>*/
var objectKeys = Object.keys || function (obj) {
  var keys = [];
  for (var key in obj) keys.push(key);
  return keys;
};
/*</replacement>*/

module.exports = Duplex;
var Readable = require('./_stream_readable');
var Writable = require('./_stream_writable');
require('inherits')(Duplex, Readable);
{
  // Allow the keys array to be GC'ed.
  var keys = objectKeys(Writable.prototype);
  for (var v = 0; v < keys.length; v++) {
    var method = keys[v];
    if (!Duplex.prototype[method]) Duplex.prototype[method] = Writable.prototype[method];
  }
}
function Duplex(options) {
  if (!(this instanceof Duplex)) return new Duplex(options);
  Readable.call(this, options);
  Writable.call(this, options);
  this.allowHalfOpen = true;
  if (options) {
    if (options.readable === false) this.readable = false;
    if (options.writable === false) this.writable = false;
    if (options.allowHalfOpen === false) {
      this.allowHalfOpen = false;
      this.once('end', onend);
    }
  }
}
Object.defineProperty(Duplex.prototype, 'writableHighWaterMark', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._writableState.highWaterMark;
  }
});
Object.defineProperty(Duplex.prototype, 'writableBuffer', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._writableState && this._writableState.getBuffer();
  }
});
Object.defineProperty(Duplex.prototype, 'writableLength', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._writableState.length;
  }
});

// the no-half-open enforcer
function onend() {
  // If the writable side ended, then we're ok.
  if (this._writableState.ended) return;

  // no more data can be written.
  // But allow more writes to happen in this tick.
  process.nextTick(onEndNT, this);
}
function onEndNT(self) {
  self.end();
}
Object.defineProperty(Duplex.prototype, 'destroyed', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    if (this._readableState === undefined || this._writableState === undefined) {
      return false;
    }
    return this._readableState.destroyed && this._writableState.destroyed;
  },
  set: function set(value) {
    // we ignore the value if the stream
    // has not been initialized yet
    if (this._readableState === undefined || this._writableState === undefined) {
      return;
    }

    // backward compatibility, the user is explicitly
    // managing destroyed
    this._readableState.destroyed = value;
    this._writableState.destroyed = value;
  }
});
}).call(this)}).call(this,require('_process'))
},{"./_stream_readable":148,"./_stream_writable":150,"_process":136,"inherits":115}],147:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// a passthrough stream.
// basically just the most minimal sort of Transform stream.
// Every written chunk gets output as-is.

'use strict';

module.exports = PassThrough;
var Transform = require('./_stream_transform');
require('inherits')(PassThrough, Transform);
function PassThrough(options) {
  if (!(this instanceof PassThrough)) return new PassThrough(options);
  Transform.call(this, options);
}
PassThrough.prototype._transform = function (chunk, encoding, cb) {
  cb(null, chunk);
};
},{"./_stream_transform":149,"inherits":115}],148:[function(require,module,exports){
(function (process,global){(function (){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

'use strict';

module.exports = Readable;

/*<replacement>*/
var Duplex;
/*</replacement>*/

Readable.ReadableState = ReadableState;

/*<replacement>*/
var EE = require('events').EventEmitter;
var EElistenerCount = function EElistenerCount(emitter, type) {
  return emitter.listeners(type).length;
};
/*</replacement>*/

/*<replacement>*/
var Stream = require('./internal/streams/stream');
/*</replacement>*/

var Buffer = require('buffer').Buffer;
var OurUint8Array = (typeof global !== 'undefined' ? global : typeof window !== 'undefined' ? window : typeof self !== 'undefined' ? self : {}).Uint8Array || function () {};
function _uint8ArrayToBuffer(chunk) {
  return Buffer.from(chunk);
}
function _isUint8Array(obj) {
  return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;
}

/*<replacement>*/
var debugUtil = require('util');
var debug;
if (debugUtil && debugUtil.debuglog) {
  debug = debugUtil.debuglog('stream');
} else {
  debug = function debug() {};
}
/*</replacement>*/

var BufferList = require('./internal/streams/buffer_list');
var destroyImpl = require('./internal/streams/destroy');
var _require = require('./internal/streams/state'),
  getHighWaterMark = _require.getHighWaterMark;
var _require$codes = require('../errors').codes,
  ERR_INVALID_ARG_TYPE = _require$codes.ERR_INVALID_ARG_TYPE,
  ERR_STREAM_PUSH_AFTER_EOF = _require$codes.ERR_STREAM_PUSH_AFTER_EOF,
  ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED,
  ERR_STREAM_UNSHIFT_AFTER_END_EVENT = _require$codes.ERR_STREAM_UNSHIFT_AFTER_END_EVENT;

// Lazy loaded to improve the startup performance.
var StringDecoder;
var createReadableStreamAsyncIterator;
var from;
require('inherits')(Readable, Stream);
var errorOrDestroy = destroyImpl.errorOrDestroy;
var kProxyEvents = ['error', 'close', 'destroy', 'pause', 'resume'];
function prependListener(emitter, event, fn) {
  // Sadly this is not cacheable as some libraries bundle their own
  // event emitter implementation with them.
  if (typeof emitter.prependListener === 'function') return emitter.prependListener(event, fn);

  // This is a hack to make sure that our error handler is attached before any
  // userland ones.  NEVER DO THIS. This is here only because this code needs
  // to continue to work with older versions of Node.js that do not include
  // the prependListener() method. The goal is to eventually remove this hack.
  if (!emitter._events || !emitter._events[event]) emitter.on(event, fn);else if (Array.isArray(emitter._events[event])) emitter._events[event].unshift(fn);else emitter._events[event] = [fn, emitter._events[event]];
}
function ReadableState(options, stream, isDuplex) {
  Duplex = Duplex || require('./_stream_duplex');
  options = options || {};

  // Duplex streams are both readable and writable, but share
  // the same options object.
  // However, some cases require setting options to different
  // values for the readable and the writable sides of the duplex stream.
  // These options can be provided separately as readableXXX and writableXXX.
  if (typeof isDuplex !== 'boolean') isDuplex = stream instanceof Duplex;

  // object stream flag. Used to make read(n) ignore n and to
  // make all the buffer merging and length checks go away
  this.objectMode = !!options.objectMode;
  if (isDuplex) this.objectMode = this.objectMode || !!options.readableObjectMode;

  // the point at which it stops calling _read() to fill the buffer
  // Note: 0 is a valid value, means "don't call _read preemptively ever"
  this.highWaterMark = getHighWaterMark(this, options, 'readableHighWaterMark', isDuplex);

  // A linked list is used to store data chunks instead of an array because the
  // linked list can remove elements from the beginning faster than
  // array.shift()
  this.buffer = new BufferList();
  this.length = 0;
  this.pipes = null;
  this.pipesCount = 0;
  this.flowing = null;
  this.ended = false;
  this.endEmitted = false;
  this.reading = false;

  // a flag to be able to tell if the event 'readable'/'data' is emitted
  // immediately, or on a later tick.  We set this to true at first, because
  // any actions that shouldn't happen until "later" should generally also
  // not happen before the first read call.
  this.sync = true;

  // whenever we return null, then we set a flag to say
  // that we're awaiting a 'readable' event emission.
  this.needReadable = false;
  this.emittedReadable = false;
  this.readableListening = false;
  this.resumeScheduled = false;
  this.paused = true;

  // Should close be emitted on destroy. Defaults to true.
  this.emitClose = options.emitClose !== false;

  // Should .destroy() be called after 'end' (and potentially 'finish')
  this.autoDestroy = !!options.autoDestroy;

  // has it been destroyed
  this.destroyed = false;

  // Crypto is kind of old and crusty.  Historically, its default string
  // encoding is 'binary' so we have to make this configurable.
  // Everything else in the universe uses 'utf8', though.
  this.defaultEncoding = options.defaultEncoding || 'utf8';

  // the number of writers that are awaiting a drain event in .pipe()s
  this.awaitDrain = 0;

  // if true, a maybeReadMore has been scheduled
  this.readingMore = false;
  this.decoder = null;
  this.encoding = null;
  if (options.encoding) {
    if (!StringDecoder) StringDecoder = require('string_decoder/').StringDecoder;
    this.decoder = new StringDecoder(options.encoding);
    this.encoding = options.encoding;
  }
}
function Readable(options) {
  Duplex = Duplex || require('./_stream_duplex');
  if (!(this instanceof Readable)) return new Readable(options);

  // Checking for a Stream.Duplex instance is faster here instead of inside
  // the ReadableState constructor, at least with V8 6.5
  var isDuplex = this instanceof Duplex;
  this._readableState = new ReadableState(options, this, isDuplex);

  // legacy
  this.readable = true;
  if (options) {
    if (typeof options.read === 'function') this._read = options.read;
    if (typeof options.destroy === 'function') this._destroy = options.destroy;
  }
  Stream.call(this);
}
Object.defineProperty(Readable.prototype, 'destroyed', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    if (this._readableState === undefined) {
      return false;
    }
    return this._readableState.destroyed;
  },
  set: function set(value) {
    // we ignore the value if the stream
    // has not been initialized yet
    if (!this._readableState) {
      return;
    }

    // backward compatibility, the user is explicitly
    // managing destroyed
    this._readableState.destroyed = value;
  }
});
Readable.prototype.destroy = destroyImpl.destroy;
Readable.prototype._undestroy = destroyImpl.undestroy;
Readable.prototype._destroy = function (err, cb) {
  cb(err);
};

// Manually shove something into the read() buffer.
// This returns true if the highWaterMark has not been hit yet,
// similar to how Writable.write() returns true if you should
// write() some more.
Readable.prototype.push = function (chunk, encoding) {
  var state = this._readableState;
  var skipChunkCheck;
  if (!state.objectMode) {
    if (typeof chunk === 'string') {
      encoding = encoding || state.defaultEncoding;
      if (encoding !== state.encoding) {
        chunk = Buffer.from(chunk, encoding);
        encoding = '';
      }
      skipChunkCheck = true;
    }
  } else {
    skipChunkCheck = true;
  }
  return readableAddChunk(this, chunk, encoding, false, skipChunkCheck);
};

// Unshift should *always* be something directly out of read()
Readable.prototype.unshift = function (chunk) {
  return readableAddChunk(this, chunk, null, true, false);
};
function readableAddChunk(stream, chunk, encoding, addToFront, skipChunkCheck) {
  debug('readableAddChunk', chunk);
  var state = stream._readableState;
  if (chunk === null) {
    state.reading = false;
    onEofChunk(stream, state);
  } else {
    var er;
    if (!skipChunkCheck) er = chunkInvalid(state, chunk);
    if (er) {
      errorOrDestroy(stream, er);
    } else if (state.objectMode || chunk && chunk.length > 0) {
      if (typeof chunk !== 'string' && !state.objectMode && Object.getPrototypeOf(chunk) !== Buffer.prototype) {
        chunk = _uint8ArrayToBuffer(chunk);
      }
      if (addToFront) {
        if (state.endEmitted) errorOrDestroy(stream, new ERR_STREAM_UNSHIFT_AFTER_END_EVENT());else addChunk(stream, state, chunk, true);
      } else if (state.ended) {
        errorOrDestroy(stream, new ERR_STREAM_PUSH_AFTER_EOF());
      } else if (state.destroyed) {
        return false;
      } else {
        state.reading = false;
        if (state.decoder && !encoding) {
          chunk = state.decoder.write(chunk);
          if (state.objectMode || chunk.length !== 0) addChunk(stream, state, chunk, false);else maybeReadMore(stream, state);
        } else {
          addChunk(stream, state, chunk, false);
        }
      }
    } else if (!addToFront) {
      state.reading = false;
      maybeReadMore(stream, state);
    }
  }

  // We can push more data if we are below the highWaterMark.
  // Also, if we have no data yet, we can stand some more bytes.
  // This is to work around cases where hwm=0, such as the repl.
  return !state.ended && (state.length < state.highWaterMark || state.length === 0);
}
function addChunk(stream, state, chunk, addToFront) {
  if (state.flowing && state.length === 0 && !state.sync) {
    state.awaitDrain = 0;
    stream.emit('data', chunk);
  } else {
    // update the buffer info.
    state.length += state.objectMode ? 1 : chunk.length;
    if (addToFront) state.buffer.unshift(chunk);else state.buffer.push(chunk);
    if (state.needReadable) emitReadable(stream);
  }
  maybeReadMore(stream, state);
}
function chunkInvalid(state, chunk) {
  var er;
  if (!_isUint8Array(chunk) && typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {
    er = new ERR_INVALID_ARG_TYPE('chunk', ['string', 'Buffer', 'Uint8Array'], chunk);
  }
  return er;
}
Readable.prototype.isPaused = function () {
  return this._readableState.flowing === false;
};

// backwards compatibility.
Readable.prototype.setEncoding = function (enc) {
  if (!StringDecoder) StringDecoder = require('string_decoder/').StringDecoder;
  var decoder = new StringDecoder(enc);
  this._readableState.decoder = decoder;
  // If setEncoding(null), decoder.encoding equals utf8
  this._readableState.encoding = this._readableState.decoder.encoding;

  // Iterate over current buffer to convert already stored Buffers:
  var p = this._readableState.buffer.head;
  var content = '';
  while (p !== null) {
    content += decoder.write(p.data);
    p = p.next;
  }
  this._readableState.buffer.clear();
  if (content !== '') this._readableState.buffer.push(content);
  this._readableState.length = content.length;
  return this;
};

// Don't raise the hwm > 1GB
var MAX_HWM = 0x40000000;
function computeNewHighWaterMark(n) {
  if (n >= MAX_HWM) {
    // TODO(ronag): Throw ERR_VALUE_OUT_OF_RANGE.
    n = MAX_HWM;
  } else {
    // Get the next highest power of 2 to prevent increasing hwm excessively in
    // tiny amounts
    n--;
    n |= n >>> 1;
    n |= n >>> 2;
    n |= n >>> 4;
    n |= n >>> 8;
    n |= n >>> 16;
    n++;
  }
  return n;
}

// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function howMuchToRead(n, state) {
  if (n <= 0 || state.length === 0 && state.ended) return 0;
  if (state.objectMode) return 1;
  if (n !== n) {
    // Only flow one buffer at a time
    if (state.flowing && state.length) return state.buffer.head.data.length;else return state.length;
  }
  // If we're asking for more than the current hwm, then raise the hwm.
  if (n > state.highWaterMark) state.highWaterMark = computeNewHighWaterMark(n);
  if (n <= state.length) return n;
  // Don't have enough
  if (!state.ended) {
    state.needReadable = true;
    return 0;
  }
  return state.length;
}

// you can override either this method, or the async _read(n) below.
Readable.prototype.read = function (n) {
  debug('read', n);
  n = parseInt(n, 10);
  var state = this._readableState;
  var nOrig = n;
  if (n !== 0) state.emittedReadable = false;

  // if we're doing read(0) to trigger a readable event, but we
  // already have a bunch of data in the buffer, then just trigger
  // the 'readable' event and move on.
  if (n === 0 && state.needReadable && ((state.highWaterMark !== 0 ? state.length >= state.highWaterMark : state.length > 0) || state.ended)) {
    debug('read: emitReadable', state.length, state.ended);
    if (state.length === 0 && state.ended) endReadable(this);else emitReadable(this);
    return null;
  }
  n = howMuchToRead(n, state);

  // if we've ended, and we're now clear, then finish it up.
  if (n === 0 && state.ended) {
    if (state.length === 0) endReadable(this);
    return null;
  }

  // All the actual chunk generation logic needs to be
  // *below* the call to _read.  The reason is that in certain
  // synthetic stream cases, such as passthrough streams, _read
  // may be a completely synchronous operation which may change
  // the state of the read buffer, providing enough data when
  // before there was *not* enough.
  //
  // So, the steps are:
  // 1. Figure out what the state of things will be after we do
  // a read from the buffer.
  //
  // 2. If that resulting state will trigger a _read, then call _read.
  // Note that this may be asynchronous, or synchronous.  Yes, it is
  // deeply ugly to write APIs this way, but that still doesn't mean
  // that the Readable class should behave improperly, as streams are
  // designed to be sync/async agnostic.
  // Take note if the _read call is sync or async (ie, if the read call
  // has returned yet), so that we know whether or not it's safe to emit
  // 'readable' etc.
  //
  // 3. Actually pull the requested chunks out of the buffer and return.

  // if we need a readable event, then we need to do some reading.
  var doRead = state.needReadable;
  debug('need readable', doRead);

  // if we currently have less than the highWaterMark, then also read some
  if (state.length === 0 || state.length - n < state.highWaterMark) {
    doRead = true;
    debug('length less than watermark', doRead);
  }

  // however, if we've ended, then there's no point, and if we're already
  // reading, then it's unnecessary.
  if (state.ended || state.reading) {
    doRead = false;
    debug('reading or ended', doRead);
  } else if (doRead) {
    debug('do read');
    state.reading = true;
    state.sync = true;
    // if the length is currently zero, then we *need* a readable event.
    if (state.length === 0) state.needReadable = true;
    // call internal read method
    this._read(state.highWaterMark);
    state.sync = false;
    // If _read pushed data synchronously, then `reading` will be false,
    // and we need to re-evaluate how much data we can return to the user.
    if (!state.reading) n = howMuchToRead(nOrig, state);
  }
  var ret;
  if (n > 0) ret = fromList(n, state);else ret = null;
  if (ret === null) {
    state.needReadable = state.length <= state.highWaterMark;
    n = 0;
  } else {
    state.length -= n;
    state.awaitDrain = 0;
  }
  if (state.length === 0) {
    // If we have nothing in the buffer, then we want to know
    // as soon as we *do* get something into the buffer.
    if (!state.ended) state.needReadable = true;

    // If we tried to read() past the EOF, then emit end on the next tick.
    if (nOrig !== n && state.ended) endReadable(this);
  }
  if (ret !== null) this.emit('data', ret);
  return ret;
};
function onEofChunk(stream, state) {
  debug('onEofChunk');
  if (state.ended) return;
  if (state.decoder) {
    var chunk = state.decoder.end();
    if (chunk && chunk.length) {
      state.buffer.push(chunk);
      state.length += state.objectMode ? 1 : chunk.length;
    }
  }
  state.ended = true;
  if (state.sync) {
    // if we are sync, wait until next tick to emit the data.
    // Otherwise we risk emitting data in the flow()
    // the readable code triggers during a read() call
    emitReadable(stream);
  } else {
    // emit 'readable' now to make sure it gets picked up.
    state.needReadable = false;
    if (!state.emittedReadable) {
      state.emittedReadable = true;
      emitReadable_(stream);
    }
  }
}

// Don't emit readable right away in sync mode, because this can trigger
// another read() call => stack overflow.  This way, it might trigger
// a nextTick recursion warning, but that's not so bad.
function emitReadable(stream) {
  var state = stream._readableState;
  debug('emitReadable', state.needReadable, state.emittedReadable);
  state.needReadable = false;
  if (!state.emittedReadable) {
    debug('emitReadable', state.flowing);
    state.emittedReadable = true;
    process.nextTick(emitReadable_, stream);
  }
}
function emitReadable_(stream) {
  var state = stream._readableState;
  debug('emitReadable_', state.destroyed, state.length, state.ended);
  if (!state.destroyed && (state.length || state.ended)) {
    stream.emit('readable');
    state.emittedReadable = false;
  }

  // The stream needs another readable event if
  // 1. It is not flowing, as the flow mechanism will take
  //    care of it.
  // 2. It is not ended.
  // 3. It is below the highWaterMark, so we can schedule
  //    another readable later.
  state.needReadable = !state.flowing && !state.ended && state.length <= state.highWaterMark;
  flow(stream);
}

// at this point, the user has presumably seen the 'readable' event,
// and called read() to consume some data.  that may have triggered
// in turn another _read(n) call, in which case reading = true if
// it's in progress.
// However, if we're not ended, or reading, and the length < hwm,
// then go ahead and try to read some more preemptively.
function maybeReadMore(stream, state) {
  if (!state.readingMore) {
    state.readingMore = true;
    process.nextTick(maybeReadMore_, stream, state);
  }
}
function maybeReadMore_(stream, state) {
  // Attempt to read more data if we should.
  //
  // The conditions for reading more data are (one of):
  // - Not enough data buffered (state.length < state.highWaterMark). The loop
  //   is responsible for filling the buffer with enough data if such data
  //   is available. If highWaterMark is 0 and we are not in the flowing mode
  //   we should _not_ attempt to buffer any extra data. We'll get more data
  //   when the stream consumer calls read() instead.
  // - No data in the buffer, and the stream is in flowing mode. In this mode
  //   the loop below is responsible for ensuring read() is called. Failing to
  //   call read here would abort the flow and there's no other mechanism for
  //   continuing the flow if the stream consumer has just subscribed to the
  //   'data' event.
  //
  // In addition to the above conditions to keep reading data, the following
  // conditions prevent the data from being read:
  // - The stream has ended (state.ended).
  // - There is already a pending 'read' operation (state.reading). This is a
  //   case where the the stream has called the implementation defined _read()
  //   method, but they are processing the call asynchronously and have _not_
  //   called push() with new data. In this case we skip performing more
  //   read()s. The execution ends in this method again after the _read() ends
  //   up calling push() with more data.
  while (!state.reading && !state.ended && (state.length < state.highWaterMark || state.flowing && state.length === 0)) {
    var len = state.length;
    debug('maybeReadMore read 0');
    stream.read(0);
    if (len === state.length)
      // didn't get any data, stop spinning.
      break;
  }
  state.readingMore = false;
}

// abstract method.  to be overridden in specific implementation classes.
// call cb(er, data) where data is <= n in length.
// for virtual (non-string, non-buffer) streams, "length" is somewhat
// arbitrary, and perhaps not very meaningful.
Readable.prototype._read = function (n) {
  errorOrDestroy(this, new ERR_METHOD_NOT_IMPLEMENTED('_read()'));
};
Readable.prototype.pipe = function (dest, pipeOpts) {
  var src = this;
  var state = this._readableState;
  switch (state.pipesCount) {
    case 0:
      state.pipes = dest;
      break;
    case 1:
      state.pipes = [state.pipes, dest];
      break;
    default:
      state.pipes.push(dest);
      break;
  }
  state.pipesCount += 1;
  debug('pipe count=%d opts=%j', state.pipesCount, pipeOpts);
  var doEnd = (!pipeOpts || pipeOpts.end !== false) && dest !== process.stdout && dest !== process.stderr;
  var endFn = doEnd ? onend : unpipe;
  if (state.endEmitted) process.nextTick(endFn);else src.once('end', endFn);
  dest.on('unpipe', onunpipe);
  function onunpipe(readable, unpipeInfo) {
    debug('onunpipe');
    if (readable === src) {
      if (unpipeInfo && unpipeInfo.hasUnpiped === false) {
        unpipeInfo.hasUnpiped = true;
        cleanup();
      }
    }
  }
  function onend() {
    debug('onend');
    dest.end();
  }

  // when the dest drains, it reduces the awaitDrain counter
  // on the source.  This would be more elegant with a .once()
  // handler in flow(), but adding and removing repeatedly is
  // too slow.
  var ondrain = pipeOnDrain(src);
  dest.on('drain', ondrain);
  var cleanedUp = false;
  function cleanup() {
    debug('cleanup');
    // cleanup event handlers once the pipe is broken
    dest.removeListener('close', onclose);
    dest.removeListener('finish', onfinish);
    dest.removeListener('drain', ondrain);
    dest.removeListener('error', onerror);
    dest.removeListener('unpipe', onunpipe);
    src.removeListener('end', onend);
    src.removeListener('end', unpipe);
    src.removeListener('data', ondata);
    cleanedUp = true;

    // if the reader is waiting for a drain event from this
    // specific writer, then it would cause it to never start
    // flowing again.
    // So, if this is awaiting a drain, then we just call it now.
    // If we don't know, then assume that we are waiting for one.
    if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain)) ondrain();
  }
  src.on('data', ondata);
  function ondata(chunk) {
    debug('ondata');
    var ret = dest.write(chunk);
    debug('dest.write', ret);
    if (ret === false) {
      // If the user unpiped during `dest.write()`, it is possible
      // to get stuck in a permanently paused state if that write
      // also returned false.
      // => Check whether `dest` is still a piping destination.
      if ((state.pipesCount === 1 && state.pipes === dest || state.pipesCount > 1 && indexOf(state.pipes, dest) !== -1) && !cleanedUp) {
        debug('false write response, pause', state.awaitDrain);
        state.awaitDrain++;
      }
      src.pause();
    }
  }

  // if the dest has an error, then stop piping into it.
  // however, don't suppress the throwing behavior for this.
  function onerror(er) {
    debug('onerror', er);
    unpipe();
    dest.removeListener('error', onerror);
    if (EElistenerCount(dest, 'error') === 0) errorOrDestroy(dest, er);
  }

  // Make sure our error handler is attached before userland ones.
  prependListener(dest, 'error', onerror);

  // Both close and finish should trigger unpipe, but only once.
  function onclose() {
    dest.removeListener('finish', onfinish);
    unpipe();
  }
  dest.once('close', onclose);
  function onfinish() {
    debug('onfinish');
    dest.removeListener('close', onclose);
    unpipe();
  }
  dest.once('finish', onfinish);
  function unpipe() {
    debug('unpipe');
    src.unpipe(dest);
  }

  // tell the dest that it's being piped to
  dest.emit('pipe', src);

  // start the flow if it hasn't been started already.
  if (!state.flowing) {
    debug('pipe resume');
    src.resume();
  }
  return dest;
};
function pipeOnDrain(src) {
  return function pipeOnDrainFunctionResult() {
    var state = src._readableState;
    debug('pipeOnDrain', state.awaitDrain);
    if (state.awaitDrain) state.awaitDrain--;
    if (state.awaitDrain === 0 && EElistenerCount(src, 'data')) {
      state.flowing = true;
      flow(src);
    }
  };
}
Readable.prototype.unpipe = function (dest) {
  var state = this._readableState;
  var unpipeInfo = {
    hasUnpiped: false
  };

  // if we're not piping anywhere, then do nothing.
  if (state.pipesCount === 0) return this;

  // just one destination.  most common case.
  if (state.pipesCount === 1) {
    // passed in one, but it's not the right one.
    if (dest && dest !== state.pipes) return this;
    if (!dest) dest = state.pipes;

    // got a match.
    state.pipes = null;
    state.pipesCount = 0;
    state.flowing = false;
    if (dest) dest.emit('unpipe', this, unpipeInfo);
    return this;
  }

  // slow case. multiple pipe destinations.

  if (!dest) {
    // remove all.
    var dests = state.pipes;
    var len = state.pipesCount;
    state.pipes = null;
    state.pipesCount = 0;
    state.flowing = false;
    for (var i = 0; i < len; i++) dests[i].emit('unpipe', this, {
      hasUnpiped: false
    });
    return this;
  }

  // try to find the right one.
  var index = indexOf(state.pipes, dest);
  if (index === -1) return this;
  state.pipes.splice(index, 1);
  state.pipesCount -= 1;
  if (state.pipesCount === 1) state.pipes = state.pipes[0];
  dest.emit('unpipe', this, unpipeInfo);
  return this;
};

// set up data events if they are asked for
// Ensure readable listeners eventually get something
Readable.prototype.on = function (ev, fn) {
  var res = Stream.prototype.on.call(this, ev, fn);
  var state = this._readableState;
  if (ev === 'data') {
    // update readableListening so that resume() may be a no-op
    // a few lines down. This is needed to support once('readable').
    state.readableListening = this.listenerCount('readable') > 0;

    // Try start flowing on next tick if stream isn't explicitly paused
    if (state.flowing !== false) this.resume();
  } else if (ev === 'readable') {
    if (!state.endEmitted && !state.readableListening) {
      state.readableListening = state.needReadable = true;
      state.flowing = false;
      state.emittedReadable = false;
      debug('on readable', state.length, state.reading);
      if (state.length) {
        emitReadable(this);
      } else if (!state.reading) {
        process.nextTick(nReadingNextTick, this);
      }
    }
  }
  return res;
};
Readable.prototype.addListener = Readable.prototype.on;
Readable.prototype.removeListener = function (ev, fn) {
  var res = Stream.prototype.removeListener.call(this, ev, fn);
  if (ev === 'readable') {
    // We need to check if there is someone still listening to
    // readable and reset the state. However this needs to happen
    // after readable has been emitted but before I/O (nextTick) to
    // support once('readable', fn) cycles. This means that calling
    // resume within the same tick will have no
    // effect.
    process.nextTick(updateReadableListening, this);
  }
  return res;
};
Readable.prototype.removeAllListeners = function (ev) {
  var res = Stream.prototype.removeAllListeners.apply(this, arguments);
  if (ev === 'readable' || ev === undefined) {
    // We need to check if there is someone still listening to
    // readable and reset the state. However this needs to happen
    // after readable has been emitted but before I/O (nextTick) to
    // support once('readable', fn) cycles. This means that calling
    // resume within the same tick will have no
    // effect.
    process.nextTick(updateReadableListening, this);
  }
  return res;
};
function updateReadableListening(self) {
  var state = self._readableState;
  state.readableListening = self.listenerCount('readable') > 0;
  if (state.resumeScheduled && !state.paused) {
    // flowing needs to be set to true now, otherwise
    // the upcoming resume will not flow.
    state.flowing = true;

    // crude way to check if we should resume
  } else if (self.listenerCount('data') > 0) {
    self.resume();
  }
}
function nReadingNextTick(self) {
  debug('readable nexttick read 0');
  self.read(0);
}

// pause() and resume() are remnants of the legacy readable stream API
// If the user uses them, then switch into old mode.
Readable.prototype.resume = function () {
  var state = this._readableState;
  if (!state.flowing) {
    debug('resume');
    // we flow only if there is no one listening
    // for readable, but we still have to call
    // resume()
    state.flowing = !state.readableListening;
    resume(this, state);
  }
  state.paused = false;
  return this;
};
function resume(stream, state) {
  if (!state.resumeScheduled) {
    state.resumeScheduled = true;
    process.nextTick(resume_, stream, state);
  }
}
function resume_(stream, state) {
  debug('resume', state.reading);
  if (!state.reading) {
    stream.read(0);
  }
  state.resumeScheduled = false;
  stream.emit('resume');
  flow(stream);
  if (state.flowing && !state.reading) stream.read(0);
}
Readable.prototype.pause = function () {
  debug('call pause flowing=%j', this._readableState.flowing);
  if (this._readableState.flowing !== false) {
    debug('pause');
    this._readableState.flowing = false;
    this.emit('pause');
  }
  this._readableState.paused = true;
  return this;
};
function flow(stream) {
  var state = stream._readableState;
  debug('flow', state.flowing);
  while (state.flowing && stream.read() !== null);
}

// wrap an old-style stream as the async data source.
// This is *not* part of the readable stream interface.
// It is an ugly unfortunate mess of history.
Readable.prototype.wrap = function (stream) {
  var _this = this;
  var state = this._readableState;
  var paused = false;
  stream.on('end', function () {
    debug('wrapped end');
    if (state.decoder && !state.ended) {
      var chunk = state.decoder.end();
      if (chunk && chunk.length) _this.push(chunk);
    }
    _this.push(null);
  });
  stream.on('data', function (chunk) {
    debug('wrapped data');
    if (state.decoder) chunk = state.decoder.write(chunk);

    // don't skip over falsy values in objectMode
    if (state.objectMode && (chunk === null || chunk === undefined)) return;else if (!state.objectMode && (!chunk || !chunk.length)) return;
    var ret = _this.push(chunk);
    if (!ret) {
      paused = true;
      stream.pause();
    }
  });

  // proxy all the other methods.
  // important when wrapping filters and duplexes.
  for (var i in stream) {
    if (this[i] === undefined && typeof stream[i] === 'function') {
      this[i] = function methodWrap(method) {
        return function methodWrapReturnFunction() {
          return stream[method].apply(stream, arguments);
        };
      }(i);
    }
  }

  // proxy certain important events.
  for (var n = 0; n < kProxyEvents.length; n++) {
    stream.on(kProxyEvents[n], this.emit.bind(this, kProxyEvents[n]));
  }

  // when we try to consume some more bytes, simply unpause the
  // underlying stream.
  this._read = function (n) {
    debug('wrapped _read', n);
    if (paused) {
      paused = false;
      stream.resume();
    }
  };
  return this;
};
if (typeof Symbol === 'function') {
  Readable.prototype[Symbol.asyncIterator] = function () {
    if (createReadableStreamAsyncIterator === undefined) {
      createReadableStreamAsyncIterator = require('./internal/streams/async_iterator');
    }
    return createReadableStreamAsyncIterator(this);
  };
}
Object.defineProperty(Readable.prototype, 'readableHighWaterMark', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._readableState.highWaterMark;
  }
});
Object.defineProperty(Readable.prototype, 'readableBuffer', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._readableState && this._readableState.buffer;
  }
});
Object.defineProperty(Readable.prototype, 'readableFlowing', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._readableState.flowing;
  },
  set: function set(state) {
    if (this._readableState) {
      this._readableState.flowing = state;
    }
  }
});

// exposed for testing purposes only.
Readable._fromList = fromList;
Object.defineProperty(Readable.prototype, 'readableLength', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._readableState.length;
  }
});

// Pluck off n bytes from an array of buffers.
// Length is the combined lengths of all the buffers in the list.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function fromList(n, state) {
  // nothing buffered
  if (state.length === 0) return null;
  var ret;
  if (state.objectMode) ret = state.buffer.shift();else if (!n || n >= state.length) {
    // read it all, truncate the list
    if (state.decoder) ret = state.buffer.join('');else if (state.buffer.length === 1) ret = state.buffer.first();else ret = state.buffer.concat(state.length);
    state.buffer.clear();
  } else {
    // read part of list
    ret = state.buffer.consume(n, state.decoder);
  }
  return ret;
}
function endReadable(stream) {
  var state = stream._readableState;
  debug('endReadable', state.endEmitted);
  if (!state.endEmitted) {
    state.ended = true;
    process.nextTick(endReadableNT, state, stream);
  }
}
function endReadableNT(state, stream) {
  debug('endReadableNT', state.endEmitted, state.length);

  // Check that we didn't get one last unshift.
  if (!state.endEmitted && state.length === 0) {
    state.endEmitted = true;
    stream.readable = false;
    stream.emit('end');
    if (state.autoDestroy) {
      // In case of duplex streams we need a way to detect
      // if the writable side is ready for autoDestroy as well
      var wState = stream._writableState;
      if (!wState || wState.autoDestroy && wState.finished) {
        stream.destroy();
      }
    }
  }
}
if (typeof Symbol === 'function') {
  Readable.from = function (iterable, opts) {
    if (from === undefined) {
      from = require('./internal/streams/from');
    }
    return from(Readable, iterable, opts);
  };
}
function indexOf(xs, x) {
  for (var i = 0, l = xs.length; i < l; i++) {
    if (xs[i] === x) return i;
  }
  return -1;
}
}).call(this)}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"../errors":145,"./_stream_duplex":146,"./internal/streams/async_iterator":151,"./internal/streams/buffer_list":152,"./internal/streams/destroy":153,"./internal/streams/from":155,"./internal/streams/state":157,"./internal/streams/stream":158,"_process":136,"buffer":53,"events":89,"inherits":115,"string_decoder/":172,"util":24}],149:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// a transform stream is a readable/writable stream where you do
// something with the data.  Sometimes it's called a "filter",
// but that's not a great name for it, since that implies a thing where
// some bits pass through, and others are simply ignored.  (That would
// be a valid example of a transform, of course.)
//
// While the output is causally related to the input, it's not a
// necessarily symmetric or synchronous transformation.  For example,
// a zlib stream might take multiple plain-text writes(), and then
// emit a single compressed chunk some time in the future.
//
// Here's how this works:
//
// The Transform stream has all the aspects of the readable and writable
// stream classes.  When you write(chunk), that calls _write(chunk,cb)
// internally, and returns false if there's a lot of pending writes
// buffered up.  When you call read(), that calls _read(n) until
// there's enough pending readable data buffered up.
//
// In a transform stream, the written data is placed in a buffer.  When
// _read(n) is called, it transforms the queued up data, calling the
// buffered _write cb's as it consumes chunks.  If consuming a single
// written chunk would result in multiple output chunks, then the first
// outputted bit calls the readcb, and subsequent chunks just go into
// the read buffer, and will cause it to emit 'readable' if necessary.
//
// This way, back-pressure is actually determined by the reading side,
// since _read has to be called to start processing a new chunk.  However,
// a pathological inflate type of transform can cause excessive buffering
// here.  For example, imagine a stream where every byte of input is
// interpreted as an integer from 0-255, and then results in that many
// bytes of output.  Writing the 4 bytes {ff,ff,ff,ff} would result in
// 1kb of data being output.  In this case, you could write a very small
// amount of input, and end up with a very large amount of output.  In
// such a pathological inflating mechanism, there'd be no way to tell
// the system to stop doing the transform.  A single 4MB write could
// cause the system to run out of memory.
//
// However, even in such a pathological case, only a single written chunk
// would be consumed, and then the rest would wait (un-transformed) until
// the results of the previous transformed chunk were consumed.

'use strict';

module.exports = Transform;
var _require$codes = require('../errors').codes,
  ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED,
  ERR_MULTIPLE_CALLBACK = _require$codes.ERR_MULTIPLE_CALLBACK,
  ERR_TRANSFORM_ALREADY_TRANSFORMING = _require$codes.ERR_TRANSFORM_ALREADY_TRANSFORMING,
  ERR_TRANSFORM_WITH_LENGTH_0 = _require$codes.ERR_TRANSFORM_WITH_LENGTH_0;
var Duplex = require('./_stream_duplex');
require('inherits')(Transform, Duplex);
function afterTransform(er, data) {
  var ts = this._transformState;
  ts.transforming = false;
  var cb = ts.writecb;
  if (cb === null) {
    return this.emit('error', new ERR_MULTIPLE_CALLBACK());
  }
  ts.writechunk = null;
  ts.writecb = null;
  if (data != null)
    // single equals check for both `null` and `undefined`
    this.push(data);
  cb(er);
  var rs = this._readableState;
  rs.reading = false;
  if (rs.needReadable || rs.length < rs.highWaterMark) {
    this._read(rs.highWaterMark);
  }
}
function Transform(options) {
  if (!(this instanceof Transform)) return new Transform(options);
  Duplex.call(this, options);
  this._transformState = {
    afterTransform: afterTransform.bind(this),
    needTransform: false,
    transforming: false,
    writecb: null,
    writechunk: null,
    writeencoding: null
  };

  // start out asking for a readable event once data is transformed.
  this._readableState.needReadable = true;

  // we have implemented the _read method, and done the other things
  // that Readable wants before the first _read call, so unset the
  // sync guard flag.
  this._readableState.sync = false;
  if (options) {
    if (typeof options.transform === 'function') this._transform = options.transform;
    if (typeof options.flush === 'function') this._flush = options.flush;
  }

  // When the writable side finishes, then flush out anything remaining.
  this.on('prefinish', prefinish);
}
function prefinish() {
  var _this = this;
  if (typeof this._flush === 'function' && !this._readableState.destroyed) {
    this._flush(function (er, data) {
      done(_this, er, data);
    });
  } else {
    done(this, null, null);
  }
}
Transform.prototype.push = function (chunk, encoding) {
  this._transformState.needTransform = false;
  return Duplex.prototype.push.call(this, chunk, encoding);
};

// This is the part where you do stuff!
// override this function in implementation classes.
// 'chunk' is an input chunk.
//
// Call `push(newChunk)` to pass along transformed output
// to the readable side.  You may call 'push' zero or more times.
//
// Call `cb(err)` when you are done with this chunk.  If you pass
// an error, then that'll put the hurt on the whole operation.  If you
// never call cb(), then you'll never get another chunk.
Transform.prototype._transform = function (chunk, encoding, cb) {
  cb(new ERR_METHOD_NOT_IMPLEMENTED('_transform()'));
};
Transform.prototype._write = function (chunk, encoding, cb) {
  var ts = this._transformState;
  ts.writecb = cb;
  ts.writechunk = chunk;
  ts.writeencoding = encoding;
  if (!ts.transforming) {
    var rs = this._readableState;
    if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark) this._read(rs.highWaterMark);
  }
};

// Doesn't matter what the args are here.
// _transform does all the work.
// That we got here means that the readable side wants more data.
Transform.prototype._read = function (n) {
  var ts = this._transformState;
  if (ts.writechunk !== null && !ts.transforming) {
    ts.transforming = true;
    this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
  } else {
    // mark that we need a transform, so that any data that comes in
    // will get processed, now that we've asked for it.
    ts.needTransform = true;
  }
};
Transform.prototype._destroy = function (err, cb) {
  Duplex.prototype._destroy.call(this, err, function (err2) {
    cb(err2);
  });
};
function done(stream, er, data) {
  if (er) return stream.emit('error', er);
  if (data != null)
    // single equals check for both `null` and `undefined`
    stream.push(data);

  // TODO(BridgeAR): Write a test for these two error cases
  // if there's nothing in the write buffer, then that means
  // that nothing more will ever be provided
  if (stream._writableState.length) throw new ERR_TRANSFORM_WITH_LENGTH_0();
  if (stream._transformState.transforming) throw new ERR_TRANSFORM_ALREADY_TRANSFORMING();
  return stream.push(null);
}
},{"../errors":145,"./_stream_duplex":146,"inherits":115}],150:[function(require,module,exports){
(function (process,global){(function (){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// A bit simpler than readable streams.
// Implement an async ._write(chunk, encoding, cb), and it'll handle all
// the drain event emission and buffering.

'use strict';

module.exports = Writable;

/* <replacement> */
function WriteReq(chunk, encoding, cb) {
  this.chunk = chunk;
  this.encoding = encoding;
  this.callback = cb;
  this.next = null;
}

// It seems a linked list but it is not
// there will be only 2 of these for each stream
function CorkedRequest(state) {
  var _this = this;
  this.next = null;
  this.entry = null;
  this.finish = function () {
    onCorkedFinish(_this, state);
  };
}
/* </replacement> */

/*<replacement>*/
var Duplex;
/*</replacement>*/

Writable.WritableState = WritableState;

/*<replacement>*/
var internalUtil = {
  deprecate: require('util-deprecate')
};
/*</replacement>*/

/*<replacement>*/
var Stream = require('./internal/streams/stream');
/*</replacement>*/

var Buffer = require('buffer').Buffer;
var OurUint8Array = (typeof global !== 'undefined' ? global : typeof window !== 'undefined' ? window : typeof self !== 'undefined' ? self : {}).Uint8Array || function () {};
function _uint8ArrayToBuffer(chunk) {
  return Buffer.from(chunk);
}
function _isUint8Array(obj) {
  return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;
}
var destroyImpl = require('./internal/streams/destroy');
var _require = require('./internal/streams/state'),
  getHighWaterMark = _require.getHighWaterMark;
var _require$codes = require('../errors').codes,
  ERR_INVALID_ARG_TYPE = _require$codes.ERR_INVALID_ARG_TYPE,
  ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED,
  ERR_MULTIPLE_CALLBACK = _require$codes.ERR_MULTIPLE_CALLBACK,
  ERR_STREAM_CANNOT_PIPE = _require$codes.ERR_STREAM_CANNOT_PIPE,
  ERR_STREAM_DESTROYED = _require$codes.ERR_STREAM_DESTROYED,
  ERR_STREAM_NULL_VALUES = _require$codes.ERR_STREAM_NULL_VALUES,
  ERR_STREAM_WRITE_AFTER_END = _require$codes.ERR_STREAM_WRITE_AFTER_END,
  ERR_UNKNOWN_ENCODING = _require$codes.ERR_UNKNOWN_ENCODING;
var errorOrDestroy = destroyImpl.errorOrDestroy;
require('inherits')(Writable, Stream);
function nop() {}
function WritableState(options, stream, isDuplex) {
  Duplex = Duplex || require('./_stream_duplex');
  options = options || {};

  // Duplex streams are both readable and writable, but share
  // the same options object.
  // However, some cases require setting options to different
  // values for the readable and the writable sides of the duplex stream,
  // e.g. options.readableObjectMode vs. options.writableObjectMode, etc.
  if (typeof isDuplex !== 'boolean') isDuplex = stream instanceof Duplex;

  // object stream flag to indicate whether or not this stream
  // contains buffers or objects.
  this.objectMode = !!options.objectMode;
  if (isDuplex) this.objectMode = this.objectMode || !!options.writableObjectMode;

  // the point at which write() starts returning false
  // Note: 0 is a valid value, means that we always return false if
  // the entire buffer is not flushed immediately on write()
  this.highWaterMark = getHighWaterMark(this, options, 'writableHighWaterMark', isDuplex);

  // if _final has been called
  this.finalCalled = false;

  // drain event flag.
  this.needDrain = false;
  // at the start of calling end()
  this.ending = false;
  // when end() has been called, and returned
  this.ended = false;
  // when 'finish' is emitted
  this.finished = false;

  // has it been destroyed
  this.destroyed = false;

  // should we decode strings into buffers before passing to _write?
  // this is here so that some node-core streams can optimize string
  // handling at a lower level.
  var noDecode = options.decodeStrings === false;
  this.decodeStrings = !noDecode;

  // Crypto is kind of old and crusty.  Historically, its default string
  // encoding is 'binary' so we have to make this configurable.
  // Everything else in the universe uses 'utf8', though.
  this.defaultEncoding = options.defaultEncoding || 'utf8';

  // not an actual buffer we keep track of, but a measurement
  // of how much we're waiting to get pushed to some underlying
  // socket or file.
  this.length = 0;

  // a flag to see when we're in the middle of a write.
  this.writing = false;

  // when true all writes will be buffered until .uncork() call
  this.corked = 0;

  // a flag to be able to tell if the onwrite cb is called immediately,
  // or on a later tick.  We set this to true at first, because any
  // actions that shouldn't happen until "later" should generally also
  // not happen before the first write call.
  this.sync = true;

  // a flag to know if we're processing previously buffered items, which
  // may call the _write() callback in the same tick, so that we don't
  // end up in an overlapped onwrite situation.
  this.bufferProcessing = false;

  // the callback that's passed to _write(chunk,cb)
  this.onwrite = function (er) {
    onwrite(stream, er);
  };

  // the callback that the user supplies to write(chunk,encoding,cb)
  this.writecb = null;

  // the amount that is being written when _write is called.
  this.writelen = 0;
  this.bufferedRequest = null;
  this.lastBufferedRequest = null;

  // number of pending user-supplied write callbacks
  // this must be 0 before 'finish' can be emitted
  this.pendingcb = 0;

  // emit prefinish if the only thing we're waiting for is _write cbs
  // This is relevant for synchronous Transform streams
  this.prefinished = false;

  // True if the error was already emitted and should not be thrown again
  this.errorEmitted = false;

  // Should close be emitted on destroy. Defaults to true.
  this.emitClose = options.emitClose !== false;

  // Should .destroy() be called after 'finish' (and potentially 'end')
  this.autoDestroy = !!options.autoDestroy;

  // count buffered requests
  this.bufferedRequestCount = 0;

  // allocate the first CorkedRequest, there is always
  // one allocated and free to use, and we maintain at most two
  this.corkedRequestsFree = new CorkedRequest(this);
}
WritableState.prototype.getBuffer = function getBuffer() {
  var current = this.bufferedRequest;
  var out = [];
  while (current) {
    out.push(current);
    current = current.next;
  }
  return out;
};
(function () {
  try {
    Object.defineProperty(WritableState.prototype, 'buffer', {
      get: internalUtil.deprecate(function writableStateBufferGetter() {
        return this.getBuffer();
      }, '_writableState.buffer is deprecated. Use _writableState.getBuffer ' + 'instead.', 'DEP0003')
    });
  } catch (_) {}
})();

// Test _writableState for inheritance to account for Duplex streams,
// whose prototype chain only points to Readable.
var realHasInstance;
if (typeof Symbol === 'function' && Symbol.hasInstance && typeof Function.prototype[Symbol.hasInstance] === 'function') {
  realHasInstance = Function.prototype[Symbol.hasInstance];
  Object.defineProperty(Writable, Symbol.hasInstance, {
    value: function value(object) {
      if (realHasInstance.call(this, object)) return true;
      if (this !== Writable) return false;
      return object && object._writableState instanceof WritableState;
    }
  });
} else {
  realHasInstance = function realHasInstance(object) {
    return object instanceof this;
  };
}
function Writable(options) {
  Duplex = Duplex || require('./_stream_duplex');

  // Writable ctor is applied to Duplexes, too.
  // `realHasInstance` is necessary because using plain `instanceof`
  // would return false, as no `_writableState` property is attached.

  // Trying to use the custom `instanceof` for Writable here will also break the
  // Node.js LazyTransform implementation, which has a non-trivial getter for
  // `_writableState` that would lead to infinite recursion.

  // Checking for a Stream.Duplex instance is faster here instead of inside
  // the WritableState constructor, at least with V8 6.5
  var isDuplex = this instanceof Duplex;
  if (!isDuplex && !realHasInstance.call(Writable, this)) return new Writable(options);
  this._writableState = new WritableState(options, this, isDuplex);

  // legacy.
  this.writable = true;
  if (options) {
    if (typeof options.write === 'function') this._write = options.write;
    if (typeof options.writev === 'function') this._writev = options.writev;
    if (typeof options.destroy === 'function') this._destroy = options.destroy;
    if (typeof options.final === 'function') this._final = options.final;
  }
  Stream.call(this);
}

// Otherwise people can pipe Writable streams, which is just wrong.
Writable.prototype.pipe = function () {
  errorOrDestroy(this, new ERR_STREAM_CANNOT_PIPE());
};
function writeAfterEnd(stream, cb) {
  var er = new ERR_STREAM_WRITE_AFTER_END();
  // TODO: defer error events consistently everywhere, not just the cb
  errorOrDestroy(stream, er);
  process.nextTick(cb, er);
}

// Checks that a user-supplied chunk is valid, especially for the particular
// mode the stream is in. Currently this means that `null` is never accepted
// and undefined/non-string values are only allowed in object mode.
function validChunk(stream, state, chunk, cb) {
  var er;
  if (chunk === null) {
    er = new ERR_STREAM_NULL_VALUES();
  } else if (typeof chunk !== 'string' && !state.objectMode) {
    er = new ERR_INVALID_ARG_TYPE('chunk', ['string', 'Buffer'], chunk);
  }
  if (er) {
    errorOrDestroy(stream, er);
    process.nextTick(cb, er);
    return false;
  }
  return true;
}
Writable.prototype.write = function (chunk, encoding, cb) {
  var state = this._writableState;
  var ret = false;
  var isBuf = !state.objectMode && _isUint8Array(chunk);
  if (isBuf && !Buffer.isBuffer(chunk)) {
    chunk = _uint8ArrayToBuffer(chunk);
  }
  if (typeof encoding === 'function') {
    cb = encoding;
    encoding = null;
  }
  if (isBuf) encoding = 'buffer';else if (!encoding) encoding = state.defaultEncoding;
  if (typeof cb !== 'function') cb = nop;
  if (state.ending) writeAfterEnd(this, cb);else if (isBuf || validChunk(this, state, chunk, cb)) {
    state.pendingcb++;
    ret = writeOrBuffer(this, state, isBuf, chunk, encoding, cb);
  }
  return ret;
};
Writable.prototype.cork = function () {
  this._writableState.corked++;
};
Writable.prototype.uncork = function () {
  var state = this._writableState;
  if (state.corked) {
    state.corked--;
    if (!state.writing && !state.corked && !state.bufferProcessing && state.bufferedRequest) clearBuffer(this, state);
  }
};
Writable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {
  // node::ParseEncoding() requires lower case.
  if (typeof encoding === 'string') encoding = encoding.toLowerCase();
  if (!(['hex', 'utf8', 'utf-8', 'ascii', 'binary', 'base64', 'ucs2', 'ucs-2', 'utf16le', 'utf-16le', 'raw'].indexOf((encoding + '').toLowerCase()) > -1)) throw new ERR_UNKNOWN_ENCODING(encoding);
  this._writableState.defaultEncoding = encoding;
  return this;
};
Object.defineProperty(Writable.prototype, 'writableBuffer', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._writableState && this._writableState.getBuffer();
  }
});
function decodeChunk(state, chunk, encoding) {
  if (!state.objectMode && state.decodeStrings !== false && typeof chunk === 'string') {
    chunk = Buffer.from(chunk, encoding);
  }
  return chunk;
}
Object.defineProperty(Writable.prototype, 'writableHighWaterMark', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._writableState.highWaterMark;
  }
});

// if we're already writing something, then just put this
// in the queue, and wait our turn.  Otherwise, call _write
// If we return false, then we need a drain event, so set that flag.
function writeOrBuffer(stream, state, isBuf, chunk, encoding, cb) {
  if (!isBuf) {
    var newChunk = decodeChunk(state, chunk, encoding);
    if (chunk !== newChunk) {
      isBuf = true;
      encoding = 'buffer';
      chunk = newChunk;
    }
  }
  var len = state.objectMode ? 1 : chunk.length;
  state.length += len;
  var ret = state.length < state.highWaterMark;
  // we must ensure that previous needDrain will not be reset to false.
  if (!ret) state.needDrain = true;
  if (state.writing || state.corked) {
    var last = state.lastBufferedRequest;
    state.lastBufferedRequest = {
      chunk: chunk,
      encoding: encoding,
      isBuf: isBuf,
      callback: cb,
      next: null
    };
    if (last) {
      last.next = state.lastBufferedRequest;
    } else {
      state.bufferedRequest = state.lastBufferedRequest;
    }
    state.bufferedRequestCount += 1;
  } else {
    doWrite(stream, state, false, len, chunk, encoding, cb);
  }
  return ret;
}
function doWrite(stream, state, writev, len, chunk, encoding, cb) {
  state.writelen = len;
  state.writecb = cb;
  state.writing = true;
  state.sync = true;
  if (state.destroyed) state.onwrite(new ERR_STREAM_DESTROYED('write'));else if (writev) stream._writev(chunk, state.onwrite);else stream._write(chunk, encoding, state.onwrite);
  state.sync = false;
}
function onwriteError(stream, state, sync, er, cb) {
  --state.pendingcb;
  if (sync) {
    // defer the callback if we are being called synchronously
    // to avoid piling up things on the stack
    process.nextTick(cb, er);
    // this can emit finish, and it will always happen
    // after error
    process.nextTick(finishMaybe, stream, state);
    stream._writableState.errorEmitted = true;
    errorOrDestroy(stream, er);
  } else {
    // the caller expect this to happen before if
    // it is async
    cb(er);
    stream._writableState.errorEmitted = true;
    errorOrDestroy(stream, er);
    // this can emit finish, but finish must
    // always follow error
    finishMaybe(stream, state);
  }
}
function onwriteStateUpdate(state) {
  state.writing = false;
  state.writecb = null;
  state.length -= state.writelen;
  state.writelen = 0;
}
function onwrite(stream, er) {
  var state = stream._writableState;
  var sync = state.sync;
  var cb = state.writecb;
  if (typeof cb !== 'function') throw new ERR_MULTIPLE_CALLBACK();
  onwriteStateUpdate(state);
  if (er) onwriteError(stream, state, sync, er, cb);else {
    // Check if we're actually ready to finish, but don't emit yet
    var finished = needFinish(state) || stream.destroyed;
    if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) {
      clearBuffer(stream, state);
    }
    if (sync) {
      process.nextTick(afterWrite, stream, state, finished, cb);
    } else {
      afterWrite(stream, state, finished, cb);
    }
  }
}
function afterWrite(stream, state, finished, cb) {
  if (!finished) onwriteDrain(stream, state);
  state.pendingcb--;
  cb();
  finishMaybe(stream, state);
}

// Must force callback to be called on nextTick, so that we don't
// emit 'drain' before the write() consumer gets the 'false' return
// value, and has a chance to attach a 'drain' listener.
function onwriteDrain(stream, state) {
  if (state.length === 0 && state.needDrain) {
    state.needDrain = false;
    stream.emit('drain');
  }
}

// if there's something in the buffer waiting, then process it
function clearBuffer(stream, state) {
  state.bufferProcessing = true;
  var entry = state.bufferedRequest;
  if (stream._writev && entry && entry.next) {
    // Fast case, write everything using _writev()
    var l = state.bufferedRequestCount;
    var buffer = new Array(l);
    var holder = state.corkedRequestsFree;
    holder.entry = entry;
    var count = 0;
    var allBuffers = true;
    while (entry) {
      buffer[count] = entry;
      if (!entry.isBuf) allBuffers = false;
      entry = entry.next;
      count += 1;
    }
    buffer.allBuffers = allBuffers;
    doWrite(stream, state, true, state.length, buffer, '', holder.finish);

    // doWrite is almost always async, defer these to save a bit of time
    // as the hot path ends with doWrite
    state.pendingcb++;
    state.lastBufferedRequest = null;
    if (holder.next) {
      state.corkedRequestsFree = holder.next;
      holder.next = null;
    } else {
      state.corkedRequestsFree = new CorkedRequest(state);
    }
    state.bufferedRequestCount = 0;
  } else {
    // Slow case, write chunks one-by-one
    while (entry) {
      var chunk = entry.chunk;
      var encoding = entry.encoding;
      var cb = entry.callback;
      var len = state.objectMode ? 1 : chunk.length;
      doWrite(stream, state, false, len, chunk, encoding, cb);
      entry = entry.next;
      state.bufferedRequestCount--;
      // if we didn't call the onwrite immediately, then
      // it means that we need to wait until it does.
      // also, that means that the chunk and cb are currently
      // being processed, so move the buffer counter past them.
      if (state.writing) {
        break;
      }
    }
    if (entry === null) state.lastBufferedRequest = null;
  }
  state.bufferedRequest = entry;
  state.bufferProcessing = false;
}
Writable.prototype._write = function (chunk, encoding, cb) {
  cb(new ERR_METHOD_NOT_IMPLEMENTED('_write()'));
};
Writable.prototype._writev = null;
Writable.prototype.end = function (chunk, encoding, cb) {
  var state = this._writableState;
  if (typeof chunk === 'function') {
    cb = chunk;
    chunk = null;
    encoding = null;
  } else if (typeof encoding === 'function') {
    cb = encoding;
    encoding = null;
  }
  if (chunk !== null && chunk !== undefined) this.write(chunk, encoding);

  // .end() fully uncorks
  if (state.corked) {
    state.corked = 1;
    this.uncork();
  }

  // ignore unnecessary end() calls.
  if (!state.ending) endWritable(this, state, cb);
  return this;
};
Object.defineProperty(Writable.prototype, 'writableLength', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._writableState.length;
  }
});
function needFinish(state) {
  return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;
}
function callFinal(stream, state) {
  stream._final(function (err) {
    state.pendingcb--;
    if (err) {
      errorOrDestroy(stream, err);
    }
    state.prefinished = true;
    stream.emit('prefinish');
    finishMaybe(stream, state);
  });
}
function prefinish(stream, state) {
  if (!state.prefinished && !state.finalCalled) {
    if (typeof stream._final === 'function' && !state.destroyed) {
      state.pendingcb++;
      state.finalCalled = true;
      process.nextTick(callFinal, stream, state);
    } else {
      state.prefinished = true;
      stream.emit('prefinish');
    }
  }
}
function finishMaybe(stream, state) {
  var need = needFinish(state);
  if (need) {
    prefinish(stream, state);
    if (state.pendingcb === 0) {
      state.finished = true;
      stream.emit('finish');
      if (state.autoDestroy) {
        // In case of duplex streams we need a way to detect
        // if the readable side is ready for autoDestroy as well
        var rState = stream._readableState;
        if (!rState || rState.autoDestroy && rState.endEmitted) {
          stream.destroy();
        }
      }
    }
  }
  return need;
}
function endWritable(stream, state, cb) {
  state.ending = true;
  finishMaybe(stream, state);
  if (cb) {
    if (state.finished) process.nextTick(cb);else stream.once('finish', cb);
  }
  state.ended = true;
  stream.writable = false;
}
function onCorkedFinish(corkReq, state, err) {
  var entry = corkReq.entry;
  corkReq.entry = null;
  while (entry) {
    var cb = entry.callback;
    state.pendingcb--;
    cb(err);
    entry = entry.next;
  }

  // reuse the free corkReq.
  state.corkedRequestsFree.next = corkReq;
}
Object.defineProperty(Writable.prototype, 'destroyed', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    if (this._writableState === undefined) {
      return false;
    }
    return this._writableState.destroyed;
  },
  set: function set(value) {
    // we ignore the value if the stream
    // has not been initialized yet
    if (!this._writableState) {
      return;
    }

    // backward compatibility, the user is explicitly
    // managing destroyed
    this._writableState.destroyed = value;
  }
});
Writable.prototype.destroy = destroyImpl.destroy;
Writable.prototype._undestroy = destroyImpl.undestroy;
Writable.prototype._destroy = function (err, cb) {
  cb(err);
};
}).call(this)}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"../errors":145,"./_stream_duplex":146,"./internal/streams/destroy":153,"./internal/streams/state":157,"./internal/streams/stream":158,"_process":136,"buffer":53,"inherits":115,"util-deprecate":173}],151:[function(require,module,exports){
(function (process){(function (){
'use strict';

var _Object$setPrototypeO;
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
var finished = require('./end-of-stream');
var kLastResolve = Symbol('lastResolve');
var kLastReject = Symbol('lastReject');
var kError = Symbol('error');
var kEnded = Symbol('ended');
var kLastPromise = Symbol('lastPromise');
var kHandlePromise = Symbol('handlePromise');
var kStream = Symbol('stream');
function createIterResult(value, done) {
  return {
    value: value,
    done: done
  };
}
function readAndResolve(iter) {
  var resolve = iter[kLastResolve];
  if (resolve !== null) {
    var data = iter[kStream].read();
    // we defer if data is null
    // we can be expecting either 'end' or
    // 'error'
    if (data !== null) {
      iter[kLastPromise] = null;
      iter[kLastResolve] = null;
      iter[kLastReject] = null;
      resolve(createIterResult(data, false));
    }
  }
}
function onReadable(iter) {
  // we wait for the next tick, because it might
  // emit an error with process.nextTick
  process.nextTick(readAndResolve, iter);
}
function wrapForNext(lastPromise, iter) {
  return function (resolve, reject) {
    lastPromise.then(function () {
      if (iter[kEnded]) {
        resolve(createIterResult(undefined, true));
        return;
      }
      iter[kHandlePromise](resolve, reject);
    }, reject);
  };
}
var AsyncIteratorPrototype = Object.getPrototypeOf(function () {});
var ReadableStreamAsyncIteratorPrototype = Object.setPrototypeOf((_Object$setPrototypeO = {
  get stream() {
    return this[kStream];
  },
  next: function next() {
    var _this = this;
    // if we have detected an error in the meanwhile
    // reject straight away
    var error = this[kError];
    if (error !== null) {
      return Promise.reject(error);
    }
    if (this[kEnded]) {
      return Promise.resolve(createIterResult(undefined, true));
    }
    if (this[kStream].destroyed) {
      // We need to defer via nextTick because if .destroy(err) is
      // called, the error will be emitted via nextTick, and
      // we cannot guarantee that there is no error lingering around
      // waiting to be emitted.
      return new Promise(function (resolve, reject) {
        process.nextTick(function () {
          if (_this[kError]) {
            reject(_this[kError]);
          } else {
            resolve(createIterResult(undefined, true));
          }
        });
      });
    }

    // if we have multiple next() calls
    // we will wait for the previous Promise to finish
    // this logic is optimized to support for await loops,
    // where next() is only called once at a time
    var lastPromise = this[kLastPromise];
    var promise;
    if (lastPromise) {
      promise = new Promise(wrapForNext(lastPromise, this));
    } else {
      // fast path needed to support multiple this.push()
      // without triggering the next() queue
      var data = this[kStream].read();
      if (data !== null) {
        return Promise.resolve(createIterResult(data, false));
      }
      promise = new Promise(this[kHandlePromise]);
    }
    this[kLastPromise] = promise;
    return promise;
  }
}, _defineProperty(_Object$setPrototypeO, Symbol.asyncIterator, function () {
  return this;
}), _defineProperty(_Object$setPrototypeO, "return", function _return() {
  var _this2 = this;
  // destroy(err, cb) is a private API
  // we can guarantee we have that here, because we control the
  // Readable class this is attached to
  return new Promise(function (resolve, reject) {
    _this2[kStream].destroy(null, function (err) {
      if (err) {
        reject(err);
        return;
      }
      resolve(createIterResult(undefined, true));
    });
  });
}), _Object$setPrototypeO), AsyncIteratorPrototype);
var createReadableStreamAsyncIterator = function createReadableStreamAsyncIterator(stream) {
  var _Object$create;
  var iterator = Object.create(ReadableStreamAsyncIteratorPrototype, (_Object$create = {}, _defineProperty(_Object$create, kStream, {
    value: stream,
    writable: true
  }), _defineProperty(_Object$create, kLastResolve, {
    value: null,
    writable: true
  }), _defineProperty(_Object$create, kLastReject, {
    value: null,
    writable: true
  }), _defineProperty(_Object$create, kError, {
    value: null,
    writable: true
  }), _defineProperty(_Object$create, kEnded, {
    value: stream._readableState.endEmitted,
    writable: true
  }), _defineProperty(_Object$create, kHandlePromise, {
    value: function value(resolve, reject) {
      var data = iterator[kStream].read();
      if (data) {
        iterator[kLastPromise] = null;
        iterator[kLastResolve] = null;
        iterator[kLastReject] = null;
        resolve(createIterResult(data, false));
      } else {
        iterator[kLastResolve] = resolve;
        iterator[kLastReject] = reject;
      }
    },
    writable: true
  }), _Object$create));
  iterator[kLastPromise] = null;
  finished(stream, function (err) {
    if (err && err.code !== 'ERR_STREAM_PREMATURE_CLOSE') {
      var reject = iterator[kLastReject];
      // reject if we are waiting for data in the Promise
      // returned by next() and store the error
      if (reject !== null) {
        iterator[kLastPromise] = null;
        iterator[kLastResolve] = null;
        iterator[kLastReject] = null;
        reject(err);
      }
      iterator[kError] = err;
      return;
    }
    var resolve = iterator[kLastResolve];
    if (resolve !== null) {
      iterator[kLastPromise] = null;
      iterator[kLastResolve] = null;
      iterator[kLastReject] = null;
      resolve(createIterResult(undefined, true));
    }
    iterator[kEnded] = true;
  });
  stream.on('readable', onReadable.bind(null, iterator));
  return iterator;
};
module.exports = createReadableStreamAsyncIterator;
}).call(this)}).call(this,require('_process'))
},{"./end-of-stream":154,"_process":136}],152:[function(require,module,exports){
'use strict';

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
var _require = require('buffer'),
  Buffer = _require.Buffer;
var _require2 = require('util'),
  inspect = _require2.inspect;
var custom = inspect && inspect.custom || 'inspect';
function copyBuffer(src, target, offset) {
  Buffer.prototype.copy.call(src, target, offset);
}
module.exports = /*#__PURE__*/function () {
  function BufferList() {
    _classCallCheck(this, BufferList);
    this.head = null;
    this.tail = null;
    this.length = 0;
  }
  _createClass(BufferList, [{
    key: "push",
    value: function push(v) {
      var entry = {
        data: v,
        next: null
      };
      if (this.length > 0) this.tail.next = entry;else this.head = entry;
      this.tail = entry;
      ++this.length;
    }
  }, {
    key: "unshift",
    value: function unshift(v) {
      var entry = {
        data: v,
        next: this.head
      };
      if (this.length === 0) this.tail = entry;
      this.head = entry;
      ++this.length;
    }
  }, {
    key: "shift",
    value: function shift() {
      if (this.length === 0) return;
      var ret = this.head.data;
      if (this.length === 1) this.head = this.tail = null;else this.head = this.head.next;
      --this.length;
      return ret;
    }
  }, {
    key: "clear",
    value: function clear() {
      this.head = this.tail = null;
      this.length = 0;
    }
  }, {
    key: "join",
    value: function join(s) {
      if (this.length === 0) return '';
      var p = this.head;
      var ret = '' + p.data;
      while (p = p.next) ret += s + p.data;
      return ret;
    }
  }, {
    key: "concat",
    value: function concat(n) {
      if (this.length === 0) return Buffer.alloc(0);
      var ret = Buffer.allocUnsafe(n >>> 0);
      var p = this.head;
      var i = 0;
      while (p) {
        copyBuffer(p.data, ret, i);
        i += p.data.length;
        p = p.next;
      }
      return ret;
    }

    // Consumes a specified amount of bytes or characters from the buffered data.
  }, {
    key: "consume",
    value: function consume(n, hasStrings) {
      var ret;
      if (n < this.head.data.length) {
        // `slice` is the same for buffers and strings.
        ret = this.head.data.slice(0, n);
        this.head.data = this.head.data.slice(n);
      } else if (n === this.head.data.length) {
        // First chunk is a perfect match.
        ret = this.shift();
      } else {
        // Result spans more than one buffer.
        ret = hasStrings ? this._getString(n) : this._getBuffer(n);
      }
      return ret;
    }
  }, {
    key: "first",
    value: function first() {
      return this.head.data;
    }

    // Consumes a specified amount of characters from the buffered data.
  }, {
    key: "_getString",
    value: function _getString(n) {
      var p = this.head;
      var c = 1;
      var ret = p.data;
      n -= ret.length;
      while (p = p.next) {
        var str = p.data;
        var nb = n > str.length ? str.length : n;
        if (nb === str.length) ret += str;else ret += str.slice(0, n);
        n -= nb;
        if (n === 0) {
          if (nb === str.length) {
            ++c;
            if (p.next) this.head = p.next;else this.head = this.tail = null;
          } else {
            this.head = p;
            p.data = str.slice(nb);
          }
          break;
        }
        ++c;
      }
      this.length -= c;
      return ret;
    }

    // Consumes a specified amount of bytes from the buffered data.
  }, {
    key: "_getBuffer",
    value: function _getBuffer(n) {
      var ret = Buffer.allocUnsafe(n);
      var p = this.head;
      var c = 1;
      p.data.copy(ret);
      n -= p.data.length;
      while (p = p.next) {
        var buf = p.data;
        var nb = n > buf.length ? buf.length : n;
        buf.copy(ret, ret.length - n, 0, nb);
        n -= nb;
        if (n === 0) {
          if (nb === buf.length) {
            ++c;
            if (p.next) this.head = p.next;else this.head = this.tail = null;
          } else {
            this.head = p;
            p.data = buf.slice(nb);
          }
          break;
        }
        ++c;
      }
      this.length -= c;
      return ret;
    }

    // Make sure the linked list only shows the minimal necessary information.
  }, {
    key: custom,
    value: function value(_, options) {
      return inspect(this, _objectSpread(_objectSpread({}, options), {}, {
        // Only inspect one level.
        depth: 0,
        // It should not recurse.
        customInspect: false
      }));
    }
  }]);
  return BufferList;
}();
},{"buffer":53,"util":24}],153:[function(require,module,exports){
(function (process){(function (){
'use strict';

// undocumented cb() API, needed for core, not for public API
function destroy(err, cb) {
  var _this = this;
  var readableDestroyed = this._readableState && this._readableState.destroyed;
  var writableDestroyed = this._writableState && this._writableState.destroyed;
  if (readableDestroyed || writableDestroyed) {
    if (cb) {
      cb(err);
    } else if (err) {
      if (!this._writableState) {
        process.nextTick(emitErrorNT, this, err);
      } else if (!this._writableState.errorEmitted) {
        this._writableState.errorEmitted = true;
        process.nextTick(emitErrorNT, this, err);
      }
    }
    return this;
  }

  // we set destroyed to true before firing error callbacks in order
  // to make it re-entrance safe in case destroy() is called within callbacks

  if (this._readableState) {
    this._readableState.destroyed = true;
  }

  // if this is a duplex stream mark the writable part as destroyed as well
  if (this._writableState) {
    this._writableState.destroyed = true;
  }
  this._destroy(err || null, function (err) {
    if (!cb && err) {
      if (!_this._writableState) {
        process.nextTick(emitErrorAndCloseNT, _this, err);
      } else if (!_this._writableState.errorEmitted) {
        _this._writableState.errorEmitted = true;
        process.nextTick(emitErrorAndCloseNT, _this, err);
      } else {
        process.nextTick(emitCloseNT, _this);
      }
    } else if (cb) {
      process.nextTick(emitCloseNT, _this);
      cb(err);
    } else {
      process.nextTick(emitCloseNT, _this);
    }
  });
  return this;
}
function emitErrorAndCloseNT(self, err) {
  emitErrorNT(self, err);
  emitCloseNT(self);
}
function emitCloseNT(self) {
  if (self._writableState && !self._writableState.emitClose) return;
  if (self._readableState && !self._readableState.emitClose) return;
  self.emit('close');
}
function undestroy() {
  if (this._readableState) {
    this._readableState.destroyed = false;
    this._readableState.reading = false;
    this._readableState.ended = false;
    this._readableState.endEmitted = false;
  }
  if (this._writableState) {
    this._writableState.destroyed = false;
    this._writableState.ended = false;
    this._writableState.ending = false;
    this._writableState.finalCalled = false;
    this._writableState.prefinished = false;
    this._writableState.finished = false;
    this._writableState.errorEmitted = false;
  }
}
function emitErrorNT(self, err) {
  self.emit('error', err);
}
function errorOrDestroy(stream, err) {
  // We have tests that rely on errors being emitted
  // in the same tick, so changing this is semver major.
  // For now when you opt-in to autoDestroy we allow
  // the error to be emitted nextTick. In a future
  // semver major update we should change the default to this.

  var rState = stream._readableState;
  var wState = stream._writableState;
  if (rState && rState.autoDestroy || wState && wState.autoDestroy) stream.destroy(err);else stream.emit('error', err);
}
module.exports = {
  destroy: destroy,
  undestroy: undestroy,
  errorOrDestroy: errorOrDestroy
};
}).call(this)}).call(this,require('_process'))
},{"_process":136}],154:[function(require,module,exports){
// Ported from https://github.com/mafintosh/end-of-stream with
// permission from the author, Mathias Buus (@mafintosh).

'use strict';

var ERR_STREAM_PREMATURE_CLOSE = require('../../../errors').codes.ERR_STREAM_PREMATURE_CLOSE;
function once(callback) {
  var called = false;
  return function () {
    if (called) return;
    called = true;
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    callback.apply(this, args);
  };
}
function noop() {}
function isRequest(stream) {
  return stream.setHeader && typeof stream.abort === 'function';
}
function eos(stream, opts, callback) {
  if (typeof opts === 'function') return eos(stream, null, opts);
  if (!opts) opts = {};
  callback = once(callback || noop);
  var readable = opts.readable || opts.readable !== false && stream.readable;
  var writable = opts.writable || opts.writable !== false && stream.writable;
  var onlegacyfinish = function onlegacyfinish() {
    if (!stream.writable) onfinish();
  };
  var writableEnded = stream._writableState && stream._writableState.finished;
  var onfinish = function onfinish() {
    writable = false;
    writableEnded = true;
    if (!readable) callback.call(stream);
  };
  var readableEnded = stream._readableState && stream._readableState.endEmitted;
  var onend = function onend() {
    readable = false;
    readableEnded = true;
    if (!writable) callback.call(stream);
  };
  var onerror = function onerror(err) {
    callback.call(stream, err);
  };
  var onclose = function onclose() {
    var err;
    if (readable && !readableEnded) {
      if (!stream._readableState || !stream._readableState.ended) err = new ERR_STREAM_PREMATURE_CLOSE();
      return callback.call(stream, err);
    }
    if (writable && !writableEnded) {
      if (!stream._writableState || !stream._writableState.ended) err = new ERR_STREAM_PREMATURE_CLOSE();
      return callback.call(stream, err);
    }
  };
  var onrequest = function onrequest() {
    stream.req.on('finish', onfinish);
  };
  if (isRequest(stream)) {
    stream.on('complete', onfinish);
    stream.on('abort', onclose);
    if (stream.req) onrequest();else stream.on('request', onrequest);
  } else if (writable && !stream._writableState) {
    // legacy streams
    stream.on('end', onlegacyfinish);
    stream.on('close', onlegacyfinish);
  }
  stream.on('end', onend);
  stream.on('finish', onfinish);
  if (opts.error !== false) stream.on('error', onerror);
  stream.on('close', onclose);
  return function () {
    stream.removeListener('complete', onfinish);
    stream.removeListener('abort', onclose);
    stream.removeListener('request', onrequest);
    if (stream.req) stream.req.removeListener('finish', onfinish);
    stream.removeListener('end', onlegacyfinish);
    stream.removeListener('close', onlegacyfinish);
    stream.removeListener('finish', onfinish);
    stream.removeListener('end', onend);
    stream.removeListener('error', onerror);
    stream.removeListener('close', onclose);
  };
}
module.exports = eos;
},{"../../../errors":145}],155:[function(require,module,exports){
module.exports = function () {
  throw new Error('Readable.from is not available in the browser')
};

},{}],156:[function(require,module,exports){
// Ported from https://github.com/mafintosh/pump with
// permission from the author, Mathias Buus (@mafintosh).

'use strict';

var eos;
function once(callback) {
  var called = false;
  return function () {
    if (called) return;
    called = true;
    callback.apply(void 0, arguments);
  };
}
var _require$codes = require('../../../errors').codes,
  ERR_MISSING_ARGS = _require$codes.ERR_MISSING_ARGS,
  ERR_STREAM_DESTROYED = _require$codes.ERR_STREAM_DESTROYED;
function noop(err) {
  // Rethrow the error if it exists to avoid swallowing it
  if (err) throw err;
}
function isRequest(stream) {
  return stream.setHeader && typeof stream.abort === 'function';
}
function destroyer(stream, reading, writing, callback) {
  callback = once(callback);
  var closed = false;
  stream.on('close', function () {
    closed = true;
  });
  if (eos === undefined) eos = require('./end-of-stream');
  eos(stream, {
    readable: reading,
    writable: writing
  }, function (err) {
    if (err) return callback(err);
    closed = true;
    callback();
  });
  var destroyed = false;
  return function (err) {
    if (closed) return;
    if (destroyed) return;
    destroyed = true;

    // request.destroy just do .end - .abort is what we want
    if (isRequest(stream)) return stream.abort();
    if (typeof stream.destroy === 'function') return stream.destroy();
    callback(err || new ERR_STREAM_DESTROYED('pipe'));
  };
}
function call(fn) {
  fn();
}
function pipe(from, to) {
  return from.pipe(to);
}
function popCallback(streams) {
  if (!streams.length) return noop;
  if (typeof streams[streams.length - 1] !== 'function') return noop;
  return streams.pop();
}
function pipeline() {
  for (var _len = arguments.length, streams = new Array(_len), _key = 0; _key < _len; _key++) {
    streams[_key] = arguments[_key];
  }
  var callback = popCallback(streams);
  if (Array.isArray(streams[0])) streams = streams[0];
  if (streams.length < 2) {
    throw new ERR_MISSING_ARGS('streams');
  }
  var error;
  var destroys = streams.map(function (stream, i) {
    var reading = i < streams.length - 1;
    var writing = i > 0;
    return destroyer(stream, reading, writing, function (err) {
      if (!error) error = err;
      if (err) destroys.forEach(call);
      if (reading) return;
      destroys.forEach(call);
      callback(error);
    });
  });
  return streams.reduce(pipe);
}
module.exports = pipeline;
},{"../../../errors":145,"./end-of-stream":154}],157:[function(require,module,exports){
'use strict';

var ERR_INVALID_OPT_VALUE = require('../../../errors').codes.ERR_INVALID_OPT_VALUE;
function highWaterMarkFrom(options, isDuplex, duplexKey) {
  return options.highWaterMark != null ? options.highWaterMark : isDuplex ? options[duplexKey] : null;
}
function getHighWaterMark(state, options, duplexKey, isDuplex) {
  var hwm = highWaterMarkFrom(options, isDuplex, duplexKey);
  if (hwm != null) {
    if (!(isFinite(hwm) && Math.floor(hwm) === hwm) || hwm < 0) {
      var name = isDuplex ? duplexKey : 'highWaterMark';
      throw new ERR_INVALID_OPT_VALUE(name, hwm);
    }
    return Math.floor(hwm);
  }

  // Default value
  return state.objectMode ? 16 : 16 * 1024;
}
module.exports = {
  getHighWaterMark: getHighWaterMark
};
},{"../../../errors":145}],158:[function(require,module,exports){
module.exports = require('events').EventEmitter;

},{"events":89}],159:[function(require,module,exports){
exports = module.exports = require('./lib/_stream_readable.js');
exports.Stream = exports;
exports.Readable = exports;
exports.Writable = require('./lib/_stream_writable.js');
exports.Duplex = require('./lib/_stream_duplex.js');
exports.Transform = require('./lib/_stream_transform.js');
exports.PassThrough = require('./lib/_stream_passthrough.js');
exports.finished = require('./lib/internal/streams/end-of-stream.js');
exports.pipeline = require('./lib/internal/streams/pipeline.js');

},{"./lib/_stream_duplex.js":146,"./lib/_stream_passthrough.js":147,"./lib/_stream_readable.js":148,"./lib/_stream_transform.js":149,"./lib/_stream_writable.js":150,"./lib/internal/streams/end-of-stream.js":154,"./lib/internal/streams/pipeline.js":156}],160:[function(require,module,exports){
'use strict'
var Buffer = require('buffer').Buffer
var inherits = require('inherits')
var HashBase = require('hash-base')

var ARRAY16 = new Array(16)

var zl = [
  0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,
  7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8,
  3, 10, 14, 4, 9, 15, 8, 1, 2, 7, 0, 6, 13, 11, 5, 12,
  1, 9, 11, 10, 0, 8, 12, 4, 13, 3, 7, 15, 14, 5, 6, 2,
  4, 0, 5, 9, 7, 12, 2, 10, 14, 1, 3, 8, 11, 6, 15, 13
]

var zr = [
  5, 14, 7, 0, 9, 2, 11, 4, 13, 6, 15, 8, 1, 10, 3, 12,
  6, 11, 3, 7, 0, 13, 5, 10, 14, 15, 8, 12, 4, 9, 1, 2,
  15, 5, 1, 3, 7, 14, 6, 9, 11, 8, 12, 2, 10, 0, 4, 13,
  8, 6, 4, 1, 3, 11, 15, 0, 5, 12, 2, 13, 9, 7, 10, 14,
  12, 15, 10, 4, 1, 5, 8, 7, 6, 2, 13, 14, 0, 3, 9, 11
]

var sl = [
  11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8,
  7, 6, 8, 13, 11, 9, 7, 15, 7, 12, 15, 9, 11, 7, 13, 12,
  11, 13, 6, 7, 14, 9, 13, 15, 14, 8, 13, 6, 5, 12, 7, 5,
  11, 12, 14, 15, 14, 15, 9, 8, 9, 14, 5, 6, 8, 6, 5, 12,
  9, 15, 5, 11, 6, 8, 13, 12, 5, 12, 13, 14, 11, 8, 5, 6
]

var sr = [
  8, 9, 9, 11, 13, 15, 15, 5, 7, 7, 8, 11, 14, 14, 12, 6,
  9, 13, 15, 7, 12, 8, 9, 11, 7, 7, 12, 7, 6, 15, 13, 11,
  9, 7, 15, 11, 8, 6, 6, 14, 12, 13, 5, 14, 13, 13, 7, 5,
  15, 5, 8, 11, 14, 14, 6, 14, 6, 9, 12, 9, 12, 5, 15, 8,
  8, 5, 12, 9, 12, 5, 14, 6, 8, 13, 6, 5, 15, 13, 11, 11
]

var hl = [0x00000000, 0x5a827999, 0x6ed9eba1, 0x8f1bbcdc, 0xa953fd4e]
var hr = [0x50a28be6, 0x5c4dd124, 0x6d703ef3, 0x7a6d76e9, 0x00000000]

function RIPEMD160 () {
  HashBase.call(this, 64)

  // state
  this._a = 0x67452301
  this._b = 0xefcdab89
  this._c = 0x98badcfe
  this._d = 0x10325476
  this._e = 0xc3d2e1f0
}

inherits(RIPEMD160, HashBase)

RIPEMD160.prototype._update = function () {
  var words = ARRAY16
  for (var j = 0; j < 16; ++j) words[j] = this._block.readInt32LE(j * 4)

  var al = this._a | 0
  var bl = this._b | 0
  var cl = this._c | 0
  var dl = this._d | 0
  var el = this._e | 0

  var ar = this._a | 0
  var br = this._b | 0
  var cr = this._c | 0
  var dr = this._d | 0
  var er = this._e | 0

  // computation
  for (var i = 0; i < 80; i += 1) {
    var tl
    var tr
    if (i < 16) {
      tl = fn1(al, bl, cl, dl, el, words[zl[i]], hl[0], sl[i])
      tr = fn5(ar, br, cr, dr, er, words[zr[i]], hr[0], sr[i])
    } else if (i < 32) {
      tl = fn2(al, bl, cl, dl, el, words[zl[i]], hl[1], sl[i])
      tr = fn4(ar, br, cr, dr, er, words[zr[i]], hr[1], sr[i])
    } else if (i < 48) {
      tl = fn3(al, bl, cl, dl, el, words[zl[i]], hl[2], sl[i])
      tr = fn3(ar, br, cr, dr, er, words[zr[i]], hr[2], sr[i])
    } else if (i < 64) {
      tl = fn4(al, bl, cl, dl, el, words[zl[i]], hl[3], sl[i])
      tr = fn2(ar, br, cr, dr, er, words[zr[i]], hr[3], sr[i])
    } else { // if (i<80) {
      tl = fn5(al, bl, cl, dl, el, words[zl[i]], hl[4], sl[i])
      tr = fn1(ar, br, cr, dr, er, words[zr[i]], hr[4], sr[i])
    }

    al = el
    el = dl
    dl = rotl(cl, 10)
    cl = bl
    bl = tl

    ar = er
    er = dr
    dr = rotl(cr, 10)
    cr = br
    br = tr
  }

  // update state
  var t = (this._b + cl + dr) | 0
  this._b = (this._c + dl + er) | 0
  this._c = (this._d + el + ar) | 0
  this._d = (this._e + al + br) | 0
  this._e = (this._a + bl + cr) | 0
  this._a = t
}

RIPEMD160.prototype._digest = function () {
  // create padding and handle blocks
  this._block[this._blockOffset++] = 0x80
  if (this._blockOffset > 56) {
    this._block.fill(0, this._blockOffset, 64)
    this._update()
    this._blockOffset = 0
  }

  this._block.fill(0, this._blockOffset, 56)
  this._block.writeUInt32LE(this._length[0], 56)
  this._block.writeUInt32LE(this._length[1], 60)
  this._update()

  // produce result
  var buffer = Buffer.alloc ? Buffer.alloc(20) : new Buffer(20)
  buffer.writeInt32LE(this._a, 0)
  buffer.writeInt32LE(this._b, 4)
  buffer.writeInt32LE(this._c, 8)
  buffer.writeInt32LE(this._d, 12)
  buffer.writeInt32LE(this._e, 16)
  return buffer
}

function rotl (x, n) {
  return (x << n) | (x >>> (32 - n))
}

function fn1 (a, b, c, d, e, m, k, s) {
  return (rotl((a + (b ^ c ^ d) + m + k) | 0, s) + e) | 0
}

function fn2 (a, b, c, d, e, m, k, s) {
  return (rotl((a + ((b & c) | ((~b) & d)) + m + k) | 0, s) + e) | 0
}

function fn3 (a, b, c, d, e, m, k, s) {
  return (rotl((a + ((b | (~c)) ^ d) + m + k) | 0, s) + e) | 0
}

function fn4 (a, b, c, d, e, m, k, s) {
  return (rotl((a + ((b & d) | (c & (~d))) + m + k) | 0, s) + e) | 0
}

function fn5 (a, b, c, d, e, m, k, s) {
  return (rotl((a + (b ^ (c | (~d))) + m + k) | 0, s) + e) | 0
}

module.exports = RIPEMD160

},{"buffer":53,"hash-base":100,"inherits":115}],161:[function(require,module,exports){
/*! safe-buffer. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> */
/* eslint-disable node/no-deprecated-api */
var buffer = require('buffer')
var Buffer = buffer.Buffer

// alternative to using Object.keys for old browsers
function copyProps (src, dst) {
  for (var key in src) {
    dst[key] = src[key]
  }
}
if (Buffer.from && Buffer.alloc && Buffer.allocUnsafe && Buffer.allocUnsafeSlow) {
  module.exports = buffer
} else {
  // Copy properties from require('buffer')
  copyProps(buffer, exports)
  exports.Buffer = SafeBuffer
}

function SafeBuffer (arg, encodingOrOffset, length) {
  return Buffer(arg, encodingOrOffset, length)
}

SafeBuffer.prototype = Object.create(Buffer.prototype)

// Copy static methods from Buffer
copyProps(Buffer, SafeBuffer)

SafeBuffer.from = function (arg, encodingOrOffset, length) {
  if (typeof arg === 'number') {
    throw new TypeError('Argument must not be a number')
  }
  return Buffer(arg, encodingOrOffset, length)
}

SafeBuffer.alloc = function (size, fill, encoding) {
  if (typeof size !== 'number') {
    throw new TypeError('Argument must be a number')
  }
  var buf = Buffer(size)
  if (fill !== undefined) {
    if (typeof encoding === 'string') {
      buf.fill(fill, encoding)
    } else {
      buf.fill(fill)
    }
  } else {
    buf.fill(0)
  }
  return buf
}

SafeBuffer.allocUnsafe = function (size) {
  if (typeof size !== 'number') {
    throw new TypeError('Argument must be a number')
  }
  return Buffer(size)
}

SafeBuffer.allocUnsafeSlow = function (size) {
  if (typeof size !== 'number') {
    throw new TypeError('Argument must be a number')
  }
  return buffer.SlowBuffer(size)
}

},{"buffer":53}],162:[function(require,module,exports){
(function (process){(function (){
/* eslint-disable node/no-deprecated-api */

'use strict'

var buffer = require('buffer')
var Buffer = buffer.Buffer

var safer = {}

var key

for (key in buffer) {
  if (!buffer.hasOwnProperty(key)) continue
  if (key === 'SlowBuffer' || key === 'Buffer') continue
  safer[key] = buffer[key]
}

var Safer = safer.Buffer = {}
for (key in Buffer) {
  if (!Buffer.hasOwnProperty(key)) continue
  if (key === 'allocUnsafe' || key === 'allocUnsafeSlow') continue
  Safer[key] = Buffer[key]
}

safer.Buffer.prototype = Buffer.prototype

if (!Safer.from || Safer.from === Uint8Array.from) {
  Safer.from = function (value, encodingOrOffset, length) {
    if (typeof value === 'number') {
      throw new TypeError('The "value" argument must not be of type number. Received type ' + typeof value)
    }
    if (value && typeof value.length === 'undefined') {
      throw new TypeError('The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type ' + typeof value)
    }
    return Buffer(value, encodingOrOffset, length)
  }
}

if (!Safer.alloc) {
  Safer.alloc = function (size, fill, encoding) {
    if (typeof size !== 'number') {
      throw new TypeError('The "size" argument must be of type number. Received type ' + typeof size)
    }
    if (size < 0 || size >= 2 * (1 << 30)) {
      throw new RangeError('The value "' + size + '" is invalid for option "size"')
    }
    var buf = Buffer(size)
    if (!fill || fill.length === 0) {
      buf.fill(0)
    } else if (typeof encoding === 'string') {
      buf.fill(fill, encoding)
    } else {
      buf.fill(fill)
    }
    return buf
  }
}

if (!safer.kStringMaxLength) {
  try {
    safer.kStringMaxLength = process.binding('buffer').kStringMaxLength
  } catch (e) {
    // we can't determine kStringMaxLength in environments where process.binding
    // is unsupported, so let's not set it
  }
}

if (!safer.constants) {
  safer.constants = {
    MAX_LENGTH: safer.kMaxLength
  }
  if (safer.kStringMaxLength) {
    safer.constants.MAX_STRING_LENGTH = safer.kStringMaxLength
  }
}

module.exports = safer

}).call(this)}).call(this,require('_process'))
},{"_process":136,"buffer":53}],163:[function(require,module,exports){
var Buffer = require('safe-buffer').Buffer

// prototype class for hash functions
function Hash (blockSize, finalSize) {
  this._block = Buffer.alloc(blockSize)
  this._finalSize = finalSize
  this._blockSize = blockSize
  this._len = 0
}

Hash.prototype.update = function (data, enc) {
  if (typeof data === 'string') {
    enc = enc || 'utf8'
    data = Buffer.from(data, enc)
  }

  var block = this._block
  var blockSize = this._blockSize
  var length = data.length
  var accum = this._len

  for (var offset = 0; offset < length;) {
    var assigned = accum % blockSize
    var remainder = Math.min(length - offset, blockSize - assigned)

    for (var i = 0; i < remainder; i++) {
      block[assigned + i] = data[offset + i]
    }

    accum += remainder
    offset += remainder

    if ((accum % blockSize) === 0) {
      this._update(block)
    }
  }

  this._len += length
  return this
}

Hash.prototype.digest = function (enc) {
  var rem = this._len % this._blockSize

  this._block[rem] = 0x80

  // zero (rem + 1) trailing bits, where (rem + 1) is the smallest
  // non-negative solution to the equation (length + 1 + (rem + 1)) === finalSize mod blockSize
  this._block.fill(0, rem + 1)

  if (rem >= this._finalSize) {
    this._update(this._block)
    this._block.fill(0)
  }

  var bits = this._len * 8

  // uint32
  if (bits <= 0xffffffff) {
    this._block.writeUInt32BE(bits, this._blockSize - 4)

  // uint64
  } else {
    var lowBits = (bits & 0xffffffff) >>> 0
    var highBits = (bits - lowBits) / 0x100000000

    this._block.writeUInt32BE(highBits, this._blockSize - 8)
    this._block.writeUInt32BE(lowBits, this._blockSize - 4)
  }

  this._update(this._block)
  var hash = this._hash()

  return enc ? hash.toString(enc) : hash
}

Hash.prototype._update = function () {
  throw new Error('_update must be implemented by subclass')
}

module.exports = Hash

},{"safe-buffer":161}],164:[function(require,module,exports){
var exports = module.exports = function SHA (algorithm) {
  algorithm = algorithm.toLowerCase()

  var Algorithm = exports[algorithm]
  if (!Algorithm) throw new Error(algorithm + ' is not supported (we accept pull requests)')

  return new Algorithm()
}

exports.sha = require('./sha')
exports.sha1 = require('./sha1')
exports.sha224 = require('./sha224')
exports.sha256 = require('./sha256')
exports.sha384 = require('./sha384')
exports.sha512 = require('./sha512')

},{"./sha":165,"./sha1":166,"./sha224":167,"./sha256":168,"./sha384":169,"./sha512":170}],165:[function(require,module,exports){
/*
 * A JavaScript implementation of the Secure Hash Algorithm, SHA-0, as defined
 * in FIPS PUB 180-1
 * This source code is derived from sha1.js of the same repository.
 * The difference between SHA-0 and SHA-1 is just a bitwise rotate left
 * operation was added.
 */

var inherits = require('inherits')
var Hash = require('./hash')
var Buffer = require('safe-buffer').Buffer

var K = [
  0x5a827999, 0x6ed9eba1, 0x8f1bbcdc | 0, 0xca62c1d6 | 0
]

var W = new Array(80)

function Sha () {
  this.init()
  this._w = W

  Hash.call(this, 64, 56)
}

inherits(Sha, Hash)

Sha.prototype.init = function () {
  this._a = 0x67452301
  this._b = 0xefcdab89
  this._c = 0x98badcfe
  this._d = 0x10325476
  this._e = 0xc3d2e1f0

  return this
}

function rotl5 (num) {
  return (num << 5) | (num >>> 27)
}

function rotl30 (num) {
  return (num << 30) | (num >>> 2)
}

function ft (s, b, c, d) {
  if (s === 0) return (b & c) | ((~b) & d)
  if (s === 2) return (b & c) | (b & d) | (c & d)
  return b ^ c ^ d
}

Sha.prototype._update = function (M) {
  var W = this._w

  var a = this._a | 0
  var b = this._b | 0
  var c = this._c | 0
  var d = this._d | 0
  var e = this._e | 0

  for (var i = 0; i < 16; ++i) W[i] = M.readInt32BE(i * 4)
  for (; i < 80; ++i) W[i] = W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16]

  for (var j = 0; j < 80; ++j) {
    var s = ~~(j / 20)
    var t = (rotl5(a) + ft(s, b, c, d) + e + W[j] + K[s]) | 0

    e = d
    d = c
    c = rotl30(b)
    b = a
    a = t
  }

  this._a = (a + this._a) | 0
  this._b = (b + this._b) | 0
  this._c = (c + this._c) | 0
  this._d = (d + this._d) | 0
  this._e = (e + this._e) | 0
}

Sha.prototype._hash = function () {
  var H = Buffer.allocUnsafe(20)

  H.writeInt32BE(this._a | 0, 0)
  H.writeInt32BE(this._b | 0, 4)
  H.writeInt32BE(this._c | 0, 8)
  H.writeInt32BE(this._d | 0, 12)
  H.writeInt32BE(this._e | 0, 16)

  return H
}

module.exports = Sha

},{"./hash":163,"inherits":115,"safe-buffer":161}],166:[function(require,module,exports){
/*
 * A JavaScript implementation of the Secure Hash Algorithm, SHA-1, as defined
 * in FIPS PUB 180-1
 * Version 2.1a Copyright Paul Johnston 2000 - 2002.
 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
 * Distributed under the BSD License
 * See http://pajhome.org.uk/crypt/md5 for details.
 */

var inherits = require('inherits')
var Hash = require('./hash')
var Buffer = require('safe-buffer').Buffer

var K = [
  0x5a827999, 0x6ed9eba1, 0x8f1bbcdc | 0, 0xca62c1d6 | 0
]

var W = new Array(80)

function Sha1 () {
  this.init()
  this._w = W

  Hash.call(this, 64, 56)
}

inherits(Sha1, Hash)

Sha1.prototype.init = function () {
  this._a = 0x67452301
  this._b = 0xefcdab89
  this._c = 0x98badcfe
  this._d = 0x10325476
  this._e = 0xc3d2e1f0

  return this
}

function rotl1 (num) {
  return (num << 1) | (num >>> 31)
}

function rotl5 (num) {
  return (num << 5) | (num >>> 27)
}

function rotl30 (num) {
  return (num << 30) | (num >>> 2)
}

function ft (s, b, c, d) {
  if (s === 0) return (b & c) | ((~b) & d)
  if (s === 2) return (b & c) | (b & d) | (c & d)
  return b ^ c ^ d
}

Sha1.prototype._update = function (M) {
  var W = this._w

  var a = this._a | 0
  var b = this._b | 0
  var c = this._c | 0
  var d = this._d | 0
  var e = this._e | 0

  for (var i = 0; i < 16; ++i) W[i] = M.readInt32BE(i * 4)
  for (; i < 80; ++i) W[i] = rotl1(W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16])

  for (var j = 0; j < 80; ++j) {
    var s = ~~(j / 20)
    var t = (rotl5(a) + ft(s, b, c, d) + e + W[j] + K[s]) | 0

    e = d
    d = c
    c = rotl30(b)
    b = a
    a = t
  }

  this._a = (a + this._a) | 0
  this._b = (b + this._b) | 0
  this._c = (c + this._c) | 0
  this._d = (d + this._d) | 0
  this._e = (e + this._e) | 0
}

Sha1.prototype._hash = function () {
  var H = Buffer.allocUnsafe(20)

  H.writeInt32BE(this._a | 0, 0)
  H.writeInt32BE(this._b | 0, 4)
  H.writeInt32BE(this._c | 0, 8)
  H.writeInt32BE(this._d | 0, 12)
  H.writeInt32BE(this._e | 0, 16)

  return H
}

module.exports = Sha1

},{"./hash":163,"inherits":115,"safe-buffer":161}],167:[function(require,module,exports){
/**
 * A JavaScript implementation of the Secure Hash Algorithm, SHA-256, as defined
 * in FIPS 180-2
 * Version 2.2-beta Copyright Angel Marin, Paul Johnston 2000 - 2009.
 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
 *
 */

var inherits = require('inherits')
var Sha256 = require('./sha256')
var Hash = require('./hash')
var Buffer = require('safe-buffer').Buffer

var W = new Array(64)

function Sha224 () {
  this.init()

  this._w = W // new Array(64)

  Hash.call(this, 64, 56)
}

inherits(Sha224, Sha256)

Sha224.prototype.init = function () {
  this._a = 0xc1059ed8
  this._b = 0x367cd507
  this._c = 0x3070dd17
  this._d = 0xf70e5939
  this._e = 0xffc00b31
  this._f = 0x68581511
  this._g = 0x64f98fa7
  this._h = 0xbefa4fa4

  return this
}

Sha224.prototype._hash = function () {
  var H = Buffer.allocUnsafe(28)

  H.writeInt32BE(this._a, 0)
  H.writeInt32BE(this._b, 4)
  H.writeInt32BE(this._c, 8)
  H.writeInt32BE(this._d, 12)
  H.writeInt32BE(this._e, 16)
  H.writeInt32BE(this._f, 20)
  H.writeInt32BE(this._g, 24)

  return H
}

module.exports = Sha224

},{"./hash":163,"./sha256":168,"inherits":115,"safe-buffer":161}],168:[function(require,module,exports){
/**
 * A JavaScript implementation of the Secure Hash Algorithm, SHA-256, as defined
 * in FIPS 180-2
 * Version 2.2-beta Copyright Angel Marin, Paul Johnston 2000 - 2009.
 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
 *
 */

var inherits = require('inherits')
var Hash = require('./hash')
var Buffer = require('safe-buffer').Buffer

var K = [
  0x428A2F98, 0x71374491, 0xB5C0FBCF, 0xE9B5DBA5,
  0x3956C25B, 0x59F111F1, 0x923F82A4, 0xAB1C5ED5,
  0xD807AA98, 0x12835B01, 0x243185BE, 0x550C7DC3,
  0x72BE5D74, 0x80DEB1FE, 0x9BDC06A7, 0xC19BF174,
  0xE49B69C1, 0xEFBE4786, 0x0FC19DC6, 0x240CA1CC,
  0x2DE92C6F, 0x4A7484AA, 0x5CB0A9DC, 0x76F988DA,
  0x983E5152, 0xA831C66D, 0xB00327C8, 0xBF597FC7,
  0xC6E00BF3, 0xD5A79147, 0x06CA6351, 0x14292967,
  0x27B70A85, 0x2E1B2138, 0x4D2C6DFC, 0x53380D13,
  0x650A7354, 0x766A0ABB, 0x81C2C92E, 0x92722C85,
  0xA2BFE8A1, 0xA81A664B, 0xC24B8B70, 0xC76C51A3,
  0xD192E819, 0xD6990624, 0xF40E3585, 0x106AA070,
  0x19A4C116, 0x1E376C08, 0x2748774C, 0x34B0BCB5,
  0x391C0CB3, 0x4ED8AA4A, 0x5B9CCA4F, 0x682E6FF3,
  0x748F82EE, 0x78A5636F, 0x84C87814, 0x8CC70208,
  0x90BEFFFA, 0xA4506CEB, 0xBEF9A3F7, 0xC67178F2
]

var W = new Array(64)

function Sha256 () {
  this.init()

  this._w = W // new Array(64)

  Hash.call(this, 64, 56)
}

inherits(Sha256, Hash)

Sha256.prototype.init = function () {
  this._a = 0x6a09e667
  this._b = 0xbb67ae85
  this._c = 0x3c6ef372
  this._d = 0xa54ff53a
  this._e = 0x510e527f
  this._f = 0x9b05688c
  this._g = 0x1f83d9ab
  this._h = 0x5be0cd19

  return this
}

function ch (x, y, z) {
  return z ^ (x & (y ^ z))
}

function maj (x, y, z) {
  return (x & y) | (z & (x | y))
}

function sigma0 (x) {
  return (x >>> 2 | x << 30) ^ (x >>> 13 | x << 19) ^ (x >>> 22 | x << 10)
}

function sigma1 (x) {
  return (x >>> 6 | x << 26) ^ (x >>> 11 | x << 21) ^ (x >>> 25 | x << 7)
}

function gamma0 (x) {
  return (x >>> 7 | x << 25) ^ (x >>> 18 | x << 14) ^ (x >>> 3)
}

function gamma1 (x) {
  return (x >>> 17 | x << 15) ^ (x >>> 19 | x << 13) ^ (x >>> 10)
}

Sha256.prototype._update = function (M) {
  var W = this._w

  var a = this._a | 0
  var b = this._b | 0
  var c = this._c | 0
  var d = this._d | 0
  var e = this._e | 0
  var f = this._f | 0
  var g = this._g | 0
  var h = this._h | 0

  for (var i = 0; i < 16; ++i) W[i] = M.readInt32BE(i * 4)
  for (; i < 64; ++i) W[i] = (gamma1(W[i - 2]) + W[i - 7] + gamma0(W[i - 15]) + W[i - 16]) | 0

  for (var j = 0; j < 64; ++j) {
    var T1 = (h + sigma1(e) + ch(e, f, g) + K[j] + W[j]) | 0
    var T2 = (sigma0(a) + maj(a, b, c)) | 0

    h = g
    g = f
    f = e
    e = (d + T1) | 0
    d = c
    c = b
    b = a
    a = (T1 + T2) | 0
  }

  this._a = (a + this._a) | 0
  this._b = (b + this._b) | 0
  this._c = (c + this._c) | 0
  this._d = (d + this._d) | 0
  this._e = (e + this._e) | 0
  this._f = (f + this._f) | 0
  this._g = (g + this._g) | 0
  this._h = (h + this._h) | 0
}

Sha256.prototype._hash = function () {
  var H = Buffer.allocUnsafe(32)

  H.writeInt32BE(this._a, 0)
  H.writeInt32BE(this._b, 4)
  H.writeInt32BE(this._c, 8)
  H.writeInt32BE(this._d, 12)
  H.writeInt32BE(this._e, 16)
  H.writeInt32BE(this._f, 20)
  H.writeInt32BE(this._g, 24)
  H.writeInt32BE(this._h, 28)

  return H
}

module.exports = Sha256

},{"./hash":163,"inherits":115,"safe-buffer":161}],169:[function(require,module,exports){
var inherits = require('inherits')
var SHA512 = require('./sha512')
var Hash = require('./hash')
var Buffer = require('safe-buffer').Buffer

var W = new Array(160)

function Sha384 () {
  this.init()
  this._w = W

  Hash.call(this, 128, 112)
}

inherits(Sha384, SHA512)

Sha384.prototype.init = function () {
  this._ah = 0xcbbb9d5d
  this._bh = 0x629a292a
  this._ch = 0x9159015a
  this._dh = 0x152fecd8
  this._eh = 0x67332667
  this._fh = 0x8eb44a87
  this._gh = 0xdb0c2e0d
  this._hh = 0x47b5481d

  this._al = 0xc1059ed8
  this._bl = 0x367cd507
  this._cl = 0x3070dd17
  this._dl = 0xf70e5939
  this._el = 0xffc00b31
  this._fl = 0x68581511
  this._gl = 0x64f98fa7
  this._hl = 0xbefa4fa4

  return this
}

Sha384.prototype._hash = function () {
  var H = Buffer.allocUnsafe(48)

  function writeInt64BE (h, l, offset) {
    H.writeInt32BE(h, offset)
    H.writeInt32BE(l, offset + 4)
  }

  writeInt64BE(this._ah, this._al, 0)
  writeInt64BE(this._bh, this._bl, 8)
  writeInt64BE(this._ch, this._cl, 16)
  writeInt64BE(this._dh, this._dl, 24)
  writeInt64BE(this._eh, this._el, 32)
  writeInt64BE(this._fh, this._fl, 40)

  return H
}

module.exports = Sha384

},{"./hash":163,"./sha512":170,"inherits":115,"safe-buffer":161}],170:[function(require,module,exports){
var inherits = require('inherits')
var Hash = require('./hash')
var Buffer = require('safe-buffer').Buffer

var K = [
  0x428a2f98, 0xd728ae22, 0x71374491, 0x23ef65cd,
  0xb5c0fbcf, 0xec4d3b2f, 0xe9b5dba5, 0x8189dbbc,
  0x3956c25b, 0xf348b538, 0x59f111f1, 0xb605d019,
  0x923f82a4, 0xaf194f9b, 0xab1c5ed5, 0xda6d8118,
  0xd807aa98, 0xa3030242, 0x12835b01, 0x45706fbe,
  0x243185be, 0x4ee4b28c, 0x550c7dc3, 0xd5ffb4e2,
  0x72be5d74, 0xf27b896f, 0x80deb1fe, 0x3b1696b1,
  0x9bdc06a7, 0x25c71235, 0xc19bf174, 0xcf692694,
  0xe49b69c1, 0x9ef14ad2, 0xefbe4786, 0x384f25e3,
  0x0fc19dc6, 0x8b8cd5b5, 0x240ca1cc, 0x77ac9c65,
  0x2de92c6f, 0x592b0275, 0x4a7484aa, 0x6ea6e483,
  0x5cb0a9dc, 0xbd41fbd4, 0x76f988da, 0x831153b5,
  0x983e5152, 0xee66dfab, 0xa831c66d, 0x2db43210,
  0xb00327c8, 0x98fb213f, 0xbf597fc7, 0xbeef0ee4,
  0xc6e00bf3, 0x3da88fc2, 0xd5a79147, 0x930aa725,
  0x06ca6351, 0xe003826f, 0x14292967, 0x0a0e6e70,
  0x27b70a85, 0x46d22ffc, 0x2e1b2138, 0x5c26c926,
  0x4d2c6dfc, 0x5ac42aed, 0x53380d13, 0x9d95b3df,
  0x650a7354, 0x8baf63de, 0x766a0abb, 0x3c77b2a8,
  0x81c2c92e, 0x47edaee6, 0x92722c85, 0x1482353b,
  0xa2bfe8a1, 0x4cf10364, 0xa81a664b, 0xbc423001,
  0xc24b8b70, 0xd0f89791, 0xc76c51a3, 0x0654be30,
  0xd192e819, 0xd6ef5218, 0xd6990624, 0x5565a910,
  0xf40e3585, 0x5771202a, 0x106aa070, 0x32bbd1b8,
  0x19a4c116, 0xb8d2d0c8, 0x1e376c08, 0x5141ab53,
  0x2748774c, 0xdf8eeb99, 0x34b0bcb5, 0xe19b48a8,
  0x391c0cb3, 0xc5c95a63, 0x4ed8aa4a, 0xe3418acb,
  0x5b9cca4f, 0x7763e373, 0x682e6ff3, 0xd6b2b8a3,
  0x748f82ee, 0x5defb2fc, 0x78a5636f, 0x43172f60,
  0x84c87814, 0xa1f0ab72, 0x8cc70208, 0x1a6439ec,
  0x90befffa, 0x23631e28, 0xa4506ceb, 0xde82bde9,
  0xbef9a3f7, 0xb2c67915, 0xc67178f2, 0xe372532b,
  0xca273ece, 0xea26619c, 0xd186b8c7, 0x21c0c207,
  0xeada7dd6, 0xcde0eb1e, 0xf57d4f7f, 0xee6ed178,
  0x06f067aa, 0x72176fba, 0x0a637dc5, 0xa2c898a6,
  0x113f9804, 0xbef90dae, 0x1b710b35, 0x131c471b,
  0x28db77f5, 0x23047d84, 0x32caab7b, 0x40c72493,
  0x3c9ebe0a, 0x15c9bebc, 0x431d67c4, 0x9c100d4c,
  0x4cc5d4be, 0xcb3e42b6, 0x597f299c, 0xfc657e2a,
  0x5fcb6fab, 0x3ad6faec, 0x6c44198c, 0x4a475817
]

var W = new Array(160)

function Sha512 () {
  this.init()
  this._w = W

  Hash.call(this, 128, 112)
}

inherits(Sha512, Hash)

Sha512.prototype.init = function () {
  this._ah = 0x6a09e667
  this._bh = 0xbb67ae85
  this._ch = 0x3c6ef372
  this._dh = 0xa54ff53a
  this._eh = 0x510e527f
  this._fh = 0x9b05688c
  this._gh = 0x1f83d9ab
  this._hh = 0x5be0cd19

  this._al = 0xf3bcc908
  this._bl = 0x84caa73b
  this._cl = 0xfe94f82b
  this._dl = 0x5f1d36f1
  this._el = 0xade682d1
  this._fl = 0x2b3e6c1f
  this._gl = 0xfb41bd6b
  this._hl = 0x137e2179

  return this
}

function Ch (x, y, z) {
  return z ^ (x & (y ^ z))
}

function maj (x, y, z) {
  return (x & y) | (z & (x | y))
}

function sigma0 (x, xl) {
  return (x >>> 28 | xl << 4) ^ (xl >>> 2 | x << 30) ^ (xl >>> 7 | x << 25)
}

function sigma1 (x, xl) {
  return (x >>> 14 | xl << 18) ^ (x >>> 18 | xl << 14) ^ (xl >>> 9 | x << 23)
}

function Gamma0 (x, xl) {
  return (x >>> 1 | xl << 31) ^ (x >>> 8 | xl << 24) ^ (x >>> 7)
}

function Gamma0l (x, xl) {
  return (x >>> 1 | xl << 31) ^ (x >>> 8 | xl << 24) ^ (x >>> 7 | xl << 25)
}

function Gamma1 (x, xl) {
  return (x >>> 19 | xl << 13) ^ (xl >>> 29 | x << 3) ^ (x >>> 6)
}

function Gamma1l (x, xl) {
  return (x >>> 19 | xl << 13) ^ (xl >>> 29 | x << 3) ^ (x >>> 6 | xl << 26)
}

function getCarry (a, b) {
  return (a >>> 0) < (b >>> 0) ? 1 : 0
}

Sha512.prototype._update = function (M) {
  var W = this._w

  var ah = this._ah | 0
  var bh = this._bh | 0
  var ch = this._ch | 0
  var dh = this._dh | 0
  var eh = this._eh | 0
  var fh = this._fh | 0
  var gh = this._gh | 0
  var hh = this._hh | 0

  var al = this._al | 0
  var bl = this._bl | 0
  var cl = this._cl | 0
  var dl = this._dl | 0
  var el = this._el | 0
  var fl = this._fl | 0
  var gl = this._gl | 0
  var hl = this._hl | 0

  for (var i = 0; i < 32; i += 2) {
    W[i] = M.readInt32BE(i * 4)
    W[i + 1] = M.readInt32BE(i * 4 + 4)
  }
  for (; i < 160; i += 2) {
    var xh = W[i - 15 * 2]
    var xl = W[i - 15 * 2 + 1]
    var gamma0 = Gamma0(xh, xl)
    var gamma0l = Gamma0l(xl, xh)

    xh = W[i - 2 * 2]
    xl = W[i - 2 * 2 + 1]
    var gamma1 = Gamma1(xh, xl)
    var gamma1l = Gamma1l(xl, xh)

    // W[i] = gamma0 + W[i - 7] + gamma1 + W[i - 16]
    var Wi7h = W[i - 7 * 2]
    var Wi7l = W[i - 7 * 2 + 1]

    var Wi16h = W[i - 16 * 2]
    var Wi16l = W[i - 16 * 2 + 1]

    var Wil = (gamma0l + Wi7l) | 0
    var Wih = (gamma0 + Wi7h + getCarry(Wil, gamma0l)) | 0
    Wil = (Wil + gamma1l) | 0
    Wih = (Wih + gamma1 + getCarry(Wil, gamma1l)) | 0
    Wil = (Wil + Wi16l) | 0
    Wih = (Wih + Wi16h + getCarry(Wil, Wi16l)) | 0

    W[i] = Wih
    W[i + 1] = Wil
  }

  for (var j = 0; j < 160; j += 2) {
    Wih = W[j]
    Wil = W[j + 1]

    var majh = maj(ah, bh, ch)
    var majl = maj(al, bl, cl)

    var sigma0h = sigma0(ah, al)
    var sigma0l = sigma0(al, ah)
    var sigma1h = sigma1(eh, el)
    var sigma1l = sigma1(el, eh)

    // t1 = h + sigma1 + ch + K[j] + W[j]
    var Kih = K[j]
    var Kil = K[j + 1]

    var chh = Ch(eh, fh, gh)
    var chl = Ch(el, fl, gl)

    var t1l = (hl + sigma1l) | 0
    var t1h = (hh + sigma1h + getCarry(t1l, hl)) | 0
    t1l = (t1l + chl) | 0
    t1h = (t1h + chh + getCarry(t1l, chl)) | 0
    t1l = (t1l + Kil) | 0
    t1h = (t1h + Kih + getCarry(t1l, Kil)) | 0
    t1l = (t1l + Wil) | 0
    t1h = (t1h + Wih + getCarry(t1l, Wil)) | 0

    // t2 = sigma0 + maj
    var t2l = (sigma0l + majl) | 0
    var t2h = (sigma0h + majh + getCarry(t2l, sigma0l)) | 0

    hh = gh
    hl = gl
    gh = fh
    gl = fl
    fh = eh
    fl = el
    el = (dl + t1l) | 0
    eh = (dh + t1h + getCarry(el, dl)) | 0
    dh = ch
    dl = cl
    ch = bh
    cl = bl
    bh = ah
    bl = al
    al = (t1l + t2l) | 0
    ah = (t1h + t2h + getCarry(al, t1l)) | 0
  }

  this._al = (this._al + al) | 0
  this._bl = (this._bl + bl) | 0
  this._cl = (this._cl + cl) | 0
  this._dl = (this._dl + dl) | 0
  this._el = (this._el + el) | 0
  this._fl = (this._fl + fl) | 0
  this._gl = (this._gl + gl) | 0
  this._hl = (this._hl + hl) | 0

  this._ah = (this._ah + ah + getCarry(this._al, al)) | 0
  this._bh = (this._bh + bh + getCarry(this._bl, bl)) | 0
  this._ch = (this._ch + ch + getCarry(this._cl, cl)) | 0
  this._dh = (this._dh + dh + getCarry(this._dl, dl)) | 0
  this._eh = (this._eh + eh + getCarry(this._el, el)) | 0
  this._fh = (this._fh + fh + getCarry(this._fl, fl)) | 0
  this._gh = (this._gh + gh + getCarry(this._gl, gl)) | 0
  this._hh = (this._hh + hh + getCarry(this._hl, hl)) | 0
}

Sha512.prototype._hash = function () {
  var H = Buffer.allocUnsafe(64)

  function writeInt64BE (h, l, offset) {
    H.writeInt32BE(h, offset)
    H.writeInt32BE(l, offset + 4)
  }

  writeInt64BE(this._ah, this._al, 0)
  writeInt64BE(this._bh, this._bl, 8)
  writeInt64BE(this._ch, this._cl, 16)
  writeInt64BE(this._dh, this._dl, 24)
  writeInt64BE(this._eh, this._el, 32)
  writeInt64BE(this._fh, this._fl, 40)
  writeInt64BE(this._gh, this._gl, 48)
  writeInt64BE(this._hh, this._hl, 56)

  return H
}

module.exports = Sha512

},{"./hash":163,"inherits":115,"safe-buffer":161}],171:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

module.exports = Stream;

var EE = require('events').EventEmitter;
var inherits = require('inherits');

inherits(Stream, EE);
Stream.Readable = require('readable-stream/lib/_stream_readable.js');
Stream.Writable = require('readable-stream/lib/_stream_writable.js');
Stream.Duplex = require('readable-stream/lib/_stream_duplex.js');
Stream.Transform = require('readable-stream/lib/_stream_transform.js');
Stream.PassThrough = require('readable-stream/lib/_stream_passthrough.js');
Stream.finished = require('readable-stream/lib/internal/streams/end-of-stream.js')
Stream.pipeline = require('readable-stream/lib/internal/streams/pipeline.js')

// Backwards-compat with node 0.4.x
Stream.Stream = Stream;



// old-style streams.  Note that the pipe method (the only relevant
// part of this class) is overridden in the Readable class.

function Stream() {
  EE.call(this);
}

Stream.prototype.pipe = function(dest, options) {
  var source = this;

  function ondata(chunk) {
    if (dest.writable) {
      if (false === dest.write(chunk) && source.pause) {
        source.pause();
      }
    }
  }

  source.on('data', ondata);

  function ondrain() {
    if (source.readable && source.resume) {
      source.resume();
    }
  }

  dest.on('drain', ondrain);

  // If the 'end' option is not supplied, dest.end() will be called when
  // source gets the 'end' or 'close' events.  Only dest.end() once.
  if (!dest._isStdio && (!options || options.end !== false)) {
    source.on('end', onend);
    source.on('close', onclose);
  }

  var didOnEnd = false;
  function onend() {
    if (didOnEnd) return;
    didOnEnd = true;

    dest.end();
  }


  function onclose() {
    if (didOnEnd) return;
    didOnEnd = true;

    if (typeof dest.destroy === 'function') dest.destroy();
  }

  // don't leave dangling pipes when there are errors.
  function onerror(er) {
    cleanup();
    if (EE.listenerCount(this, 'error') === 0) {
      throw er; // Unhandled stream error in pipe.
    }
  }

  source.on('error', onerror);
  dest.on('error', onerror);

  // remove all the event listeners that were added.
  function cleanup() {
    source.removeListener('data', ondata);
    dest.removeListener('drain', ondrain);

    source.removeListener('end', onend);
    source.removeListener('close', onclose);

    source.removeListener('error', onerror);
    dest.removeListener('error', onerror);

    source.removeListener('end', cleanup);
    source.removeListener('close', cleanup);

    dest.removeListener('close', cleanup);
  }

  source.on('end', cleanup);
  source.on('close', cleanup);

  dest.on('close', cleanup);

  dest.emit('pipe', source);

  // Allow for unix-like usage: A.pipe(B).pipe(C)
  return dest;
};

},{"events":89,"inherits":115,"readable-stream/lib/_stream_duplex.js":146,"readable-stream/lib/_stream_passthrough.js":147,"readable-stream/lib/_stream_readable.js":148,"readable-stream/lib/_stream_transform.js":149,"readable-stream/lib/_stream_writable.js":150,"readable-stream/lib/internal/streams/end-of-stream.js":154,"readable-stream/lib/internal/streams/pipeline.js":156}],172:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

'use strict';

/*<replacement>*/

var Buffer = require('safe-buffer').Buffer;
/*</replacement>*/

var isEncoding = Buffer.isEncoding || function (encoding) {
  encoding = '' + encoding;
  switch (encoding && encoding.toLowerCase()) {
    case 'hex':case 'utf8':case 'utf-8':case 'ascii':case 'binary':case 'base64':case 'ucs2':case 'ucs-2':case 'utf16le':case 'utf-16le':case 'raw':
      return true;
    default:
      return false;
  }
};

function _normalizeEncoding(enc) {
  if (!enc) return 'utf8';
  var retried;
  while (true) {
    switch (enc) {
      case 'utf8':
      case 'utf-8':
        return 'utf8';
      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return 'utf16le';
      case 'latin1':
      case 'binary':
        return 'latin1';
      case 'base64':
      case 'ascii':
      case 'hex':
        return enc;
      default:
        if (retried) return; // undefined
        enc = ('' + enc).toLowerCase();
        retried = true;
    }
  }
};

// Do not cache `Buffer.isEncoding` when checking encoding names as some
// modules monkey-patch it to support additional encodings
function normalizeEncoding(enc) {
  var nenc = _normalizeEncoding(enc);
  if (typeof nenc !== 'string' && (Buffer.isEncoding === isEncoding || !isEncoding(enc))) throw new Error('Unknown encoding: ' + enc);
  return nenc || enc;
}

// StringDecoder provides an interface for efficiently splitting a series of
// buffers into a series of JS strings without breaking apart multi-byte
// characters.
exports.StringDecoder = StringDecoder;
function StringDecoder(encoding) {
  this.encoding = normalizeEncoding(encoding);
  var nb;
  switch (this.encoding) {
    case 'utf16le':
      this.text = utf16Text;
      this.end = utf16End;
      nb = 4;
      break;
    case 'utf8':
      this.fillLast = utf8FillLast;
      nb = 4;
      break;
    case 'base64':
      this.text = base64Text;
      this.end = base64End;
      nb = 3;
      break;
    default:
      this.write = simpleWrite;
      this.end = simpleEnd;
      return;
  }
  this.lastNeed = 0;
  this.lastTotal = 0;
  this.lastChar = Buffer.allocUnsafe(nb);
}

StringDecoder.prototype.write = function (buf) {
  if (buf.length === 0) return '';
  var r;
  var i;
  if (this.lastNeed) {
    r = this.fillLast(buf);
    if (r === undefined) return '';
    i = this.lastNeed;
    this.lastNeed = 0;
  } else {
    i = 0;
  }
  if (i < buf.length) return r ? r + this.text(buf, i) : this.text(buf, i);
  return r || '';
};

StringDecoder.prototype.end = utf8End;

// Returns only complete characters in a Buffer
StringDecoder.prototype.text = utf8Text;

// Attempts to complete a partial non-UTF-8 character using bytes from a Buffer
StringDecoder.prototype.fillLast = function (buf) {
  if (this.lastNeed <= buf.length) {
    buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, this.lastNeed);
    return this.lastChar.toString(this.encoding, 0, this.lastTotal);
  }
  buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, buf.length);
  this.lastNeed -= buf.length;
};

// Checks the type of a UTF-8 byte, whether it's ASCII, a leading byte, or a
// continuation byte. If an invalid byte is detected, -2 is returned.
function utf8CheckByte(byte) {
  if (byte <= 0x7F) return 0;else if (byte >> 5 === 0x06) return 2;else if (byte >> 4 === 0x0E) return 3;else if (byte >> 3 === 0x1E) return 4;
  return byte >> 6 === 0x02 ? -1 : -2;
}

// Checks at most 3 bytes at the end of a Buffer in order to detect an
// incomplete multi-byte UTF-8 character. The total number of bytes (2, 3, or 4)
// needed to complete the UTF-8 character (if applicable) are returned.
function utf8CheckIncomplete(self, buf, i) {
  var j = buf.length - 1;
  if (j < i) return 0;
  var nb = utf8CheckByte(buf[j]);
  if (nb >= 0) {
    if (nb > 0) self.lastNeed = nb - 1;
    return nb;
  }
  if (--j < i || nb === -2) return 0;
  nb = utf8CheckByte(buf[j]);
  if (nb >= 0) {
    if (nb > 0) self.lastNeed = nb - 2;
    return nb;
  }
  if (--j < i || nb === -2) return 0;
  nb = utf8CheckByte(buf[j]);
  if (nb >= 0) {
    if (nb > 0) {
      if (nb === 2) nb = 0;else self.lastNeed = nb - 3;
    }
    return nb;
  }
  return 0;
}

// Validates as many continuation bytes for a multi-byte UTF-8 character as
// needed or are available. If we see a non-continuation byte where we expect
// one, we "replace" the validated continuation bytes we've seen so far with
// a single UTF-8 replacement character ('\ufffd'), to match v8's UTF-8 decoding
// behavior. The continuation byte check is included three times in the case
// where all of the continuation bytes for a character exist in the same buffer.
// It is also done this way as a slight performance increase instead of using a
// loop.
function utf8CheckExtraBytes(self, buf, p) {
  if ((buf[0] & 0xC0) !== 0x80) {
    self.lastNeed = 0;
    return '\ufffd';
  }
  if (self.lastNeed > 1 && buf.length > 1) {
    if ((buf[1] & 0xC0) !== 0x80) {
      self.lastNeed = 1;
      return '\ufffd';
    }
    if (self.lastNeed > 2 && buf.length > 2) {
      if ((buf[2] & 0xC0) !== 0x80) {
        self.lastNeed = 2;
        return '\ufffd';
      }
    }
  }
}

// Attempts to complete a multi-byte UTF-8 character using bytes from a Buffer.
function utf8FillLast(buf) {
  var p = this.lastTotal - this.lastNeed;
  var r = utf8CheckExtraBytes(this, buf, p);
  if (r !== undefined) return r;
  if (this.lastNeed <= buf.length) {
    buf.copy(this.lastChar, p, 0, this.lastNeed);
    return this.lastChar.toString(this.encoding, 0, this.lastTotal);
  }
  buf.copy(this.lastChar, p, 0, buf.length);
  this.lastNeed -= buf.length;
}

// Returns all complete UTF-8 characters in a Buffer. If the Buffer ended on a
// partial character, the character's bytes are buffered until the required
// number of bytes are available.
function utf8Text(buf, i) {
  var total = utf8CheckIncomplete(this, buf, i);
  if (!this.lastNeed) return buf.toString('utf8', i);
  this.lastTotal = total;
  var end = buf.length - (total - this.lastNeed);
  buf.copy(this.lastChar, 0, end);
  return buf.toString('utf8', i, end);
}

// For UTF-8, a replacement character is added when ending on a partial
// character.
function utf8End(buf) {
  var r = buf && buf.length ? this.write(buf) : '';
  if (this.lastNeed) return r + '\ufffd';
  return r;
}

// UTF-16LE typically needs two bytes per character, but even if we have an even
// number of bytes available, we need to check if we end on a leading/high
// surrogate. In that case, we need to wait for the next two bytes in order to
// decode the last character properly.
function utf16Text(buf, i) {
  if ((buf.length - i) % 2 === 0) {
    var r = buf.toString('utf16le', i);
    if (r) {
      var c = r.charCodeAt(r.length - 1);
      if (c >= 0xD800 && c <= 0xDBFF) {
        this.lastNeed = 2;
        this.lastTotal = 4;
        this.lastChar[0] = buf[buf.length - 2];
        this.lastChar[1] = buf[buf.length - 1];
        return r.slice(0, -1);
      }
    }
    return r;
  }
  this.lastNeed = 1;
  this.lastTotal = 2;
  this.lastChar[0] = buf[buf.length - 1];
  return buf.toString('utf16le', i, buf.length - 1);
}

// For UTF-16LE we do not explicitly append special replacement characters if we
// end on a partial character, we simply let v8 handle that.
function utf16End(buf) {
  var r = buf && buf.length ? this.write(buf) : '';
  if (this.lastNeed) {
    var end = this.lastTotal - this.lastNeed;
    return r + this.lastChar.toString('utf16le', 0, end);
  }
  return r;
}

function base64Text(buf, i) {
  var n = (buf.length - i) % 3;
  if (n === 0) return buf.toString('base64', i);
  this.lastNeed = 3 - n;
  this.lastTotal = 3;
  if (n === 1) {
    this.lastChar[0] = buf[buf.length - 1];
  } else {
    this.lastChar[0] = buf[buf.length - 2];
    this.lastChar[1] = buf[buf.length - 1];
  }
  return buf.toString('base64', i, buf.length - n);
}

function base64End(buf) {
  var r = buf && buf.length ? this.write(buf) : '';
  if (this.lastNeed) return r + this.lastChar.toString('base64', 0, 3 - this.lastNeed);
  return r;
}

// Pass bytes on through for single-byte encodings (e.g. ascii, latin1, hex)
function simpleWrite(buf) {
  return buf.toString(this.encoding);
}

function simpleEnd(buf) {
  return buf && buf.length ? this.write(buf) : '';
}
},{"safe-buffer":161}],173:[function(require,module,exports){
(function (global){(function (){

/**
 * Module exports.
 */

module.exports = deprecate;

/**
 * Mark that a method should not be used.
 * Returns a modified function which warns once by default.
 *
 * If `localStorage.noDeprecation = true` is set, then it is a no-op.
 *
 * If `localStorage.throwDeprecation = true` is set, then deprecated functions
 * will throw an Error when invoked.
 *
 * If `localStorage.traceDeprecation = true` is set, then deprecated functions
 * will invoke `console.trace()` instead of `console.error()`.
 *
 * @param {Function} fn - the function to deprecate
 * @param {String} msg - the string to print to the console when `fn` is invoked
 * @returns {Function} a new "deprecated" version of `fn`
 * @api public
 */

function deprecate (fn, msg) {
  if (config('noDeprecation')) {
    return fn;
  }

  var warned = false;
  function deprecated() {
    if (!warned) {
      if (config('throwDeprecation')) {
        throw new Error(msg);
      } else if (config('traceDeprecation')) {
        console.trace(msg);
      } else {
        console.warn(msg);
      }
      warned = true;
    }
    return fn.apply(this, arguments);
  }

  return deprecated;
}

/**
 * Checks `localStorage` for boolean values for the given `name`.
 *
 * @param {String} name
 * @returns {Boolean}
 * @api private
 */

function config (name) {
  // accessing global.localStorage can trigger a DOMException in sandboxed iframes
  try {
    if (!global.localStorage) return false;
  } catch (_) {
    return false;
  }
  var val = global.localStorage[name];
  if (null == val) return false;
  return String(val).toLowerCase() === 'true';
}

}).call(this)}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{}],174:[function(require,module,exports){
module.exports = function isBuffer(arg) {
  return arg && typeof arg === 'object'
    && typeof arg.copy === 'function'
    && typeof arg.fill === 'function'
    && typeof arg.readUInt8 === 'function';
}
},{}],175:[function(require,module,exports){
// Currently in sync with Node.js lib/internal/util/types.js
// https://github.com/nodejs/node/commit/112cc7c27551254aa2b17098fb774867f05ed0d9

'use strict';

var isArgumentsObject = require('is-arguments');
var isGeneratorFunction = require('is-generator-function');
var whichTypedArray = require('which-typed-array');
var isTypedArray = require('is-typed-array');

function uncurryThis(f) {
  return f.call.bind(f);
}

var BigIntSupported = typeof BigInt !== 'undefined';
var SymbolSupported = typeof Symbol !== 'undefined';

var ObjectToString = uncurryThis(Object.prototype.toString);

var numberValue = uncurryThis(Number.prototype.valueOf);
var stringValue = uncurryThis(String.prototype.valueOf);
var booleanValue = uncurryThis(Boolean.prototype.valueOf);

if (BigIntSupported) {
  var bigIntValue = uncurryThis(BigInt.prototype.valueOf);
}

if (SymbolSupported) {
  var symbolValue = uncurryThis(Symbol.prototype.valueOf);
}

function checkBoxedPrimitive(value, prototypeValueOf) {
  if (typeof value !== 'object') {
    return false;
  }
  try {
    prototypeValueOf(value);
    return true;
  } catch(e) {
    return false;
  }
}

exports.isArgumentsObject = isArgumentsObject;
exports.isGeneratorFunction = isGeneratorFunction;
exports.isTypedArray = isTypedArray;

// Taken from here and modified for better browser support
// https://github.com/sindresorhus/p-is-promise/blob/cda35a513bda03f977ad5cde3a079d237e82d7ef/index.js
function isPromise(input) {
	return (
		(
			typeof Promise !== 'undefined' &&
			input instanceof Promise
		) ||
		(
			input !== null &&
			typeof input === 'object' &&
			typeof input.then === 'function' &&
			typeof input.catch === 'function'
		)
	);
}
exports.isPromise = isPromise;

function isArrayBufferView(value) {
  if (typeof ArrayBuffer !== 'undefined' && ArrayBuffer.isView) {
    return ArrayBuffer.isView(value);
  }

  return (
    isTypedArray(value) ||
    isDataView(value)
  );
}
exports.isArrayBufferView = isArrayBufferView;


function isUint8Array(value) {
  return whichTypedArray(value) === 'Uint8Array';
}
exports.isUint8Array = isUint8Array;

function isUint8ClampedArray(value) {
  return whichTypedArray(value) === 'Uint8ClampedArray';
}
exports.isUint8ClampedArray = isUint8ClampedArray;

function isUint16Array(value) {
  return whichTypedArray(value) === 'Uint16Array';
}
exports.isUint16Array = isUint16Array;

function isUint32Array(value) {
  return whichTypedArray(value) === 'Uint32Array';
}
exports.isUint32Array = isUint32Array;

function isInt8Array(value) {
  return whichTypedArray(value) === 'Int8Array';
}
exports.isInt8Array = isInt8Array;

function isInt16Array(value) {
  return whichTypedArray(value) === 'Int16Array';
}
exports.isInt16Array = isInt16Array;

function isInt32Array(value) {
  return whichTypedArray(value) === 'Int32Array';
}
exports.isInt32Array = isInt32Array;

function isFloat32Array(value) {
  return whichTypedArray(value) === 'Float32Array';
}
exports.isFloat32Array = isFloat32Array;

function isFloat64Array(value) {
  return whichTypedArray(value) === 'Float64Array';
}
exports.isFloat64Array = isFloat64Array;

function isBigInt64Array(value) {
  return whichTypedArray(value) === 'BigInt64Array';
}
exports.isBigInt64Array = isBigInt64Array;

function isBigUint64Array(value) {
  return whichTypedArray(value) === 'BigUint64Array';
}
exports.isBigUint64Array = isBigUint64Array;

function isMapToString(value) {
  return ObjectToString(value) === '[object Map]';
}
isMapToString.working = (
  typeof Map !== 'undefined' &&
  isMapToString(new Map())
);

function isMap(value) {
  if (typeof Map === 'undefined') {
    return false;
  }

  return isMapToString.working
    ? isMapToString(value)
    : value instanceof Map;
}
exports.isMap = isMap;

function isSetToString(value) {
  return ObjectToString(value) === '[object Set]';
}
isSetToString.working = (
  typeof Set !== 'undefined' &&
  isSetToString(new Set())
);
function isSet(value) {
  if (typeof Set === 'undefined') {
    return false;
  }

  return isSetToString.working
    ? isSetToString(value)
    : value instanceof Set;
}
exports.isSet = isSet;

function isWeakMapToString(value) {
  return ObjectToString(value) === '[object WeakMap]';
}
isWeakMapToString.working = (
  typeof WeakMap !== 'undefined' &&
  isWeakMapToString(new WeakMap())
);
function isWeakMap(value) {
  if (typeof WeakMap === 'undefined') {
    return false;
  }

  return isWeakMapToString.working
    ? isWeakMapToString(value)
    : value instanceof WeakMap;
}
exports.isWeakMap = isWeakMap;

function isWeakSetToString(value) {
  return ObjectToString(value) === '[object WeakSet]';
}
isWeakSetToString.working = (
  typeof WeakSet !== 'undefined' &&
  isWeakSetToString(new WeakSet())
);
function isWeakSet(value) {
  return isWeakSetToString(value);
}
exports.isWeakSet = isWeakSet;

function isArrayBufferToString(value) {
  return ObjectToString(value) === '[object ArrayBuffer]';
}
isArrayBufferToString.working = (
  typeof ArrayBuffer !== 'undefined' &&
  isArrayBufferToString(new ArrayBuffer())
);
function isArrayBuffer(value) {
  if (typeof ArrayBuffer === 'undefined') {
    return false;
  }

  return isArrayBufferToString.working
    ? isArrayBufferToString(value)
    : value instanceof ArrayBuffer;
}
exports.isArrayBuffer = isArrayBuffer;

function isDataViewToString(value) {
  return ObjectToString(value) === '[object DataView]';
}
isDataViewToString.working = (
  typeof ArrayBuffer !== 'undefined' &&
  typeof DataView !== 'undefined' &&
  isDataViewToString(new DataView(new ArrayBuffer(1), 0, 1))
);
function isDataView(value) {
  if (typeof DataView === 'undefined') {
    return false;
  }

  return isDataViewToString.working
    ? isDataViewToString(value)
    : value instanceof DataView;
}
exports.isDataView = isDataView;

// Store a copy of SharedArrayBuffer in case it's deleted elsewhere
var SharedArrayBufferCopy = typeof SharedArrayBuffer !== 'undefined' ? SharedArrayBuffer : undefined;
function isSharedArrayBufferToString(value) {
  return ObjectToString(value) === '[object SharedArrayBuffer]';
}
function isSharedArrayBuffer(value) {
  if (typeof SharedArrayBufferCopy === 'undefined') {
    return false;
  }

  if (typeof isSharedArrayBufferToString.working === 'undefined') {
    isSharedArrayBufferToString.working = isSharedArrayBufferToString(new SharedArrayBufferCopy());
  }

  return isSharedArrayBufferToString.working
    ? isSharedArrayBufferToString(value)
    : value instanceof SharedArrayBufferCopy;
}
exports.isSharedArrayBuffer = isSharedArrayBuffer;

function isAsyncFunction(value) {
  return ObjectToString(value) === '[object AsyncFunction]';
}
exports.isAsyncFunction = isAsyncFunction;

function isMapIterator(value) {
  return ObjectToString(value) === '[object Map Iterator]';
}
exports.isMapIterator = isMapIterator;

function isSetIterator(value) {
  return ObjectToString(value) === '[object Set Iterator]';
}
exports.isSetIterator = isSetIterator;

function isGeneratorObject(value) {
  return ObjectToString(value) === '[object Generator]';
}
exports.isGeneratorObject = isGeneratorObject;

function isWebAssemblyCompiledModule(value) {
  return ObjectToString(value) === '[object WebAssembly.Module]';
}
exports.isWebAssemblyCompiledModule = isWebAssemblyCompiledModule;

function isNumberObject(value) {
  return checkBoxedPrimitive(value, numberValue);
}
exports.isNumberObject = isNumberObject;

function isStringObject(value) {
  return checkBoxedPrimitive(value, stringValue);
}
exports.isStringObject = isStringObject;

function isBooleanObject(value) {
  return checkBoxedPrimitive(value, booleanValue);
}
exports.isBooleanObject = isBooleanObject;

function isBigIntObject(value) {
  return BigIntSupported && checkBoxedPrimitive(value, bigIntValue);
}
exports.isBigIntObject = isBigIntObject;

function isSymbolObject(value) {
  return SymbolSupported && checkBoxedPrimitive(value, symbolValue);
}
exports.isSymbolObject = isSymbolObject;

function isBoxedPrimitive(value) {
  return (
    isNumberObject(value) ||
    isStringObject(value) ||
    isBooleanObject(value) ||
    isBigIntObject(value) ||
    isSymbolObject(value)
  );
}
exports.isBoxedPrimitive = isBoxedPrimitive;

function isAnyArrayBuffer(value) {
  return typeof Uint8Array !== 'undefined' && (
    isArrayBuffer(value) ||
    isSharedArrayBuffer(value)
  );
}
exports.isAnyArrayBuffer = isAnyArrayBuffer;

['isProxy', 'isExternal', 'isModuleNamespaceObject'].forEach(function(method) {
  Object.defineProperty(exports, method, {
    enumerable: false,
    value: function() {
      throw new Error(method + ' is not supported in userland');
    }
  });
});

},{"is-arguments":116,"is-generator-function":119,"is-typed-array":120,"which-typed-array":177}],176:[function(require,module,exports){
(function (process){(function (){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

var getOwnPropertyDescriptors = Object.getOwnPropertyDescriptors ||
  function getOwnPropertyDescriptors(obj) {
    var keys = Object.keys(obj);
    var descriptors = {};
    for (var i = 0; i < keys.length; i++) {
      descriptors[keys[i]] = Object.getOwnPropertyDescriptor(obj, keys[i]);
    }
    return descriptors;
  };

var formatRegExp = /%[sdj%]/g;
exports.format = function(f) {
  if (!isString(f)) {
    var objects = [];
    for (var i = 0; i < arguments.length; i++) {
      objects.push(inspect(arguments[i]));
    }
    return objects.join(' ');
  }

  var i = 1;
  var args = arguments;
  var len = args.length;
  var str = String(f).replace(formatRegExp, function(x) {
    if (x === '%%') return '%';
    if (i >= len) return x;
    switch (x) {
      case '%s': return String(args[i++]);
      case '%d': return Number(args[i++]);
      case '%j':
        try {
          return JSON.stringify(args[i++]);
        } catch (_) {
          return '[Circular]';
        }
      default:
        return x;
    }
  });
  for (var x = args[i]; i < len; x = args[++i]) {
    if (isNull(x) || !isObject(x)) {
      str += ' ' + x;
    } else {
      str += ' ' + inspect(x);
    }
  }
  return str;
};


// Mark that a method should not be used.
// Returns a modified function which warns once by default.
// If --no-deprecation is set, then it is a no-op.
exports.deprecate = function(fn, msg) {
  if (typeof process !== 'undefined' && process.noDeprecation === true) {
    return fn;
  }

  // Allow for deprecating things in the process of starting up.
  if (typeof process === 'undefined') {
    return function() {
      return exports.deprecate(fn, msg).apply(this, arguments);
    };
  }

  var warned = false;
  function deprecated() {
    if (!warned) {
      if (process.throwDeprecation) {
        throw new Error(msg);
      } else if (process.traceDeprecation) {
        console.trace(msg);
      } else {
        console.error(msg);
      }
      warned = true;
    }
    return fn.apply(this, arguments);
  }

  return deprecated;
};


var debugs = {};
var debugEnvRegex = /^$/;

if (process.env.NODE_DEBUG) {
  var debugEnv = process.env.NODE_DEBUG;
  debugEnv = debugEnv.replace(/[|\\{}()[\]^$+?.]/g, '\\$&')
    .replace(/\*/g, '.*')
    .replace(/,/g, '$|^')
    .toUpperCase();
  debugEnvRegex = new RegExp('^' + debugEnv + '$', 'i');
}
exports.debuglog = function(set) {
  set = set.toUpperCase();
  if (!debugs[set]) {
    if (debugEnvRegex.test(set)) {
      var pid = process.pid;
      debugs[set] = function() {
        var msg = exports.format.apply(exports, arguments);
        console.error('%s %d: %s', set, pid, msg);
      };
    } else {
      debugs[set] = function() {};
    }
  }
  return debugs[set];
};


/**
 * Echos the value of a value. Trys to print the value out
 * in the best way possible given the different types.
 *
 * @param {Object} obj The object to print out.
 * @param {Object} opts Optional options object that alters the output.
 */
/* legacy: obj, showHidden, depth, colors*/
function inspect(obj, opts) {
  // default options
  var ctx = {
    seen: [],
    stylize: stylizeNoColor
  };
  // legacy...
  if (arguments.length >= 3) ctx.depth = arguments[2];
  if (arguments.length >= 4) ctx.colors = arguments[3];
  if (isBoolean(opts)) {
    // legacy...
    ctx.showHidden = opts;
  } else if (opts) {
    // got an "options" object
    exports._extend(ctx, opts);
  }
  // set default options
  if (isUndefined(ctx.showHidden)) ctx.showHidden = false;
  if (isUndefined(ctx.depth)) ctx.depth = 2;
  if (isUndefined(ctx.colors)) ctx.colors = false;
  if (isUndefined(ctx.customInspect)) ctx.customInspect = true;
  if (ctx.colors) ctx.stylize = stylizeWithColor;
  return formatValue(ctx, obj, ctx.depth);
}
exports.inspect = inspect;


// http://en.wikipedia.org/wiki/ANSI_escape_code#graphics
inspect.colors = {
  'bold' : [1, 22],
  'italic' : [3, 23],
  'underline' : [4, 24],
  'inverse' : [7, 27],
  'white' : [37, 39],
  'grey' : [90, 39],
  'black' : [30, 39],
  'blue' : [34, 39],
  'cyan' : [36, 39],
  'green' : [32, 39],
  'magenta' : [35, 39],
  'red' : [31, 39],
  'yellow' : [33, 39]
};

// Don't use 'blue' not visible on cmd.exe
inspect.styles = {
  'special': 'cyan',
  'number': 'yellow',
  'boolean': 'yellow',
  'undefined': 'grey',
  'null': 'bold',
  'string': 'green',
  'date': 'magenta',
  // "name": intentionally not styling
  'regexp': 'red'
};


function stylizeWithColor(str, styleType) {
  var style = inspect.styles[styleType];

  if (style) {
    return '\u001b[' + inspect.colors[style][0] + 'm' + str +
           '\u001b[' + inspect.colors[style][1] + 'm';
  } else {
    return str;
  }
}


function stylizeNoColor(str, styleType) {
  return str;
}


function arrayToHash(array) {
  var hash = {};

  array.forEach(function(val, idx) {
    hash[val] = true;
  });

  return hash;
}


function formatValue(ctx, value, recurseTimes) {
  // Provide a hook for user-specified inspect functions.
  // Check that value is an object with an inspect function on it
  if (ctx.customInspect &&
      value &&
      isFunction(value.inspect) &&
      // Filter out the util module, it's inspect function is special
      value.inspect !== exports.inspect &&
      // Also filter out any prototype objects using the circular check.
      !(value.constructor && value.constructor.prototype === value)) {
    var ret = value.inspect(recurseTimes, ctx);
    if (!isString(ret)) {
      ret = formatValue(ctx, ret, recurseTimes);
    }
    return ret;
  }

  // Primitive types cannot have properties
  var primitive = formatPrimitive(ctx, value);
  if (primitive) {
    return primitive;
  }

  // Look up the keys of the object.
  var keys = Object.keys(value);
  var visibleKeys = arrayToHash(keys);

  if (ctx.showHidden) {
    keys = Object.getOwnPropertyNames(value);
  }

  // IE doesn't make error fields non-enumerable
  // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx
  if (isError(value)
      && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {
    return formatError(value);
  }

  // Some type of object without properties can be shortcutted.
  if (keys.length === 0) {
    if (isFunction(value)) {
      var name = value.name ? ': ' + value.name : '';
      return ctx.stylize('[Function' + name + ']', 'special');
    }
    if (isRegExp(value)) {
      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
    }
    if (isDate(value)) {
      return ctx.stylize(Date.prototype.toString.call(value), 'date');
    }
    if (isError(value)) {
      return formatError(value);
    }
  }

  var base = '', array = false, braces = ['{', '}'];

  // Make Array say that they are Array
  if (isArray(value)) {
    array = true;
    braces = ['[', ']'];
  }

  // Make functions say that they are functions
  if (isFunction(value)) {
    var n = value.name ? ': ' + value.name : '';
    base = ' [Function' + n + ']';
  }

  // Make RegExps say that they are RegExps
  if (isRegExp(value)) {
    base = ' ' + RegExp.prototype.toString.call(value);
  }

  // Make dates with properties first say the date
  if (isDate(value)) {
    base = ' ' + Date.prototype.toUTCString.call(value);
  }

  // Make error with message first say the error
  if (isError(value)) {
    base = ' ' + formatError(value);
  }

  if (keys.length === 0 && (!array || value.length == 0)) {
    return braces[0] + base + braces[1];
  }

  if (recurseTimes < 0) {
    if (isRegExp(value)) {
      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
    } else {
      return ctx.stylize('[Object]', 'special');
    }
  }

  ctx.seen.push(value);

  var output;
  if (array) {
    output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);
  } else {
    output = keys.map(function(key) {
      return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);
    });
  }

  ctx.seen.pop();

  return reduceToSingleString(output, base, braces);
}


function formatPrimitive(ctx, value) {
  if (isUndefined(value))
    return ctx.stylize('undefined', 'undefined');
  if (isString(value)) {
    var simple = '\'' + JSON.stringify(value).replace(/^"|"$/g, '')
                                             .replace(/'/g, "\\'")
                                             .replace(/\\"/g, '"') + '\'';
    return ctx.stylize(simple, 'string');
  }
  if (isNumber(value))
    return ctx.stylize('' + value, 'number');
  if (isBoolean(value))
    return ctx.stylize('' + value, 'boolean');
  // For some reason typeof null is "object", so special case here.
  if (isNull(value))
    return ctx.stylize('null', 'null');
}


function formatError(value) {
  return '[' + Error.prototype.toString.call(value) + ']';
}


function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
  var output = [];
  for (var i = 0, l = value.length; i < l; ++i) {
    if (hasOwnProperty(value, String(i))) {
      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
          String(i), true));
    } else {
      output.push('');
    }
  }
  keys.forEach(function(key) {
    if (!key.match(/^\d+$/)) {
      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
          key, true));
    }
  });
  return output;
}


function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {
  var name, str, desc;
  desc = Object.getOwnPropertyDescriptor(value, key) || { value: value[key] };
  if (desc.get) {
    if (desc.set) {
      str = ctx.stylize('[Getter/Setter]', 'special');
    } else {
      str = ctx.stylize('[Getter]', 'special');
    }
  } else {
    if (desc.set) {
      str = ctx.stylize('[Setter]', 'special');
    }
  }
  if (!hasOwnProperty(visibleKeys, key)) {
    name = '[' + key + ']';
  }
  if (!str) {
    if (ctx.seen.indexOf(desc.value) < 0) {
      if (isNull(recurseTimes)) {
        str = formatValue(ctx, desc.value, null);
      } else {
        str = formatValue(ctx, desc.value, recurseTimes - 1);
      }
      if (str.indexOf('\n') > -1) {
        if (array) {
          str = str.split('\n').map(function(line) {
            return '  ' + line;
          }).join('\n').slice(2);
        } else {
          str = '\n' + str.split('\n').map(function(line) {
            return '   ' + line;
          }).join('\n');
        }
      }
    } else {
      str = ctx.stylize('[Circular]', 'special');
    }
  }
  if (isUndefined(name)) {
    if (array && key.match(/^\d+$/)) {
      return str;
    }
    name = JSON.stringify('' + key);
    if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
      name = name.slice(1, -1);
      name = ctx.stylize(name, 'name');
    } else {
      name = name.replace(/'/g, "\\'")
                 .replace(/\\"/g, '"')
                 .replace(/(^"|"$)/g, "'");
      name = ctx.stylize(name, 'string');
    }
  }

  return name + ': ' + str;
}


function reduceToSingleString(output, base, braces) {
  var numLinesEst = 0;
  var length = output.reduce(function(prev, cur) {
    numLinesEst++;
    if (cur.indexOf('\n') >= 0) numLinesEst++;
    return prev + cur.replace(/\u001b\[\d\d?m/g, '').length + 1;
  }, 0);

  if (length > 60) {
    return braces[0] +
           (base === '' ? '' : base + '\n ') +
           ' ' +
           output.join(',\n  ') +
           ' ' +
           braces[1];
  }

  return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];
}


// NOTE: These type checking functions intentionally don't use `instanceof`
// because it is fragile and can be easily faked with `Object.create()`.
exports.types = require('./support/types');

function isArray(ar) {
  return Array.isArray(ar);
}
exports.isArray = isArray;

function isBoolean(arg) {
  return typeof arg === 'boolean';
}
exports.isBoolean = isBoolean;

function isNull(arg) {
  return arg === null;
}
exports.isNull = isNull;

function isNullOrUndefined(arg) {
  return arg == null;
}
exports.isNullOrUndefined = isNullOrUndefined;

function isNumber(arg) {
  return typeof arg === 'number';
}
exports.isNumber = isNumber;

function isString(arg) {
  return typeof arg === 'string';
}
exports.isString = isString;

function isSymbol(arg) {
  return typeof arg === 'symbol';
}
exports.isSymbol = isSymbol;

function isUndefined(arg) {
  return arg === void 0;
}
exports.isUndefined = isUndefined;

function isRegExp(re) {
  return isObject(re) && objectToString(re) === '[object RegExp]';
}
exports.isRegExp = isRegExp;
exports.types.isRegExp = isRegExp;

function isObject(arg) {
  return typeof arg === 'object' && arg !== null;
}
exports.isObject = isObject;

function isDate(d) {
  return isObject(d) && objectToString(d) === '[object Date]';
}
exports.isDate = isDate;
exports.types.isDate = isDate;

function isError(e) {
  return isObject(e) &&
      (objectToString(e) === '[object Error]' || e instanceof Error);
}
exports.isError = isError;
exports.types.isNativeError = isError;

function isFunction(arg) {
  return typeof arg === 'function';
}
exports.isFunction = isFunction;

function isPrimitive(arg) {
  return arg === null ||
         typeof arg === 'boolean' ||
         typeof arg === 'number' ||
         typeof arg === 'string' ||
         typeof arg === 'symbol' ||  // ES6 symbol
         typeof arg === 'undefined';
}
exports.isPrimitive = isPrimitive;

exports.isBuffer = require('./support/isBuffer');

function objectToString(o) {
  return Object.prototype.toString.call(o);
}


function pad(n) {
  return n < 10 ? '0' + n.toString(10) : n.toString(10);
}


var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep',
              'Oct', 'Nov', 'Dec'];

// 26 Feb 16:19:34
function timestamp() {
  var d = new Date();
  var time = [pad(d.getHours()),
              pad(d.getMinutes()),
              pad(d.getSeconds())].join(':');
  return [d.getDate(), months[d.getMonth()], time].join(' ');
}


// log is just a thin wrapper to console.log that prepends a timestamp
exports.log = function() {
  console.log('%s - %s', timestamp(), exports.format.apply(exports, arguments));
};


/**
 * Inherit the prototype methods from one constructor into another.
 *
 * The Function.prototype.inherits from lang.js rewritten as a standalone
 * function (not on Function.prototype). NOTE: If this file is to be loaded
 * during bootstrapping this function needs to be rewritten using some native
 * functions as prototype setup using normal JavaScript does not work as
 * expected during bootstrapping (see mirror.js in r114903).
 *
 * @param {function} ctor Constructor function which needs to inherit the
 *     prototype.
 * @param {function} superCtor Constructor function to inherit prototype from.
 */
exports.inherits = require('inherits');

exports._extend = function(origin, add) {
  // Don't do anything if add isn't an object
  if (!add || !isObject(add)) return origin;

  var keys = Object.keys(add);
  var i = keys.length;
  while (i--) {
    origin[keys[i]] = add[keys[i]];
  }
  return origin;
};

function hasOwnProperty(obj, prop) {
  return Object.prototype.hasOwnProperty.call(obj, prop);
}

var kCustomPromisifiedSymbol = typeof Symbol !== 'undefined' ? Symbol('util.promisify.custom') : undefined;

exports.promisify = function promisify(original) {
  if (typeof original !== 'function')
    throw new TypeError('The "original" argument must be of type Function');

  if (kCustomPromisifiedSymbol && original[kCustomPromisifiedSymbol]) {
    var fn = original[kCustomPromisifiedSymbol];
    if (typeof fn !== 'function') {
      throw new TypeError('The "util.promisify.custom" argument must be of type Function');
    }
    Object.defineProperty(fn, kCustomPromisifiedSymbol, {
      value: fn, enumerable: false, writable: false, configurable: true
    });
    return fn;
  }

  function fn() {
    var promiseResolve, promiseReject;
    var promise = new Promise(function (resolve, reject) {
      promiseResolve = resolve;
      promiseReject = reject;
    });

    var args = [];
    for (var i = 0; i < arguments.length; i++) {
      args.push(arguments[i]);
    }
    args.push(function (err, value) {
      if (err) {
        promiseReject(err);
      } else {
        promiseResolve(value);
      }
    });

    try {
      original.apply(this, args);
    } catch (err) {
      promiseReject(err);
    }

    return promise;
  }

  Object.setPrototypeOf(fn, Object.getPrototypeOf(original));

  if (kCustomPromisifiedSymbol) Object.defineProperty(fn, kCustomPromisifiedSymbol, {
    value: fn, enumerable: false, writable: false, configurable: true
  });
  return Object.defineProperties(
    fn,
    getOwnPropertyDescriptors(original)
  );
}

exports.promisify.custom = kCustomPromisifiedSymbol

function callbackifyOnRejected(reason, cb) {
  // `!reason` guard inspired by bluebird (Ref: https://goo.gl/t5IS6M).
  // Because `null` is a special error value in callbacks which means "no error
  // occurred", we error-wrap so the callback consumer can distinguish between
  // "the promise rejected with null" or "the promise fulfilled with undefined".
  if (!reason) {
    var newReason = new Error('Promise was rejected with a falsy value');
    newReason.reason = reason;
    reason = newReason;
  }
  return cb(reason);
}

function callbackify(original) {
  if (typeof original !== 'function') {
    throw new TypeError('The "original" argument must be of type Function');
  }

  // We DO NOT return the promise as it gives the user a false sense that
  // the promise is actually somehow related to the callback's execution
  // and that the callback throwing will reject the promise.
  function callbackified() {
    var args = [];
    for (var i = 0; i < arguments.length; i++) {
      args.push(arguments[i]);
    }

    var maybeCb = args.pop();
    if (typeof maybeCb !== 'function') {
      throw new TypeError('The last argument must be of type Function');
    }
    var self = this;
    var cb = function() {
      return maybeCb.apply(self, arguments);
    };
    // In true node style we process the callback on `nextTick` with all the
    // implications (stack, `uncaughtException`, `async_hooks`)
    original.apply(this, args)
      .then(function(ret) { process.nextTick(cb.bind(null, null, ret)) },
            function(rej) { process.nextTick(callbackifyOnRejected.bind(null, rej, cb)) });
  }

  Object.setPrototypeOf(callbackified, Object.getPrototypeOf(original));
  Object.defineProperties(callbackified,
                          getOwnPropertyDescriptors(original));
  return callbackified;
}
exports.callbackify = callbackify;

}).call(this)}).call(this,require('_process'))
},{"./support/isBuffer":174,"./support/types":175,"_process":136,"inherits":115}],177:[function(require,module,exports){
(function (global){(function (){
'use strict';

var forEach = require('for-each');
var availableTypedArrays = require('available-typed-arrays');
var callBound = require('call-bind/callBound');
var gOPD = require('gopd');

var $toString = callBound('Object.prototype.toString');
var hasToStringTag = require('has-tostringtag/shams')();

var g = typeof globalThis === 'undefined' ? global : globalThis;
var typedArrays = availableTypedArrays();

var $slice = callBound('String.prototype.slice');
var toStrTags = {};
var getPrototypeOf = Object.getPrototypeOf; // require('getprototypeof');
if (hasToStringTag && gOPD && getPrototypeOf) {
	forEach(typedArrays, function (typedArray) {
		if (typeof g[typedArray] === 'function') {
			var arr = new g[typedArray]();
			if (Symbol.toStringTag in arr) {
				var proto = getPrototypeOf(arr);
				var descriptor = gOPD(proto, Symbol.toStringTag);
				if (!descriptor) {
					var superProto = getPrototypeOf(proto);
					descriptor = gOPD(superProto, Symbol.toStringTag);
				}
				toStrTags[typedArray] = descriptor.get;
			}
		}
	});
}

var tryTypedArrays = function tryAllTypedArrays(value) {
	var foundName = false;
	forEach(toStrTags, function (getter, typedArray) {
		if (!foundName) {
			try {
				var name = getter.call(value);
				if (name === typedArray) {
					foundName = name;
				}
			} catch (e) {}
		}
	});
	return foundName;
};

var isTypedArray = require('is-typed-array');

module.exports = function whichTypedArray(value) {
	if (!isTypedArray(value)) { return false; }
	if (!hasToStringTag || !(Symbol.toStringTag in value)) { return $slice($toString(value), 8, -1); }
	return tryTypedArrays(value);
};

}).call(this)}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"available-typed-arrays":19,"call-bind/callBound":54,"for-each":91,"gopd":95,"has-tostringtag/shams":98,"is-typed-array":120}]},{},[1]);
