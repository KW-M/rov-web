var L=Object.defineProperty;var p=(o,e,t)=>e in o?L(o,e,{enumerable:!0,configurable:!0,writable:!0,value:t}):o[e]=t;var i=(o,e,t)=>(p(o,typeof e!="symbol"?e+"":e,t),t);import{L as f,d as k,e as S,c as w,C as l}from"./consts-bd1d0988.js";import{r as d,a as _,c,b as h,S as M}from"./simplePeer-cd4ba429.js";class R{constructor(){i(this,"socket");i(this,"serverAddress");i(this,"msgReceivedFn");i(this,"isRunning");i(this,"isConnected");i(this,"connectionTimerId");this.isConnected=!1,this.isRunning=!1,this.connectionTimerId=0,this.serverAddress="ws://localhost:8765/"}start(e){this.msgReceivedFn=e,this.isRunning=!0,this.connect()}stop(){this.isRunning=!1,this.socket.close()}connect(){console.log("Attempting to connect to python websocket..."),this.socket=new WebSocket(this.serverAddress),this.socket.binaryType="blob",this.isConnected=!0,this.socket.addEventListener("close",e=>{console.log("WebSocket connection closed with code: ",e.code),this.isConnected=!1,this.isRunning&&this.queueConnect()}),this.socket.addEventListener("error",e=>{console.error("WebSocket error:",e),this.isConnected=!1,this.isRunning&&this.queueConnect()}),this.socket.addEventListener("message",e=>{e.data.arrayBuffer().then(t=>{this.msgReceivedFn(new Uint8Array(t))})})}queueConnect(){clearTimeout(this.connectionTimerId),this.connectionTimerId=setTimeout(this.connect.bind(this),2e3)}getIsConnected(){return this.isConnected}sendMessage(e){this.socket.send(e)}}const g=new R;function y(o,e){return e.SimplepeerSignal?(u.ingestSimplePeerSignallingMsg(o,e.SimplepeerSignal.Message),!0):!1}function C(o,e){let t=new Uint8Array(e);if(!t||t.length===0)return;const n=d.RovAction.decode(t);if(y(o,n))return;n.BackendMetadata=n.BackendMetadata||new d.ActionBackendMetadata,n.BackendMetadata.FromUserId=o;const s=d.RovAction.encode(n).finish();g.isConnected&&g.sendMessage(s)}const E=globalThis.livekitServerSDK.EgressClient,b=globalThis.livekitServerSDK.StreamProtocol;class P{constructor(){i(this,"_twitchStreamKey",null);i(this,"_egressClient",null);i(this,"roomName",null);i(this,"streamEgressID",null)}innit(e,t,n,s){this._twitchStreamKey=e,this.roomName=t,this._egressClient=new E("https://rov-web.livekit.cloud",n,s)}async startStream(){const e={protocol:b.RTMP,urls:["rtmp://live.twitch.tv/app/"+this._twitchStreamKey]};var t=await this._egressClient.startRoomCompositeEgress(this.roomName,e);this.streamEgressID=t.egressId}async stopStream(){await this._egressClient.stopEgress(this.streamEgressID)}}const m=new P;class K{constructor(){i(this,"_cloudLivekitConnection",new _);i(this,"_localLivekitConnection",new _);i(this,"_simplePeerConnections",{});i(this,"_cameraMediaStream",null);this._cloudLivekitConnection.init({hostUrl:f,publishVideo:!0,reconnectAttempts:300,roomConnectionConfig:k,roomConfig:S}),c(this._cloudLivekitConnection.latestRecivedDataMessage,e=>{if(!e)return;const{senderId:t,msg:n}=e;C(t,n)}),c(this._cloudLivekitConnection.connectionState,e=>{console.log("Cloud Conn State Changed: "+e),e==l.connected&&m.startStream()}),c(this._cloudLivekitConnection.participantConnectionEvents,e=>{console.log("Cloud Conn Participant Event: ",e)}),this._localLivekitConnection.init({hostUrl:w,publishVideo:!0,reconnectAttempts:300,roomConnectionConfig:k,roomConfig:S}),c(this._localLivekitConnection.latestRecivedDataMessage,e=>{if(!e)return;const{senderId:t,msg:n}=e;C(t,n)}),c(this._localLivekitConnection.connectionState,e=>{console.log("Local Conn State Changed: "+e)}),c(this._localLivekitConnection.participantConnectionEvents,e=>{console.log("Local Conn Participant Event: ",e)})}async cameraReady(e){this._cameraMediaStream=e,this._cloudLivekitConnection&&this._cloudLivekitConnection.connectionState.get()==l.connected&&this._cameraMediaStream&&await this._cloudLivekitConnection._roomConn.localParticipant.setCameraEnabled(!0),this._localLivekitConnection&&this._localLivekitConnection.connectionState.get()==l.connected&&this._cameraMediaStream&&await this._localLivekitConnection._roomConn.localParticipant.setCameraEnabled(!0)}async start(e){e.EnableLivekitCloud&&await h(this._cloudLivekitConnection.startRoom,this._cloudLivekitConnection)(e.RovRoomName,e.CloudAPIKey,e.CloudSecretKey),e.EnableLivekitLocal&&await h(this._localLivekitConnection.startRoom,this._localLivekitConnection)(e.RovRoomName,e.CloudAPIKey,e.CloudSecretKey),h(navigator.mediaDevices.getUserMedia,navigator.mediaDevices,30)({video:!0,audio:!1}).then(this.cameraReady.bind(this)),console.info("Connection Manager Started")}async startSimplePeerConnection(e,t){this._simplePeerConnections[e]&&(this._simplePeerConnections[e].stop(),delete this._simplePeerConnections[e]);const n=new M;c(n.latestRecivedDataMessage,s=>{C(e,s)}),c(n.outgoingSignalingMessages,s=>{this.sendMessage({SimplepeerSignal:{Message:s}},!0,[e])}),await n.start({initiator:!1,trickle:!1,streams:[this._cameraMediaStream]}),this._simplePeerConnections[e]=n,t&&n.ingestSignalingMsg(t)}async ingestSimplePeerSignallingMsg(e,t){const n=this._simplePeerConnections[e];n?[l.failed,l.disconnectedOk,l.init].includes(n.connectionState.get())?await this.startSimplePeerConnection(e,t):n.ingestSignalingMsg(t):await this.startSimplePeerConnection(e,t)}async _sendMessageViaLivekit(e,t,n){await this._cloudLivekitConnection.sendMessage(e,t,n),await this._localLivekitConnection.sendMessage(e,t,n)}async sendMessage(e,t,n){console.log("Sending WEBRTC Message to: ["+n.join(", ")+"] reliable: "+t,e);const s=d.RovResponse.encode(e).finish(),v=n;await this._cloudLivekitConnection.sendMessage(s,t,v),await this._localLivekitConnection.sendMessage(s,t,v)}}const u=new K,a=new URLSearchParams(location.search),r={RovRoomName:a.get("RovRoomName"),CloudAPIKey:a.get("CloudAPIKey"),CloudSecretKey:a.get("CloudSecretKey"),LocalAPIKey:a.get("LocalAPIKey")||"N/A",LocalSecretKey:a.get("LocalSecretKey")||"N/A",TwitchStreamKey:a.get("TwitchStreamKey"),EnableLivekitLocal:(a.get("ForceLocal")||"false").toLowerCase()==="true",EnableLivekitCloud:(a.get("EnableCloud")||"true").toLowerCase()==="true",EnableBackendWebsocket:(a.get("EnableBackendWebsocket")||"true").toLowerCase()==="true"};for(const o in r)if(r[o]==null)throw new Error("Missing some required livekit setup url query params.");m.innit(r.TwitchStreamKey,r.RovRoomName,r.CloudAPIKey,r.CloudSecretKey);u.start(r);window.onbeforeunload=()=>{m.stopStream()};r.EnableBackendWebsocket&&g.start(o=>{if(o.length===0)return;const e=d.RovResponse.decode(o);if(!e.BackendMetadata)return console.error("No BackendMetadata in message from iROV",e.toJSON(),o);const t=e.BackendMetadata.TargetUserIds,s=e.BackendMetadata.TransportMethod==d.DataTransportMethod.LivekitReliable;u.sendMessage(e,s,t)});
//# sourceMappingURL=index-49b995c3.js.map
