var R=Object.defineProperty;var _=(o,e,t)=>e in o?R(o,e,{enumerable:!0,configurable:!0,writable:!0,value:t}):o[e]=t;var i=(o,e,t)=>(_(o,typeof e!="symbol"?e+"":e,t),t);import{L as u,d as v,e as L,c as k}from"./consts-71a591af.js";import{r,a as M,c,b as d,S as f,g as p,d as w,e as S,f as A}from"./simplePeer-3f2c601b.js";class y{constructor(){i(this,"socket");i(this,"serverAddress");i(this,"msgReceivedFn");i(this,"isRunning");i(this,"isConnected");i(this,"connectionTimerId");this.isConnected=!1,this.isRunning=!1,this.connectionTimerId=0,this.serverAddress="ws://localhost:8765/"}start(e){this.msgReceivedFn=e,this.isRunning=!0,this.connect()}stop(){this.isRunning=!1,this.socket.close()}connect(){console.log("Attempting to connect to python websocket..."),this.socket=new WebSocket(this.serverAddress),this.isConnected=!0,this.socket.addEventListener("close",e=>{console.log("WebSocket connection closed with code: ",e.code),this.isConnected=!1,this.isRunning&&this.queueConnect()}),this.socket.addEventListener("error",e=>{console.error("WebSocket error:",e),this.isConnected=!1,this.isRunning&&this.queueConnect()}),this.socket.addEventListener("message",this.msgReceivedFn)}queueConnect(){clearTimeout(this.connectionTimerId),this.connectionTimerId=setTimeout(this.connect.bind(this),2e3)}getIsConnected(){return this.isConnected}sendMessage(e){this.socket.send(e)}}const h=new y;function P(o,e){e.SimplepeerSignal&&m.ingestSimplePeerSignallingMsg(o,e.SimplepeerSignal.Message)}function g(o,e){let t=new Uint8Array(e);if(!t||t.length===0)return;console.log("GOT DC DATA:",t);const n=r.RovAction.decode(t);n.BackendMetadata=n.BackendMetadata||new r.ActionBackendMetadata,n.BackendMetadata.FromUserID=o,P(o,n);const s=r.RovAction.encode(n).finish();h.isConnected&&h.sendMessage(s)}class I{constructor(){i(this,"_cloudLivekitConnection",new M);i(this,"_localLivekitConnection",new M);i(this,"_simplePeerConnections",{});i(this,"_cameraMediaStream",null);this._cloudLivekitConnection.init({hostUrl:u,publishVideo:!0,reconnectAttempts:300,roomConnectionConfig:v,roomConfig:L}),c(this._cloudLivekitConnection.latestRecivedDataMessage,e=>{if(!e)return;const{senderId:t,msg:n}=e;g(t,n)}),c(this._cloudLivekitConnection.connectionState,e=>{console.log("Cloud Conn State Changed: "+e)}),this._localLivekitConnection.init({hostUrl:k,publishVideo:!0,reconnectAttempts:300,roomConnectionConfig:v,roomConfig:L}),c(this._localLivekitConnection.latestRecivedDataMessage,e=>{if(!e)return;const{senderId:t,msg:n}=e;g(t,n)}),c(this._localLivekitConnection.connectionState,e=>{console.log("Local Conn State Changed: "+e)})}async start(e){e.EnableLivekitCloud&&await d(this._setupLivekitRoom,this)(u,e,this._cloudLivekitConnection),e.EnableLivekitLocal&&await d(this._setupLivekitRoom,this)(k,e,this._localLivekitConnection),this._cameraMediaStream=await d(navigator.mediaDevices.getUserMedia,navigator.mediaDevices)({video:!0,audio:!1}),console.log("ConnectionManager Started")}async startSimplePeerConnection(e,t){this._simplePeerConnections[e]&&(this._simplePeerConnections[e].stop(),delete this._simplePeerConnections[e]);const n=new f;c(n.latestRecivedDataMessage,s=>{g(e,s)}),c(n.outgoingSignalingMessages,s=>{this.sendMessage({SimplepeerSignal:{Message:s}},!0,[e])}),await n.start({initiator:!1,trickle:!1,streams:[this._cameraMediaStream]}),this._simplePeerConnections[e]=n,t&&n.ingestSignalingMsg(t)}async ingestSimplePeerSignallingMsg(e,t){const n=this._simplePeerConnections[e];n?n.ingestSignalingMsg(t):await this.startSimplePeerConnection(e,t)}async _sendMessageViaLivekit(e,t,n){await this._cloudLivekitConnection.sendMessage(e,t,n),await this._localLivekitConnection.sendMessage(e,t,n)}async sendMessage(e,t,n){const s=r.RovResponse.encode(e).finish();await this._cloudLivekitConnection.sendMessage(s,t,n),await this._localLivekitConnection.sendMessage(s,t,n);for(const l of n)this._simplePeerConnections[l]&&await this._simplePeerConnections[l].sendMessage(s)}async _setupLivekitRoom(e,t,n){const s=p(t.CloudAPIKey,t.CloudSecretKey,t.RovRoomName),l=w(e,t.CloudAPIKey,t.CloudSecretKey);await S(l,t.RovRoomName),await A(l,t),await n.start(t.RovRoomName,s)}}const m=new I,a=new URLSearchParams(location.search),C={RovRoomName:a.get("RovRoomName"),CloudAPIKey:a.get("CloudAPIKey"),CloudSecretKey:a.get("CloudSecretKey"),LocalAPIKey:a.get("LocalAPIKey")||"N/A",LocalSecretKey:a.get("LocalSecretKey")||"N/A",EnableLivekitLocal:(a.get("ForceLocal")||"false").toLowerCase()==="true",EnableLivekitCloud:(a.get("EnableCloud")||"true").toLowerCase()==="true"};for(const o in C)if(C[o]==null)throw new Error("Missing some required livekit setup url query params.");m.start(C);h.start(function(o){const e=r.RovResponse.decode(o.data),t=e.BackendMetadata.TargetUserIDs,s=e.BackendMetadata.TransportMethod==r.DataTransportMethod.LivekitReliable;m.sendMessage(e,s,t)});
//# sourceMappingURL=index-981b3789.js.map
