var _=Object.defineProperty;var w=(o,e,t)=>e in o?_(o,e,{enumerable:!0,configurable:!0,writable:!0,value:t}):o[e]=t;var i=(o,e,t)=>(w(o,typeof e!="symbol"?e+"":e,t),t);import{L as p,d as u,e as S,c as f,C as l,S as M}from"./consts-e660c2ba.js";import{r as d,a as L,c as r,b as h,S as y}from"./simplePeer-e576c216.js";class R{constructor(){i(this,"socket");i(this,"serverAddress");i(this,"msgReceivedFn");i(this,"isRunning");i(this,"isConnected");i(this,"connectionTimerId");this.isConnected=!1,this.isRunning=!1,this.connectionTimerId=0,this.serverAddress=""}start(e,t){this.serverAddress=e,this.msgReceivedFn=t,this.isRunning=!0,this.connect()}stop(){this.isRunning=!1,this.socket.close()}connect(){console.log("Attempting to connect to python websocket..."),this.socket=new WebSocket(this.serverAddress),this.socket.binaryType="blob",this.isConnected=!0,this.socket.addEventListener("close",e=>{console.log("WebSocket connection closed with code: ",e.code),this.isConnected=!1,this.isRunning&&this.queueConnect()}),this.socket.addEventListener("error",e=>{console.error("WebSocket error:",e),this.isConnected=!1,this.isRunning&&this.queueConnect()}),this.socket.addEventListener("message",e=>{e.data.arrayBuffer().then(t=>{this.msgReceivedFn(new Uint8Array(t))})})}queueConnect(){clearTimeout(this.connectionTimerId),this.connectionTimerId=setTimeout(this.connect.bind(this),2e3)}getIsConnected(){return this.isConnected}sendMessage(e){this.socket.send(e)}}const g=new R;function P(o,e){return e.SimplepeerSignal?(v.ingestSimplePeerSignallingMsg(o,e.SimplepeerSignal.Message),!0):!1}function m(o,e){let t=new Uint8Array(e);if(!t||t.length===0)return;const n=d.RovAction.decode(t);if(P(o,n))return;n.BackendMetadata=n.BackendMetadata||new d.ActionBackendMetadata,n.BackendMetadata.FromUserId=o;const s=d.RovAction.encode(n).finish();g.isConnected&&g.sendMessage(s)}const E=globalThis.livekitServerSDK.EgressClient,b=globalThis.livekitServerSDK.StreamProtocol;class T{constructor(){i(this,"_twitchStreamKey",null);i(this,"_egressClient",null);i(this,"roomName",null);i(this,"streamEgressID",null)}init(e,t,n,s){this._twitchStreamKey=e,this.roomName=t,this._egressClient=new E("https://rov-web.livekit.cloud",n,s)}async startStream(){if(!this._twitchStreamKey)return console.warn("startStream() err: Twitch stream key not set!");const e={protocol:b.RTMP,urls:["rtmp://live.twitch.tv/app/"+this._twitchStreamKey]};var t=await this._egressClient.startRoomCompositeEgress(this.roomName,e);this.streamEgressID=t.egressId}async stopStream(){if(!this.streamEgressID)return console.warn("stopStream() err: Twitch Stream not started!");await this._egressClient.stopEgress(this.streamEgressID)}}const C=new T;class I{constructor(){i(this,"_cloudLivekitConnection",new L);i(this,"_localLivekitConnection",new L);i(this,"_simplePeerConnections",{});i(this,"_cameraMediaStream",null);this._cloudLivekitConnection.init({hostUrl:p,publishVideo:!0,reconnectAttempts:300,roomConnectionConfig:u,roomConfig:S}),r(this._cloudLivekitConnection.latestRecivedDataMessage,e=>{if(!e)return;const{senderId:t,msg:n}=e;m(t,n)}),r(this._cloudLivekitConnection.connectionState,e=>{console.log("Cloud Conn State Changed: "+e),e==l.connected&&C.startStream()}),r(this._cloudLivekitConnection.participantConnectionEvents,e=>{console.log("Cloud Conn Participant Event: ",e)}),this._localLivekitConnection.init({hostUrl:f,publishVideo:!0,reconnectAttempts:300,roomConnectionConfig:u,roomConfig:S}),r(this._localLivekitConnection.latestRecivedDataMessage,e=>{if(!e)return;const{senderId:t,msg:n}=e;m(t,n)}),r(this._localLivekitConnection.connectionState,e=>{console.log("Local Conn State Changed: "+e)}),r(this._localLivekitConnection.participantConnectionEvents,e=>{console.log("Local Conn Participant Event: ",e)})}async cameraReady(e){this._cameraMediaStream=e,this._cloudLivekitConnection&&this._cloudLivekitConnection.connectionState.get()==l.connected&&this._cameraMediaStream&&await this._cloudLivekitConnection._roomConn.localParticipant.setCameraEnabled(!0),this._localLivekitConnection&&this._localLivekitConnection.connectionState.get()==l.connected&&this._cameraMediaStream&&await this._localLivekitConnection._roomConn.localParticipant.setCameraEnabled(!0)}async start(e){e.EnableLivekitCloud&&await h(this._cloudLivekitConnection.startRoom,this._cloudLivekitConnection,10,1e3,1.3)(e.RovName,e.LivekitAPIKey,e.LivekitSecretKey).catch(t=>{console.error(t),window.location.reload()}),e.EnableLivekitLocal&&await h(this._localLivekitConnection.startRoom,this._localLivekitConnection,10,1e3,1.3)(e.RovName,e.LivekitAPIKey,e.LivekitSecretKey).catch(t=>{console.error(t),window.location.reload()}),h(navigator.mediaDevices.getUserMedia,navigator.mediaDevices,10,1e3,1.3)({video:!0,audio:!1}).then(this.cameraReady.bind(this)).catch(t=>{console.error(t),window.location.reload()}),console.info("Connection Manager Started")}async startSimplePeerConnection(e,t){this._simplePeerConnections[e]&&(this._simplePeerConnections[e].stop(),delete this._simplePeerConnections[e]);const n=new y;r(n.latestRecivedDataMessage,s=>{m(e,s)}),r(n.outgoingSignalingMessages,s=>{this.sendMessage({SimplepeerSignal:{Message:s}},!0,[e])}),await n.start({initiator:!1,trickle:!1,streams:[this._cameraMediaStream]}),this._simplePeerConnections[e]=n,t&&n.ingestSignalingMsg(t)}async ingestSimplePeerSignallingMsg(e,t){const n=this._simplePeerConnections[e];n?[l.failed,l.disconnectedOk,l.init].includes(n.connectionState.get())?await this.startSimplePeerConnection(e,t):n.ingestSignalingMsg(t):await this.startSimplePeerConnection(e,t)}async _sendMessageViaLivekit(e,t,n){await this._cloudLivekitConnection.sendMessage(e,t,n),await this._localLivekitConnection.sendMessage(e,t,n)}async sendMessage(e,t,n){console.log("Sending WEBRTC Message to: ["+n.join(", ")+"] reliable: "+t,e);const s=d.RovResponse.encode(e).finish(),k=n;await this._cloudLivekitConnection.sendMessage(s,t,k),await this._localLivekitConnection.sendMessage(s,t,k)}}const v=new I,c=new URLSearchParams(location.search),a={RovName:c.get("RovName"),RovControlPassword:c.get("RovControlPassword"),LivekitAPIKey:c.get("LivekitApiKey"),LivekitSecretKey:c.get("LivekitSecretKey"),TwitchStreamKey:c.get("TwitchStreamKey")||"None",EnableLivekitLocal:(c.get("ForceLocal")||"false").toLowerCase()==="true",EnableLivekitCloud:(c.get("EnableCloud")||"true").toLowerCase()==="true",PythonWebsocketPort:parseInt(c.get("PythonWebsocketPort"))||0,AuthTokenTimeout:parseInt(c.get("AuthTokenTimeout"))||M};for(const o in a)if(a[o]==null)throw new Error("Missing required url query parameter: "+o);v.start(a);a.TwitchStreamKey!=="None"&&(C.init(a.TwitchStreamKey,a.RovName,a.LivekitAPIKey,a.LivekitSecretKey),window.addEventListener("beforeunload",()=>C.stopStream()));a.PythonWebsocketPort!=0&&g.start("ws://localhost:"+a.PythonWebsocketPort,o=>{if(o.length===0)return;const e=d.RovResponse.decode(o);if(!e.BackendMetadata)return console.error("No BackendMetadata in message from iROV",e.toJSON(),o);const t=e.BackendMetadata.TargetUserIds,s=e.BackendMetadata.TransportMethod==d.DataTransportMethod.LivekitReliable;v.sendMessage(e,s,t)});
//# sourceMappingURL=index-1f8f82d2.js.map
