{"version":3,"file":"index-71b1e03c.js","sources":["../../shared/js/mavlink2RestMessages.ts","../../rov-backend/internal_webpages/js/websocketRelay.ts","../../rov-backend/internal_webpages/js/mavlinkWebsocket.ts","../../rov-backend/internal_webpages/js/msgHandler.ts","../../rov-backend/internal_webpages/js/twitchStream.ts","../../rov-backend/internal_webpages/js/internalConnManager.ts","../../rov-backend/internal_webpages/js/main.ts"],"sourcesContent":["// Available Mavlink Messages\n// https://gist.github.com/patrickelectric/26a407c4e7749cdaa58d06b52212cb1e\n\nexport enum MAV_MODE_FLAG {\n    MAV_MODE_FLAG_CUSTOM_MODE_ENABLED = 1,   // 0b00000001 Reserved for future use.\n    MAV_MODE_FLAG_TEST_ENABLED = 2,          // 0b00000010 system has a test mode enabled. This flag is intended for temporary system tests and should not be used for stable implementations.\n    MAV_MODE_FLAG_AUTO_ENABLED = 4,          // 0b00000100 autonomous mode enabled, system finds its own goal positions. Guided flag can be set or not, depends on the actual implementation.\n    MAV_MODE_FLAG_GUIDED_ENABLED = 8,        // 0b00001000 guided mode enabled, system flies waypoints / mission items.\n    MAV_MODE_FLAG_STABILIZE_ENABLED = 16,    // 0b00010000 system stabilizes electronically its attitude (and optionally position). It needs however further control inputs to move around.\n    MAV_MODE_FLAG_HIL_ENABLED = 32,          // 0b00100000 hardware in the loop simulation. All motors / actuators are blocked, but internal software is full operational.\n    MAV_MODE_FLAG_MANUAL_INPUT_ENABLED = 64, // 0b01000000 remote control input is enabled.\n    MAV_MODE_FLAG_SAFETY_ARMED = 128,        // 0b10000000 MAV safety set to armed. Motors are enabled / running / can start. Ready to fly. Additional note: this flag is to be ignore when sent in the command MAV_CMD_DO_SET_MODE and MAV_CMD_COMPONENT_ARM_DISARM shall be used instead. The flag can still be used to report the armed state.\n    MAV_MODE_FLAG_ENUM_END = 129,             //\n}\n\n// Binary for bitmasks\nexport const b00000001 = 1 | 0; // 0b00000001\nexport const b00000010 = 2 | 0; // 0b00000010\nexport const b00000100 = 4 | 0; // 0b00000100\nexport const b00001000 = 8 | 0; // 0b00001000\nexport const b00010000 = 16 | 0; // 0b00010000\nexport const b00100000 = 32 | 0; // 0b00100000\nexport const b01000000 = 64 | 0; // 0b01000000\nexport const b10000000 = 128 | 0; // 0b10000000\n\nexport interface mavlink2RestMessageBody {\n    type: string\n    target_system?: number\n    target_component?: number\n    [x: string]: unknown; // any other fields\n}\n\nexport interface mavlink2RestFullMessage {\n    header: {\n        system_id: number,\n        component_id: number,\n        sequence: number,\n    },\n    message: mavlink2RestMessageBody\n}\n\nexport interface mavlinkLongMessage extends mavlink2RestMessageBody {\n    type: \"COMMAND_LONG\"\n    command: {\n        type: string\n    },\n    target_system: number,\n    target_component: number,\n    confirmation: 1 | 0,\n    param1: number,\n    param2?: number,\n    param3?: number,\n    param4?: number,\n    param5?: number,\n    param6?: number,\n    param7?: number,\n}\n\n\nexport interface ARDUSUB_HEARTBEAT extends mavlink2RestMessageBody {\n    \"autopilot\": {\n        \"type\": \"MAV_AUTOPILOT_ARDUPILOTMEGA\"\n    },\n    \"base_mode\": {\n        \"bits\": 81 | number\n    },\n    \"custom_mode\": 19 | number, // This is the flight mode\n    \"mavlink_version\": 3 | number,\n    \"mavtype\": {\n        \"type\": \"MAV_TYPE_SUBMARINE\"\n    },\n    \"system_status\": {\n        \"type\": \"MAV_STATE_CRITICAL\" | \"MAV_STATE_ACTIVE\" // https://mavlink.io/en/messages/common.html#MAV_STATE\n    },\n    \"type\": \"HEARTBEAT\"\n}\n\n\nexport interface SYS_STATUS extends mavlink2RestMessageBody {\n    \"battery_remaining\": -1 | number, // -1 = Battery remaining unknown\n    \"current_battery\": 50 | number, // 0.5 Amps\n    \"voltage_battery\": 16057 | number, // 16.057 Volts\n    \"drop_rate_comm\": 0 | number,\n    \"errors_comm\": 0 | number,\n    \"errors_count1\": 0 | number,\n    \"errors_count2\": 0 | number,\n    \"errors_count3\": 0 | number,\n    \"errors_count4\": 0 | number,\n    \"load\": 399 | number,\n    \"onboard_control_sensors_enabled\": {\n        \"bits\": 35691567 | number\n    },\n    \"onboard_control_sensors_health\": {\n        \"bits\": 53517327 | number\n    },\n    \"onboard_control_sensors_present\": {\n        \"bits\": 52493359 | number\n    },\n    \"type\": \"SYS_STATUS\"\n}\n\nexport interface COMMAND_ACK extends mavlink2RestMessageBody {\n    \"command\": {\n        \"type\": \"MAV_CMD_DO_SET_MODE\" | string, // the original command\n    },\n    \"progress\": 0 | number,\n    \"result\": {\n        \"type\": \"MAV_RESULT_UNSUPPORTED\" | \"MAV_RESULT_ACCEPTED\" | string\n    },\n    \"result_param2\": 0 | number,\n    \"target_component\": 0 | number,\n    \"target_system\": 0 | number,\n    \"type\": \"COMMAND_ACK\"\n}\n\nexport const addMessageHeader = (msg: mavlink2RestMessageBody, sequence: number = 0): mavlink2RestFullMessage => {\n    return {\n        header: {\n            system_id: 255,\n            component_id: 240,\n            sequence: sequence,\n        },\n        message: msg\n    }\n}\n\nexport const arm = (force: boolean) => {\n    return addMessageHeader({\n        type: \"COMMAND_LONG\",\n        command: { type: \"MAV_CMD_COMPONENT_ARM_DISARM\" },\n        target_system: 1,\n        target_component: 1,\n        confirmation: 0,\n        param1: 1,\n        param2: 0,// force ? 21196 : 0,\n        \"param3\": 0,\n        \"param4\": 0,\n        \"param5\": 0,\n        \"param6\": 0,\n        \"param7\": 0,\n    } as mavlinkLongMessage)\n}\n\nexport const disarm = (force: boolean) => {\n    return addMessageHeader({\n        type: \"COMMAND_LONG\",\n        command: { type: \"MAV_CMD_COMPONENT_ARM_DISARM\" },\n        target_system: 1,\n        target_component: 1,\n        confirmation: 1,\n        param1: 0,\n        param2: 0,//force ? 21196 : 0,\n        \"param3\": 0,\n        \"param4\": 0,\n        \"param5\": 0,\n        \"param6\": 0,\n        \"param7\": 0,\n    } as mavlinkLongMessage)\n}\n\nexport enum FlightMode {\n    manual = 19,\n    stabilize = 0,\n    acrobatic = 1,\n    depth_hold = 2,\n    surface = 9,\n    // stabilize =  param1:1, param2:0\n    // acro = param1:1, param2:1\n    // alt_hold = param1:1, param2:2\n    // auto = param1:1, param2:3\n    // guided = param1:1, param2:4\n    // surface = param1:1, param2:9\n    // manual = param1:1, param2:19\n    // poshold (unsupported) =  param1:1, param2:16\n    // circle (unsupported) =  param1:1, param2:7\n}\n\n\nexport const setMode = (mode: FlightMode) => {\n    return addMessageHeader({\n        type: \"COMMAND_LONG\",\n        command: { type: \"MAV_CMD_DO_SET_MODE\" },\n        param1: 1,\n        param2: Number(mode),\n        target_system: 1,\n        target_component: 1,\n        confirmation: 1,\n    } as mavlinkLongMessage)\n}\n\nexport const heartbeat = () => {\n    return addMessageHeader({\n        type: \"HEARTBEAT\",\n        custom_mode: 0,\n        mavtype: { type: \"MAV_TYPE_GCS\" },\n        autopilot: { type: \"MAV_AUTOPILOT_INVALID\" },\n        base_mode: { bits: 192 },\n        system_status: { type: \"MAV_STATE_ACTIVE\" },\n        mavlink_version: 1,\n        confirmation: 0,\n    } as mavlink2RestMessageBody)\n}\n\nexport const manualControl = (x: number, y: number, z: number, r: number) => {\n    return addMessageHeader({\n        type: \"MANUAL_CONTROL\",\n        x: Math.floor(x),\n        y: Math.floor(y),\n        z: Math.floor(z),\n        r: Math.floor(r),\n        buttons: 0,\n        target: 1,\n    } as mavlink2RestMessageBody)\n}\n","import { ENCODE_TXT } from \"../../../shared/js/consts\"\n\n\n/*\n    Wrapper class for the WebSocket built-in javascript module. Acts as a proxy for communication\n    between the iROV internal website and its python code. At the time of writing this comment (5/22/2023)\n    the URL for the websocket server that the iROV python is expected to host is ws://localhost:8765/\n*/\nexport class WebSocketRelay {\n\n    socket: WebSocket\n    serverAddress: string\n    msgReceivedFn: (msg: Uint8Array) => void\n    isRunning: boolean\n    isConnected: boolean\n    connectionTimerId // type is \"a positive integer\"\n\n    /*\n        When instantiated, an arbitrary callback function is expected to handle incoming messages\n        from the iROV. The boolean flag isConnected is used to keep track of the connection status\n        and is set to false by default. isRunning is used to track whether or not the relay should actively\n        try to connect/reconnect (in the event of an error or the socket getting closed.) By default, this\n        is false and is set to true only when the user activates the relay using the start() method.\n    */\n    constructor() {\n        this.isConnected = false\n        this.isRunning = false\n        this.connectionTimerId = 0\n        this.serverAddress = \"\"\n    }\n\n    /*\n        This function MUST be invoked for the iROV to even start reaching out to connect.\n        After it is called, it will continue attempting to maintain connection unless stop()\n        is invoked.\n    */\n    start(serverAddress: string, msgReceivedFn: (msg: Uint8Array) => void) {\n        this.serverAddress = serverAddress\n        this.msgReceivedFn = msgReceivedFn;\n        this.isRunning = true\n        this.connect()\n    }\n\n    stop() {\n        this.isRunning = false\n        this.socket.close()\n    }\n\n    /*\n        Meant to be used internally. Connection and Reconnection both occur through instantiating a new\n        WebSocket and assigning callbacks. Arbitrary delays occur in the event of a di\n    */\n    connect() {\n        console.log(\"Attempting to connect to python websocket...\")\n        this.socket = new WebSocket(this.serverAddress);\n        this.socket.binaryType = \"blob\"\n        this.isConnected = true\n        this.socket.addEventListener('close', (event) => {\n            console.log('WebSocket connection closed with code: ', event.code);\n            this.isConnected = false\n            if (this.isRunning) this.queueConnect()\n        });\n\n        this.socket.addEventListener('error', (error) => {\n            console.error('WebSocket error:', error);\n            this.isConnected = false\n            if (this.isRunning) this.queueConnect()\n        });\n\n        this.socket.addEventListener(\"message\", (msgEvent: MessageEvent<Blob> | MessageEvent<string>) => {\n            if (typeof msgEvent.data === \"string\") this.msgReceivedFn(ENCODE_TXT(msgEvent.data))\n            else msgEvent.data.arrayBuffer().then((arrayBuffer) => {\n                this.msgReceivedFn(new Uint8Array(arrayBuffer))\n            })\n        })\n\n    }\n\n    /*\n        Helper function that sets a delay for the connect() function to be called\n        asynchronously. Used for trying to reconnect if the server is unresponsive\n    */\n    queueConnect() {\n        // console.log(\"queuing connect(), clearing ID=\", this.connectionTimerId)\n        clearTimeout(this.connectionTimerId) // Unqueue any current connection events.\n        this.connectionTimerId = setTimeout(this.connect.bind(this), 2000); // Attempt to reconnect after a delay\n        // console.log(\"finished queuing connect(), new ID=\", this.connectionTimerId)\n    }\n\n    getIsConnected() {\n        return this.isConnected\n    }\n\n    /*\n        Sends an arbitrary byte sequence through the WebSocket\n    */\n    sendMessage(message: Uint8Array) {\n        this.socket.send(message)\n    }\n\n\n}\n\nexport const iRovWebSocketRelay = new WebSocketRelay()\n","import { DECODE_TXT, ENCODE_TXT } from \"../../../shared/js/consts\";\nimport { type mavlink2RestFullMessage, type mavlink2RestMessageBody } from \"../../../shared/js/mavlink2RestMessages\";\nimport { WebSocketRelay } from \"./websocketRelay\";\n\n// Available Mavlink Messages\n// https://gist.github.com/patrickelectric/26a407c4e7749cdaa58d06b52212cb1e\n\nexport class mavlinkInterface {\n    mavlinkWebsocket: WebSocketRelay\n    onMessage: (msg: mavlink2RestFullMessage) => void;\n\n    constructor() {\n        this.mavlinkWebsocket = new WebSocketRelay()\n    }\n\n    start(wsUrl: string, onMessage: (msg: mavlink2RestFullMessage) => void) {\n        this.onMessage = onMessage\n        this.mavlinkWebsocket.start(wsUrl, (msgBytes: Uint8Array) => {\n            /*Callback to handle messages being received from the Mavlink2Rest server */\n            this.handleMessage(msgBytes)\n        })\n    }\n\n    handleMessage(msgBytes: Uint8Array) {\n        // Decode json object from bytes\n        if (msgBytes.length === 0) return;\n        const msgTxt = DECODE_TXT(msgBytes)\n        try {\n            const msgJson = JSON.parse(msgTxt) as mavlink2RestFullMessage\n            this.onMessage(msgJson)\n        } catch (e) {\n            console.error(\"Failed to parse recived mavlink2rest json: \" + msgTxt, e)\n        }\n\n    }\n\n    sendMessage(msg: mavlink2RestFullMessage) {\n        console.info(\"Sending Mavlink Message: \", msg)\n        this.mavlinkWebsocket.sendMessage(JSON.stringify(msg))\n    }\n\n}\n\nexport const irovMavlinkInterface = new mavlinkInterface()\n","import { arm, disarm, heartbeat, manualControl } from \"../../../shared/js/mavlink2RestMessages\";\nimport { rov_actions_proto } from \"../../../shared/js/protobufs/rovActionsProto\";\nimport { internalConnManager } from \"./internalConnManager\";\nimport { irovMavlinkInterface } from \"./mavlinkWebsocket\";\nimport { iRovWebSocketRelay } from \"./websocketRelay\";\n\n\nfunction handleInternalWebpageActions(senderId: string, msgProto: rov_actions_proto.RovAction) {\n    if (msgProto.SimplepeerSignal) {\n        internalConnManager.ingestSimplePeerSignallingMsg(senderId, msgProto.SimplepeerSignal.Message)\n        return true;\n    } else if (msgProto.Move) {\n        let x = msgProto.Move.VelocityX * 500\n        let y = msgProto.Move.VelocityY * 500\n        let z = msgProto.Move.VelocityZ * 500 + 500\n        let r = msgProto.Move.AngularVelocityYaw * 500\n        irovMavlinkInterface.sendMessage(manualControl(x, y, z, r))\n        return true;\n    } else if (msgProto.Disarm) {\n        irovMavlinkInterface.sendMessage(disarm(true))\n        return true;\n    } else if (msgProto.TakeControl) {\n        irovMavlinkInterface.sendMessage(arm(false))\n        return false;\n    } else if (msgProto.Ping) {\n        irovMavlinkInterface.sendMessage(heartbeat())\n        return false;\n    } else return false;\n}\n\n/*\n    Intended to handle messages coming FROM Livekit/The Internet\n    TODO We wish to send this data to the iROV python code\n*/\nexport function backendHandleWebrtcMsgRcvd(senderId: string, msgBytes: ArrayBufferLike) {\n    let data = new Uint8Array(msgBytes)\n    if (!data || data.length === 0) return;\n\n    // Decode the protobuf object from bytes\n    const msgProto = rov_actions_proto.RovAction.decode(data)\n    console.debug(\"Rcvd Msg: \", msgProto.toJSON());\n    if (handleInternalWebpageActions(senderId, msgProto)) return;\n\n    // Stuff the protobuff object with metadata\n    msgProto.BackendMetadata = msgProto.BackendMetadata || new rov_actions_proto.ActionBackendMetadata()\n    msgProto.BackendMetadata.FromUserId = senderId\n    const newMessage = rov_actions_proto.RovAction.encode(msgProto).finish()\n\n    // Send the re-packaged up message bytes to the iROV python via webSocketRelay\n    if (iRovWebSocketRelay.isConnected) iRovWebSocketRelay.sendMessage(newMessage)\n}\n","import '../../../shared/js/nodeShimsBundle'\nimport * as livekitServerSDKTypes from 'livekit-server-sdk';\nconst EgressClient = globalThis.livekitServerSDK.EgressClient as typeof livekitServerSDKTypes.EgressClient\nconst StreamProtocol = globalThis.livekitServerSDK.StreamProtocol as typeof livekitServerSDKTypes.StreamProtocol\n\nclass TwitchStream {\n    private _twitchStreamKey: string = null;\n    private _egressClient: livekitServerSDKTypes.EgressClient = null;\n    private roomName: string = null;\n    private streamEgressID: string = null;\n\n    init(twitchStreamKey: string, roomName: string, apiKey: string, secretKey: string) {\n        this._twitchStreamKey = twitchStreamKey;\n        this.roomName = roomName;\n        this._egressClient = new EgressClient('https://rov-web.livekit.cloud', apiKey, secretKey);\n    }\n\n    async startStream() {\n        if (!this._twitchStreamKey) return console.warn(\"startStream() err: Twitch stream key not set!\");\n        const output = {\n            protocol: StreamProtocol.RTMP,\n            urls: ['rtmp://live.twitch.tv/app/' + this._twitchStreamKey]\n        };\n        var info = await this._egressClient.startRoomCompositeEgress(this.roomName, output);\n        this.streamEgressID = info.egressId;\n    }\n\n    async stopStream() {\n        if (!this.streamEgressID) return console.warn(\"stopStream() err: Twitch Stream not started!\");\n        const info = await this._egressClient.stopEgress(this.streamEgressID);\n    }\n\n}\n\nexport const twitchStream = new TwitchStream();\n","import { LivekitPublisherConnection } from \"../../../shared/js/livekit/livekitConn\"\nimport { LIVEKIT_CLOUD_ENDPOINT, LIVEKIT_LOCAL_ENDPOINT, LIVEKIT_BACKEND_ROOM_CONNECTION_CONFIG, DECODE_TXT, ENCODE_TXT, PROXY_PREFIX, LIVEKIT_BACKEND_ROOM_CONFIG, ConnectionStates } from '../../../shared/js/consts';\nimport { asyncExpBackoff, changesSubscribe, getWebsocketURL, waitfor } from '../../../shared/js/util';\nimport { getPublisherAccessToken } from '../../../shared/js/livekit/livekitTokens';\nimport { backendHandleWebrtcMsgRcvd } from './msgHandler'\nimport { createLivekitRoom, listLivekitRooms, newLivekitAdminSDKRoomServiceClient, refreshMetadata } from '../../../shared/js/livekit/adminActions';\nimport { SimplePeerConnection } from \"../../../shared/js/simplePeer\"\nimport type { LivekitSetupOptions } from \"../../../shared/js/livekit/adminActions\";\nimport { rov_actions_proto } from \"../../../shared/js/protobufs/rovActionsProto\";\nimport { twitchStream } from \"./twitchStream\";\n\n/** InternalConnectionManager\n * consolidates all the internet-facing connections of the internal webpage into one place\n * messages from any connection are passed to the msgHandler\n * outgoing messages to each user are sent through whichever connection to that user which was most recently active.\n */\nclass InternalConnectionManager {\n    private _cloudLivekitConnection: LivekitPublisherConnection = new LivekitPublisherConnection();\n    // private _localLivekitConnection: LivekitPublisherConnection = new LivekitPublisherConnection();\n    private _simplePeerConnections: { [userId: string]: SimplePeerConnection } = {};\n    private _cameraMediaStream: MediaStream = null;\n\n    constructor() {\n        // Initlize (but don't start) the cloud livekit connection:\n        this._cloudLivekitConnection.init({\n            hostUrl: LIVEKIT_CLOUD_ENDPOINT,\n            publishVideo: true,\n            reconnectAttempts: 300,\n            roomConnectionConfig: LIVEKIT_BACKEND_ROOM_CONNECTION_CONFIG,\n            roomConfig: LIVEKIT_BACKEND_ROOM_CONFIG\n        })\n        changesSubscribe(this._cloudLivekitConnection.latestRecivedDataMessage, (msgObj) => {\n            if (!msgObj) return;\n            const { senderId, msg } = msgObj;\n            backendHandleWebrtcMsgRcvd(senderId, msg)\n        })\n        changesSubscribe(this._cloudLivekitConnection.connectionState, (state) => {\n            console.log(\"Cloud Conn State Changed: \" + state)\n            if (state == ConnectionStates.connected) {\n                twitchStream.startStream()\n            }\n        })\n        changesSubscribe(this._cloudLivekitConnection.participantConnectionEvents, (evt) => {\n            console.log(\"Cloud Conn Participant Event: \", evt)\n        })\n\n        // Initlize (but don't start) the local livekit connection:\n        // this._localLivekitConnection.init({\n        //     hostUrl: LIVEKIT_LOCAL_ENDPOINT,\n        //     publishVideo: true,\n        //     reconnectAttempts: 300,\n        //     roomConnectionConfig: LIVEKIT_BACKEND_ROOM_CONNECTION_CONFIG,\n        //     roomConfig: LIVEKIT_BACKEND_ROOM_CONFIG\n        // })\n\n        // changesSubscribe(this._localLivekitConnection.latestRecivedDataMessage, (msgObj) => {\n        //     if (!msgObj) return;\n        //     const { senderId, msg } = msgObj;\n        //     backendHandleWebrtcMsgRcvd(senderId, msg)\n        // })\n        // changesSubscribe(this._localLivekitConnection.connectionState, (state) => {\n        //     console.log(\"Local Conn State Changed: \" + state)\n        // })\n        // changesSubscribe(this._localLivekitConnection.participantConnectionEvents, (evt) => {\n        //     console.log(\"Local Conn Participant Event: \", evt)\n        // })\n    }\n\n    private async cameraReady(stream: MediaStream) {\n        this._cameraMediaStream = stream;\n        if (this._cloudLivekitConnection && this._cloudLivekitConnection.connectionState.get() == ConnectionStates.connected && this._cameraMediaStream) await this._cloudLivekitConnection._roomConn.localParticipant.setCameraEnabled(true)\n        // if (this._localLivekitConnection && this._localLivekitConnection.connectionState.get() == ConnectionStates.connected && this._cameraMediaStream) await this._localLivekitConnection._roomConn.localParticipant.setCameraEnabled(true)\n    }\n\n    public async start(livekitSetup: LivekitSetupOptions) {\n        if (livekitSetup.EnableLivekitCloud) await asyncExpBackoff(this._cloudLivekitConnection.startRoom, this._cloudLivekitConnection, 10, 1000, 1.3)(livekitSetup.RovName, livekitSetup.LivekitAPIKey, livekitSetup.LivekitSecretKey).catch((e) => { console.error(e); window.location.reload() });\n        // if (livekitSetup.EnableLivekitLocal) await asyncExpBackoff(this._localLivekitConnection.startRoom, this._localLivekitConnection, 10, 1000, 1.3)(livekitSetup.RovName, livekitSetup.LivekitAPIKey, livekitSetup.LivekitSecretKey).catch((e) => { console.error(e); window.location.reload() });\n        asyncExpBackoff(navigator.mediaDevices.getUserMedia, navigator.mediaDevices, 10, 1000, 1.3)({ video: true, audio: false }).then(this.cameraReady.bind(this)).catch((e) => { console.error(e); window.location.reload() });\n        console.info(\"Connection Manager Started\")\n    }\n\n    public async startSimplePeerConnection(userId: string, firstSignallingMessage?: string) {\n        if (this._simplePeerConnections[userId]) {\n            this._simplePeerConnections[userId].stop();\n            delete this._simplePeerConnections[userId];\n        }\n        const spConn = new SimplePeerConnection();\n        changesSubscribe(spConn.latestRecivedDataMessage, (msg) => {\n            backendHandleWebrtcMsgRcvd(userId, msg)\n        })\n        changesSubscribe(spConn.outgoingSignalingMessages, (msg) => {\n            this.sendMessage({ SimplepeerSignal: { Message: msg } }, true, [userId])\n        })\n        await spConn.start({\n            initiator: false,\n            trickle: false,\n            streams: [this._cameraMediaStream]\n        })\n\n        this._simplePeerConnections[userId] = spConn;\n        if (firstSignallingMessage) spConn.ingestSignalingMsg(firstSignallingMessage);\n    }\n\n    public async ingestSimplePeerSignallingMsg(userId: string, signallingMsg: string) {\n        const spConn = this._simplePeerConnections[userId]\n        if (spConn) {\n            if ([ConnectionStates.failed, ConnectionStates.disconnectedOk, ConnectionStates.init].includes(spConn.connectionState.get())) {\n                await this.startSimplePeerConnection(userId, signallingMsg);\n            } else spConn.ingestSignalingMsg(signallingMsg);\n        } else await this.startSimplePeerConnection(userId, signallingMsg);\n    }\n\n    public async _sendMessageViaLivekit(msg: Uint8Array, reliable: boolean, toUserIds: string[]) {\n        await this._cloudLivekitConnection.sendMessage(msg, reliable, toUserIds);\n        // await this._localLivekitConnection.sendMessage(msg, reliable, toUserIds);\n    }\n\n    public async sendMessage(msg: rov_actions_proto.IRovResponse, reliable: boolean, toUserIds: string[]) {\n        console.info(\"Sending Message to [\" + toUserIds.join(\", \") + \"]\", reliable ? \"reliably\" : \"unreliably\", \":\", msg);\n        msg.BackendMetadata = new rov_actions_proto.ResponseBackendMetadata({}); // Strip out backend metadata\n        const msgBytes = rov_actions_proto.RovResponse.encode(msg).finish();\n        // let sentToParticpants = [];\n        // if (!reliable) {\n        //     for (const userId of toUserIds) {\n        //         const spConn = this._simplePeerConnections[userId]\n        //         if (spConn && spConn.connectionState.get() == ConnectionStates.connected) {\n        //             await this._simplePeerConnections[userId].sendMessage(msgBytes);\n        //             sentToParticpants.push(userId);\n        //         }\n        //     }\n        //     if (sentToParticpants.length == toUserIds.length) return;\n        // }\n        const notSentPeers = toUserIds; //toUserIds.filter((userId) => !sentToParticpants.includes(userId));\n        await this._cloudLivekitConnection.sendMessage(msgBytes, reliable, notSentPeers);\n        // await this._localLivekitConnection.sendMessage(msgBytes, reliable, notSentPeers);\n    }\n\n}\n\n\nexport const internalConnManager = new InternalConnectionManager();\n","import { internalConnManager } from \"./internalConnManager\"\nimport { iRovWebSocketRelay } from \"./websocketRelay\";\nimport { rov_actions_proto } from \"../../../shared/js/protobufs/rovActionsProto\";\nimport type { LivekitSetupOptions } from \"../../../shared/js/livekit/adminActions\";\nimport { twitchStream } from \"./twitchStream\";\nimport { ENCODE_TXT, SECONDS_IN_DAY } from \"../../../shared/js/consts\";\nimport { getLongTermStarterAccessToken } from \"../../../shared/js/livekit/livekitTokens\";\nimport { irovMavlinkInterface } from \"./mavlinkWebsocket\";\n\n/// ------- DEBUGGING STUFF: -----------\nwindow[\"getLongTermStarterAccessToken\"] = getLongTermStarterAccessToken\n// DISABLE VITE HOT MOUDLE RELOADING:\nif (import.meta.hot) {\n    import.meta.hot.accept(() => import.meta.hot.invalidate())\n}\n//// ------------------------------------\n\n// Get Setup Options from URL Query Params\nconst urlParams = new URLSearchParams(location.search);\nconst livekitConfig: LivekitSetupOptions = {\n    RovName: urlParams.get(\"RovName\"),\n    RovControlPassword: urlParams.get(\"RovControlPassword\"),\n    LivekitAPIKey: urlParams.get(\"LivekitApiKey\"),\n    LivekitSecretKey: urlParams.get(\"LivekitSecretKey\"),\n    TwitchStreamKey: urlParams.get(\"TwitchStreamKey\") || \"None\", // Twitch Stream Key (For Streaming, duh)\n    EnableLivekitLocal: (urlParams.get(\"ForceLocal\") || \"false\").toLowerCase() === 'true',\n    EnableLivekitCloud: (urlParams.get(\"EnableCloud\") || \"true\").toLowerCase() === 'true',\n    PythonWebsocketPort: parseInt(urlParams.get(\"PythonWebsocketPort\")) || 0,\n    AuthTokenTimeout: parseInt(urlParams.get(\"AuthTokenTimeout\")) || SECONDS_IN_DAY,\n}\nfor (const key in livekitConfig) if (livekitConfig[key] == undefined) throw new Error(\"Missing required url query parameter: \" + key);\n\n// Start Livekit\ninternalConnManager.start(livekitConfig)\n\n// Initialize Twitch Stream\nif (livekitConfig.TwitchStreamKey !== \"None\") {\n    twitchStream.init(livekitConfig.TwitchStreamKey, livekitConfig.RovName, livekitConfig.LivekitAPIKey, livekitConfig.LivekitSecretKey)\n    window.addEventListener(\"beforeunload\", () => twitchStream.stopStream()) // Stop Twitch Stream when page is closed\n}\n\n// Start Backend/Python Websocket Communication\nif (livekitConfig.PythonWebsocketPort != 0) iRovWebSocketRelay.start(\"ws://localhost:\" + livekitConfig.PythonWebsocketPort, (msgBytes: Uint8Array) => {\n    /*Callback to handle messages being received from the iROV python*/\n\n\n    // Decode protobuf object from bytes\n    if (msgBytes.length === 0) return;\n    const msgProto = rov_actions_proto.RovResponse.decode(msgBytes)\n\n    // Extract metadata from protobuf object\n    if (!msgProto.BackendMetadata) return console.error(\"No BackendMetadata in message from iROV\", msgProto.toJSON(), msgBytes);\n    const targetUserIds = msgProto.BackendMetadata.TargetUserIds\n    const transportMethod = msgProto.BackendMetadata.TransportMethod\n    const isReliable = transportMethod == rov_actions_proto.DataTransportMethod.LivekitReliable\n\n    // Send message on using livekit:\n    internalConnManager.sendMessage(msgProto, isReliable, targetUserIds)\n});\n\n\n// Start Mavlink2Rest Websocket Communication\nirovMavlinkInterface.start(\"ws://blueos.attlocal.net:6040/ws/mavlink\", (msg) => {\n    /*Callback to handle messages being received from the arduPilot via */\n\n    if (!msg.header || !msg.message) return console.error(\"Mavlink message missing header or message body\", msg);\n    const msgBytes = ENCODE_TXT(JSON.stringify(msg))\n    const msgProto = rov_actions_proto.RovResponse.create({\n        Mavlink: {\n            Message: msgBytes,\n        }\n    })\n\n    // Send message on using livekit:\n    internalConnManager.sendMessage(msgProto, true, [])\n});\n"],"names":["addMessageHeader","msg","sequence","arm","force","disarm","heartbeat","manualControl","x","y","z","r","WebSocketRelay","__publicField","serverAddress","msgReceivedFn","event","error","msgEvent","ENCODE_TXT","arrayBuffer","message","iRovWebSocketRelay","mavlinkInterface","wsUrl","onMessage","msgBytes","msgTxt","DECODE_TXT","msgJson","e","irovMavlinkInterface","handleInternalWebpageActions","senderId","msgProto","internalConnManager","backendHandleWebrtcMsgRcvd","data","rov_actions_proto","newMessage","EgressClient","StreamProtocol","TwitchStream","twitchStreamKey","roomName","apiKey","secretKey","output","info","twitchStream","InternalConnectionManager","LivekitPublisherConnection","LIVEKIT_CLOUD_ENDPOINT","LIVEKIT_BACKEND_ROOM_CONNECTION_CONFIG","LIVEKIT_BACKEND_ROOM_CONFIG","changesSubscribe","msgObj","state","ConnectionStates","evt","stream","livekitSetup","asyncExpBackoff","userId","firstSignallingMessage","spConn","SimplePeerConnection","signallingMsg","reliable","toUserIds","notSentPeers","getLongTermStarterAccessToken","urlParams","livekitConfig","SECONDS_IN_DAY","key","targetUserIds","isReliable"],"mappings":"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"}