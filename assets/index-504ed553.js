var R=Object.defineProperty;var _=(o,e,n)=>e in o?R(o,e,{enumerable:!0,configurable:!0,writable:!0,value:n}):o[e]=n;var s=(o,e,n)=>(_(o,typeof e!="symbol"?e+"":e,n),n);import{L as u,d as L,e as v,c as k}from"./consts-71a591af.js";import{r,a as M,c,b as d,S as f,g as p,d as w,e as S,f as y}from"./simplePeer-3f2c601b.js";class P{constructor(){s(this,"socket");s(this,"msgReceivedFn");s(this,"isRunning");s(this,"isConnected");s(this,"connectionTimerId");this.isConnected=!1,this.isRunning=!1,this.connectionTimerId=0}start(e){this.msgReceivedFn=e,this.isRunning=!0,this.connect()}stop(){this.isRunning=!1,this.socket.close()}connect(){console.log("Attempting to connect to python websocket..."),this.socket=new WebSocket("ws://localhost:8765/"),this.isConnected=!0,this.socket.addEventListener("close",e=>{console.log("WebSocket connection closed with code: ",e.code),this.isConnected=!1,this.isRunning&&this.queueConnect()}),this.socket.addEventListener("error",e=>{console.error("WebSocket error:",e),this.isConnected=!1,this.isRunning&&this.queueConnect()}),this.socket.addEventListener("message",this.msgReceivedFn)}queueConnect(){clearTimeout(this.connectionTimerId),this.connectionTimerId=setTimeout(this.connect.bind(this),2e3)}getIsConnected(){return this.isConnected}sendMessage(e){this.socket.send(e)}}const h=new P;function A(o,e){e.SimplepeerSignal&&m.ingestSimplePeerSignallingMsg(o,e.SimplepeerSignal.Message)}function g(o,e){let n=new Uint8Array(e);if(!n||n.length===0)return;console.log("GOT DC DATA:",n);const t=r.RovAction.decode(n);t.BackendMetadata=t.BackendMetadata||new r.ActionBackendMetadata,t.BackendMetadata.FromUserID=o,A(o,t);const i=r.RovAction.encode(t).finish();h.isConnected&&h.sendMessage(i)}class I{constructor(){s(this,"_cloudLivekitConnection",new M);s(this,"_localLivekitConnection",new M);s(this,"_simplePeerConnections",{});s(this,"_cameraMediaStream",null);this._cloudLivekitConnection.init({hostUrl:u,publishVideo:!0,reconnectAttempts:300,roomConnectionConfig:L,roomConfig:v}),c(this._cloudLivekitConnection.latestRecivedDataMessage,e=>{if(!e)return;const{senderId:n,msg:t}=e;g(n,t)}),c(this._cloudLivekitConnection.connectionState,e=>{console.log("Cloud Conn State Changed: "+e)}),this._localLivekitConnection.init({hostUrl:k,publishVideo:!0,reconnectAttempts:300,roomConnectionConfig:L,roomConfig:v}),c(this._localLivekitConnection.latestRecivedDataMessage,e=>{if(!e)return;const{senderId:n,msg:t}=e;g(n,t)}),c(this._localLivekitConnection.connectionState,e=>{console.log("Local Conn State Changed: "+e)})}async start(e){e.EnableLivekitCloud&&await d(this._setupLivekitRoom,this)(u,e,this._cloudLivekitConnection),e.EnableLivekitLocal&&await d(this._setupLivekitRoom,this)(k,e,this._localLivekitConnection),this._cameraMediaStream=await d(navigator.mediaDevices.getUserMedia,navigator.mediaDevices)({video:!0,audio:!1}),console.log("ConnectionManager Started")}async startSimplePeerConnection(e,n){this._simplePeerConnections[e]&&(this._simplePeerConnections[e].stop(),delete this._simplePeerConnections[e]);const t=new f;c(t.latestRecivedDataMessage,i=>{g(e,i)}),c(t.outgoingSignalingMessages,i=>{this.sendMessage({SimplepeerSignal:{Message:i}},!0,[e])}),await t.start({initiator:!1,trickle:!1,streams:[this._cameraMediaStream]}),this._simplePeerConnections[e]=t,n&&t.ingestSignalingMsg(n)}async ingestSimplePeerSignallingMsg(e,n){const t=this._simplePeerConnections[e];t?t.ingestSignalingMsg(n):await this.startSimplePeerConnection(e,n)}async _sendMessageViaLivekit(e,n,t){await this._cloudLivekitConnection.sendMessage(e,n,t),await this._localLivekitConnection.sendMessage(e,n,t)}async sendMessage(e,n,t){const i=r.RovResponse.encode(e).finish();await this._cloudLivekitConnection.sendMessage(i,n,t),await this._localLivekitConnection.sendMessage(i,n,t);for(const l of t)this._simplePeerConnections[l]&&await this._simplePeerConnections[l].sendMessage(i)}async _setupLivekitRoom(e,n,t){const i=p(n.CloudAPIKey,n.CloudSecretKey,n.RovRoomName),l=w(e,n.CloudAPIKey,n.CloudSecretKey);await S(l,n.RovRoomName),await y(l,n),await t.start(n.RovRoomName,i)}}const m=new I,a=new URLSearchParams(location.search),C={RovRoomName:a.get("RovRoomName"),CloudAPIKey:a.get("CloudAPIKey"),CloudSecretKey:a.get("CloudSecretKey"),LocalAPIKey:a.get("LocalAPIKey")||"N/A",LocalSecretKey:a.get("LocalSecretKey")||"N/A",EnableLivekitLocal:(a.get("ForceLocal")||"false").toLowerCase()==="true",EnableLivekitCloud:(a.get("EnableCloud")||"true").toLowerCase()==="true"};for(const o in C)if(C[o]==null)throw new Error("Missing some required livekit setup url query params.");m.start(C);h.start(function(o){const e=r.RovResponse.decode(o.data),n=e.BackendMetadata.TargetUserIDs,i=e.BackendMetadata.TransportMethod==r.DataTransportMethod.LivekitReliable;m.sendMessage(e,i,n)});
//# sourceMappingURL=index-504ed553.js.map
