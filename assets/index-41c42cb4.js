var _=Object.defineProperty;var f=(o,e,n)=>e in o?_(o,e,{enumerable:!0,configurable:!0,writable:!0,value:n}):o[e]=n;var i=(o,e,n)=>(f(o,typeof e!="symbol"?e+"":e,n),n);import{L as M,d as k,e as v,c as p,C as l}from"./consts-bd1d0988.js";import{r,a as L,c as a,b as C,S as R}from"./simplePeer-cd4ba429.js";class S{constructor(){i(this,"socket");i(this,"serverAddress");i(this,"msgReceivedFn");i(this,"isRunning");i(this,"isConnected");i(this,"connectionTimerId");this.isConnected=!1,this.isRunning=!1,this.connectionTimerId=0,this.serverAddress="ws://localhost:8765/"}start(e){this.msgReceivedFn=e,this.isRunning=!0,this.connect()}stop(){this.isRunning=!1,this.socket.close()}connect(){console.log("Attempting to connect to python websocket..."),this.socket=new WebSocket(this.serverAddress),this.socket.binaryType="blob",this.isConnected=!0,this.socket.addEventListener("close",e=>{console.log("WebSocket connection closed with code: ",e.code),this.isConnected=!1,this.isRunning&&this.queueConnect()}),this.socket.addEventListener("error",e=>{console.error("WebSocket error:",e),this.isConnected=!1,this.isRunning&&this.queueConnect()}),this.socket.addEventListener("message",e=>{e.data.arrayBuffer().then(n=>{this.msgReceivedFn(new Uint8Array(n))})})}queueConnect(){clearTimeout(this.connectionTimerId),this.connectionTimerId=setTimeout(this.connect.bind(this),2e3)}getIsConnected(){return this.isConnected}sendMessage(e){this.socket.send(e)}}const g=new S;function b(o,e){return e.SimplepeerSignal?(m.ingestSimplePeerSignallingMsg(o,e.SimplepeerSignal.Message),!0):!1}function h(o,e){let n=new Uint8Array(e);if(!n||n.length===0)return;const t=r.RovAction.decode(n);if(b(o,t))return;t.BackendMetadata=t.BackendMetadata||new r.ActionBackendMetadata,t.BackendMetadata.FromUserId=o;const s=r.RovAction.encode(t).finish();g.isConnected&&g.sendMessage(s)}class w{constructor(){i(this,"_cloudLivekitConnection",new L);i(this,"_localLivekitConnection",new L);i(this,"_simplePeerConnections",{});i(this,"_cameraMediaStream",null);this._cloudLivekitConnection.init({hostUrl:M,publishVideo:!0,reconnectAttempts:300,roomConnectionConfig:k,roomConfig:v}),a(this._cloudLivekitConnection.latestRecivedDataMessage,e=>{if(!e)return;const{senderId:n,msg:t}=e;h(n,t)}),a(this._cloudLivekitConnection.connectionState,e=>{console.log("Cloud Conn State Changed: "+e)}),a(this._cloudLivekitConnection.participantConnectionEvents,e=>{console.log("Cloud Conn Participant Event: ",e)}),this._localLivekitConnection.init({hostUrl:p,publishVideo:!0,reconnectAttempts:300,roomConnectionConfig:k,roomConfig:v}),a(this._localLivekitConnection.latestRecivedDataMessage,e=>{if(!e)return;const{senderId:n,msg:t}=e;h(n,t)}),a(this._localLivekitConnection.connectionState,e=>{console.log("Local Conn State Changed: "+e)}),a(this._localLivekitConnection.participantConnectionEvents,e=>{console.log("Local Conn Participant Event: ",e)})}async cameraReady(e){this._cameraMediaStream=e,this._cloudLivekitConnection&&this._cloudLivekitConnection.connectionState.get()==l.connected&&this._cameraMediaStream&&await this._cloudLivekitConnection._roomConn.localParticipant.setCameraEnabled(!0),this._localLivekitConnection&&this._localLivekitConnection.connectionState.get()==l.connected&&this._cameraMediaStream&&await this._localLivekitConnection._roomConn.localParticipant.setCameraEnabled(!0)}async start(e){e.EnableLivekitCloud&&await C(this._cloudLivekitConnection.startRoom,this._cloudLivekitConnection)(e.RovRoomName,e.CloudAPIKey,e.CloudSecretKey),e.EnableLivekitLocal&&await C(this._localLivekitConnection.startRoom,this._localLivekitConnection)(e.RovRoomName,e.CloudAPIKey,e.CloudSecretKey),C(navigator.mediaDevices.getUserMedia,navigator.mediaDevices,30)({video:!0,audio:!1}).then(this.cameraReady.bind(this)),console.info("Connection Manager Started")}async startSimplePeerConnection(e,n){this._simplePeerConnections[e]&&(this._simplePeerConnections[e].stop(),delete this._simplePeerConnections[e]);const t=new R;a(t.latestRecivedDataMessage,s=>{h(e,s)}),a(t.outgoingSignalingMessages,s=>{this.sendMessage({SimplepeerSignal:{Message:s}},!0,[e])}),await t.start({initiator:!1,trickle:!1,streams:[this._cameraMediaStream]}),this._simplePeerConnections[e]=t,n&&t.ingestSignalingMsg(n)}async ingestSimplePeerSignallingMsg(e,n){const t=this._simplePeerConnections[e];t?[l.failed,l.disconnectedOk,l.init].includes(t.connectionState.get())?await this.startSimplePeerConnection(e,n):t.ingestSignalingMsg(n):await this.startSimplePeerConnection(e,n)}async _sendMessageViaLivekit(e,n,t){await this._cloudLivekitConnection.sendMessage(e,n,t),await this._localLivekitConnection.sendMessage(e,n,t)}async sendMessage(e,n,t){console.log("Sending WEBRTC Message to: ["+t.join(", ")+"] reliable: "+n,e);const s=r.RovResponse.encode(e).finish(),u=t;await this._cloudLivekitConnection.sendMessage(s,n,u),await this._localLivekitConnection.sendMessage(s,n,u)}}const m=new w,c=new URLSearchParams(location.search),d={RovRoomName:c.get("RovRoomName"),CloudAPIKey:c.get("CloudAPIKey"),CloudSecretKey:c.get("CloudSecretKey"),LocalAPIKey:c.get("LocalAPIKey")||"N/A",LocalSecretKey:c.get("LocalSecretKey")||"N/A",EnableLivekitLocal:(c.get("ForceLocal")||"false").toLowerCase()==="true",EnableLivekitCloud:(c.get("EnableCloud")||"true").toLowerCase()==="true",EnableBackendWebsocket:(c.get("EnableBackendWebsocket")||"true").toLowerCase()==="true"};for(const o in d)if(d[o]==null)throw new Error("Missing some required livekit setup url query params.");m.start(d);d.EnableBackendWebsocket&&g.start(o=>{if(o.length===0)return;const e=r.RovResponse.decode(o);if(!e.BackendMetadata)return console.error("No BackendMetadata in message from iROV",e.toJSON(),o);const n=e.BackendMetadata.TargetUserIds,s=e.BackendMetadata.TransportMethod==r.DataTransportMethod.LivekitReliable;m.sendMessage(e,s,n)});
//# sourceMappingURL=index-41c42cb4.js.map
