{"version":3,"file":"vehicleStats.c70bc62b.js","sources":["../../../../../../../node_modules/.pnpm/@skeletonlabs+skeleton@2.10.2_svelte@4.2.19/node_modules/@skeletonlabs/skeleton/dist/utilities/Toast/stores.js","../../../../../../src/js/toastMessageManager.ts","../../../../../../src/js/sensors.ts","../../../../../../src/js/shared/mavlink2RestMessages.ts","../../../../../../src/js/vehicleStats.ts"],"sourcesContent":["// Toast Store Queue\nimport { writable } from 'svelte/store';\nimport { getContext, setContext } from 'svelte';\nconst toastDefaults = { message: 'Missing Toast Message', autohide: true, timeout: 5000 };\nconst TOAST_STORE_KEY = 'toastStore';\n/**\n * Retrieves the `toastStore`.\n *\n * This can *ONLY* be called from the **top level** of components!\n *\n * @example\n * ```svelte\n * <script>\n * \timport { getToastStore } from \"@skeletonlabs/skeleton\";\n *\n * \tconst toastStore = getToastStore();\n *\n * \ttoastStore.open({ message: \"Welcome!\" });\n * </script>\n * ```\n */\nexport function getToastStore() {\n    const toastStore = getContext(TOAST_STORE_KEY);\n    if (!toastStore)\n        throw new Error('toastStore is not initialized. Please ensure that `initializeStores()` is invoked in the root layout file of this app!');\n    return toastStore;\n}\n/**\n * Initializes the `toastStore`.\n */\nexport function initializeToastStore() {\n    const toastStore = toastService();\n    return setContext(TOAST_STORE_KEY, toastStore);\n}\n// Note for security; differentiates the queued toasts\nfunction randomUUID() {\n    const random = Math.random();\n    return Number(random).toString(32);\n}\nfunction toastService() {\n    const { subscribe, set, update } = writable([]);\n    /** Remove toast in queue*/\n    const close = (id) => update((tStore) => {\n        if (tStore.length > 0) {\n            const index = tStore.findIndex((t) => t.id === id);\n            const selectedToast = tStore[index];\n            if (selectedToast) {\n                // Trigger Callback\n                if (selectedToast.callback)\n                    selectedToast.callback({ id, status: 'closed' });\n                // Clear timeout\n                if (selectedToast.timeoutId)\n                    clearTimeout(selectedToast.timeoutId);\n                // Remove\n                tStore.splice(index, 1);\n            }\n        }\n        return tStore;\n    });\n    // If toast should auto-hide, wait X time, then close by ID\n    function handleAutoHide(toast) {\n        if (toast.autohide === true) {\n            return setTimeout(() => {\n                close(toast.id);\n            }, toast.timeout);\n        }\n    }\n    return {\n        subscribe,\n        close,\n        /** Add a new toast to the queue. */\n        trigger: (toast) => {\n            const id = randomUUID();\n            update((tStore) => {\n                // Trigger Callback\n                if (toast && toast.callback)\n                    toast.callback({ id, status: 'queued' });\n                // activate autohide when dismiss button is hidden.\n                if (toast.hideDismiss)\n                    toast.autohide = true;\n                // Merge with defaults\n                const tMerged = { ...toastDefaults, ...toast, id };\n                // Handle auto-hide, if needed\n                tMerged.timeoutId = handleAutoHide(tMerged);\n                // Push into store\n                tStore.push(tMerged);\n                // Return\n                return tStore;\n            });\n            return id;\n        },\n        /** Remain visible on hover */\n        freeze: (index) => update((tStore) => {\n            if (tStore.length > 0)\n                clearTimeout(tStore[index].timeoutId);\n            return tStore;\n        }),\n        /** Cancel remain visible on leave */\n        unfreeze: (index) => update((tStore) => {\n            if (tStore.length > 0)\n                tStore[index].timeoutId = handleAutoHide(tStore[index]);\n            return tStore;\n        }),\n        /** Remove all toasts from queue */\n        clear: () => set([])\n    };\n}\n","import { getDrawerStore, getToastStore, type ToastStore } from \"@skeletonlabs/skeleton\";\nimport nStore, { type nStoreT } from \"./shared/libraries/nStore\";\nimport {  sidebarExpanded } from \"./globalContext\";\n\nexport enum ToastSeverity {\n    success = \"success\",\n    info = \"tertiary\",\n    warning = \"warning\",\n    error = \"error\",\n}\n\ntype toastHistoryInfo = {\n    msg: string;\n    toastId: string;\n    closed: boolean;\n    severity: ToastSeverity;\n    messageRepeatCount: number;\n};\n\n\nconst toastHistoryMap: Map<string, toastHistoryInfo> = new Map();\nexport const toastHistoryStore: nStoreT<toastHistoryInfo[]> = nStore([] as toastHistoryInfo[]);\n\n\nconst setToastHistory = (toast: toastHistoryInfo) => {\n    toastHistoryMap.set(toast.msg, toast);\n    toastHistoryStore.set(Array.from(toastHistoryMap.values()).reverse());\n}\n\nlet toastTool: ToastStore;\nexport const setupToasts = () => {\n    toastTool = getToastStore()\n    sidebarExpanded.subscribe((sb) => {\n        if (sb) {\n            toastHistoryMap.forEach((toast) => {\n                toast.closed = true;\n                toastTool.close(toast.toastId)\n            })\n        }\n    })\n}\n\nfunction randomUUID() {\n    const random = Math.random();\n    return Number(random).toString(32);\n}\n\nexport const showToastMessage = (msg: string, duration: number = 2000, ignoreDuplicates:boolean = true, severity:ToastSeverity = ToastSeverity.info, callback: (() => void) | null = null) => {\n    const existingToast = toastHistoryMap.get(msg);\n    const UUID = existingToast ? existingToast.toastId : randomUUID();\n    if (sidebarExpanded.get()) {\n       setToastHistory({\n            msg: msg,\n            severity: severity,\n            messageRepeatCount: existingToast ? existingToast.messageRepeatCount + 1 : 1,\n            toastId: UUID,\n            closed: true,\n        });\n        return UUID;\n    };\n    if (toastTool && (!existingToast || !ignoreDuplicates)) {\n        let toastId = toastTool.trigger({\n            classes: `variant-filled-${severity} w-72`,\n            message: msg,\n            timeout:duration,\n            callback: ({ id, status }) => {\n                if (status == \"closed\") {\n                    const existingToast = toastHistoryMap.get(msg)\n                    if (existingToast) setToastHistory({\n                        ...existingToast,\n                        closed: true,\n                    });\n                    if (callback) callback()\n                }\n            },\n            hoverable: true,\n            autohide: true,\n        })\n        toastHistoryMap.set(msg, {\n            msg: msg,\n            toastId: toastId,\n            closed: false,\n            severity: severity,\n            messageRepeatCount: 1,\n        });\n        return toastId;\n\n    } else {\n        if (existingToast.closed) toastHistoryMap.delete(msg);\n        setToastHistory({\n            ...existingToast,\n            messageRepeatCount: existingToast.messageRepeatCount + 1,\n        });\n    }\n}\n","import { SEA_LEVEL_PRESSURE } from \"./shared/consts\";\nimport { default as nStore, type nStoreT } from \"./shared/libraries/nStore\";\nimport { rov_actions_proto } from \"./shared/protobufs/rovActionsProto\";\n\nexport const networkLatencyMs: nStoreT<number> = nStore(Infinity);\nexport const depthM: nStoreT<number> = nStore(Infinity);\nexport const waterTempC: nStoreT<number> = nStore(Infinity);\nexport const internalTempC: nStoreT<number> = nStore(Infinity);\nexport const piCPUTempC: nStoreT<number> = nStore(Infinity);\nexport const pressureMbar: nStoreT<number> = nStore(Infinity);\nexport const rovHeading: nStoreT<number> = nStore(0);\nexport const rovPitch: nStoreT<number> = nStore(0);\nexport const rovRoll: nStoreT<number> = nStore(0);\n\n\n\nexport function updateSensorValues(sensorUpdates: rov_actions_proto.ISensorUpdatesResponse) {\n    for (let update of sensorUpdates.MeasurementUpdates) {\n        if (update.MeasurementType == rov_actions_proto.SensorMeasurmentTypes.pressure_mbar) {\n            pressureMbar.set(update.Value)\n            depthM.set((update.Value - SEA_LEVEL_PRESSURE) * 0.009962143853); // milibar to meters of sea water depth\n        } else if (update.MeasurementType == rov_actions_proto.SensorMeasurmentTypes.water_temp_celsius) {\n            waterTempC.set(update.Value)\n        } else if (update.MeasurementType == rov_actions_proto.SensorMeasurmentTypes.internal_temp_celsius) {\n            internalTempC.set(update.Value)\n        } else if (update.MeasurementType == rov_actions_proto.SensorMeasurmentTypes.yaw_degrees) {\n            rovHeading.set(update.Value)\n        } else if (update.MeasurementType == rov_actions_proto.SensorMeasurmentTypes.pitch_degrees) {\n            rovPitch.set(update.Value)\n        } else if (update.MeasurementType == rov_actions_proto.SensorMeasurmentTypes.roll_degrees) {\n            rovRoll.set(update.Value)\n        }\n    }\n}\n\n// export function updateSensorValues(sensorUpdates: any) {\n\n// }\n","// Available Mavlink Messages\n// https://gist.github.com/patrickelectric/26a407c4e7749cdaa58d06b52212cb1e\nimport type { Package, Message } from \"./mavlink2rest-ts/messages/mavlink2rest\";\nimport type { Message as MavMessages } from \"./mavlink2rest-ts/messages/mavlink2rest-message\";\nimport { MavState, MavMode, MavModeFlag, MavType, MavAutopilot, MAVLinkType } from \"./mavlink2rest-ts/messages/mavlink2rest-enum\";\n\n// export enum MAV_MODE_FLAG {\n//     MAV_MODE_FLAG_CUSTOM_MODE_ENABLED = 1,   // 0b00000001 Reserved for future use.\n//     MAV_MODE_FLAG_TEST_ENABLED = 2,          // 0b00000010 system has a test mode enabled. This flag is intended for temporary system tests and should not be used for stable implementations.\n//     MAV_MODE_FLAG_AUTO_ENABLED = 4,          // 0b00000100 autonomous mode enabled, system finds its own goal positions. Guided flag can be set or not, depends on the actual implementation.\n//     MAV_MODE_FLAG_GUIDED_ENABLED = 8,        // 0b00001000 guided mode enabled, system flies waypoints / mission items.\n//     MAV_MODE_FLAG_STABILIZE_ENABLED = 16,    // 0b00010000 system stabilizes electronically its attitude (and optionally position). It needs however further control inputs to move around.\n//     MAV_MODE_FLAG_HIL_ENABLED = 32,          // 0b00100000 hardware in the loop simulation. All motors / actuators are blocked, but internal software is full operational.\n//     MAV_MODE_FLAG_MANUAL_INPUT_ENABLED = 64, // 0b01000000 remote control input is enabled.\n//     MAV_MODE_FLAG_SAFETY_ARMED = 128,        // 0b10000000 MAV safety set to armed. Motors are enabled / running / can start. Ready to fly. Additional note: this flag is to be ignore when sent in the command MAV_CMD_DO_SET_MODE and MAV_CMD_COMPONENT_ARM_DISARM shall be used instead. The flag can still be used to report the armed state.\n//     MAV_MODE_FLAG_ENUM_END = 129,             //\n// }\n\n// Binary for bitmasks\nexport const b00000001 = 1 | 0; // 0b00000001\nexport const b00000010 = 2 | 0; // 0b00000010\nexport const b00000100 = 4 | 0; // 0b00000100\nexport const b00001000 = 8 | 0; // 0b00001000\nexport const b00010000 = 16 | 0; // 0b00010000\nexport const b00100000 = 32 | 0; // 0b00100000\nexport const b01000000 = 64 | 0; // 0b01000000\nexport const b10000000 = 128 | 0; // 0b10000000\n\n\n// export const MAV_MODE_FLAG_SAFETY_ARMED = b10000000;\n// export const MAV_MODE_FLAG_MANUAL_INPUT_ENABLED = b01000000;\n// export const MAV_MODE_FLAG_HIL_ENABLED = b00100000;\n// export const MAV_MODE_FLAG_STABILIZE_ENABLED = b00010000;\n// export const MAV_MODE_FLAG_GUIDED_ENABLED = b00001000;\n// export const MAV_MODE_FLAG_AUTO_ENABLED = b00000100;\n// export const MAV_MODE_FLAG_TEST_ENABLED = b00000010;\n// export const MAV_MODE_FLAG_CUSTOM_MODE_ENABLED = b00000001;\n\n\nexport enum FlightMode {\n    unknown = -1,\n    manual = 19,\n    stabilize = 0,\n    acrobatic = 1,\n    depth_hold = 2,\n    surface = 9,\n    // stabilize =  param1:1, param2:0\n    // acro = param1:1, param2:1\n    // alt_hold = param1:1, param2:2\n    // auto = param1:1, param2:3\n    // guided = param1:1, param2:4\n    // surface = param1:1, param2:9\n    // manual = param1:1, param2:19\n    // poshold (unsupported) =  param1:1, param2:16\n    // circle (unsupported) =  param1:1, param2:7\n}\n\nexport const FlightmodeNameMap = {\n    [FlightMode.manual]: \"Manual\",\n    [FlightMode.stabilize]: \"Stabilize\",\n    [FlightMode.acrobatic]: \"Acrobatic\",\n    [FlightMode.depth_hold]: \"Depth Hold\",\n    [FlightMode.surface]: \"Surface\",\n    [FlightMode.unknown]: \"Unknown\",\n}\n\nexport const MavStateNameMap = {\n    [MavState.MAV_STATE_UNINIT]: \"Uninitialized\",\n    [MavState.MAV_STATE_BOOT]: \"Booting\",\n    [MavState.MAV_STATE_CALIBRATING]: \"Calibrating\",\n    [MavState.MAV_STATE_STANDBY]: \"Standby\",\n    [MavState.MAV_STATE_ACTIVE]: \"Active\",\n    [MavState.MAV_STATE_CRITICAL]: \"Critical Failsafe\",\n    [MavState.MAV_STATE_EMERGENCY]: \"Emergency\",\n    [MavState.MAV_STATE_POWEROFF]: \"Powering Off\",\n    [MavState.MAV_STATE_FLIGHT_TERMINATION]: \"Flight Termination\",\n}\n\n// export interface mavlink2RestMessageBody {\n//     type: string\n//     target_system?: number\n//     target_component?: number\n//     [x: string]: unknown; // any other fields\n// }\n\n// export interface mavlink2RestFullMessage {\n//     header: {\n//         system_id: number,\n//         component_id: number,\n//         sequence: number,\n//     },\n//     message: mavlink2RestMessageBody\n// }\n\n// export interface mavlinkLongMessage extends mavlink2RestMessageBody {\n//     type: \"COMMAND_LONG\"\n//     command: {\n//         type: string\n//     },\n//     target_system: number,\n//     target_component: number,\n//     confirmation: 1 | 0,\n//     param1: number,\n//     param2: number,\n//     param3: number,\n//     param4: number,\n//     param5: number,\n//     param6: number,\n//     param7: number,\n// }\n\n\n// export interface ARDUSUB_HEARTBEAT extends mavlink2RestMessageBody {\n//     \"autopilot\": {\n//         \"type\": \"MAV_AUTOPILOT_ARDUPILOTMEGA\" | \"MAV_AUTOPILOT_INVALID\" | string\n//     },\n//     \"base_mode\": {\n//         \"bits\": 81 | number\n//     },\n//     \"custom_mode\": 19 | number, // This is the flight mode\n//     \"mavlink_version\": 3 | number,\n//     \"mavtype\": {\n//         \"type\": \"MAV_TYPE_SUBMARINE\"\n//     },\n//     \"system_status\": {\n//         \"type\": \"MAV_STATE_STANDBY\" | \"MAV_STATE_CRITICAL\" | \"MAV_STATE_ACTIVE\" | string // https://mavlink.io/en/messages/common.html#MAV_STATE\n//     },\n//     \"type\": \"HEARTBEAT\"\n// }\n\n\n// export interface SYS_STATUS extends mavlink2RestMessageBody {\n//     \"battery_remaining\": -1 | number, // -1 = Battery remaining unknown\n//     \"current_battery\": 50 | number, // 0.5 Amps\n//     \"voltage_battery\": 16057 | number, // 16.057 Volts\n//     \"drop_rate_comm\": 0 | number,\n//     \"errors_comm\": 0 | number,\n//     \"errors_count1\": 0 | number,\n//     \"errors_count2\": 0 | number,\n//     \"errors_count3\": 0 | number,\n//     \"errors_count4\": 0 | number,\n//     \"load\": 399 | number,\n//     \"onboard_control_sensors_enabled\": {\n//         \"bits\": 35691567 | number\n//     },\n//     \"onboard_control_sensors_health\": {\n//         \"bits\": 53517327 | number\n//     },\n//     \"onboard_control_sensors_present\": {\n//         \"bits\": 52493359 | number\n//     },\n//     \"type\": \"SYS_STATUS\"\n// }\n\n// export interface COMMAND_ACK extends mavlink2RestMessageBody {\n//     \"command\": {\n//         \"type\": \"MAV_CMD_DO_SET_MODE\" | string, // the original command\n//     },\n//     \"progress\": 0 | number,\n//     \"result\": {\n//         \"type\": \"MAV_RESULT_UNSUPPORTED\" | \"MAV_RESULT_ACCEPTED\" | string\n//     },\n//     \"result_param2\": 0 | number,\n//     \"target_component\": 0 | number,\n//     \"target_system\": 0 | number,\n//     \"type\": \"COMMAND_ACK\"\n// }\n\n// export interface STATUSTEXT extends mavlink2RestMessageBody {\n//     \"chunk_seq\": 0 | number,\n//     \"id\": 0 | number,\n//     \"severity\": {\n//         \"type\": \"MAV_SEVERITY_WARNING\" | string\n//     },\n//     \"text\": string[],\n//     \"type\": \"STATUSTEXT\"\n// }\n\n// export interface ATTITUDE extends mavlink2RestMessageBody {\n//     \"pitch\": number, // 0.3690577447414398 rad?\n//     \"pitchspeed\": number,\n//     \"roll\": number,\n//     \"rollspeed\": number,\n//     \"yaw\": number,\n//     \"yawspeed\": number // 0.003902553580701351 ? rad/s\n//     \"time_boot_ms\": number,\n//     \"type\": \"ATTITUDE\"\n// }\n\nexport const addMessageHeader = (msg: Message, sequence: number = 0): Package => {\n    return {\n        header: {\n            system_id: 255,\n            component_id: 240,\n            sequence: sequence,\n        },\n        message: msg\n    }\n}\n\nexport const arm = (force: boolean) => {\n    return addMessageHeader({\n        type: \"COMMAND_LONG\",\n        command: { type: \"MAV_CMD_COMPONENT_ARM_DISARM\" },\n        target_system: 1,\n        target_component: 1,\n        confirmation: 0,\n        param1: 1,\n        param2: 0,// force ? 21196 : 0,\n        \"param3\": 0,\n        \"param4\": 0,\n        \"param5\": 0,\n        \"param6\": 0,\n        \"param7\": 0,\n    } as MavMessages.CommandLong)\n}\n\nexport const disarm = (force: boolean) => {\n    return addMessageHeader({\n        type: \"COMMAND_LONG\",\n        command: { type: \"MAV_CMD_COMPONENT_ARM_DISARM\" },\n        target_system: 1,\n        target_component: 1,\n        confirmation: 1,\n        param1: 0,\n        param2: 0,//force ? 21196 : 0,\n        \"param3\": 0,\n        \"param4\": 0,\n        \"param5\": 0,\n        \"param6\": 0,\n        \"param7\": 0,\n    } as MavMessages.CommandLong)\n}\n\nexport const requestMessage = (messageID: number) => {\n    return addMessageHeader({\n        type: \"COMMAND_LONG\",\n        command: { type: \"MAV_CMD_REQUEST_MESSAGE\" },\n        target_system: 1,\n        target_component: 1,\n        confirmation: 1,\n        param1: 0,\n        param2: 0,//force ? 21196 : 0,\n        \"param3\": 0,\n        \"param4\": 0,\n        \"param5\": 0,\n        \"param6\": 0,\n        \"param7\": 0,\n    } as MavMessages.CommandLong)\n}\n\n/**\n *\n * @param messageID\n * @param interval (Stream interval in microseconds)\n * @returns\n */\nexport const setMessageInterval = (messageID: number = 1.0, interval: number = 333333.34375) => {\n    return addMessageHeader({\n        type: \"COMMAND_LONG\",\n        command: { type: \"MAV_CMD_SET_MESSAGE_INTERVAL\" },\n        target_system: 1,\n        target_component: 1,\n        confirmation: 1,\n        param1: messageID,\n        param2: interval,\n        \"param3\": 0,\n        \"param4\": 0,\n        \"param5\": 0,\n        \"param6\": 0,\n        \"param7\": 0,\n    } as MavMessages.CommandLong)\n}\n\n\nexport const setMode = (mode?: FlightMode | null) => {\n    mode = mode || FlightMode.manual;\n    return addMessageHeader({\n        type: \"COMMAND_LONG\",\n        command: { type: \"MAV_CMD_DO_SET_MODE\" },\n        param1: 1,\n        param2: Number(mode),\n        \"param3\": 0,\n        \"param4\": 0,\n        \"param5\": 0,\n        \"param6\": 0,\n        \"param7\": 0,\n        target_system: 1,\n        target_component: 1,\n        confirmation: 1,\n    } as MavMessages.CommandLong)\n}\n\nexport const heartbeat = () => {\n    return addMessageHeader({\n        type: MAVLinkType.HEARTBEAT,\n        custom_mode: 0,\n        mavtype: { type: MavType.MAV_TYPE_GCS },\n        autopilot: { type: MavAutopilot.MAV_AUTOPILOT_INVALID },\n        base_mode: { bits: MavModeFlag.MAV_MODE_FLAG_SAFETY_ARMED | MavModeFlag.MAV_MODE_FLAG_MANUAL_INPUT_ENABLED }, // comes out to 192\n        system_status: { type: MavState.MAV_STATE_ACTIVE },\n        mavlink_version: 1,\n        confirmation: 0,\n    } as MavMessages.Heartbeat)\n}\n\nexport const manualControl = (x: number, y: number, z: number, r: number, buttonBitmask: number) => {\n    return addMessageHeader({\n        type: \"MANUAL_CONTROL\",\n        x: Math.floor(x), // X is forward in the ROV\n        y: Math.floor(y), // Y is left/right in the ROV\n        z: Math.floor(z), // Z is up/down in the ROV\n        r: Math.floor(r), // R is yaw in the ROV\n        buttons: buttonBitmask,\n        target: 1,\n    } as MavMessages.ManualControl)\n}\n\n\nexport const STATUSTEXT = {\n    \"message\": {\n        \"chunk_seq\": 0,\n        \"id\": 0,\n        \"severity\": {\n            \"type\": \"MAV_SEVERITY_WARNING\"\n        },\n        \"text\": [\n            \"M\",\n            \"Y\",\n            \"G\",\n            \"C\",\n            \"S\",\n            \":\",\n            \" \",\n            \"2\",\n            \"5\",\n            \"5\",\n            \",\",\n            \" \",\n            \"h\",\n            \"e\",\n            \"a\",\n            \"r\",\n            \"t\",\n            \"b\",\n            \"e\",\n            \"a\",\n            \"t\",\n            \" \",\n            \"l\",\n            \"o\",\n            \"s\",\n            \"t\",\n            \"\\u0000\",\n            \"\\u0000\",\n            \"\\u0000\",\n            \"\\u0000\",\n            \"\\u0000\",\n            \"\\u0000\",\n            \"\\u0000\",\n            \"\\u0000\",\n            \"\\u0000\",\n            \"\\u0000\",\n            \"\\u0000\",\n            \"\\u0000\",\n            \"\\u0000\",\n            \"\\u0000\",\n            \"\\u0000\",\n            \"\\u0000\",\n            \"\\u0000\",\n            \"\\u0000\",\n            \"\\u0000\",\n            \"\\u0000\",\n            \"\\u0000\",\n            \"\\u0000\",\n            \"\\u0000\",\n            \"\\u0000\"\n        ],\n        \"type\": \"STATUSTEXT\"\n    },\n    \"status\": {\n        \"time\": {\n            \"counter\": 168,\n            \"first_update\": \"2023-11-16T22:59:33.963356924+00:00\",\n            \"frequency\": 0.034292712807655334,\n            \"last_update\": \"2023-11-17T00:21:13.323946735+00:00\"\n        }\n    }\n}\n\n\nconst aafusk_from_ardupilot_compoentID194 = {\n    \"message\": {\n        \"command\": {\n            \"type\": \"MAV_CMD_REQUEST_MESSAGE\"\n        },\n        \"confirmation\": 0,\n        \"param1\": 148.0,\n        \"param2\": 0.0,\n        \"param3\": 0.0,\n        \"param4\": 0.0,\n        \"param5\": 0.0,\n        \"param6\": 0.0,\n        \"param7\": 0.0,\n        \"target_component\": 1,\n        \"target_system\": 1,\n        \"type\": \"COMMAND_LONG\"\n    },\n    \"status\": {\n        \"time\": {\n            \"counter\": 1,\n            \"first_update\": \"2023-11-16T22:59:44.338751693+00:00\",\n            \"frequency\": 0.0,\n            \"last_update\": \"2023-11-16T22:59:44.338915544+00:00\"\n        }\n    }\n}\n\n\nconst aafusk_from_GCS_compoentnID0 = {\n    \"message\": {\n        \"command\": {\n            \"type\": \"MAV_CMD_SET_MESSAGE_INTERVAL\"\n        },\n        \"confirmation\": 0,\n        \"param1\": 1.0,\n        \"param2\": 333333.34375,\n        \"param3\": 0.0,\n        \"param4\": 0.0,\n        \"param5\": 0.0,\n        \"param6\": 0.0,\n        \"param7\": 0.0,\n        \"target_component\": 0,\n        \"target_system\": 1,\n        \"type\": \"COMMAND_LONG\"\n    },\n    \"status\": {\n        \"time\": {\n            \"counter\": 2,\n            \"first_update\": \"2023-11-16T22:59:43.657246242+00:00\",\n            \"frequency\": null,\n            \"last_update\": \"2023-11-16T22:59:43.657618735+00:00\"\n        }\n    }\n}\n\nconst awhuuuuu = {\n    \"message\": {\n        \"command\": {\n            \"type\": \"MAV_CMD_REQUEST_MESSAGE\"\n        },\n        \"confirmation\": 0,\n        \"param1\": 148.0,\n        \"param2\": 0.0,\n        \"param3\": 0.0,\n        \"param4\": 0.0,\n        \"param5\": 0.0,\n        \"param6\": 0.0,\n        \"param7\": 0.0,\n        \"target_component\": 1,\n        \"target_system\": 1,\n        \"type\": \"COMMAND_LONG\"\n    },\n    \"status\": {\n        \"time\": {\n            \"counter\": 6,\n            \"first_update\": \"2023-12-10T18:03:36.747230107+00:00\",\n            \"frequency\": 0.2068965584039688,\n            \"last_update\": \"2023-12-10T18:04:06.183663703+00:00\"\n        }\n    }\n}\n","import nStore from \"./shared/libraries/nStore\";\nimport { FlightMode, FlightmodeNameMap } from \"./shared/mavlink2RestMessages\";\nimport { MavState } from \"./shared/mavlink2rest-ts/messages/mavlink2rest-enum\";\nimport { ToastSeverity, showToastMessage } from \"./toastMessageManager\";\n\nexport const networkLatencyMs = nStore<number>(Infinity);\nexport const batteryPercent = nStore<number>(Infinity);\nexport const batteryVoltage = nStore<number>(Infinity);\nexport const batteryCurrent = nStore<number>(Infinity);\n\nexport const autopilotLoad = nStore<number>(Infinity);\nexport const autopilotErrorCount = nStore<number>(0);\nexport const autopilotMode = nStore<FlightMode>(FlightMode.unknown);\nexport const autopilotMavState = nStore<MavState>(MavState.MAV_STATE_UNINIT);\nexport const autopilotArmed = nStore<boolean>(false);\n\nexport const cpuTempC = nStore<number>(Infinity);\nexport const cpuUsagePercent = nStore<number>(Infinity);\nexport const memUsagePercent = nStore<number>(Infinity);\nexport const diskUsagePercent = nStore<number>(Infinity);\n\nexport function updateSystemMonitorDisplay(cpuTemp: number, cpuUsage: number, MemUsage: number, DiskUsage: number, warnings: string[]) {\n    cpuTempC.set(cpuTemp);\n    cpuUsagePercent.set(cpuUsage);\n    memUsagePercent.set(MemUsage);\n    diskUsagePercent.set(DiskUsage);\n    warnings.forEach((warning) => {\n        logWarn(\"System Monitor Warning: \" + warning)\n        showToastMessage(warning, 5000, true, ToastSeverity.warning)\n    });\n}\n\nexport function updateBatteryDisplay(percent: number, voltage: number, current: number) {\n    batteryPercent.set(percent);\n    batteryVoltage.set(voltage);\n    batteryCurrent.set(current);\n}\n\nexport function updateLatencyDisplay(latencyMs: number) {\n    networkLatencyMs.set(latencyMs);\n}\n\nexport function updateAutopilotFlightModeDisplay(mode: FlightMode) {\n    if (mode in FlightmodeNameMap) {\n        autopilotMode.set(mode);\n    } else {\n        showToastMessage(\"ROV is in unknown flight mode: \" + String(mode), 4000, true, ToastSeverity.warning);\n        autopilotMode.set(FlightMode.unknown)\n    }\n}\n\nexport function updateAutopilotStatusDisplay(status: MavState) {\n    autopilotMavState.set(status);\n}\n\nexport function updateAutopilotLoadDisplay(load: number) {\n    autopilotLoad.set(load);\n}\n\nexport function updateAutopilotErrorCountDisplay(errorCount: number) {\n    autopilotErrorCount.set(errorCount);\n}\n"],"names":["sidebarExpanded","rov_actions_proto","SEA_LEVEL_PRESSURE","MavState","getContext","setContext","toastDefaults","TOAST_STORE_KEY","getToastStore","toastStore","initializeToastStore","toastService","randomUUID","random","subscribe","set","update","writable","close","id","tStore","index","t","selectedToast","handleAutoHide","toast","tMerged","ToastSeverity","toastHistoryMap","Map","toastHistoryStore","nStore","setToastHistory","msg","Array","from","values","reverse","toastTool","setupToasts","sb","forEach","closed","toastId","Math","Number","toString","showToastMessage","duration","ignoreDuplicates","severity","callback","existingToast","get","UUID","messageRepeatCount","trigger","classes","message","timeout","status","hoverable","autohide","delete","networkLatencyMs","Infinity","depthM","waterTempC","internalTempC","pressureMbar","rovHeading","rovPitch","rovRoll","updateSensorValues","sensorUpdates","MeasurementUpdates","MeasurementType","SensorMeasurmentTypes","pressure_mbar","Value","water_temp_celsius","internal_temp_celsius","yaw_degrees","pitch_degrees","roll_degrees","FlightMode","FlightmodeNameMap","MavStateNameMap","MAV_STATE_UNINIT","MAV_STATE_BOOT","MAV_STATE_CALIBRATING","MAV_STATE_STANDBY","MAV_STATE_ACTIVE","MAV_STATE_CRITICAL","MAV_STATE_EMERGENCY","MAV_STATE_POWEROFF","MAV_STATE_FLIGHT_TERMINATION","batteryPercent","batteryVoltage","batteryCurrent","autopilotLoad","autopilotErrorCount","autopilotMode","unknown","autopilotMavState","autopilotArmed","cpuTempC","cpuUsagePercent","memUsagePercent","diskUsagePercent","updateSystemMonitorDisplay","cpuTemp","cpuUsage","MemUsage","DiskUsage","warnings","warning","logWarn","updateBatteryDisplay","percent","voltage","current","updateAutopilotFlightModeDisplay","mode","String","updateAutopilotStatusDisplay","updateAutopilotLoadDisplay","load","updateAutopilotErrorCountDisplay","errorCount"],"mappings":"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","x_google_ignoreList":[0]}