{"mappings":"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","sources":["src/js/libraries/UNUSED/old-gamepad-lib.js"],"sourcesContent":["// Note: this file was written by me (Kyle), and is not a library found on the web.\n// We are not using this lib, but it is helpful.\n\nvar DEFAULT_GAMEPAD_HELP_MSG = \"Press any button on your controller or onscreen.\"\nvar GAME_CONTROLLER_BUTTONS = [\n    { btnName: \"button_1\", btnFunction: \"Todo: Lights On/Off\" },\n    { btnName: \"button_2\", btnFunction: \"Todo: Start/Stop Recording\" },\n    { btnName: \"button_3\", btnFunction: \"Todo: Take Phtoto\" },\n    { btnName: \"button_4\", btnFunction: \"Todo: Something\" },\n    { btnName: \"shoulder_btn_front_left\", btnFunction: \"TODO: Something\" },\n    { btnName: \"shoulder_btn_front_right\", btnFunction: \"TODO: Something\" },\n    { btnName: \"shoulder_trigger_back_left\", btnFunction: \"TODO: Open Claw\" },\n    { btnName: \"shoulder_trigger_back_right\", btnFunction: \"TODO: Close Claw\" },\n    { btnName: \"select\", btnFunction: \"\" },\n    { btnName: \"start\", btnFunction: \"\" },\n    { btnName: \"stick_button_left\", btnFunction: \"Lock Vertical Thruster\" },\n    { btnName: \"stick_button_right\", btnFunction: \"Lock Horizontal\" },\n    { btnName: \"d_pad_up\", btnFunction: \"Increase Camera Brightness\" },\n    { btnName: \"d_pad_down\", btnFunction: \"Decreases Camera Brightness\" },\n    { btnName: \"d_pad_left\", btnFunction: \"Decrease Bitrate (reduces latency & quality)\" },\n    { btnName: \"d_pad_right\", btnFunction: \"Increase Bitrate (increases quality & latency)\" },\n    { btnName: \"vendor\", btnFunction: \"Show this help\" },\n];\n\n\n/**\n * Call this function to start watching for a gamepad to connect and get updates when button or axis state changes.\n * @param {Object} interfaceConfig - an object like the following:\n * {\n *  handleGamepadConnected: function (connectionEvent) {} - will get passed the event object returned by the \"gamepadconnected\" browser event.\n *  handleGamepadDisconnected: function (connectionEvent) {} - will get passed the event object returned by the \"gamepaddisconnected\" browser event.\n *  handleGamepadStateChange: function (gamepadState,gamepadChangesMask) {} - will get passed:\n        gamepadState: the current state of gamepad 0 as returned by navigator.getGamepads(),\n        gamepadChangesMask: An object with the following fields:\n        {\n            axesDidChange: True if any axis changed in the last gamepad update loop,\n            changedAxes: [ An array with the same length as gamepadState.axes where the bolean value at a given index represents whether that axis changed in the last gamepad update loop ]\n            buttonsDidChange: True if any button value changed in the last gamepad update loop,\n            changedButtons: [ An array with the same length as gamepadState.buttons where the bolean value at a given index represents whether that button was pressed, realeased or changed value in the last gamepad update loop ]\n        }\n * }\n */\nfunction initilizeGamepadInterface(interfaceConfig) {\n\n    var lastGamepadState = { buttons: [], axes: [] }\n    var emulatedGamepadState = { buttons: [], axes: [] } // State of the gamepad as emulated by onscreen buttons\n    var gamepadChangesMask = { axesDidChange: false, changedAxes: [], buttonsDidChange: false, changedButtons: [] }\n\n    this.GAME_CONTROLLER_BUTTONS = GAME_CONTROLLER_BUTTONS;\n\n    // setup the gamepad events passed to this function so that they have the same scope as 'this' function\n    interfaceConfig.handleGamepadConnected.bind(this);\n    interfaceConfig.handleGamepadDisconnected.bind(this);\n    interfaceConfig.handleGamepadStateChange.bind(this);\n\n    window.requestAnimationFrame = window.requestAnimationFrame || window.webkitRequestAnimationFrame;\n    function gamepadStateUpdateLoop() {\n        var gpad = navigator.getGamepads()[0];\n        if (gpad == undefined) return; // exit if the gamepad has been disconnected\n\n        // find buttons that changed from the last gamepad state to the current.\n        var lastButtonState = lastGamepadState.buttons;\n        gamepadChangesMask.buttonsDidChange = false;\n        gamepadChangesMask.changedButtons = gpad.buttons.map((newButtonValue, btnIndex) => {\n            if (lastButtonState[btnIndex] == undefined || lastButtonState[btnIndex].value !== newButtonValue.value) {\n                gamepadChangesMask.buttonsDidChange = true;\n                return true;\n            } else return false;\n        });\n\n        var lastAxisState = lastGamepadState.axes;\n        gamepadChangesMask.axesDidChange = false;\n        gamepadChangesMask.changedAxes = gpad.axes.map((newAxisValue, axisIndex) => {\n            if (lastAxisState[axisIndex] == undefined || lastAxisState[axisIndex] !== newAxisValue) {\n                gamepadChangesMask.axesDidChange = true;\n                return true;\n            } else return false;\n        });\n\n        // if something changed call the handleGamepadStateChange function given to us in the interfaceConfig parameter of the initilizeGamepadInterface function above.\n        if (gamepadChangesMask.axesDidChange || gamepadChangesMask.buttonsDidChange) {\n            interfaceConfig.handleGamepadStateChange(gpad, gamepadChangesMask)\n            handleGamepadHelpHighlights(gpad.buttons, gamepadChangesMask.changedButtons)\n        }\n\n        // Debugging:\n        // console.log(\"Button state (current,didChange):\", gpad.buttons.map((b) => b.value), changedButtons.map((b) => Number(b)))\n        // console.log(\"Axies state  (current,didChange):\", gpad.axes, changedAxes)\n\n        // update the lastGamepadState so it will be ready to compare to the new gamepad state on the next loop:\n        lastGamepadState = { buttons: gpad.buttons, axes: gpad.axes }\n\n        // Request that the browser calls this function again on the next frame after a timeout:\n        // This effectively makes the gamepadStateUpdateLoop() function into a loop, but it runs\n        // between the browser frames for better performance thanks to requestAnimationFrame().\n        setTimeout(() => {\n            requestAnimationFrame(gamepadStateUpdateLoop);\n        }, 100); // wait roughly this number of miliseconds before running again.\n    }\n\n    setupGamepadHelp();\n    navigator.getGamepads = navigator.getGamepads || navigator.webkitGamepads || navigator.webkitGetGamepads;\n    if (!navigator.getGamepads) {\n        alert('This browser does not support gamepads. Please update your browser - Any modern browser should work.');\n    } else {\n        // gamepad api is supported\n        window.addEventListener('gamepadconnected', function (e) {\n            // if (navigator.getGamepads().length > 1) return; // if the user for some reason connects more than one gamepad, don't trigger again.\n            interfaceConfig.handleGamepadConnected(e)\n            requestAnimationFrame(gamepadStateUpdateLoop);\n        });\n        window.addEventListener('gamepaddisconnected', function (e) {\n            if (navigator.getGamepads().length > 0) return; // if the user somehow disconnected only one of several gamepads, don't disable gamepad mode\n            lastGamepadState = { buttons: [], axes: [] }\n            interfaceConfig.handleGamepadDisconnected(e)\n            gamepadHelpToggleButton.style.display = 'none'\n        });\n\n    }\n    setupOnscreenGamepadEvents()\n}\n\nfunction setupOnscreenGamepadEvents() {\n    for (let i = 0; i < GAME_CONTROLLER_BUTTONS.length; i++) {\n        var btnDetails = GAME_CONTROLLER_BUTTONS[i]\n        var highlightElem = document.getElementById(`${btnDetails.btnName}_highlight`)\n        console.log(i, btnDetails, highlightElem)\n        if (!highlightElem) continue;\n        highlightElem.addEventListener('pointerover', function (event) {\n            event.currentTarget.setAttribute(\"style\", \"visibility:visible;opacity:0.5;\")\n        });\n        highlightElem.addEventListener('pointerout', function (event) {\n            event.currentTarget.setAttribute(\"style\", \"visibility:hidden;\");\n        });\n        highlightElem.addEventListener('pointerdown', function (event) {\n            event.currentTarget.setAttribute(\"style\", \"visibility:visible;opacity:1;\");\n        });\n        highlightElem.addEventListener('pointerup', function (event) {\n            event.currentTarget.setAttribute(\"style\", \"visibility:visible;opacity:0.5;\");\n        });\n    }\n}\n\n// Gamepad help section\n\nvar gamepadHelpVisible = false;\nfunction setupGamepadHelp() {\n    var gamepadContainer = document.getElementById(\"gamepad-container\")\n    var gamepadHelpToggleButton = document.getElementById(\"gamepad-help-button\")\n    gamepadHelpToggleButton.onclick = () => {\n        if (gamepadHelpVisible == false) {\n            gamepadContainer.classList.add(\"help-open\")\n            gamepadHelpToggleButton.innerText = \"Close Help\"\n            gamepadHelpText.innerText = 'Press or click any button to see help'\n        } else {\n            gamepadContainer.classList.remove(\"help-open\")\n            gamepadHelpToggleButton.innerText = \"Gamepad Help\"\n        }\n        gamepadHelpVisible = !gamepadHelpVisible // toggle it\n    }\n}\n\n\n// taken roughly from https://codesandbox.io/s/u4o9w?file=/src/recorder.js\nvar gamepadHelpText = document.getElementById(\"gamepad-help-text\")\nvar pressedBtnCount = 0;\n// var highlights = [].slice.call(document.querySelectorAll('svg [id$=\"_highlight\"]'));\nfunction handleGamepadHelpHighlights(buttonStates, changedButtons) {\n    for (let btnNum = 0; btnNum < buttonStates.length; btnNum++) {\n        if (changedButtons[btnNum] == true) {\n            var btnDetails = GAME_CONTROLLER_BUTTONS[btnNum]\n            var highlightElem = document.getElementById(`${btnDetails.btnName}_highlight`)\n            // console.log(btnNum, btnDetails, highlightElem)\n            if (buttonStates[btnNum].value > 0.1) {\n                if (highlightElem) highlightElem.setAttribute(\"style\", \"visibility:visible\");\n                gamepadHelpText.innerText = btnDetails.btnFunction\n                pressedBtnCount++;\n            } else {\n                if (highlightElem) highlightElem.setAttribute(\"style\", \"visibility:hidden\")\n                pressedBtnCount--;\n            }\n        }\n    }\n    // if no single button is pressed, show the defualt help text\n    if (pressedBtnCount != 1) {\n        gamepadHelpText.innerText = DEFAULT_GAMEPAD_HELP_MSG\n    }\n}\n\n\n        // gamepadState.LEFT_STICK_X, gamepadState.LEFT_STICK_Y\n        // let axisDebug1 = document.getElementById(\"axis-debug-1\")\n        // axisDebug1.style.left = gamepadState.LEFT_STICK_X * 50 + 50\n        // axisDebug1.style.bottom = gamepadState.LEFT_STICK_y * 50 + 50\n        // let axisDebug2 = document.getElementById(\"axis-debug-2\")\n        // axisDebug1.style.left = gamepadState.RIGHT_STICK_X * 50 + 50\n        // axisDebug1.style.bottom = gamepadState.RIGHT_STICK_y * 50 + 50"],"names":["DEFAULT_GAMEPAD_HELP_MSG","GAME_CONTROLLER_BUTTONS","btnName","btnFunction","initilizeGamepadInterface","interfaceConfig","lastGamepadState","buttons","axes","gamepadChangesMask","axesDidChange","changedAxes","buttonsDidChange","changedButtons","gamepadStateUpdateLoop","gpad","navigator","getGamepads","undefined","lastButtonState","map","newButtonValue","btnIndex","value","lastAxisState","newAxisValue","axisIndex","handleGamepadStateChange","handleGamepadHelpHighlights","setTimeout","requestAnimationFrame","this","handleGamepadConnected","bind","handleGamepadDisconnected","window","webkitRequestAnimationFrame","setupGamepadHelp","webkitGamepads","webkitGetGamepads","addEventListener","e","length","gamepadHelpToggleButton","style","display","alert","setupOnscreenGamepadEvents","i","btnDetails","highlightElem","document","getElementById","concat","console","log","event","currentTarget","setAttribute","gamepadHelpVisible","gamepadContainer","onclick","classList","add","innerText","gamepadHelpText","remove","pressedBtnCount","buttonStates","btnNum"],"version":3,"file":"gamepad-debug.2ea8d7e0.js.map"}