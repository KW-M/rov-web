## We are using nginx as our public internet facing server program that
#    A: Efficiently serves static website files for the cockpit website
#    B: forwards aka:"proxies" network requests to different programs, depending on the urls requested
#    C: Is really reliable, and probaby won't fail even if our rov code does, letting us debug stuff.
#
# Below is the nginx config file for the server and alot of boilerplate configs.
# You should look at the following URL's in order to grasp a solid understanding
# of Nginx configuration files in order to fully unleash the power of Nginx.
# https://www.nginx.com/resources/wiki/start/
# https://www.nginx.com/resources/wiki/start/topics/tutorials/config_pitfalls/
# https://wiki.debian.org/Nginx/DirectoryStructure
#
# Please see /usr/share/doc/nginx-doc/examples/ for more detailed examples.
##

user pi;
worker_processes auto;
pid /run/nginx.pid;
include /etc/nginx/modules-enabled/*.conf;

##
# Logging
##

# from: https://chabik.com/2019/02/nginx-logging-to-syslog/
error_log  syslog:server=unix:/dev/log,tag=nginx,nohostname,severity=error;

events {
    worker_connections 768;
	# multi_accept on;
}

http {

	##
	# Basic Settings
	##

	sendfile on;
	tcp_nopush on;
	tcp_nodelay on;
	keepalive_timeout 65;
	types_hash_max_size 2048;
	server_names_hash_bucket_size 64;
	server_name_in_redirect off;

	include /etc/nginx/mime.types;
	default_type application/octet-stream;
    index index.html


	##
	# Logging Settings
	##

	# from: https://chabik.com/2019/02/nginx-logging-to-syslog/
	access_log syslog:server=unix:/dev/log,tag=nginx,nohostname,severity=info combined;

	##
	# Gzip Settings
	##

	gzip on;
	gzip_vary on;
	gzip_proxied any;
	gzip_comp_level 6;
	gzip_buffers 16 8k;
	gzip_http_version 1.1;
	gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;

	##
	# Virtual Host Configs
	##

	# include /etc/nginx/conf.d/*.conf;
	# include /etc/nginx/sites-enabled/*;

    # helper to make the websocket proxy work: from: https://www.nginx.com/blog/websocket-nginx/
    map $http_upgrade $connection_upgrade {
        default upgrade;
        '' close;
    }

	# setup for: https://learn.netdata.cloud/docs/agent/running-behind-nginx
	upstream netdata {
		server 127.0.0.1:19999;
		keepalive 64;
	}

    # from https://stackoverflow.com/a/54679176
    server {
		server_name _;
        listen 80 default_server;
		# uncomment the line if you want nginx to listen on IPv6 address
        listen [::]:80 default_server;

		##
		# SSL Settings
		##

		# # --- Configs to allow connetions from HTTPS:// links (Secure Connection) ---
		# # the self-signed certificates must be generated first before this will work.

		# # from this tutorial: https://www.digitalocean.com/community/tutorials/how-to-create-a-self-signed-ssl-certificate-for-nginx-in-ubuntu-16-04
		# listen 443 ssl http2 default_server;
		# listen [::]:443 ssl http2 default_server;

		# ssl_certificate /home/pi/webserver_ssl_cert/selfsigned.cert;
		# ssl_certificate_key /home/pi/webserver_ssl_cert/selfsigned.key;

		# # from https://cipherli.st/
		# # and https://raymii.org/s/tutorials/Strong_SSL_Security_On_nginx.html
		# ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
		# ssl_prefer_server_ciphers on;
		# ssl_ciphers "EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH";
		# ssl_ecdh_curve secp384r1;
		# ssl_session_cache shared:SSL:10m;
		# ssl_session_tickets off;
		# # ssl_stapling on; # not relevant for self-signed certificates
		# # ssl_stapling_verify on; # not relevant for self-signed certificates
		# resolver 8.8.8.8 8.8.4.4 valid=300s;
		# resolver_timeout 5s;
		# # Disable preloading HSTS for now.  You can use the commented out header line that includes
		# # the "preload" directive if you understand the implications.

		# # Kyle:disabling strict ssl because it causes a lot of warnings , and is ignored by browsers with a self signed cert anyway
		# # add_header Strict-Transport-Security "max-age=63072000; includeSubdomains; preload";
		# # add_header X-Frame-Options DENY;
		# # add_header X-Content-Type-Options nosniff;

		##
		# Serve Static Cockpit Website Files
		##

		error_page    404    /404.html;
		location / {
			root /home/pi/rov-web/dist;
			# root /var/www/html;
			index index.html;

			# First attempt to serve request as file, then
			# as directory, then fall back to displaying a 404.
			try_files $uri $uri/ =404;
			# show a simple "index" webpage with filenames if the end user's browser requests a directory rather than a file: https://stackoverflow.com/questions/10663248/how-to-configure-nginx-to-enable-kinda-file-browser-mode
			autoindex on;
      	}


		#
		# Wide-open CORS config for nginx
		#
		location = /ipResponder {
			default_type text/html;
			alias /home/pi/rov-web/website_static_files/ipResponder.html;
			add_header 'Access-Control-Allow-Origin' '*' always;
			add_header 'Access-Control-Allow-Private-Network' 'true' always;
			add_header 'Access-Control-Allow-Methods' 'GET, OPTIONS' always;
			add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range' always;
			add_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range' always;
			if ($request_method = 'OPTIONS') {
				#
				# Tell client that this pre-flight info is valid for 20 days
				#
				add_header 'Access-Control-Max-Age' 1728000;
				add_header 'Content-Type' 'text/plain; charset=utf-8';
				add_header 'Content-Length' 0;
				return 204;
			}
		}

		##
		# Serve System Log Folder /var/log as static files
		##

		location /log/ {
			alias  /var/log/;
			autoindex on;
			sendfile on;
			sendfile_max_chunk 1m;
			try_files $uri $uri/ =404;
			types {
                text/plain log;
        	}
        }

		##
		# Pass urls that start with uwsgi to the python uwsgi server
		##

		location /uwsgi/ {
			include uwsgi_params;
			uwsgi_buffering off;
			proxy_read_timeout 300;
   			proxy_connect_timeout 300;
   			proxy_send_timeout 300;
			proxy_buffering off;
			client_max_body_size 0;
			proxy_http_version 1.1;
			chunked_transfer_encoding on;
			uwsgi_pass 127.0.0.1:3031;
		}

    }

	# expose chromium dev tools port
	server {
        listen       9222;
        server_name  _;
        location / {
            proxy_pass         http://127.0.0.1:9222/;
            proxy_redirect     off;

            proxy_set_header   Host             $host;
            proxy_set_header   X-Real-IP        $remote_addr;
            proxy_set_header   X-Forwarded-For  $proxy_add_x_forwarded_for;

            client_max_body_size       10m;
            client_body_buffer_size    128k;

            proxy_connect_timeout      90;
            proxy_send_timeout         90;
            proxy_read_timeout         90;

            proxy_buffer_size          4k;
            proxy_buffers              4 32k;
            proxy_busy_buffers_size    64k;
            proxy_temp_file_write_size 64k;
        }
}
}
