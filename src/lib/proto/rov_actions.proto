syntax = "proto3";
package rov_action_api;

enum SensorMeasurmentTypes {
    depth_meters = 0;
    water_temp_celsius = 1;
    pressure_mbar = 2;
    yaw_degrees = 3;
    pitch_degrees = 4;
    roll_degrees = 5;
    x_acceleration_m_s2 = 6; // Not implemented
    y_acceleration_m_s2 = 7; // Not implemented
    z_acceleration_m_s2 = 8; // Not implemented
    battery_voltage = 9; // Not implemented
    battery_current_amps = 10; // Not implemented
    internal_temp_celsius = 11; // from the compass/imu
}

// enum RovActionTypes {
//     ping = 0;
//     password_attempt = 1;
//     authtoken_attempt = 2;
//     take_control = 3;
//     move = 4;
//     begin_video_stream = 5;
//     take_photo = 6;
//     start_video_rec = 7;
//     stop_video_rec = 8;
//     toogle_lights = 9;
//     shutdown_rov = 10;
//     reboot_rov = 11;
//     enable_wifi = 12;
//     disable_wifi = 13;
//     rov_status_report = 14;
//     restart_rov_services = 15;
//     rov_logs = 16;
// }

message PingAction {
    // The time the ping was sent
    int64 Time = 1;
}

message PasswordAttemptAction {
    // The password to attempt
    string Password = 1;
}

message AuthTokenAttemptAction {
    // The token to attempt
    string Token = 1;
}

message TakeControlAction {
    // No data needed
}

message MoveAction {
    // How to move the rov (X is left/right, Y is forward/backward, Z is up/down, Yaw is rotation))
    float VelocityX = 1;
    float VelocityY = 2;
    float VelocityZ = 3;
    float AngularVelocityYaw = 4;
}

message BeginVideoStreamAction {
    // No data needed
}

message TakePhotoAction {
    // No data needed
}

message StartVideoRecAction {
    // No data needed
}

message StopVideoRecAction {
    // No data needed
}

message ToogleLightsAction {
    // No data needed
}

message ShutdownRovAction {
    // No data needed
}

message RebootRovAction {
    // No data needed
}

message EnableWifiAction {
    // No data needed
}

message DisableWifiAction {
    // No data needed
}

message RovStatusReportAction {
    // No data needed
}

message RestartRovServicesAction {
    // No data needed
}

message RovLogsAction {
    // No data needed
}

message RefreshAllSensorsAction {
    // No data needed
}

message RovAction {
    // The type of action to perform see (RovActionTypes).
    // RovActionTypes Type = 1;

    // Action exchange id (used to match up action requests and responses)
    int32 RovExchangeId = 2;
    // The body / content of the action
    oneof Body {
        // ping
        PingAction Ping = 3;
        // password_attempt
        PasswordAttemptAction PasswordAttempt = 4;
        // authtoken_attempt
        AuthTokenAttemptAction AuthTokenAttempt = 5;
        // take_control
        TakeControlAction TakeControl = 6;
        // move
        MoveAction Move = 7;
        // begin_video_stream
        BeginVideoStreamAction BeginVideoStream = 8;
        // take_photo
        TakePhotoAction TakePhoto = 9;
        // start_video_rec
        StartVideoRecAction StartVideoRec = 10;
        // stop_video_rec
        StopVideoRecAction StopVideoRec = 11;
        // toogle_lights
        ToogleLightsAction ToogleLights = 12;
        // shutdown_rov
        ShutdownRovAction ShutdownRov = 13;
        // reboot_rov
        RebootRovAction RebootRov = 14;
        // enable_wifi
        EnableWifiAction EnableWifi = 15;
        // disable_wifi
        DisableWifiAction DisableWifi = 16;
        // rov_status_report
        RovStatusReportAction RovStatusReport = 17;
        // restart_rov_services
        RestartRovServicesAction RestartRovServices = 18;
        // rov_logs
        RovLogsAction RovLogs = 19;
        // refresh_all_sensors
        RefreshAllSensorsAction RefreshAllSensors = 20;
    }
}


// enum RovResponseTypes {

//     done = 0;
//     error = 1;
//     pong = 2;
//     sensor_updates = 3;
//     password_required = 4;
//     password_accepted = 5;
//     password_invalid = 6;
//     token_accepted = 7;
//     token_invalid = 8; // Not implemented
//     driver_changed = 9;
//     client_connected = 10; // Not implemented
//     client_disconnected = 11; // Not implemented
// }

message DoneResponse {
    // An optional status message to send back
    optional string Message = 1;
}

message ErrorResponse {
    // The error message
    string Message = 1;
}

message ContinuedOutputResponse {
    string Message = 1;
}

message PongResponse {
    // The time the ping was sent
    int64 Time = 1;
}

message Measurement {
    // The sensor type (see RovSensorTypes)
    SensorMeasurmentTypes MeasurementType = 1;
    // The sensor value
    float Value = 2;
}

message SensorUpdatesResponse {
    // All the changed mesurements from the sensors: (see Measurement type)
    repeated Measurement MeasurementUpdates = 1;
}

message PasswordRequiredResponse {
    // the id of the rov that is requesting a password (to be used to match tokens to rov's when using token based auth)
    string RovId = 1;
}

message PasswordAcceptedResponse {
    // Authtoken to use for future requests in place of the password
    string AuthToken = 1;
}

message PasswordInvalidResponse {
    // No data needed
}

message TokenAcceptedResponse {
    // No data needed
}

message TokenInvalidResponse {
    // No data needed
}

message DriverChangedResponse {
    // The new driver's peer id
    string DriverPeerId = 1;
}

message ClientConnectedResponse {
    // The new client's peer id
    string ClientPeerId = 1;
}

message ClientDisconnectedResponse {
    // The disconnected client's peer id
    string ClientPeerId = 1;
}

message HeartbeatResponse {
    // The time the heartbeat was sent
    int64 Time = 1;
}

message RovResponse {
	// // The type of response message recived see (RovResponseTypes).
    // RovResponseTypes Type = 1;

    // Response exchange id (used to match up action requests and responses)
    int32 RovExchangeId = 2;
    // The body / content of the response
	oneof Body {
        // done (action was completed successfully)
        DoneResponse Done = 3;
        // error (action failed)
        ErrorResponse Error = 4;
        // pong (response to a ping action)
        PongResponse Pong = 5;
        // continued_output (for message responses that arrive in multiple parts such as logs or shell command output)
        ContinuedOutputResponse ContinuedOutput = 6;
        // sensor_updates (gives a list of sensor updates containing only new/changed sensors and their current values)
        SensorUpdatesResponse SensorUpdates = 7;
        // password_required (sent when a password is required to perform an action)
        PasswordRequiredResponse PasswordRequired = 8;
        // password_accepted (sent when a password request action is accepted)
        PasswordAcceptedResponse PasswordAccepted = 9;
        // password_invalid (sent when a password request action has the incorrect password)
        PasswordInvalidResponse PasswordInvalid = 10;
        // token_accepted (sent when a token request action is accepted (replaces password for future requests))
        TokenAcceptedResponse TokenAccepted = 11;
        // token_invalid
        TokenInvalidResponse TokenInvalid = 12;
        // driver_changed
        DriverChangedResponse DriverChanged = 13;
        // client_connected
        ClientConnectedResponse ClientConnected = 14;
        // client_disconnected
        ClientDisconnectedResponse ClientDisconnected = 15;
        // heartbeat
        HeartbeatResponse Heartbeat = 16;
    }
}
