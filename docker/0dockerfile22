# FROM python:slim-bullseye
# FROM python:3.9-slim-bullseye
FROM debian:bullseye-slim

# Configure the debconf frontend.
#
# This image doesn't include whiptail, dialog, nor the readline perl module.
# Therefore, the debconf frontend will be set to 'teletype' to avoid error
# messages about no dialog frontend could be found.
RUN echo 'debconf debconf/frontend select teletype' | debconf-set-selections


# Install the necessary packages.
#
# In addition to the regular Debian base image, a BASIC set of packages from the
# Debian minimal configuration will be installed. After all packages have been
# installed, the apt caches and some log files will be removed to minimize the
# image.
#
# NOTE: An upgrade will be performed to include updates and security fixes of
#       installed packages that received updates in the Debian repository after
#       the upstream image has been created.
#
# NOTE: No syslog daemon will be installed, as systemd's journald should fit
#       most needs. Please file an issue if you think this should be changed.
RUN apt-get update
RUN apt-get dist-upgrade -y
RUN apt-get install -y --no-install-recommends \
    systemd      \
    systemd-sysv \
    cron         \
    anacron

RUN apt-get clean
RUN rm -rf                        \
    /var/lib/apt/lists/*          \
    /var/log/alternatives.log     \
    /var/log/apt/history.log      \
    /var/log/apt/term.log         \
    /var/log/dpkg.log

# Configure systemd.
#
# For running systemd inside a Docker container, some additional tweaks are
# required. For a detailed list see:
#
# https://developers.redhat.com/blog/2016/09/13/ \
#   running-systemd-in-a-non-privileged-container/
#
# Additional tweaks will be applied in the final image below.

# To avoid ugly warnings when running this image on a host running systemd, the
# following units will be masked.
#
# NOTE: This will not remove ALL warnings in all Debian releases, but seems to
#       work for stretch.
RUN systemctl mask --   \
    dev-hugepages.mount \
    sys-fs-fuse-connections.mount

# The machine-id should be generated when creating the container. This will be
# done automatically if the file is not present, so let's delete it.
RUN rm -f           \
    /etc/machine-id \
    /var/lib/dbus/machine-id

ENV container docker

# RUN echo "before ==========================="
# RUN ls /lib/systemd/system/*wants/ | true
# RUN ls /etc/systemd/system/*wants/

# RUN rm /lib/systemd/system/*wants/
# RUN rm /etc/systemd/system/*wants/

# RUN echo "after ==========================="
# RUN ls /lib/systemd/system/*wants/
# RUN ls /etc/systemd/system/*wants/

COPY ./ ~/rov-web

# RUN ~/rov-web/tooling/rasberry_pi_setup_scripts/START_HERE.sh

EXPOSE 80/tcp

LABEL version="1.0.1"
# TODO: Add a Volume for persistence across boots
LABEL permissions='\
    {\
    "ExposedPorts": {\
    "80/tcp": {}\
    },\
    "HostConfig": {\
    "Privileged": true,\
    "Binds":["/root/.config:/root/.config"],\
    "PortBindings": {\
    "80/tcp": [\
    {\
    "HostPort": ""\
    }\
    ]\
    }\
    }\
    }'
LABEL authors='[\
    {\
    "name": "Willian Galvani",\
    "email": "willian@bluerobotics.com"\
    }\
    ]'
LABEL company='{\
    "about": "",\
    "name": "Blue Robotics",\
    "email": "support@bluerobotics.com"\
    }'
LABEL type="example"
LABEL tags='[\
    "interaction"\
    ]'
LABEL readme='https://raw.githubusercontent.com/Williangalvani/BlueOS-examples/{tag}/example5-gpio-control/Readme.md'
LABEL links='{\
    "website": "https://github.com/Williangalvani/BlueOS-examples/",\
    "support": "https://github.com/Williangalvani/BlueOS-examples/"\
    }'
LABEL requirements="core >= 1.1"

ENTRYPOINT bash
# /sbin/init
# docker run -d -v /sys/fs/cgroup/:/sys/fs/cgroup:ro --cap-add SYS_ADMIN -p 8089:80 -v /webpages/:/var/www/html --name systemd_websrv centos /sbin/init
